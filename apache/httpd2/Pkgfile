# $Id: Pkgfile 514 2008-09-06 04:39:51Z enki $
#
# Description: apache
# URL: http://www.apache.org
# Maintainer: Roman Senn <rs@adfinis.com>
# Depends on:

name=httpd
version=2.2.8
release=1
source=(http://mirror.switch.ch/mirror/apache/dist/httpd/httpd-$version.tar.bz2
        httpd-mkcrt.sh
        httpd-2.2.2-nosetsid.patch
        httpd-2.2.4-itk-mpm.patch
        httpd-2.2.3-nexbyte.patch
        httpd-2.2.4-ap-config.patch
        httpd-2.2.4-setpgid.patch
        httpd-2.2.4-accept-filter.patch
        httpd-2.2.4-conf.patch)

# apache needs a wwwroot variable
wwwroot=$prefix/local/www

# package build script
# --------------------------------------------------------------------------------
build()
{
  cd httpd-$version

  patch -N -p1 -i $SRC/httpd-2.2.2-nosetsid.patch
  patch -N -p1 -i $SRC/httpd-2.2.3-nexbyte.patch
  patch -N -p1 -i $SRC/httpd-2.2.4-itk-mpm.patch
#  patch -N -p1 -i $SRC/httpd-2.2.4-ap-config.patch
  patch -N -p1 -i $SRC/httpd-2.2.4-setpgid.patch
  patch -N -p1 -i $SRC/httpd-2.2.4-accept-filter.patch
  patch -N -p1 -i $SRC/httpd-2.2.4-conf.patch

  # NOTE:
  #
  # The --with-mpm argument chooses the Multi-Processing-Model:
  #
  #   The worker MPM uses multiple child processes with many threads each.
  #   Each thread handles one connection at a time. Worker generally is a good
  #   choice for high-traffic servers because it has a smaller memory footprint
  #   than the prefork MPM.
  #
  #   The prefork MPM uses multiple child processes with one thread each.
  #   Each process handles one connection at a time. On many systems, prefork
  #   is comparable in speed to worker, but it uses more memory. Prefork's
  #   threadless design has advantages over worker in some situations: it can
  #   be used with non-thread-safe third-party modules, and it is easier to debug
  #   on platforms with poor thread debugging support.
  #
  #   For more information on these and other MPMs, please see the MPM documentation.
  #
  case $host in
    *freebsd*) mpm="itk" ;;
    *) mpm="prefork" ;;
  esac

  case $prefix in
    /usr) sysconfdir="/etc" ;;
    *) sysconfdir="$prefix/etc" ;;
  esac

#  LIBS="-L$prefix/lib/w32api" \
#  LDFLAGS="-L$prefix/lib/w32api" \

  CPPFLAGS="-DNO_DETACH -DFOREGROUND -DBIG_SECURITY_HOLE" \
  ./configure \
      --build="$build" \
      --host="$host" \
      --prefix="$prefix" \
      --libexecdir="$prefix/lib/$name" \
      --sysconfdir="$sysconfdir" \
      --includedir="$prefix/include/$name" \
      --datadir="$prefix/share/$name" \
      --mandir="$prefix/share/man" \
      --enable-v4-mapped \
      --enable-exception-hook \
      --enable-modules="all" \
      --enable-mods-shared="most" \
      --enable-authn-dbm \
      --enable-authn-anon \
      --disable-authn-dbd \
      --enable-authn-alias \
      --enable-authz-dbm \
      --enable-authz-owner \
      --enable-auth-digest \
      --enable-auth-digest \
      --enable-isapi \
      --enable-file-cache \
      --enable-cache \
      --enable-disk-cache \
      --enable-mem-cache \
      --disable-dbd \
      --enable-bucketeer \
      --enable-dumpio \
      --enable-echo \
      --enable-ext-filter \
      --enable-charset-lite \
      --enable-deflate \
      --enable-log-forensic \
      --enable-logio \
      --enable-mime-magic \
      --enable-cern-meta \
      --enable-expires \
      --enable-headers \
      --enable-ident \
      --enable-usertrack \
      --enable-unique-id \
      --enable-version \
      --enable-proxy \
      --enable-proxy-connect \
      --enable-proxy-ftp \
      --enable-proxy-http \
      --enable-proxy-ajp \
      --enable-proxy-balancer \
      --enable-ssl \
      --enable-http \
      --enable-dav \
      --enable-info \
      --enable-cgi \
      --enable-cgid \
      --enable-dav-fs \
      --enable-dav-lock \
      --enable-vhost-alias \
      --enable-imagemap \
      --enable-speling \
      --enable-rewrite \
      --enable-so \
      --with-apr-config="$prefix/bin/apr-1-config" \
      --with-pcre="$prefix" \
      --with-z="$prefix" \
      --with-ssl="$prefix" \
      --with-mpm="$mpm" \
      --with-program-name="$name"

  make LTFLAGS=""
  make DESTDIR="$PKG" install

  # install local configuration
  mkdir -p $PKG/$sysconfdir/$name
  mv -vf $PKG/$sysconfdir/extra/*.conf $pkg/$sysconfdir/$name

 (cd $PKG/$sysconfdir/$name && for x in httpd-*.conf
  do
    mv $x ${x#httpd-}
  done)

#  rename 'httpd-' '' $PKG/$sysconfdir/$name/*.conf
  rm -rf $PKG/$sysconfdir/{extra,original}

  sed -i "/^#Include/ {
    s:^#::
    s:/$name-:/:
    s:/extra/:/$name/:
  }" $PKG/$sysconfdir/$name.conf

  cd $ROOT

#  for module in lib/httpd/*.so
#  do
#    name=${module%.so}
#    httpd_module_add "$module" "${name#mod_}_module}" etc/$name/modules.conf
#  done

  # install documentation
  install -d $ROOT/share/doc
  mv $ROOT/share/$name/manual $ROOT/share/doc/$name-$version

  # certificate script
  sed -i "s,@prefix@,$prefix,g" $SRC/httpd-mkcrt.sh
  install -m 755 $SRC/httpd-mkcrt.sh $ROOT/bin/httpd-mkcrt

  chown -R 0.0 $pkg
}

# package postmerge script
# --------------------------------------------------------------------------------
postmerge()
{
  # local configuration directory
  pkgsysconfdir="$sysconfdir/$name"

  # substitute some essential values in the config files
  ${bindir}/sed -i -e \
    "s,@prefix@,$prefix,g
     s,@wwwroot@,$wwwroot,g
     s,@global_domain@,$global_domain,g
     s,@global_hostname@,$global_hostname,g
     s,@httpd_user@,$httpd_user,g
     s,@httpd_group@,$httpd_group,g
     s,@httpd_host@,$httpd_host,g
     s,@httpd_port@,$httpd_port,g
     s,@httpd_sslhost@,$httpd_sslhost,g
     s,@httpd_sslport@,$httpd_sslport,g" \
    ${sysconfdir}/httpd.conf \
    ${pkgsysconfdir}/*

  # generate self-signed certificate
  ${sbindir}/httpd-mkcrt $sysconfdir/httpd ${httpd_sslhost}

  # enable the service if wanted
  if isin "$services_run" "httpd"; then
    service_add "httpd"
  else
    service_remove "httpd"
  fi

  # check for php
  if test -f $libdir/httpd/libphp4.so
  then
    msg "Found php4, configuring it..."

#    httpd_module_add $libdir/httpd/libphp4.so php4_module $confdir/dso2.conf

    if ! grep -q 'application/x-httpd-php[ \t]\+php' $sysconfdir/mime.types
    then
      text_append 'application/x-httpd-php  php' $sysconfdir/mime.types

      msg "Added \`application/x-httpd-php' to $sysconfdir/mime.types"
    fi

    if ! grep -q 'DirectoryIndex.*index\.php' $sysconfdir/httpd.conf
    then
      text_replace 'DirectoryIndex index.php ' 'DirectoryIndex[ \t]' $sysconfdir/httpd.conf

      msg "Added \`index.php' to DirectoryIndex directive in $sysconfdir/httpd.conf"
    fi
  fi
}

# package configuration
# --------------------------------------------------------------------------------
config()
{
  # add the main-menu entry "httpd"
  config_branch 'httpd'  'Apache 2.2 server configuration'

    # lets choose a user
    config_value 'user'  'Apache server user'

      config_description 'Username the apache server will run under'
      config_default     '$(user_find nobody apache http daemon)'
      config_function    'choose --help-{button,label} Create $(user_list)'
      config_extra       'input'

    config_end

    # choose a group
    config_value 'group' 'Apache server group'

      config_description 'Group the apache server will run under'
      config_default     '$(user_group $(config_getvalue httpd_user) || group_find nogroup apache http daemon)'
      config_function    'choose --help-{button,label} Create $(group_list)'
      config_extra       'input'

    config_end

    # choose a host
    config_value 'host'  'Apache server host'

      config_description 'Address the apache server will listen to'
      config_default     '$(config_getvalue global_ipaddr)'

    config_end

    # apache port
    config_value 'port'  'Apache server port'

      config_description 'Port the apache server will listen to'
      config_default     '80'

    config_end

    # choose a host
    config_value 'sslhost' 'Apache server secure host'

      config_description 'Address the apache server will listen to (SSL)'
      config_default     '$(config_getvalue global_ipaddr)'

    config_end

    # apache port
    config_value 'sslport' 'Apache server secure port'

      config_description 'Port the apache server will listen to (SSL)'
      config_default     '443'

    config_end

  config_end

  # enhance daemontools package configuration
  config_enter 'services' 'run' 'httpd'

    config_label   'Run httpd at boot'
    config_default 'yes'
    config_type    'value'

  config_leave
}

# --------------------------------------------------------------------------------
services()
{
  config_branch "httpd"

    config_branch "log"
    config_end

    config_set 'TITLE'   'Apache2 Server'
    config_set 'PIDFILE' '$prefix/var/run/httpd.pid'
    config_set 'START'   'resuming normal operations'
    config_set 'STOP'    'caught SIGTERM, shutting down'

  config_leave
}

# script to start httpd from supervise
# --------------------------------------------------------------------------------
httpd()
{
  exec 2>&1

  # set default values
  host=${httpd_host:-0.0.0.0}
  port=${httpd_port:-80}
  user=${httpd_user:-nobody}

  # is there an SNMPD?
  if service_exists 'snmpd' && service_enabled 'snmpd'
  then
    echo "Checking for snmpd..."

    service_runs 'snmpd' && echo "Ok, snmpd runs." ||
    {
      echo "Starting SNMPD..."
      service_up 'snmpd'
      sleep 0.25
    }
  fi

  # check if the user is available to setuidgid
  if ! user_avail "$user"
  then
    service_error "no such user:" "$user"
  fi

  # check if there's already an instance of httpd
  if test -f "$httpd_PIDFILE"
  then
    pid=$(cat "$httpd_PIDFILE")

    if test $((pid)) -gt 0 && test -d $prefix/proc/$((pid))
    then
      service_msg "httpd already running, restarting..."
      kill $((pid))
      sleep 2
      exit 1
    fi
  fi

  # check whether host:port is bindable
  if proc=$(inet_bound tcp $host:$port)
  then
    service_error $host:$port "already bound"
  fi

  export NO_DETACH=1

  # finally execute httpd
  exec -a httpd $bindir/httpd -D FOREGROUND
  service_down httpd
}
