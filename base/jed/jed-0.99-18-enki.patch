diff -ruN jed-0.99-18_orig/lib/abbrevs.sl jed-0.99-18/lib/abbrevs.sl
--- jed-0.99-18_orig/lib/abbrevs.sl	1970-01-01 01:00:00.000000000 +0100
+++ jed-0.99-18/lib/abbrevs.sl	2008-07-30 01:20:50.000000000 +0200
@@ -0,0 +1,10 @@
+define_abbrev_for_table("C", "void");
+define_abbrev_for_table("C", "unsigned");
+define_abbrev_for_table("C", "char");
+define_abbrev_for_table("C", "short");
+define_abbrev_for_table("C", "int");
+define_abbrev_for_table("C", "long");
+define_abbrev_for_table("C", "static");
+define_abbrev_for_table("C", "struct");
+define_abbrev_for_table("C", "inline");
+
--- jed-0.99-18_orig/lib/blah	1970-01-01 01:00:00.000000000 +0100
+++ jed-0.99-18/lib/blah	2008-07-30 01:20:50.000000000 +0200
@@ -0,0 +1 @@
+#!/bin/sh
--- jed-0.99-18_orig/lib/bytecomp.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/bytecomp.sl	2008-07-30 01:20:50.000000000 +0200
@@ -44,8 +44,7 @@
 "compress.sl";
 # endif
 # ifdef IBMPC_SYSTEM
-"dos437.sl"; "dos850.sl";  "dos852.sl"; "brief.sl";
-"win1250.sl";
+"dos437.sl"; "dos850.sl";  "brief.sl";
 # endif
 # ifdef XWINDOWS MOUSE
 "mouse.sl";
@@ -55,16 +54,11 @@
 "folding.sl";
 # endif
 
-#ifdef VMS
-"vmshelp.sl";
-#endif
 if (is_defined ("KILL_ARRAY_SIZE")) 
 {
    "yankpop.sl";
    "register.sl";
 }
-"sccs.sl";
-"rcs.sl";
 "minued.sl";
 "history.sl";
 "chglog.sl";
--- jed-0.99-18_orig/lib/cal.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/cal.sl	2008-07-30 01:20:50.000000000 +0200
@@ -170,7 +170,7 @@
      } 
    year = extract_element(t, 4 + n, ' ');
    
-   return integer(year), month, integer(strtrim_beg(day, "0"));
+   return integer(year), month, integer(day);
 }
 
 % convert month number or localized name string into integer
--- jed-0.99-18_orig/lib/cmisc.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/cmisc.sl	2008-07-30 01:20:50.000000000 +0200
@@ -218,13 +218,9 @@
 
 define c_end_of_function ()
 {
-   eol ();
-   !if (bol_fsearch_char ('}'))
-     error ("End of function not found");
-% was:   
-   % !if (bolp () and looking_at_char ('{'))
-   %   c_top_of_function ();
-   % call ("goto_match");
+   !if (bolp () and looking_at_char ('{'))
+     c_top_of_function ();
+   call ("goto_match");
 }
 
 define c_mark_function ()
--- jed-0.99-18_orig/lib/cmode.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/cmode.sl	2008-07-30 01:20:50.000000000 +0200
@@ -208,11 +208,11 @@
 define c_bskip_over_comment (skip_pp)
 {
    variable num_up;
-   if (cmode_is_slang_mode ()) return slmode_bskip_comment (skip_pp);
+   if (cmode_is_slang_mode ()) return slmode_bskip_comment ();
 
    forever
      {
-	bskip_all_whitespace ();
+        bskip_chars (" \t\n");
 	if (bobp ())
 	  return;
 
@@ -425,10 +425,19 @@
 	if (bolp () and
 	    (0 == parse_to_point ()))
 	  {
-	     if (0 == c_fsearch ("{"))
-	       return 0;
-
-	     return bra == create_user_mark ();
+             while (fsearch ("{"))
+               {
+                  if (0 != parse_to_point ())
+                    {
+                       go_right_1 ();
+                       continue;
+                    }
+
+                  if (bra == create_user_mark ())
+                    return 1;
+                  break;
+               }
+             return 0;
 	  }
 
 	!if (left(1))
@@ -512,8 +521,8 @@
      {
 	if (ffind_char (':'))
 	  {
-	     extra_indent -= C_INDENT;
-	     extra_indent += C_Colon_Offset;
+          %             extra_indent -= C_INDENT;
+          %             extra_indent += C_Colon_Offset;
 	  }
 	bol ();
      }
@@ -638,7 +647,7 @@
 	  {
 	     push_spot ();
 	     goto_user_mark (match_mark);
-	     bskip_all_whitespace ();
+      bskip_chars ("\n\t ");
 	     if (blooking_at (")"))
 	       {
 		  variable same_line = (what_line == match_line);
@@ -716,7 +725,7 @@
 	!if ((looking_at(notCcomment)) or not(eolp()))
 	  {
 	     goto_column(col);
-	     if (C_Autoinsert_CPP_Comments) insert(notCcomment);
+      insert(notCcomment);
 	  }
 	return;
      }
@@ -830,8 +839,12 @@
 
 define c_insert_bra ()
 {
+  variable col;
+  
    if (c_parse_to_point ())
+    {
      insert_char ('{');
+    }
    else
      {
 	push_spot ();
@@ -847,19 +860,28 @@
 	     if (eolp ())
 	       {
 		  bskip_white ();
-		  if (not (bolp ()) and C_BRA_NEWLINE, pop_spot ()) newline ();
+%                  if (not (bolp ()) and C_BRA_NEWLINE, pop_spot ()) newline ();
 		  push_spot ();
 		  bskip_white ();
 		  bolp ();	       %  on stack
 		  pop_spot ();
+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
+                  c_newline_and_indent ();
 		  insert_char ('{');
-		  if ( () ) c_indent_line ();   %  off stack
+                  c_indent_line();
 		  eol ();
-		  if (C_BRA_NEWLINE) c_newline_and_indent ();
+                  c_newline_and_indent ();
+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
+%                  insert_char (' ');
+%                  insert_char ('{');
+%                  if ( () ) c_indent_line ();   %  off stack
+%                  eol ();
+%                  if (C_BRA_NEWLINE) c_newline_and_indent ();
 	       }
 	     else
 	       {
 		  pop_spot ();
+               
 		  insert_char ('{');
 	       }
 	  }
@@ -900,7 +922,8 @@
    c_indent_line ();
    eol ();
    blink_match ();
-   if (C_BRA_NEWLINE) c_newline_and_indent ();
+%%   if (C_BRA_NEWLINE) insert (" ");
+   c_newline_and_indent();
 }
 
 define c_insert_colon ()
@@ -1157,6 +1180,7 @@
 private define c_chglog_get_item ()
 {
    variable m = create_user_mark ();
+   variable word_chars = "a-zA-Z_0-9$";
 
    EXIT_BLOCK
      {
@@ -1186,18 +1210,22 @@
 	  {
 	     go_right (6);
 	     skip_white ();
-	     return extract_identifier ();
+             push_mark ();
+             skip_chars (word_chars);
+             return bufsubstr ();
 	  }
      }
    goto_user_mark (m);
 
    % check for variable
    bol ();
-   skip_identifier ();
+   skip_chars (word_chars);
    if ((0 == bolp ()) and ffind("="))
      {
 	bskip_white ();
-	return bextract_identifier ();
+        push_mark ();
+        bskip_chars (word_chars);
+        return bufsubstr ();
      }
 
    % Now try function
@@ -1218,11 +1246,17 @@
 
    c_bskip_over_comment (1);
    !if (blooking_at ("typedef struct"))
-     return bextract_identifier ();
+     {
+        push_mark ();
+        bskip_chars (word_chars);
+        return bufsubstr ();
+     }
 
    goto_user_mark (m_end);
    skip_chars ("} \t\n");
-   return extract_identifier ();
+   push_mark ();
+   skip_chars ("a-zA-Z_0-9$");
+   return bufsubstr ();
 }
 
 % This function is called by slang_mode to share the keymap and some hooks
@@ -1231,13 +1265,7 @@
    use_keymap("C");
    set_buffer_hook ("indent_hook", "c_indent_line");
    set_buffer_hook ("newline_indent_hook", "c_newline_and_indent");
-
-   foreach (["C", "SLang"])
-     {
-	variable mode = ();
-	mode_set_mode_info (mode, "init_mode_menu", &c_init_menu);
-	mode_set_mode_info (mode, "chglog_get_item", &c_chglog_get_item);
-     }
+   mode_set_mode_info ("SLang", "chglog_get_item", &c_chglog_get_item);
 }
 
 %!%+
--- jed-0.99-18_orig/lib/colors/smolie.sl	1970-01-01 01:00:00.000000000 +0100
+++ jed-0.99-18/lib/colors/smolie.sl	2008-07-30 01:20:50.000000000 +0200
@@ -0,0 +1,27 @@
+$1 = "yellow"; $2 = "default";
+
+set_color("normal", $1, $2);
+set_color("status", "lightgray", $2);
+set_color("operator", "brightcyan", $2);      % +, -, etc..
+set_color("number", "brightcyan", $2);    % 10, 2.71, etc..
+set_color("comment", "brightgreen", $2);% /* comment */
+set_color("region", "brightcyan", "brightred");
+set_color("string", "brightcyan", $2);    % "string" or 'char'
+set_color("keyword", "brightred", $2);    % if, while, unsigned, ...
+set_color("keyword1", "brightred", $2);    % if, while, unsigned, ...
+set_color("delimiter", "brightcyan", $2);     % {}[](),.;...
+set_color("preprocess", "brightgreen", $2);
+set_color("message", "yellow", $2);
+set_color("error", "brightred", $2);
+set_color("dollar", "brighcyan", $2);
+set_color("...", "red", $2);			  % folding indicator
+
+set_color ("menu_char", "yellow", $2);
+set_color ("menu", "lightgray", $2);
+set_color ("menu_popup", "lightgray", $2);
+set_color ("menu_shadow", "blue", $2);
+set_color ("menu_selection", "green", $2);
+set_color ("menu_selection_char", "yellow", $2);
+
+set_color ("cursor", "black", $2);
+set_color ("cursorovr", "black", $2);
--- jed-0.99-18_orig/lib/compile.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/compile.sl	2008-07-30 01:20:50.000000000 +0200
@@ -142,8 +142,6 @@
 
 	@next_line_fun ();
 
-        line = strtrim_beg (line, " \t0");
-        col = strtrim_beg (col, " \t0");
 	compile_find_file (file, integer (line), integer (col));
 	cbuf = whatbuf ();
 	sw2buf (obuf);
--- jed-0.99-18_orig/lib/docbook.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/docbook.sl	2008-07-30 01:20:50.000000000 +0200
@@ -945,7 +945,7 @@
     { case "html": cmd = sprintf ("%s %s &", Sgml_View_Html_Cmd, tmp); }
   cmd = read_mini ("View with:", Null_String, cmd);
 #ifdef UNIX
-  () = system (cmd);
+  system (cmd);
 #else
   () = run_shell_cmd (cmd);
 #endif
--- jed-0.99-18_orig/lib/emacs.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/emacs.sl	2008-07-30 01:20:50.000000000 +0200
@@ -49,7 +49,6 @@
 setkey("eol_cmd",		"^E");
 setkey("next_char_cmd",		"^F");
 setkey("kbd_quit",		"^G");
-if (_Backspace_Key != "\x08")
   setkey("help_prefix",		"^H");
 setkey("newline",		"^J");
 setkey("emacs_yp_kill_line",	"^K");
--- jed-0.99-18_orig/lib/f90.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/f90.sl	2008-07-30 01:20:50.000000000 +0200
@@ -121,6 +121,16 @@
 
    ch = char(what_char());
    switch (ch)
+%     {
+%	isdigit (ch) :		% label
+%
+%	if (what_column () >= 6)
+%	  {
+%	     bol (); trim ();
+%	     insert_single_space ();
+%	  }
+%	X_USER_BLOCK1 ();
+%     }
      {
 	case F90_Continue_Char :	% continuation character
 	bol (); trim ();
@@ -152,7 +162,7 @@
 	return;
      }
 
-   free_f90_indent ();
+   f90_indent ();
    push_spot ();
    bskip_white (); trim ();
 
@@ -178,7 +188,7 @@
 	  }
      }
 
-   if (free_f90_is_comment ()) cont = 0;
+   if (f90_is_comment ()) cont = 0;
 
    bol_skip_white ();
    if (looking_at("data ")) cont = 0;
@@ -402,10 +412,6 @@
 define f90_electric_label ()
 {
    insert_char (LAST_CHAR);
-
-   if (get_format_mode ())
-     return;			       %  free-format
-
    push_spot ();
 
    if (f90_is_comment ()) pop_spot ();
@@ -535,12 +541,7 @@
 	skip_chars ("^0-9 \t\n");
 	!if (_get_point ()) break;
      }
-   
-   variable col = 7;
-   if (get_format_mode ())
-     col = 1;
-
-     () = goto_column_best_try (col);
+   () = goto_column_best_try (1);
 }
 %
 % moves cursor to the next statement, skipping comment lines
@@ -568,8 +569,9 @@
 definekey ("f90_comment",		"\e;",	$1);
 definekey ("f90_uncomment",		"\e:",	$1);
 definekey ("f90_continue_newline",	"\e\r",	$1);
-definekey ("self_insert_cmd",		"'",	$1);
-definekey ("self_insert_cmd",		"\"",	$1);
+% next two really needed?  not if using EDT or Emacs
+definekey ("self_insert_cmd",		char('\''),	$1);
+definekey ("self_insert_cmd",		char('"'),	$1);
 definekey ("f90_beg_of_subprogram",	"\e^A",	$1);
 definekey ("f90_end_of_subprogram",	"\e^E",	$1);
 definekey ("f90_mark_function",		"\e^H", $1);
@@ -577,17 +579,15 @@
 definekey_reserved ("f90_next_statement",	"^N",	$1);
 definekey_reserved ("f90_previous_statement",	"^P",	$1);
 definekey_reserved ("f90_ruler",		"^R", $1);
+%_for (0, 9, 1)
+%{
+%   $2 = ();
+%   definekey ("f90_electric_label", string($2), $1);
+%}
 
-_for (0, 9, 1)
-{
-   $2 = ();
-   definekey ("f90_electric_label", string($2), $1);
-}
 
 % Set up syntax table
-foreach (["F90_free", "F90_fixed"])
-{
-   $1 = ();
+$1 = "F90";
    create_syntax_table ($1);
    define_syntax ("!", "", '%', $1);
    define_syntax ("([", ")]", '(', $1);
@@ -739,22 +739,24 @@
 %     moves cursor to end of current subroutine/function
 %   f90_mark_subprogram           ESC ^H
 %     mark the current subroutine/function
-%#v-
+% 
 % Variables include:
-%#v+
+%#+
 %   F90_Continue_Char   --- character used as a continuation character.
 %     By default, its value is ">"
 %   F90_Comment_String  --- string used by 'f90_comment' to
 %     comment out a line.  The default string is "C ";
 %   F90_Indent_Amount   --- number of spaces to indent statements in
 %                               a block.  The default is 2.
-%   F90_Default_Format --- Either "fixed" or "free".
-%#v-
+%#-
 %!%-
-public define f90_mode ()
+define f90_mode ()
 {
-   setup_f90_mode (strlow (F90_Default_Format));
-   run_mode_hooks ("f90_mode_hook");
+   variable mode = "F90";
+   set_mode (mode, 0x4 | 0x10);
+   use_keymap (mode);
+   use_syntax_table (mode);
+   set_buffer_hook ("indent_hook", "f90_indent");
+   set_buffer_hook ("newline_indent_hook", "f90_newline");
+   run_mode_hooks ("f90_hook");
 }
-
-provide ("f90");
--- jed-0.99-18_orig/lib/ff90.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/ff90.sl	2008-07-30 01:20:50.000000000 +0200
@@ -1,2 +1,496 @@
-variable F90_Default_Format = "fixed";
-require ("f90");
+%  Fixed format F90 mode		-* SLang -*-
+%
+% Loading this file, then executing 'f90_mode' will start f90 mode
+% on the current buffer.
+
+custom_variable ("F90_Continue_Char", "&");
+custom_variable ("F90_Comment_String", "!");
+custom_variable ("F90_Indent_Amount", 2);
+
+
+% f90 indent routine
+define f90_indent ()
+{
+   variable goal = 7;		% at top of buffer it should be 7 n'est pas?
+   variable cs = CASE_SEARCH;
+   variable ch;
+
+   % goto beginning of line and skip past continuation char
+   USER_BLOCK0
+     {
+	bol ();
+	skip_chars ("0-9 \t");
+	if (looking_at(F90_Continue_Char)) go_right_1 ();
+	skip_white ();
+     }
+
+   push_spot ();
+   push_spot ();
+   CASE_SEARCH = 0;	% F90 is not case sensitive
+   while (up_1 ())
+     {
+	bol_skip_white();
+	if (eolp() or looking_at(F90_Continue_Char)) continue;
+	X_USER_BLOCK0 ();
+	goal = what_column ();
+
+	if (goal == 1) continue;
+
+	if (looking_at("do ") or looking_at("else")
+	    or looking_at("subroutine")
+	    or looking_at("interface")
+	    or looking_at("program")
+	    )
+	  goal += F90_Indent_Amount;
+	else if (looking_at("if ") or looking_at("if("))
+	  {
+	     if (ffind ("then")) goal += F90_Indent_Amount;
+	  }
+	else if (looking_at("type ") or looking_at("module "))
+	  {
+	     if (not (ffind ("::"))) goal += F90_Indent_Amount;
+	  }
+	break;
+     }
+
+   % now check current line
+   pop_spot ();
+   push_spot ();
+   X_USER_BLOCK0 ();
+
+   if (looking_at("end") or
+       looking_at("continue") or
+       looking_at("else")) goal -= F90_Indent_Amount;
+
+   CASE_SEARCH = cs;		% done getting indent
+   if (goal < 7) goal = 7;
+   pop_spot ();
+
+   bol_skip_white ();
+
+   % after the label or continuation char and indent the rest to goal
+   USER_BLOCK1
+     {
+	skip_chars ("0-9");
+	trim ();
+	if (looking_at (F90_Continue_Char))
+	  {
+	     insert_spaces (6 - what_column());
+	     go_right_1 (); trim();
+	     goal += F90_Indent_Amount;
+	  }
+	insert_spaces (goal - what_column());
+     }
+
+   ch = char(what_char());
+   switch (ch)
+     {
+	isdigit (ch) :		% label
+
+	if (what_column () >= 6)
+	  {
+	     bol (); trim ();
+	     insert_single_space ();
+	  }
+	X_USER_BLOCK1 ();
+     }
+     {
+	case F90_Continue_Char :	% continuation character
+	bol (); trim (); insert ("     ");
+	X_USER_BLOCK1 ();
+     }
+     {
+	not (bolp()) or eolp ():	% general case
+	bol (); trim ();
+	insert_spaces (goal--, goal);
+     }
+   pop_spot ();
+   skip_white ();
+}
+
+define f90_is_comment ()
+{
+   bol ();
+   skip_chars (" \t0-9");
+   bolp () and not (eolp());
+}
+
+define f90_newline ()
+{
+   variable p, cont;
+
+   if (bolp ())
+     {
+	newline ();
+	return;
+     }
+
+   f90_indent ();
+   push_spot ();
+   bskip_white (); trim ();
+
+   if (what_column () > 72)
+     {
+	push_spot ();
+	bol_skip_white();
+	!if (bolp()) message ("Line exceeds 72 columns.");
+	pop_spot ();
+     }
+
+   p = _get_point ();
+   bskip_chars("-+*=/,(");
+
+   cont = (p != _get_point ());
+
+   if (f90_is_comment ()) cont = 0;
+
+   bol_skip_white ();
+   if (looking_at("data ")) cont = 0;
+
+   pop_spot ();
+
+   newline ();
+   insert_single_space ();
+   if (cont) insert(F90_Continue_Char);
+   f90_indent ();
+}
+
+define f90_continue_newline ()
+{
+   f90_newline ();
+
+   push_spot ();
+   bol_skip_white ();
+   if (looking_at(F90_Continue_Char)) pop_spot ();
+   else
+     {
+	insert (F90_Continue_Char);
+	pop_spot ();
+	f90_indent ();
+	go_right_1 ();
+	skip_white ();
+     }
+}
+
+%
+%   electric labels
+%
+define f90_electric_label ()
+{
+   insert_char (LAST_CHAR);
+   push_spot ();
+
+   if (f90_is_comment ()) pop_spot ();
+   else
+     {
+	bol_skip_white ();
+	skip_chars ("0-9"); trim ();
+	pop_spot ();
+	f90_indent ();
+     }
+}
+
+% f90 comment/uncomment functions
+
+define f90_uncomment ()
+{
+   push_spot ();
+   if (f90_is_comment ())
+     {
+	bol ();
+	if (looking_at (F90_Comment_String))
+	  deln (strlen (F90_Comment_String));
+	else del ();
+     }
+
+   f90_indent ();
+   pop_spot ();
+   go_down_1 ();
+}
+
+define f90_comment ()
+{
+   !if (f90_is_comment ())
+     {
+	push_spot ();
+	bol ();
+	insert (F90_Comment_String);
+     }
+   pop_spot ();
+   go_down_1 ();
+}
+
+%
+% Look for beginning of current subroutine/function
+%
+define f90_beg_of_subprogram ()
+{
+   variable cs = CASE_SEARCH;
+
+   CASE_SEARCH = 0;
+   do
+     {
+	bol_skip_white ();
+	if (_get_point ())
+	  {
+	     if (looking_at ("program")
+		 or looking_at ("function")
+		 or looking_at ("subroutine")) break;
+	  }
+     }
+   while (up_1 ());
+   CASE_SEARCH = cs;
+}
+
+%
+% Look for end of current subroutine/function
+%
+define f90_end_of_subprogram ()
+{
+   variable cs = CASE_SEARCH;
+   CASE_SEARCH = 0;
+
+   do
+     {
+	bol_skip_white ();
+	if (looking_at ("end"))
+	  {
+	     go_right (3);
+	     skip_white ();
+	     if (eolp ()) break;
+	  }
+     }
+   while (down_1 ());
+   CASE_SEARCH = cs;
+}
+
+define f90_mark_subprogram ()
+{
+   f90_end_of_subprogram ();
+   go_down_1 ();
+   push_mark (); call ("set_mark_cmd");
+   f90_beg_of_subprogram ();
+   bol ();
+}
+
+%
+% shows a ruler for F90 source. Press any key to get rid of
+%
+define f90_ruler ()
+{
+   variable c = what_column ();
+   variable r = window_line ();
+
+   bol ();
+   push_mark ();
+   insert ("    5 7 10   15   20   25   30   35   40   45   50   55   60   65   70\n");
+   insert ("{    }|{ |    |    |    |    |    |    |    |    |    |    |    |    | }\n");
+
+   goto_column (c);
+   if (r <= 2) r = 3;
+   recenter (r);
+   message ("Press SPACE to get rid of the ruler.");
+   update_sans_update_hook (1);
+   () = getkey ();
+   bol ();
+   del_region ();
+   goto_column (c);
+   flush_input ();
+   recenter (r);
+}
+
+define f90_prev_next_statement (dirfun)
+{
+   while (@dirfun ())
+     {
+	bol ();
+	skip_chars ("^0-9 \t");
+	!if (_get_point ()) break;
+     }
+   () = goto_column_best_try (7);
+}
+%
+% moves cursor to the next statement, skipping comment lines
+%
+define f90_next_statement ()
+{
+   f90_prev_next_statement (&down_1);
+}
+
+%
+% moves cursor to the previous f90 statement, skipping comments
+%
+define f90_previous_statement ()
+{
+   f90_prev_next_statement (&up_1);
+}
+
+%
+% main entry point into the f90 mode
+%
+
+$1 = "F90";
+!if (keymap_p ($1)) make_keymap ($1);
+
+definekey ("f90_comment",		"\e;",	$1);
+definekey ("f90_uncomment",		"\e:",	$1);
+definekey ("f90_continue_newline",	"\e\r",	$1);
+% next two really needed?  not if using EDT or Emacs
+definekey ("self_insert_cmd",		char('\''),	$1);
+definekey ("self_insert_cmd",		char('"'),	$1);
+definekey ("f90_beg_of_subprogram",	"\e^A",	$1);
+definekey ("f90_end_of_subprogram",	"\e^E",	$1);
+definekey ("f90_mark_function",		"\e^H", $1);
+definekey_reserved ("f90_next_statement",	"^N",	$1);
+definekey_reserved ("f90_previous_statement",	"^P",	$1);
+definekey_reserved ("f90_ruler",		"^R", $1);
+_for (0, 9, 1)
+{
+   $2 = ();
+   definekey ("f90_electric_label", string($2), $1);
+}
+
+
+% Set up syntax table
+$1 = "F90";
+create_syntax_table ($1);
+define_syntax ("!", "", '%', $1);
+define_syntax ("([", ")]", '(', $1);
+define_syntax ('"', '"', $1);
+define_syntax ('\'', '\'', $1);
+% define_syntax ('\\', '\\', $1);
+define_syntax ("0-9a-zA-Z_", 'w', $1);        % words
+define_syntax ("-+0-9eEdD", '0', $1);   % Numbers
+define_syntax (",.", ',', $1);
+define_syntax ('#', '#', $1);
+define_syntax ("-+/*=", '+', $1);
+set_syntax_flags ($1, 1 | 2);
+set_fortran_comment_chars ($1, "^0-9 \t\n");
+
+% F77 keywords + include, record, structure, while:
+% backspace block
+% call character common complex continue
+% data dimension do double
+% else end enddo endfile endif entry equivalence exit external
+% format function
+% goto
+% if implicit include inquire integer intrinsic
+% logical
+% parameter pause precision program
+% real return rewind
+% save stop subroutine
+% then
+% while
+%
+% Extensions for Fortran 90:
+% allocatable
+% allocate
+% case
+% contains
+% deallocate
+% elsewhere
+% endblockdata
+% endfunction
+% endinterface
+% endmodule
+% endprogram
+% endselect
+% endsubroutine
+% endtype
+% endwhere
+% intent
+% interface
+% kind
+% module
+% moduleprocedure
+% namelist
+% nullify
+% optional
+% pointer
+% private
+% public
+% select
+% selectcase
+% sequence
+% target
+% type
+% use
+% where
+% 
+() = define_keywords ($1, "dogoifto", 2);
+() = define_keywords ($1, "enduse", 3);
+() = define_keywords ($1, "callcasedataelseexitgotokindopenreadrealsavestopthentype", 4);
+() = define_keywords ($1, "blockcloseenddoendifentrypauseprintwherewhilewrite", 5);
+() = define_keywords ($1, "commondoubleformatintentmodulepublicrecordreturnrewindselecttarget", 6);
+() = define_keywords ($1, "complexendfileendtypeincludeinquireintegerlogicalnullifypointerprivateprogram", 7);
+() = define_keywords ($1, "allocatecontainscontinueendwhereexternalfunctionimplicitnamelistoptionalsequence", 8);
+() = define_keywords ($1, "backspacecharacterdimensionelsewhereendmoduleendselectinterfaceintrinsicparameterprecisionstructure", 9);
+() = define_keywords ($1, "deallocateendprogramselectcasesubroutine", 10);
+() = define_keywords ($1, "allocatableendfunctionequivalence", 11);
+() = define_keywords ($1, "endblockdataendinterface", 12);
+() = define_keywords ($1, "endsubroutine", 13);
+() = define_keywords ($1, "moduleprocedure", 15);
+
+() = define_keywords_n ($1, "eqgegtleltneor", 2, 1);
+() = define_keywords_n ($1, "absallandanycosdimexpintiorlenlgelgtllelltlogmaxminmodnotsinsumtan", 3, 1);
+() = define_keywords_n ($1, "acosaintasinatancharcoshdblehugeiandieorkindnintpackrealscansignsinhsizesqrttanhtinytrimtrue", 4, 1);
+() = define_keywords_n ($1, "aimaganintatan2btestcmplxconjgcountdprodfalseflooribclribitsibseticharindexishftlog10mergeradixrangescaleshape", 5, 1);
+() = define_keywords_n ($1, "cshiftdigitsiacharishftclboundmatmulmaxlocmaxvalminlocminvalmodulomvbitsrepeatspreaduboundunpackverify", 6, 1);
+() = define_keywords_n ($1, "adjustladjustrceilingeoshiftepsilonlogicalnearestpresentproductreshapespacing", 7, 1);
+() = define_keywords_n ($1, "bit_sizeexponentfractionlen_trimtransfer", 8, 1);
+() = define_keywords_n ($1, "allocatedprecisionrrspacingtranspose", 9, 1);
+() = define_keywords_n ($1, "associated", 10, 1);
+() = define_keywords_n ($1, "dot_productmaxexponentminexponentrandom_seed", 11, 1);
+() = define_keywords_n ($1, "set_exponentsystem_clock", 12, 1);
+() = define_keywords_n ($1, "date_and_timerandom_number", 13, 1);
+() = define_keywords_n ($1, "selected_int_kind", 17, 1);
+() = define_keywords_n ($1, "selected_real_kind", 18, 1);
+
+%!%+
+%\function{f90_mode}
+%\synopsis{f90_mode}
+%\description
+% Mode designed for the purpose of editing F90 files.
+% After the mode is loaded, the hook 'f90_hook' is called.
+% Useful functions include
+% 
+%  Function:                    Default Binding:
+%   f90_continue_newline          ESC RETURN
+%     indents current line, and creates a continuation line on next line.
+%   f90_comment                   ESC ;
+%     comments out current line
+%   f90_uncomment                 ESC :
+%     uncomments current line
+%   f90_electric_label            0-9
+%     Generates a label for current line or simply inserts a digit.
+%   f90_next_statement            ^C^N
+%     moves to next f90 statementm skips comment lines
+%   f90_previous_statement        ^C^P
+%     moves to previous f90 statement, skips comment lines
+%   f90_ruler                     ^C^R
+%     inserts a ruler above the current line. Press any key to continue
+%   f90_beg_of_subprogram         ESC ^A
+%     moves cursor to beginning of current subroutine/function
+%   f90_end_of_subprogram         ESC ^E
+%     moves cursor to end of current subroutine/function
+%   f90_mark_subprogram           ESC ^H
+%     mark the current subroutine/function
+% 
+% Variables include:
+%   F90_Continue_Char   --- character used as a continuation character.
+%     By default, its value is ">"
+%   F90_Comment_String  --- string used by 'f90_comment' to
+%     comment out a line.  The default string is "C ";
+%   F90_Indent_Amount   --- number of spaces to indent statements in
+%                               a block.  The default is 2.
+%!%-
+define f90_mode ()
+{
+   variable mode = "F90";
+   set_mode (mode, 0x4 | 0x10);
+   use_keymap (mode);
+   use_syntax_table (mode);
+   set_buffer_hook ("indent_hook", "f90_indent");
+   set_buffer_hook ("newline_indent_hook", "f90_newline");
+   run_mode_hooks ("f90_hook");
+}
--- jed-0.99-18_orig/lib/filter.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/filter.sl	2008-07-30 01:20:50.000000000 +0200
@@ -26,13 +26,8 @@
      }
    () = pipe_region (sprintf ("%s > %s", cmd, file));
    
-   push_spot ();
    if (-1 == insert_file (file))
-     {
-	pop_spot ();
 	error ("Error encountered running filter.");
-     }
-   pop_spot ();
 
    del_region ();
    
--- jed-0.99-18_orig/lib/folding.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/folding.sl	2008-07-30 01:20:50.000000000 +0200
@@ -172,16 +172,10 @@
      {
 	fold_this_fold (start, end, end_of_start, end_of_end, 
 			1, fold_level);
-	!if (down_1 ())
-	  break;
      }
    
    pop_spot ();
-   if (is_line_hidden ())
-     {
 	skip_hidden_lines_backward (1);
-	bol ();
-     }
    flush ("folding buffer...done");
 }
 
@@ -266,8 +260,6 @@
    skip_hidden_lines_backward (1);
 }
 %}}}
-
-#iffalse
 define fold_close_fold () %{{{
 {
    variable start, end, end_of_start, end_of_end;
@@ -336,70 +328,6 @@
 }
 
 %}}}
-#else
-define fold_close_fold () %{{{
-{
-   variable start, end, end_of_start, end_of_end;
-   variable beg_mark, end_mark;
-   variable not_in_a_fold = "Not in a fold.";
-   variable end_line;
-   
-   (start, end, end_of_start, end_of_end) = fold_get_marks ();
-   
-   push_spot();
-   
-   if (andelse 
-       {fold_is_marker_line (start, end_of_start)}
-	 {down_1()})
-     {
-        is_line_hidden();
-        go_up_1();
-        !if (())
-          {
-             fold_this_fold (start, end, end_of_start, end_of_end, 1, 1);
-             pop_spot();
-             return;
-          }
-     }
- 
-   beg_mark = create_user_mark ();
-   end_mark = create_user_mark ();
-
-   forever
-     {
-        if (andelse
-	    {up_1()}
-	      {fold_find_marker_line_reverse (end, end_of_end, 0)})
-          {
-             end_line = what_line ();
-             move_user_mark (end_mark);
-          }
-        else
-          end_line= 0;
-
-        goto_user_mark (beg_mark);
-        
-        if (andelse{up_1()}
-	      {fold_find_marker_line_reverse (start, end_of_start, 0)})
-          {
-             move_user_mark (beg_mark);
-             if ( what_line () > end_line) break;
-          }
-        else
-          {
-             pop_spot ();
-             error (not_in_a_fold);
-          }
-        goto_user_mark (end_mark);
-     }
-   
-   fold_this_fold (start, end, end_of_start, end_of_end, 1, 1);
-   pop_spot();
-   goto_user_mark (beg_mark);
-   bol();
-}
-%}}}
-#endif
 
 private define fold_exit_fold_internal () %{{{
 {
@@ -635,18 +563,10 @@
 
 %}}}
 
-
 define folding_mode () %{{{
 {
    variable s, s1, e, e1;
    
-   if (Fold_Mode_Ok == 0)
-     {
-	if (1 != get_yes_no ("Folding mode not enabled.  Enable it"))
-	  return;
-	Fold_Mode_Ok = 1;
-     }
-
 #ifdef HAS_BLOCAL_VAR
    (s, e, s1, e1) = fold_get_marks_for_mode ();
    
--- jed-0.99-18_orig/lib/html.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/html.sl	2008-07-30 01:20:50.000000000 +0200
@@ -8,10 +8,7 @@
 %% 
 %% Modified by Michael D Johnson to conform with the standards recommendation 
 %% on capitalization.
-%% 
-%  Modified by Kees Serier
-%  All lower case except for DOCTYPE (like all W3C code), html: 2 3.2 4 XHTML
-%  Definition lists complete, tables, euro symbol and more.
+
 
 % 1 => html_mode wraps, like text_mode
 % 0 => html_mode doesn't wrap, like no_mode
@@ -129,67 +126,68 @@
 
 define html_insert_with_newline (str)
 {
-   html_insert_move (sprintf ("<%s>\n@</%s>\n", str, str));
+   html_insert_move (sprintf ("<%s>\n@\n</%s>\n", str, str));
 }
 
-define html_insert_with_2newlines (str)
+define html_template ()
 {
-   html_insert_move (sprintf ("<%s>\n@\n</%s>\n", str, str));
+   insert ("<!DOCTYPE HTML public \"-//ietf//dtd html 2.0//en\">\n"); % Made DOCTYPE HTML caps, as per standard recommendation (MDJ 04/06/98)
+   html_insert_move ("<HTML>\n\n<HEAD>\n<TITLE>@</TITLE>\n</HEAD>\n\n<BODY>\n</BODY>\n\n</HTML>") ;
 }
 
 define html_form ()
 {
-   html_insert_move ("<form action=\"\" method=\"\">\n@\n</form>");   
+   html_insert_move ("<FORM action=\"\" method=\"\">\n@\n</FORM>");
 }
 
 define html_input ()
 {
-   insert ("<input type=\"\" name=\"\" value=\"\">");
+   insert ("<INPUT type=\"\" name=\"\" value=\"\">");
 }
 
 define html_input_text ()
 {
-   insert ("<input type=\"text\" name=\"\" value=\"\">");
+   insert ("<INPUT type=\"text\" name=\"\" value=\"\">");
 }
 
 define html_input_password ()
 {
-   insert ("<input type=\"password\" name=\"\" value=\"\">");
+   insert ("<INPUT type=\"password\" name=\"\" value=\"\">");
 }
 
 define html_input_checkbox ()
 {
-   insert ("<input type=\"checkbox\" name=\"\" value=\"\">");
+   insert ("<INPUT type=\"checkbox\" name=\"\" value=\"\">");
 }
 
 define html_input_radio ()
 {
-   insert ("<input type=\"radio\" name=\"\" value=\"\">");
+   insert ("<INPUT type=\"radio\" name=\"\" value=\"\">");
 }
 
 define html_input_submit ()
 {
-   insert ("<input type=\"submit\" value=\"OK\">");
+   insert ("<INPUT type=\"submit\" value=\"OK\">");
 }
 
 define html_input_reset ()
 {
-   insert ("<input type=\"reset\"  value=\"Clear\">");
+   insert ("<INPUT type=\"reset\"  value=\"Clear\">");
 }
 
 define html_input_hidden ()
 {
-   insert ("<input type=\"hidden\" name=\"\" value=\"\">");
+   insert ("<INPUT type=\"hidden\" name=\"\" value=\"\">");
 }
 
 define html_select ()
 {
-   html_insert_move ("<select name=\"@\" size=\"\">\n@\n</select>");
+   html_insert_move ("<SELECT name=\"@\" size=\"\">\n@\n</SELECT>");
 }
 
 define html_text_area ()
 {
-   html_insert_move ("<textarea name=\"@\"></textarea>");
+   html_insert_move ("<TEXTAREA name=\"@\"></TEXTAREA>");
 }
 
 %
@@ -205,12 +203,12 @@
 %
 define html_horiz_rule ()
 {
-   insert("\n<hr>\n") ;
+   insert("\n<HR>\n") ;
 }
 
 define html_heading (c)
 {
-   html_insert_move (sprintf ("<h%c>@</h%c>", c, c));
+   html_insert_move (sprintf ("<H%c>@</H%c>", c, c));
 }
 
 define html_insert_eol (str)
@@ -225,18 +223,12 @@
    vinsert ("<%s>", str);
 }
 
-% insert at cursor
-define html_insert_here (str)
-{
-   vinsert ("<%s>", str);
-}
-
 %
 % Make markers for an image
 %
 define html_image ()
 {
-   html_insert_move ("<img src=\"@\" alt=\"\">");
+   html_insert_move ("<IMG src=\"@\" alt=\"\">");
 }
 
 %
@@ -253,7 +245,7 @@
    switch (ch)
      {
       case '\r':
-	insert ("<br>\n");
+	insert ("<BR>\n");
      }
      {
       case '&':
@@ -268,14 +260,6 @@
 	insert ("&lt;");
      }
      {
-      case ' ':
-	insert ("&nbsp;");
-     }
-     {
-      case 'e':
-	insert ("&euro;");
-     }
-     {
 	% default:  The other special characters should be added.
 	insert_char (ch);		       
      }
@@ -284,7 +268,7 @@
 % Support for HTML paragraphs.  MDJ 04/06/98
 define html_par_insert()
 {
-   insert("\n\n<p>\n");
+    insert("\n\n<P>\n");
 }
 
 define html_read_key (hlp)
@@ -294,36 +278,14 @@
    tolower (getkey ());
 }
 
-define html_doctype ()
-{
-   variable key2;
-   key2 = html_read_key ("HTML version: 2  3.2  4  Xhtml");
-   switch (key2)
-     {case '2': 
-	insert ("<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n");}
-     {case '3': 
-	insert ("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2 FINAL//EN\">\n");}
-     {case '4': 
-	insert ("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 FINAL//EN\">\n");}
-     {case 'x' or case 'X': 
-	insert ("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\">\n");}
-     { beep (); }
-}
-
-define html_template ()
-{
-   html_doctype ();
-   html_insert_move ("<html>\n\n<head>\n<title>@</title>\n</head>\n\n<body>\n</body>\n\n</html>") ;
-}
-
-
 define html_keymap_a ()
 {
-   variable name = "<a name=\"@\"></a>";
-   variable href = "<a href=\"@\"></a>";
+   variable name = "<A name=\"@\"></A>";
+   variable href = "<A href=\"@\"></A>";
    
    switch (html_read_key ("Href  Name"))
      { case 'h': href; }
+     { case 'a': href; }
      { case 'n': name; }
      {
 	beep (); return;
@@ -333,13 +295,7 @@
 
 define html_keymap_d ()
 {
-   variable key;
-   key = html_read_key ("dL  dT  dD");
-   switch (key)
-     { case 'l': html_insert_with_newline ("dl"); }
-     { case 't': insert ("<dt>"); }
-     { case 'd': insert ("<dd>"); }
-     { beep (); }
+   insert ("<DD>");
 }
 
 define html_keymap_f ()
@@ -351,7 +307,7 @@
      {case 'f': html_form (); }
      {case 'h': html_input_hidden (); }
      {case 'i': html_input (); }
-     {case 'o': html_insert_bol("option"); }
+     {case 'o': html_insert_bol("OPTION"); }
      {case 'p': html_input_password (); }
      {case 'r': html_input_radio (); }
      {case 's': html_select (); }
@@ -367,10 +323,9 @@
 define html_keymap_h ()
 {
    variable key;
-   key = html_read_key ("h1  h2  h3  h4  h5  h6  templAte Doctype  Head  Body  htmL  Title");
+   key = html_read_key ("h1  h2  h3  h4  h5  h6  templAte Doc  Head  Body  htmL  Title");
    switch (key)
-     % { case 'd': html_insert_bol ("doc"); }
-     { case 'd': html_doctype (); }
+     { case 'd': html_insert_bol ("doc"); }
      { case 'h': html_insert_with_newline ("head"); }
      { case 'b': html_insert_with_newline ("body"); }
      { case 'l': html_insert_with_newline ("html"); }
@@ -388,11 +343,12 @@
 define html_keymap_l ()
 {
    switch (html_read_key ("Dir Li Menu Ordered Un-ordered"))
-     { case 'd': html_insert_with_newline ("dir"); }
-     { case 'l': html_insert_here ("li"); }
-     { case 'm': html_insert_with_newline ("menu"); }
-     { case 'o': html_insert_with_newline ("ol"); }
-     { case 'u': html_insert_with_newline ("ul"); }
+     { case 'd': html_insert_with_newline ("DIR"); }
+     { case 'i': html_insert_bol ("LI"); }
+     { case 'l': html_insert_bol ("LI"); }
+     { case 'm': html_insert_with_newline ("MENU"); }
+     { case 'o': html_insert_with_newline ("OL"); }
+     { case 'u': html_insert_with_newline ("UL"); }
      {
 	% default 
 	beep ();
@@ -402,11 +358,11 @@
 define html_keymap_p ()
 {
    switch (html_read_key ("Break Hrule Par blockQuote pRe"))
-     { case 'b': html_insert_eol ("br"); }
+     { case 'b': html_insert_eol ("BR"); }
      { case 'h': html_horiz_rule (); }
-     { case 'p': insert ("<p>\n"); }
-     { case 'q': html_insert_with_newline ("blockquote"); }
-     { case 'r': html_insert_with_newline ("pre"); }
+     { case 'p': insert ("<P>\n"); }
+     { case 'q': html_insert_with_newline ("BLOCKQUOTE"); }
+     { case 'r': html_insert_with_newline ("PRE"); }
      {
 	beep ();
      }
@@ -414,40 +370,28 @@
 
 define html_keymap_s ()
 {
-   switch (html_read_key ("Address Bold Cite Emph Font Ital Kbd cOde Samp Tt Uline Var"))
-     { case 'a': "address"; }
-     { case 'b': "b"; }
-     { case 'c': "cite"; }
-     { case 'e': "em"; }
-     { case 'f': "font"; }
-     { case 'i': "i"; }
-     { case 'k': "kbd"; }
-     { case 'o': "code"; }
-     { case 's': "samp"; }
-     { case 't': "tt"; }
-     { case 'u': "u"; }
-     { case 'v': "var"; }
+   switch (html_read_key ("Address Bold Cite Emph Ital Kbd cOde Samp Tt Uline Var"))
+     { case 'a': "ADDRESS"; }
+     { case 'b': "B"; }
+     { case 'c': "CITE"; }
+     { case 'e': "EM"; }
+     { case 'i': "I"; }
+     { case 'k': "KBD"; }
+     { case 'o': "CODE"; }
+     { case 's': "SAMP"; }
+     { case 't': "TT"; }
+     { case 'u': "U"; }
+     { case 'v': "VAR"; }
      {
 	beep (); return;
      }
    html_simple_insert (());
 }
 
-define html_keymap_t ()
-{
-   switch (html_read_key ("Table Row Header Data"))
-     { case 't': html_insert_with_newline ("table"); }
-     { case 'r': html_insert_with_newline ("tr"); }
-     { case 'h': html_simple_insert ("th"); }
-     { case 'd': html_simple_insert ("td"); }
-     {
-	beep (); return;
-     }
-}
 
 define html_keymap ()
 {
-   variable key = html_read_key ("Anchors  Dfnlists  Forms  Headings  Images  Lists  Pstyles  cStyles Tables");
+   variable key = html_read_key ("Anchors  Dfnlists  Forms  Headings  Images  Lists  Pstyles  cStyles");
    switch (key)
      { case 2: html_bskip_tag (); }	   %  ^B
      { case 6: html_skip_tag (); }	   %  ^F
@@ -462,7 +406,6 @@
      { case 'l': html_keymap_l (); }
      { case 'p': html_keymap_p (); }
      { case 's': html_keymap_s (); }
-     { case 't': html_keymap_t (); }
      {
 	ungetkey (key);
 	html_quoted_insert ();
@@ -549,7 +492,6 @@
 %     ^CL...  Lists (<UL>...</UL>)
 %     ^CP...  Paragraph styles, etc. (<P>, <BR>, <HR>, <ADDRESS>, etc.)
 %     ^CS...  Character styles (<EM>, <STRONG>, <B>, <I>, etc.)
-%     ^CT...  Tables
 % Additionally, some special movement commands and miscellaneous
 % characters are defined:
 %     ^C^B    skip to beginning of prior HTML tag
@@ -559,9 +501,6 @@
 %     ^C&     insert HTML text for '&'
 %     ^C>     insert HTML text for '>'
 %     ^C<     insert HMTL text for '<'
-%     ^C<enter> insert HMTL text for '<br>'
-%     ^C<space> insert HMTL text for NonBreakableSPace
-%     ^Ce     insert HMTL text for 'Eurosymbol'
 %     ^CC     insert HTML comment (around region, if marked)
 % 
 % For a complete list of keybindings, use \var{describe_bindings}.
@@ -578,3 +517,6 @@
    use_keymap (html);
    run_mode_hooks ("html_mode_hook");
 }
+
+
+	 
--- jed-0.99-18_orig/lib/ide.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/ide.sl	2008-07-30 01:20:50.000000000 +0200
@@ -15,8 +15,8 @@
 %
 %   Please send me requests and bug reports, should you find any.
 %
-%   Version 1.3.3; for jed B0.99.13 upwards.
-%   Last modified: 3 October 2002
+%   Version 1.3.2; for jed B0.99.13 upwards.
+%   Last modified: 11 September 2001
 
 Help_File = "ide.hlp";
 
@@ -68,6 +68,9 @@
 setkey ("execute_macro", "\er");
 setkey ("format_paragraph", "^B");
 setkey ("ide_better_help", Key_F1);
+if (is_defined ("function_help"))
+  setkey ("function_help", Key_Alt_F1);
+setkey ("ide_function_help", Key_Alt_F1);
 setkey ("ide_toggle_overwrite", Key_Ins);
 setkey ("undo", "^U");
 setkey ("kbd_quit", "\e\e\e");
--- jed-0.99-18_orig/lib/idl.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/idl.sl	2008-07-30 01:20:50.000000000 +0200
@@ -248,4 +248,7 @@
    set_buffer_hook ("indent_hook", "idl_indent_line");
    set_buffer_hook ("newline_indent_hook", "idl_newline_and_indent");
    run_mode_hooks ("idl_mode_hook");
+   % This is called after the hook to give the hook a chance to load the
+   % abbrev table.
+   if (abbrev_table_p (idl)) use_abbrev_table (idl);
 }
--- jed-0.99-18_orig/lib/jed.conf	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/jed.conf	2008-07-30 01:20:50.000000000 +0200
@@ -3,8 +3,331 @@
 % This is a sample jed.conf that the user may put in /etc or /usr/local/etc
 % to setup some defaults for all users.
 
-_Jed_Default_Emulation = "ide";
-_Jed_Default_Color_Scheme = "blue2";
+_Jed_Default_Emulation = "jed";
+_Jed_Default_Color_Scheme = "smolie";
 Info_Directory = "/usr/info,/usr/share/info";
 auto_compression_mode (1);
-enable_dfa_syntax_for_mode ("PostScript", "TCL");
+enable_dfa_syntax_for_mode("PostScript", "TCL", "ASM");
+autoload("nasm_mode", "nasm");
+add_mode_for_extension("c","y");
+add_mode_for_extension("c","l");
+add_mode_for_extension("c","cc");
+add_mode_for_extension("c","hh");
+add_mode_for_extension("js","js");
+add_mode_for_extension("sh","ebuild");
+add_mode_for_extension("sh","nexconfig");
+add_mode_for_extension("sh","nexmonitor");
+add_mode_for_extension("make","in");
+add_mode_for_extension("make","");
+%add_mode_for_extension("sh","");
+add_mode_for_extension("sh","am");
+add_mode_for_extension("sh","m4");
+add_mode_for_extension("sh","run");
+add_mode_for_extension("nasm","ini");
+add_mode_for_extension("nasm","asm");
+add_mode_for_extension("nasm","s");
+add_mode_for_extension("nasm","d");
+add_mode_for_extension("tcl","tcl");
+add_mode_for_extension("php","php");
+add_mode_for_extension("php","inc");
+add_mode_for_extension("php","php3");
+add_mode_for_extension("php","php4");
+add_mode_for_extension("php","phtml");
+setkey ("delete_char_cmd", "\e[3~");
+
+%define_abbrev_for_table("C", "void");
+%define_abbrev_for_table("C", "unsigned");
+%define_abbrev_for_table("C", "char");
+%define_abbrev_for_table("C", "short");
+%define_abbrev_for_table("C", "int");
+%define_abbrev_for_table("C", "long");
+%define_abbrev_for_table("C", "static");
+%define_abbrev_for_table("C", "struct");
+%define_abbrev_for_table("C", "inline");
+%Abbrev_File = 
+"/usr/share/jed/lib/abbrevs.sl";
+
+_debug_info =1;
+%   User Initialization file for the JED editor  -*- slang -*-
+%   If a user does not have a startup file in the user's home directory,
+%   JED will automatically load this from JED_ROOT/lib.   Thus it is easier
+%   for a system manager to make defaults for all users.
+
+%   Do not edit this file directly.  Instead, copy it to your home 
+%   directory (sys$login:jed.rc on VMS or $HOME/.jedrc on Unix) and edit
+%   the resulting file.
+
+%   To uncomment a line, simply remove any leading '%' characters.
+
+%   This file is divided into various sections.  The first section pertains
+%   to keybindings (e.g., Wordstar, Emacs, EDT, etc...) and the following
+%   sections pertain to user preferences such as default TAB sizes, line 
+%   and column numbers on status line, colors, indentation style, etc...
+
+if (BATCH == 0)
+{
+%----------------------------------------------------------------------
+%  Keybindings  (not loaded for batch processes)
+%  
+%    Default bindings are Emacs-like with EDT emulation on Unix and VMS.
+%    For the PC, only Emacs is enabled by default.  If you do not want EDT
+%    bindings, simply coment out the appropriate line.   
+%
+%    For Wordstar like bindings, comment out EDT and Emacs lines and
+%    uncomment Wordstar line.  A similar statement applies for BRIEF,
+%    and for Borland IDE-like bindings.
+%
+%  () = evalfile("emacs");           % Emacs-like bindings
+%  () = evalfile("edt");             % EDT emulation
+%  () = evalfile ("ide");            % Borland IDE (see also doc/ide-mode.txt)   
+%  () = evalfile ("brief");          % Brief Keybindings (MSDOS only!!)
+%  () = evalfile("wordstar");        % obsolete --- use ide instead)
+%  () = evalfile ("cua");            % CUA-like key bindings
+%  Note: For EDT emulation, jed386.exe requires that the GOLD.COM TSR 
+%        be loaded.  This TSR is available from space.mit.edu:/pub/davis/jed.
+
+() = evalfile("tclmode");
+
+% Some of the above emulations may set keys that conflict with access to
+% the menubars.  For example, emacs uses ESC-f to move by words.  The 
+% next line causes the keys to activate the menus.  Comment this out
+% to preserve the emulation.
+   enable_menu_keys ();
+
+% If you use jed inside an XTerminal, you can use the mouse to access the 
+% menus and move the cursor by uncommenting the next line:
+%  enable_xmouse ();
+   
+% What should the Ctrl-H key do??  
+%
+%  setkey ("bol", "^H");              % causes ^H to go to beg of line (EDT)
+%  setkey ("help_prefix", "^H");      % Uncomment to have Ctrl-H as help
+
+#ifdef XWINDOWS
+   % See xjed.txt for information regarding the delete key under X Windows.
+   %    x_set_keysym (0xFFFF, 0, "\e[3~");
+   %    setkey ("delete_char_cmd", "\e[3~");
+#endif
+   %  !!!!  ^S/^Q flow control problems !!!!
+   %  if you experience problems with JED suddenly going into search mode
+   %  for some reason then you are a victim of the emacs emulation's 
+   %  binding of the ^S key to the search function.
+   %  TO prevent this from happening, either find out how to 
+   %  prevent unwanted ^S/^Q characters or uncomment the next line:
+#ifdef UNIX   
+   %enable_flow_control (1);
+#endif
+   
+%----------------------------------------------------------------------
+%
+%   TAB key setting  -- by default, the tab key is bound to 'indent_line_cmd'.
+%                       If you want a real tab inserted, uncomment next line.
+%
+%   setkey("self_insert_cmd", "^I");
+
+%----------------------------------------------------------------------
+
+%  Initial help screen --- comment out to disable.
+%  Note that for the help to be valid, it must occur AFTER bindings are 
+%  loaded.
+   
+% help();               % Pops up a help window
+
+}  %Batch
+
+%%%%%%%%%%%%%%%% top menu bar %%%%%%%%%%%%%%%
+
+% To disable it, uncomment the next line.  Note that menus will still be
+% available but the menubar will be hidden when not in use.
+% enable_top_status_line (0);
+
+
+%---------------------------------------------------------------------------
+% User Information (used by some modes, automatically determined on Unix)
+%---------------------------------------------------------------------------
+% set_realname ("John Doe");
+% set_username ("jd");
+% set_hostname ("no.where.com");
+% set_emailaddress ("jd@no.where.com");
+
+
+%----------------------------------------------------------------------
+% JED global variables  --- defaults shown
+%
+#ifdef VMS UNIX
+%USE_ANSI_COLORS = 1;   % if non-zero, JED will display colors on a color
+                        % terminal (Unix and VMS only) See doc/color.txt 
+                        % for more discussion and look below for setting
+                        % the colors.
+#endif
+No_Backups = 1;         % If non-zero, backup files will not be created.
+Startup_With_File = 0;  % if greater then zero, force JED to prompt for a file
+                        %   if none is specified on the command line.  If 
+                        %   negative, inhibit startup message.
+DISPLAY_TIME    = 1;    % non-zero enables the time to be displayed on 
+                        %  status line, zero disables it.  If this value
+                        %  is -1, 24 hour time will be used.
+HIGHLIGHT = 1; % non-zero for region highlighting
+WANT_SYNTAX_HIGHLIGHT = 1;
+                        % Highlight syntax in C, Fortran, and TeX modes.
+                        % See section on colors
+                        %  below for choosing how to highlight.  On Unix and 
+                        %  VMS systems, USE_ANSI_COLORS must also be non-zero.
+HORIZONTAL_PAN = 20; % if zero, no automatic panning.  If positive, only
+                        % the current line is panned.  If negative, pan window.
+#ifdef IBMPC_SYSTEM
+  HORIZONTAL_PAN  = -1; % For msdos, panning window might be better:
+#endif
+
+LINENUMBERS = 2;
+BLINK = 1; % if non zero, blink matching parenthesis
+TAB_DEFAULT = 2; % Tab size  (also try edit_tab_stops)
+USE_TABS = 0; % Use tabs when generating whitespace.
+WRAP = 78; % wrap column
+ADD_NEWLINE = 1; % add newline to file when writing if one not present
+IGNORE_BEEP = 3; % Beep terminal during error messages---
+                        %  1 == sound only, 2 = visible bell only, 3 = both
+_traceback = 0; % Non zero means dump traceback on S-Lang errors
+WRAP_INDENTS = 0; % Non zero indents next line after wrapping current.
+%  Make this a 1 if you want indented text mode.
+CASE_SEARCH = 0;    % zero turns off case sensitivity for 
+                        % search functions, non-zero turns it on
+%KILL_LINE_FEATURE = 0;
+% If non-zero, kill line will kill through end of the 
+%  line if Point is at the beginning of the line. For
+%  emacs-like behavior, set this to zero.
+
+%---------------------------------------------------------------------------
+% C-mode indentation style
+%---------------------------------------------------------------------------
+c_set_style ("nexbyte"); % or "linux", "gnu", "bsd", "k&r"
+
+#ifdef IBMPC_SYSTEM
+% If non-zero, treat file names as case sensitive
+Case_Sensitive_Filenames = 0;
+#endif
+
+%---------------------------------------------------------------------------
+
+#ifdef MSDOS XWINDOWS MSWINDOWS
+% Alt-key handling.  Setting this variable controls how the
+% Alt key is handled.  By default it is set to 27 (Ascii ESCAPE).  This means
+% that any key pressed in conjunction with the alt key produces ESCAPE 
+% followed by the key itself.  If ALT-X is pressed, an ESCAPE-X is generated.
+% Set it to zero to turn off Alt key processing.  On XWindow systems, setting
+% this to zero will cause the high bit to be set on the character.
+%ALT_CHAR = 27;
+
+#endif
+
+%    Mute (dead or accent) keys 
+%    Valid Mute keys are:
+%      ^, ~, ', `, \d168 (ISO Diaeresis), \d180 (ISO Acute), and \".
+%    This means pressing this key then the key you want to accent yields
+%     the accented character.  If you do not know what this is, you do not
+%     need them.  By default, they are turned off.
+
+%mute_set_mute_keys (" ^ ~ ' ` \d168 \d180 \"  ");  % choose all or subset
+
+META_CHAR = -1; % All chars with hi bit set will self insert
+
+#ifdef IBMPC_SYSTEM
+%  DISPLAY_EIGHT_BIT = 128;
+#else
+%  DISPLAY_EIGHT_BIT = 160; % Other systems assume ISO Latin 1
+#endif
+
+% Color Settings
+% Look at jed/lib/color/README for a description of predefined color
+% schemes.
+%set_color_scheme ("lab");
+%set_color_scheme ("blue2");
+
+#ifdef UNIX
+%
+%  Terminal type.  By default, on Unix termcap is used.  However, some
+%  (if not all) termcaps do not include AL, DL strings for vtxxx terminals.
+%
+%  True blue vt100 terminals cannot insert and delete lines so the AL and DL
+%  termcap entries are not appropriate for them.  However, almost no one
+%  uses a true vt100 terminal anymore but they set their TERM variable to
+%  vt100 just the same.  If you do not like the way your terminal scrolls,
+%  and it is more than a vt100, either set your TERM variable appropriately
+%  or add vt100 to the list below. 
+%  
+
+if (0)
+{
+   $1 = "vt102 vt200 vt220 vt300 vt320 vt420 xterms";
+   if (is_substr($1, getenv("TERM"))) set_term_vtxxx(0);
+}
+#endif
+  
+
+%  Compiler interface --- uncomment one of the following:
+% 
+variable Compile_Default_Compiler = "gcc";           % GNU compiler
+% variable Compile_Default_Compiler = "Ultrix_cc";     % cc on Ultrix
+% variable Compile_Default_Compiler = "bcc";           % Borlands BCC
+% variable Compile_Default_Compiler = "sun_acc";       % SunOS C++ and ACC
+% variable Compile_Default_Compiler = "hp_cc";         % HPUX cc
+#ifdef WIN32
+W32shell_Perform_Globbing = 0;
+#endif
+
+%
+%  Hooks:  read jed/doc/hooks.sl for more information
+%
+define global_mode_hook (hook_name)
+{
+   % if (hook_name != "c_mode_hook")
+   %   local_setkey ("self_insert_cmd", "\t");
+}
+
+define dired_hook ()
+{
+   %local_unsetkey ("^K");
+   %local_setkey ("dired_kill_line", "^K");
+}
+autoload("tclmode","tcl");
+add_mode_for_extension("tcl","tcl");
+enable_dfa_syntax_for_mode("tcl");
+
+
+variable Jed_State_File = dircat (getenv ("HOME"), ".jedstate.sl");
+
+% Startup hook that utilizes jedstate invoked as getjedstate
+define startup_hook ()
+{
+  !if (BATCH)                           % not evaluated for batch processes
+    {
+      $1 = Sprintf ("getjedstate \"%s\"", buffer_filename, 1);
+      () = system ($1);
+
+      if (file_status (Jed_State_File) == 1)    % if we have a .jedstate.sl file
+        {
+          () = evalfile (Jed_State_File);       % evaluate command
+          () = delete_file (Jed_State_File);    % - then delete source
+        }
+    }
+}
+
+% Exit hook that utilizes jedstate invoked as setjedstate
+define exit_hook ()
+{
+  !if (BATCH)                           % not evaluated for batch processes
+    {
+      variable fname = buffer_filename ();
+
+      if (strlen (fname))               % only if we actually have a file name
+        {
+          variable line = what_line (); % active line
+          variable col = what_column ();% - and column
+
+          $1 = Sprintf ("setjedstate \"%s\" %d %d", fname, line, col, 3);
+          () = system ($1);             % do it
+        }
+      exit_jed ();
+    }
+}
+
--- jed-0.99-18_orig/lib/jedusage.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/jedusage.sl	2008-07-30 01:20:50.000000000 +0200
@@ -3,7 +3,7 @@
    () = fprintf (stdout, "%s\n", x);
 }
 
-p("Jed usage forms:");
+p("Jed usage:");
 p("");
 p("0.  jed [--version | --help]");
 p("1.  jed [--batch] [-n] [-e emulation] [-a alt-jedrc-file] \\");
@@ -20,7 +20,4 @@
 p("");
 p("2.  jed -script FILE [arg ...]");
 p("");
-p("3.  jed-script FILE [arg ...]");
-p("        This form sets __argv[0] to FILE, __argv[1] to arg, ...");
-p("");
 quit_jed ();
--- jed-0.99-18_orig/lib/jsmode.sl	1970-01-01 01:00:00.000000000 +0100
+++ jed-0.99-18/lib/jsmode.sl	2008-07-30 01:20:50.000000000 +0200
@@ -0,0 +1,66 @@
+% JavaScript mode is just a superset of C mode so make sure it is loaded.
+require ("cmode");
+
+$1 = "js";
+
+create_syntax_table ($1);
+define_syntax ("/*", "*/", '%', $1);
+define_syntax ("//", "", '%', $1);
+define_syntax ("([{", ")]}", '(', $1);
+define_syntax ('"', '"', $1);
+define_syntax ('\'', '\'', $1);
+define_syntax ('\\', '\\', $1);
+define_syntax ("0-9a-zA-Z_", 'w', $1);        % words
+define_syntax ("-+0-9a-fA-F.xXL", '0', $1);   % Numbers
+define_syntax (",;.?:", ',', $1);
+define_syntax ('#', '#', $1);
+define_syntax ("%-+/&*=<>|!~^", '+', $1);
+set_syntax_flags ($1, 4);
+
+#ifdef HAS_DFA_SYNTAX
+%%% DFA_CACHE_BEGIN %%%
+static define setup_dfa_callback (name)
+{
+   dfa_enable_highlight_cache("jsmode.dfa", name);
+   dfa_define_highlight_rule("^[ \t]*#", "PQpreprocess", name);
+   dfa_define_highlight_rule("//.*", "comment", name);
+   dfa_define_highlight_rule("/\\*.*\\*/", "Qcomment", name);
+   dfa_define_highlight_rule("^([^/]|/[^\\*])*\\*/", "Qcomment", name);
+   dfa_define_highlight_rule("/\\*.*", "comment", name);
+   dfa_define_highlight_rule("^[ \t]*\\*+([ \t].*)?$", "comment", name);
+   dfa_define_highlight_rule("[A-Za-z_\\$][A-Za-z_0-9\\$]*", "Knormal", name);
+   dfa_define_highlight_rule("[0-9]+(\\.[0-9]*)?([Ee][\\+\\-]?[0-9]*)?",
+			 "number", name);
+   dfa_define_highlight_rule("0[xX][0-9A-Fa-f]*[LU]*", "number", name);
+   dfa_define_highlight_rule("[0-9]+[LU]*", "number", name);
+   dfa_define_highlight_rule("\"([^\"\\\\]|\\\\.)*\"", "string", name);
+   dfa_define_highlight_rule("\"([^\"\\\\]|\\\\.)*\\\\?$", "string", name);
+   dfa_define_highlight_rule("'([^'\\\\]|\\\\.)*'", "string", name);
+   dfa_define_highlight_rule("'([^'\\\\]|\\\\.)*\\\\?$", "string", name);
+   dfa_define_highlight_rule("[ \t]+", "normal", name);
+   dfa_define_highlight_rule("[\\(\\[{}\\]\\),;\\.\\?:]", "delimiter", name);
+   dfa_define_highlight_rule("[%\\-\\+/&\\*=<>\\|!~\\^]", "operator", name);
+   dfa_build_highlight_table(name);
+}
+dfa_set_init_callback (&setup_dfa_callback, "js");
+%%% DFA_CACHE_END %%%
+#endif
+
+() = define_keywords_n ($1, "asdoifinis", 2, 0);
+() = define_keywords_n ($1, "forintnewtryusevar", 3, 0);
+() = define_keywords_n ($1, "bytecasecharelseenumgotolongnullthistruevoidwith", 4, 0);
+() = define_keywords_n ($1, "breakcatchclassconstfalsefinalfloatshortsuperthrowwhile", 5, 0);
+() = define_keywords_n ($1, "deletedoubleexportimportnativepublicreturnstaticswitchthrowstypeof", 6, 0);
+() = define_keywords_n ($1, "booleandefaultextendsfinallypackageprivate", 7, 0);
+() = define_keywords_n ($1, "abstractcontinuedebuggerfunctionvolatile", 8, 0);
+() = define_keywords_n ($1, "interfacenamespaceprotectedtransient", 9, 0);
+() = define_keywords_n ($1, "implementsinstanceof", 10, 0);
+
+define js_mode ()
+{
+   variable js = "js";
+   c_mode ();
+   set_mode (js, 2);
+   use_syntax_table (js);
+   run_mode_hooks("js_mode_hook");
+}
--- jed-0.99-18_orig/lib/krconv.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/krconv.sl	2008-07-30 01:20:50.000000000 +0200
@@ -11,7 +11,7 @@
 	  {
 	     goto_column (col);
 	     indent_line ();
-	     if (C_BRA_NEWLINE) newline ();
+	     newline ();
 	  }
 	go_right_1 ();
 	trim ();
--- jed-0.99-18_orig/lib/latex.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/latex.sl	2008-07-30 01:20:50.000000000 +0200
@@ -9,6 +9,7 @@
 % Differences from AUC-TeX 9: - no shell interaction commands
 %                             - simplified insert TeX macro (C-c RET)
 
+
 % ------------------------------------------------------------------------
 %
 % TO USE THIS MODE: add the line:
@@ -38,12 +39,8 @@
 % variable LaTeX_default_documentstyle = Null_String;  % for LaTeX 2.09
 % ------------------------------------------------------------------------
 
+
 % CHANGES HISTORY:
-% --- v0.17-1.0
-% Fix synchronization of latex_math_mode/latex_mode and made each of the modes
-% local to a buffer.  This allows one buffer to be in latex_mode and another
-% to be in latex math mode.  --JED
-%
 % --- v0.17-0.1?
 % have indentation recognize \[ \]
 %
@@ -110,6 +107,7 @@
 % problems with above line over 255 chars.
 LaTeX_environments += "abstract,center,titlepage,verse";
 
+
 % Load LaTeX-math-mode as required
 autoload("latex_toggle_math_mode", "ltx-math");
 autoload("latex_math_mode", "ltx-math");
@@ -117,6 +115,7 @@
 $1 = "LaTeX-Mode";
 !if (keymap_p($1)) make_keymap ($1);
 
+
 % from tex.sl
 definekey ("tex_insert_quote", "\"", $1);
 definekey ("tex_insert_quote", "'",  $1);
@@ -146,6 +145,7 @@
 definekey_reserved ("latex_indent_section",     "^Q^S", $1);
 definekey_reserved ("latex_indent_environment", "^Q^E", $1);
 
+
 % Font Selection - LaTeX2e
 
 define tex_embrace (pre, post)
@@ -177,6 +177,7 @@
    insert(post); pop_spot();
 }
 
+
 define tex_insert_font (pre, post, arg)
 {
    if (arg == -1)
@@ -197,6 +198,7 @@
    pop_spot ();
 }
 
+
 define tex_delete_font ()
 {
    push_spot();
@@ -211,6 +213,7 @@
    pop_spot ();
 }
 
+	
 define tex_font ()
 {
    variable arg = prefix_argument(-1);
@@ -239,6 +242,8 @@
    message (Null_String);
 }
 
+
+
 % Command Insertion
 
 % environments:
@@ -270,6 +275,7 @@
    return env;
 }
 
+
 define latex_embrace_env(pre, post)
 {
    if (markp())
@@ -291,12 +297,14 @@
    insert(post); pop_spot();
 }
 
+
 define latex_insert_simple_env (env)
 {
    latex_embrace_env(sprintf("\\begin{%s}\n", env),
 		     sprintf("\\end{%s}\n", env));
 }
 
+
 define latex_insert_item_env (env)
 {
    variable braces = " ";
@@ -306,6 +314,7 @@
    () = bfind_char (']');
 }
 
+
 define latex_insert_array_env (env)
 {
    variable position = read_mini ("Enter Position:", Null_String, "[htbp]");
@@ -314,6 +323,7 @@
 		     sprintf("\\end{%s}\n", env));
 }
 
+
 define latex_insert_label_env (env)
 {
    variable label = read_mini ("Enter Label:", Null_String, Null_String);
@@ -322,6 +332,7 @@
 		     sprintf("\\end{%s}\n", env));
 }
 
+
 define latex_insert_figure_env (env)
 {
    variable label_prefix = Null_String;
@@ -359,6 +370,7 @@
    pop_spot();
 }
 
+
 define latex_insert_list_env (env)
 {
    variable label = read_mini ("Enter Default Label:", Null_String, Null_String);
@@ -366,6 +378,7 @@
 		     sprintf("\\end{%s}\n", env));
 }
 
+
 define latex_insert_minipage_env (env)
 {
    variable position = read_mini ("Enter Position:", Null_String, "[htbp]");
@@ -374,6 +387,7 @@
 		     sprintf("\\end{%s}\n", env));
 }
 
+
 define latex_insert_picture_env (env)
 {
    variable width = read_mini ("Enter Width:", Null_String, Null_String);
@@ -389,6 +403,7 @@
 		     sprintf("\\end{%s}\n", env));
 }
 
+
 define latex_insert_bib_env (env)
 {
    variable label = read_mini ("Enter Label for Bibitem:", Null_String, "99");
@@ -407,6 +422,7 @@
    pop_spot (); () = ffind_char ('}');
 }
 
+
 define latex_insert_document_env ()
 {
    variable class = read_with_completion(LaTeX_classes, "Enter Document Class:", LaTeX_default_documentclass, Null_String, 's');
@@ -419,6 +435,7 @@
    !if (strcmp(class, "letter")) latex_insert_letter_args();
 }
 
+
 define latex_change_env (env)
 {
    push_spot();
@@ -472,6 +489,7 @@
      {                          latex_insert_simple_env ( () );}
 }
 
+
 define latex_environment ()
 {
    variable arg = prefix_argument(-1);
@@ -487,6 +505,7 @@
      latex_change_env (env);
 }
 
+
 define latex_close_environment ()
 {
    push_spot ();
@@ -498,6 +517,8 @@
      }
 }
 
+
+
 % sectioning
 
 define latex_section ()
@@ -530,6 +551,7 @@
      }
 }
 
+
 define tex_uncomment_region ()
 {
    narrow ();
@@ -545,6 +567,7 @@
    widen ();
 }
 
+
 define tex_comment_region ()
 {
    if (-1 == prefix_argument (-1))
@@ -560,6 +583,7 @@
    tex_uncomment_region();
 }
 
+
 define tex_comment_paragraph ()
 {
    push_spot ();
@@ -582,6 +606,8 @@
    pop_spot ();
 }
 
+
+
 % marking
 
 define tex_mark_environment ()
@@ -598,6 +624,7 @@
    else pop_spot();
 }
 
+
 define tex_mark_section ()
 {
    if (re_bsearch ("\\\\[sub]*section"))
@@ -614,6 +641,8 @@
      }
 }
 
+
+
 % indentation
 
 variable LaTeX_indent_level     = 2;
@@ -718,6 +747,7 @@
    %eol();
 }
 
+
 define latex_indent_next_line ()
 {
    push_spot();
@@ -757,6 +787,8 @@
    latex_indent_region();
 }
 
+
+
 % misc
 
 define tex_insert_braces ()
@@ -765,6 +797,7 @@
    go_left_1 ();
 }
 
+
 define latex_insert_item ()
 {
    eol ();
@@ -772,6 +805,8 @@
    latex_indent_line();
 }
 
+
+
 % symbol completion
 
 define tex_complete_symbol ()
@@ -822,6 +857,7 @@
    pop_spot();
 }
 
+
 variable LaTeX_macros = Null_String;
 
 define tex_insert_macro ()
@@ -853,6 +889,8 @@
    go_left_1 (); !if (looking_at_char('}')) go_right_1 ();
 }
 
+
+
 % info file interface
 
 variable LaTeX_help = Null_String;
@@ -973,16 +1011,21 @@
    set_buffer_hook ("newline_indent_hook", "latex_newline_indent_line");
 
    % latex math mode will map this to something else.
-   %local_unsetkey (quote);
-   %local_setkey ("quoted_insert", quote);
+   local_unsetkey (quote);
+   local_setkey ("quoted_insert", quote);
 
    mode_set_mode_info ("LaTeX", "init_mode_menu", &init_menu);
    mode_set_mode_info ("LaTeX", "fold_info", "%{{{\r%}}}\r\r");
 
-   use_syntax_table ("TeX-Mode");
    run_mode_hooks("latex_mode_hook");
+   use_syntax_table ("TeX-Mode");
+   
+   % This is called after the hook to give the hook a chance to load the
+   % abbrev table.
+   if (abbrev_table_p (tex)) use_abbrev_table (tex);
 }
 
+	   
 % overload alternative function definitions for LaTeX 2.09 if required
 if (strcmp(LaTeX_default_documentstyle, ""))
   () = evalfile("latex209");
--- jed-0.99-18_orig/lib/ltx-math.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/ltx-math.sl	2008-07-30 01:20:50.000000000 +0200
@@ -16,6 +16,7 @@
 % reduce memory usage by using array (thanks to John E. Davis)
 
 
+variable Latex_Math_Mode_Toggle = 0;
 variable Latex_Math_Array = String_Type [128];
 _for (0, 127, 1) {$1 = (); Latex_Math_Array[$1] = Null_String; }
 
--- jed-0.99-18_orig/lib/makemode.sl	1970-01-01 01:00:00.000000000 +0100
+++ jed-0.99-18/lib/makemode.sl	2008-07-30 01:20:50.000000000 +0200
@@ -0,0 +1,167 @@
+% This module implements simple highlighting and indenting for makefiles. 
+% The important functionality is the special highlighting of lines that
+% start with a tab (using the 'preprocess' color), and the automatic
+% indenting of rules using tabs. Orphaned tabs are displayed using the
+% 'region' color.
+% 
+% 
+% This is rather spartan, but should be better than using sh-mode.
+% 
+% Problems: 
+%   * Very few keywords defined. But keyword highlighting isn't exactly
+%     the point of this mode... :-)
+%   * The handling for $()-expressions is rather obnoxious. Something
+%     smarter and better looking would be nice.
+%   * I'm not sure whether marking rules with the 'preprocess' color is
+%     better than marking the tab with 'region', and highlighting the
+%     rest of the line as normal. 
+%  
+% 2001-10-13 / Juho Snellman <jsnell@iki.fi>
+%   * First public release.
+%
+% 2001-10-24 / Juho Snellman <jsnell@iki.fi>
+%   * Added a enable_dfa_syntax_for_mode, since this mode is mostly
+%     useless with standard highlighting. 
+%   * Mark the tabs with region, as discussed above. 
+%
+% 2001-12-07 / Juho Snellman <jsnell@iki.fi>
+%   * Added comment strings.
+%   * Changed mode name to 'make'.
+%   * Added a use_keymap()
+%   * Fixed problem with colons in comments. 
+%
+% 2004-01-08 / Guenter Milde <g.milde@web.de>
+%   * code optimization
+%   
+% 2004-01-09 / Juho Snellman <jsnell@iki.fi>
+%   * Reverted the change to not using a keymap (textmode does a local_setkey
+%     on \t -> text_indent_relative)
+
+
+static variable mode = "make"; % less literal strings save memory
+
+create_syntax_table (mode);
+define_syntax ("#", "", '%', mode);
+define_syntax ("([{", ")]}", '(', mode);
+
+#ifdef HAS_DFA_SYNTAX
+%%% DFA_CACHE_BEGIN %%%
+static define setup_dfa_callback (name)
+{
+    % dfa_enable_highlight_cache ("makemode.dfa", name);
+    dfa_define_highlight_rule ("\\\\.", "normal", name);
+    dfa_define_highlight_rule ("#.*$", "comment", name);
+    % dfa_define_highlight_rule ("^.*:", "keyword", name);    
+    dfa_define_highlight_rule ("\\$\\(.*\\)", "keyword", name);
+    dfa_define_highlight_rule ("\"([^\\\\\"]|\\\\.)*\"", "string", name);
+    dfa_define_highlight_rule ("\"([^\\\\\"]|\\\\.)*$", "string", name);
+    dfa_define_highlight_rule ("'[^']*'", "string", name);
+    dfa_define_highlight_rule ("'[^']*$", "string", name);
+    dfa_define_highlight_rule ("[\\|&;\\(\\)<>\\:]", "Qdelimiter", name);
+    dfa_define_highlight_rule ("[\\[\\]\\*\\?=]", "Qoperator", name);
+    dfa_define_highlight_rule ("[A-Za-z_]+",
+                               "Knormal", name);
+    dfa_define_highlight_rule ("^\t[ \t]*", "region", name);
+    % dfa_define_highlight_rule ("^\t.*", "preprocess", name);
+    dfa_define_highlight_rule (".", "normal", name);
+    dfa_build_highlight_table (name);
+}
+dfa_set_init_callback (&setup_dfa_callback, mode);
+enable_dfa_syntax_for_mode(mode); 
+%%% DFA_CACHE_END %%%
+#endif
+
+() = define_keywords (mode, "shell", 5);
+() = define_keywords (mode, "export", 6);
+
+define is_rule_start_line ()
+{
+    push_spot();
+    
+    EXIT_BLOCK
+    {
+        pop_spot();
+    }    
+    
+    bol_skip_white();
+    
+    % Disallow rules starting with whitespace. 
+    !if (bolp)
+      return 0;
+    
+    % Conditions on the ':' that is allowed to start a rule
+    %  * Not in a comment or string
+    %  * Followed by whitespace or eol
+    
+    while (ffind(":")) {
+	if ( (parse_to_point() == 0) )
+	{
+	    () = right(1);
+	    skip_white();
+	    if (eolp())
+	      return 1;
+	}
+	else 
+	{
+	    () = right(1);
+	}
+    }
+    
+    
+    return 0;
+}
+
+% A line is in a rule if the previous line is in a rule (i.e, starts with
+% a tab) or starts a rule (which we define to mean "contains a ':'").
+define is_in_rule ()
+{
+    if ( is_rule_start_line )
+      return 0;
+    
+    push_spot();
+    
+    EXIT_BLOCK
+    {
+        pop_spot();
+    }    
+    
+    () = up(1);
+    bol();
+    
+    % A tab at the start of line found -> this line is part of a rule.
+    if (what_char()=='\t')
+      return 1;
+    
+    return is_rule_start_line();
+}
+
+% Only indent lines that are inside a rule definition. Use hardcoded
+% tabs instead of whitespace() due to make's moronic whitespace 
+% dependencies.
+define make_indent_line ()
+{
+    if (is_in_rule()) {
+        bol();
+        if (what_char != '\t') {        
+            insert_char('\t');
+        }
+        bol_skip_white();
+    }    
+}
+
+% We need to set our own tab handling, since textmode does a
+% local_setkey("text_indent_relative", "\t").
+!if (keymap_p (mode)) make_keymap (mode);
+definekey( "indent_line", "\t", mode );
+
+define make_mode ()
+{
+    set_mode(mode, 0);
+    use_syntax_table (mode);
+    use_keymap (mode);
+    mode_set_mode_info (mode, "fold_info", "#{{{\r#}}}\r\r");
+    set_buffer_hook ("indent_hook", &make_indent_line);
+    set_comment_info (mode, "#", "", 0);
+    run_mode_hooks("make_mode_hook");
+}
+
--- jed-0.99-18_orig/lib/menus.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/menus.sl	2008-07-30 01:20:50.000000000 +0200
@@ -1,5 +1,3 @@
-public variable Menu_Popups_Loaded = 0;
-
 $1 = "Global";
 menu_create_menu_bar ($1);
 
--- jed-0.99-18_orig/lib/mouse.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/mouse.sl	2008-07-30 01:20:50.000000000 +0200
@@ -46,7 +46,11 @@
    if (Mouse_Delete_Region) 
      () = dupmark();
    () = dupmark();		       %/* for cut buffer */  
+#ifdef XWINDOWS
    x_copy_region_to_selection ();
+#else
+   x_copy_region_to_cutbuffer ();
+#endif
    copy_region(Mouse_Buffer);
    if (Mouse_Delete_Region) 
      {
@@ -61,8 +65,7 @@
    if (but == 8)
      {
 	l = window_line();
-	loop (Mouse_Wheel_Scroll_Lines) skip_hidden_lines_backward (1);
-
+	go_up (Mouse_Wheel_Scroll_Lines);
 	bol();
 	recenter(l);
 	return 0;
@@ -70,7 +73,7 @@
    if (but == 16)
      {
 	l = window_line();
-	loop (Mouse_Wheel_Scroll_Lines) skip_hidden_lines_forward (1);
+	go_down (Mouse_Wheel_Scroll_Lines);
 	bol();
 	recenter(l);
 	return 0;
@@ -96,7 +99,11 @@
 	if (but == 2)
 	  {
 	     mouse_set_current_window ();
+#ifdef XWINDOWS
 	     () = x_insert_selection ();
+#else
+	     () = x_insert_cutbuffer ();
+#endif
 	     return 0;
 	  }
 	
--- jed-0.99-18_orig/lib/nasm.dfa	1970-01-01 01:00:00.000000000 +0100
+++ jed-0.99-18/lib/nasm.dfa	2008-07-30 01:20:50.000000000 +0200
@@ -0,0 +1,77 @@
+DFA cache: NASM
+equiv
+00 00 00 00 00 00 00 00 00 09 00 00 00 00 00 00
+00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+09 00 22 23 24 25 26 27 28 28 26 2B 28 2D 2E 26
+30 30 30 30 30 30 30 30 30 30 28 3B 26 00 26 2E
+40 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E
+2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 28 00 28 26 2E
+00 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E
+2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 2E 7B 26 7D 7E 00
+00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+accept 14
+112 0 0 0 0 0
+108 0 0 0 0 0
+105 0 0 10 0 0
+80 0 0 5 0 0
+76 0 1 10 0 0
+73 1 0 10 1 0
+60 1 0 10 1 0
+52 0 0 9 0 0
+49 0 1 7 0 0
+42 0 0 7 0 0
+32 0 1 7 0 0
+25 0 0 7 0 0
+15 0 0 0 0 1
+8 0 1 8 0 0
+dfa 43
+0 52 52: 2 3 4 2 2 5 6 7 8 6 6 9 2 10 2 2 2 6
+1 52 52: 2 11 4 12 2 13 6 7 8 6 6 9 2 10 2 2 2 6
+2 112 112: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
+3 108 108: -1 14 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
+4 112 32: 15 15 16 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15
+5 80 80: -1 -1 -1 -1 17 18 19 -1 -1 19 20 21 21 -1 21 22 -1 23
+6 80 80: -1 -1 -1 -1 -1 19 19 -1 -1 19 19 -1 -1 -1 -1 -1 -1 19
+7 112 49: 24 24 24 24 24 24 24 25 24 24 24 24 24 24 24 24 24 24
+8 52 52: -1 -1 -1 -1 -1 -1 -1 -1 26 -1 -1 -1 -1 -1 -1 -1 -1 -1
+9 15 15: -1 -1 -1 27 27 -1 -1 -1 -1 -1 -1 27 27 -1 27 -1 -1 27
+10 112 8: 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28
+11 108 108: -1 29 -1 30 -1 31 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
+12 60 60: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
+13 80 76: 32 32 32 32 17 18 33 32 32 19 20 34 21 32 34 35 32 36
+14 108 108: -1 14 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
+15 -1 32: 15 15 16 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15
+16 25 25: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
+17 105 105: -1 -1 -1 -1 21 -1 -1 -1 -1 -1 37 21 21 -1 21 -1 -1 21
+18 80 80: -1 -1 -1 -1 21 19 19 -1 -1 19 20 21 21 -1 21 -1 -1 23
+19 80 80: -1 -1 -1 -1 -1 19 19 -1 -1 19 19 -1 -1 -1 -1 -1 -1 19
+20 80 80: -1 -1 -1 -1 21 19 19 -1 -1 19 19 21 21 -1 21 -1 -1 23
+21 105 105: -1 -1 -1 -1 21 -1 -1 -1 -1 -1 -1 21 21 -1 21 -1 -1 21
+22 105 105: 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 39 38
+23 80 80: -1 -1 -1 -1 21 19 19 -1 -1 19 19 21 21 -1 21 -1 -1 23
+24 -1 49: 24 24 24 24 24 24 24 25 24 24 24 24 24 24 24 24 24 24
+25 42 42: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
+26 52 52: -1 -1 -1 -1 -1 -1 -1 -1 26 -1 -1 -1 -1 -1 -1 -1 -1 -1
+27 15 15: -1 -1 -1 27 27 -1 -1 -1 -1 -1 -1 27 27 -1 27 -1 -1 27
+28 -1 8: 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28
+29 108 108: -1 29 -1 30 -1 31 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
+30 60 60: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
+31 -1 -1: 32 32 32 32 -1 -1 32 32 32 -1 -1 32 -1 32 32 40 32 32
+32 73 73: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
+33 73 73: -1 -1 -1 -1 -1 19 19 -1 -1 19 19 -1 -1 -1 -1 -1 -1 19
+34 73 73: -1 -1 -1 -1 21 -1 -1 -1 -1 -1 -1 21 21 -1 21 -1 -1 21
+35 73 73: 41 41 41 41 38 38 41 41 41 38 38 41 38 41 41 41 42 41
+36 73 73: -1 -1 -1 -1 21 19 19 -1 -1 19 19 21 21 -1 21 -1 -1 23
+37 -1 -1: -1 -1 -1 -1 21 -1 -1 -1 -1 -1 -1 21 21 -1 21 -1 -1 21
+38 105 105: 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 39 38
+39 105 105: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
+40 73 73: 32 32 32 32 -1 -1 32 32 32 -1 -1 32 -1 32 32 32 32 32
+41 73 73: 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 39 38
+42 73 73: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
--- jed-0.99-18_orig/lib/nasm.sl	1970-01-01 01:00:00.000000000 +0100
+++ jed-0.99-18/lib/nasm.sl	2008-07-30 01:20:50.000000000 +0200
@@ -0,0 +1,327 @@
+% This file defines a NASM editor mode for the JED editor.
+% JED's home page is http://space.mit.edu/~davis/jed.html.
+%
+% To install, copy this file into your JED_LIBRARY directory
+% (/usr/local/jed/lib or C:\JED\LIB or whatever), then add the
+% following lines to your .jedrc or jed.rc file:
+%   autoload("nasm_mode", "nasm");
+%   add_mode_for_extension("nasm", "asm");
+% (you can of course replace "asm" with whatever file extension
+% you like to use for your NASM source files).
+
+variable Nasm_Instruction_Indent = 16;
+variable Nasm_Operand_Indent = 25;
+variable Nasm_Comment_Column = 48;
+variable Nasm_Comment_Space = 1;
+
+variable nasm_kw_2 = strcat("btdbdddqdtdw",
+			    "injajbjcjejgjljojpjsjzorssto");
+variable nasm_kw_3 = strncat("a16a32aaaaadaamaasadcaddandbsfbsrbtcbtrbtscbw",
+			     "cdqclccldclicmccmpcr0cr2cr3cr4cwddaadasdecdiv",
+			     "dr0dr1dr2dr3dr6dr7equ",
+			     "farfldfsthltincintjaejbejgejlejmpjnajnbjncjne",
+			     "jngjnljnojnpjnsjnzjpejpolarldslealeslfslgslsl",
+			     "lssltrmm0mm1mm2mm3mm4mm5mm6mm7movmulnegnopnot",
+			     "o16o32outpopporrclrcrrepretrolrorrsmsalsarsbb",
+			     "segshlshrsmist0st1st2st3st4st5st6st7stcstdsti",
+			     "strsubtr3tr4tr5tr6tr7wrtxor", 9);
+variable nasm_kw_4 = strncat("arplbytecallcltscwdeemmsfabsfaddfbldfchsfcom",
+			     "fcosfdivfenifildfistfld1fldzfmulfnopfsinfstp",
+			     "fsubftstfxamfxchibtsidivimulinsbinsdinswint1",
+			     "int3intoinvdiretjcxzjnaejnbejngejnlelahflgdt",
+			     "lidtlldtlmswlocklongloopmovdmovqnearpandpopa",
+			     "popfpushpxorreperepzresbresdresqrestreswretf",
+			     "retnsahfsalcsetasetbsetcsetesetgsetlsetosetp",
+			     "setssetzsgdtshldshrdsidtsldtsmswtestumovverr",
+			     "verwwaitwordxaddxbtsxchgpoplinclxorlmovl", 9);
+variable nasm_kw_5 = strncat("boundbswapcmovacmovbcmovccmovecmovgcmovlcmovo",
+			     "cmovpcmovscmovzcmpsbcmpsdcmpswcpuiddwordenter",
+			     "f2xm1faddpfbstpfclexfcomifcompfdisifdivpfdivr",
+			     "ffreefiaddficomfidivfimulfinitfistpfisubfldcw",
+			     "fldpifmulpfpremfptanfsavefsqrtfstcwfstswfsubp",
+			     "fsubrfucomfyl2xicebpint01iretdiretwjecxzleave",
+			     "lodsblodsdlodswloopeloopzmovsbmovsdmovswmovsx",
+			     "movzxoutsboutsdoutswpaddbpadddpaddwpandnpopad",
+			     "popawpopfdpopfwpslldpsllqpsllwpsradpsrawpsrld",
+			     "psrlqpsrlwpsubbpsubdpsubwpushapushfqwordrdmsr",
+			     "rdpmcrdtscrepnerepnzscasbscasdscaswsetaesetbe",
+			     "setgesetlesetnasetnbsetncsetnesetngsetnlsetno",
+			     "setnpsetnssetnzsetpesetposhortstosbstosdstosw",
+			     "timestwordwrmsrxlatbpushltestb", 14);
+variable nasm_kw_6 = strncat("cmovaecmovbecmovgecmovlecmovnacmovnbcmovnc",
+			     "cmovnecmovngcmovnlcmovnocmovnpcmovnscmovnz",
+			     "cmovpecmovpofcmovbfcmovefcmovufcomipfcompp",
+			     "fdivrpficompfidivrfisubrfldenvfldl2efldl2t",
+			     "fldlg2fldln2fpatanfprem1frstorfscalefsetpm",
+			     "fstenvfsubrpfucomifucompincbininvlpgloopne",
+			     "loopnzpaddsbpaddswpmulhwpmullwpsubsbpsubsw",
+			     "pushadpushawpushfdpushfwsetnaesetnbesetnge",
+			     "setnlewbinvd", 9);
+variable nasm_kw_7 = strncat("cmovnaecmovnbecmovngecmovnlecmpxchgfcmovbe",
+			     "fcmovnbfcmovnefcmovnufdecstpfincstpfrndint",
+			     "fsincosfucomipfucomppfxtractfyl2xp1loadall",
+			     "paddusbpadduswpcmpeqbpcmpeqdpcmpeqwpcmpgtb",
+			     "pcmpgtdpcmpgtwpmaddwdpsubusbpsubusw", 5);
+variable nasm_kw_8 = "fcmovnbepackssdwpacksswbpackuswb";
+variable nasm_kw_9 = strcat("cmpxchg8bpunpckhbwpunpckhdqpunpckhwdpunpcklbw",
+			    "punpckldqpunpcklwd");
+variable nasm_kw_10 = "cmpxchg486loadall286";
+
+define nasm_indent_line() {
+    variable word, len, e, c;
+
+    e = eolp();
+
+    push_spot();
+    EXIT_BLOCK {
+	pop_spot();
+	if (what_column() <= Nasm_Instruction_Indent) {
+	    skip_white();
+        }
+        else if (what_column() <= Nasm_Operand_Indent) {
+          if (what_column() > Nasm_Instruction_Indent + 1)
+            whitespace(Nasm_Operand_Indent - what_column());
+        }      
+    }
+
+    bol_skip_white();
+    c = what_column();
+
+    if (orelse
+       {looking_at_char(';')}
+       {looking_at_char('#')}
+       {looking_at_char('[')}) {
+	bol_trim();
+	pop_spot();
+	EXIT_BLOCK {
+	}
+	return;
+    }
+
+    if (looking_at_char('%')) {
+	go_right_1();
+	!if (orelse
+	    {looking_at_char('$')}
+	    {looking_at_char('%')}
+	    {looking_at_char('+')}
+	    {looking_at_char('-')}
+	    {looking_at_char('0')}
+	    {looking_at_char('1')}
+	    {looking_at_char('2')}
+	    {looking_at_char('3')}
+	    {looking_at_char('4')}
+	    {looking_at_char('5')}
+	    {looking_at_char('6')}
+	    {looking_at_char('7')}
+	    {looking_at_char('8')}
+	    {looking_at_char('9')}) {
+	    bol_trim();
+	    pop_spot();
+	    EXIT_BLOCK {
+	    }
+	    return;
+	}
+	go_left_1();
+    }
+
+    push_mark();
+    skip_chars("%$+-");
+    skip_chars("0-9a-zA-Z_.");
+    word = bufsubstr();
+
+    if (orelse
+       {c == 1}
+       {looking_at_char(':')}) {
+	push_spot();
+	bol_trim();
+	pop_spot();
+	len = strlen(word);
+	if (looking_at_char(':')) {
+	    go_right_1();
+	    len++;
+	}
+	trim();
+	if (e or not(eolp())) {
+	    if (len >= Nasm_Instruction_Indent) {
+		pop();
+		whitespace(1);
+	    } else
+		whitespace(Nasm_Instruction_Indent - len);
+	    if (e) {
+		pop_spot();
+		eol();
+		push_spot();
+	    }
+	}
+    } else {
+	bol_trim();
+	whitespace(Nasm_Instruction_Indent);
+    }
+}
+
+define nasm_newline_indent () {
+    push_spot();
+    bol_skip_white();
+    if (eolp())
+	trim();
+    pop_spot();
+    newline();
+    nasm_indent_line();
+}
+
+define nasm_bol_self_ins () {
+    push_spot();
+    bskip_white();
+    bolp();
+    pop_spot();
+
+    call("self_insert_cmd");
+
+    % Grotty: force immediate update of the syntax highlighting.
+    insert_char('.');
+    deln(left(1));
+
+    if (())
+	nasm_indent_line();
+}
+
+define nasm_self_ins_ind () {
+    call("self_insert_cmd");
+
+    % Grotty: force immediate update of the syntax highlighting.
+    insert_char('.');
+    deln(left(1));
+
+    nasm_indent_line();
+}
+
+define nasm_insert_comment () {
+    variable spc;
+
+    bol_skip_white();
+    if (looking_at_char(';')) {
+	bol_trim();
+	go_right(1);
+	skip_white();
+	return;
+    } else if (eolp()) {
+	bol_trim();
+	insert("; ");
+	return;
+    }
+
+    forever {
+	skip_chars("^;\n'\"");
+	if (looking_at_char('\'')) {
+	    go_right_1();
+	    skip_chars("^'\n");
+	    !if (eolp())
+		go_right_1();
+	} else if (looking_at_char('\"')) {
+	    go_right_1();
+	    skip_chars("^\"\n");
+	    !if (eolp())
+		go_right_1();
+	} else if (looking_at_char(';')) {
+	    !if (bolp()) {
+		go_left_1();
+		trim();
+		!if (looking_at_char(';'))
+		    go_right_1();
+	    }
+	    break;
+	} else {
+	    break;
+	}
+    }
+    spc = Nasm_Comment_Column - what_column();
+    if (spc < Nasm_Comment_Space)
+	spc = Nasm_Comment_Space;
+    whitespace(spc);
+    if (eolp()) {
+	insert("; ");
+    } else {
+	go_right_1();
+	skip_white();
+    }
+}
+
+$1 = "NASM";
+create_syntax_table($1);
+
+define_syntax (";", "", '%', $1);
+define_syntax ("([", ")]", '(', $1);
+define_syntax ('"', '"', $1);
+define_syntax ('\'', '\'', $1);
+define_syntax ("0-9a-zA-Z_@#", 'w', $1);
+define_syntax ("-+0-9a-fA-FhxXL", '0', $1);
+define_syntax (",:.", ',', $1);
+define_syntax ('%', '#', $1);
+define_syntax ("|^&<>+-*/%~", '+', $1);
+
+set_syntax_flags($1,1);
+
+#ifdef HAS_DFA_SYNTAX
+
+dfa_enable_highlight_cache("nasm.dfa", $1);
+dfa_define_highlight_rule(";.*$", "comment", $1);
+dfa_define_highlight_rule("[A-Za-z_\\.\\?][A-Za-z0-9_\\.\\?\\$#@~]*",
+		      "Knormal", $1);
+dfa_define_highlight_rule("$([A-Za-z_\\.\\?][A-Za-z0-9_\\.\\?\\$#@~]*)?",
+		      "normal", $1);
+%dfa_define_highlight_rule("[0-9]+(\\.[0-9]*)?([Ee][\\+\\-]?[0-9]*)?",
+%		      "number", $1);
+%dfa_define_highlight_rule("[0-9]+[QqBb]", "number", $1);
+%dfa_define_highlight_rule("(0x|\\$[0-9A-Fa-f])[0-9A-Fa-f]*", "number", $1);
+%dfa_define_highlight_rule("[0-9A-Fa-f]+[Hh]", "number", $1);
+dfa_define_highlight_rule("\"[^\"]*\"", "string", $1);
+dfa_define_highlight_rule("\"[^\"]*$", "string", $1);
+dfa_define_highlight_rule("'[^']*'", "string", $1);
+dfa_define_highlight_rule("'[^']*$", "string", $1);
+dfa_define_highlight_rule("[\\(\\)\\[\\],:]*", "delimiter", $1);
+dfa_define_highlight_rule("^[ \t]*#", "PQpreprocess", $1);
+dfa_define_highlight_rule("^[ \t]*\\%{?[^%\\$\\+\\-0-9]", "PQpreprocess", $1);
+dfa_define_highlight_rule("^%$", "preprocess", $1);
+dfa_define_highlight_rule("[\\|\\^&<>\\+\\-\\*/%~]*", "operator", $1);
+dfa_define_highlight_rule("%([%\\$]?-?[0-9A-Za-z_\\.\\?\\$~@]+|{[^}]*}?)",
+		      "preprocess", $1);
+dfa_define_highlight_rule("[ \t]*", "normal", $1);
+dfa_define_highlight_rule(".", "normal", $1);
+dfa_build_highlight_table($1);
+#endif
+
+define_keywords_n($1, nasm_kw_2, 2, 0);
+define_keywords_n($1, nasm_kw_3, 3, 0);
+define_keywords_n($1, nasm_kw_4, 4, 0);
+define_keywords_n($1, nasm_kw_5, 5, 0);
+define_keywords_n($1, nasm_kw_6, 6, 0);
+define_keywords_n($1, nasm_kw_7, 7, 0);
+define_keywords_n($1, nasm_kw_8, 8, 0);
+define_keywords_n($1, nasm_kw_9, 9, 0);
+define_keywords_n($1, nasm_kw_10, 10, 0);
+
+define_keywords_n($1, "org", 3, 1);
+define_keywords_n($1, "bitsiend", 4, 1);
+define_keywords_n($1, "aligngroupstruc", 5, 1);
+define_keywords_n($1, "alignbcommonexternglobalistruc", 6, 1);
+define_keywords_n($1, "sectionsegmentlibrary", 7, 1);
+define_keywords_n($1, "absoluteendstruc", 8, 1);
+define_keywords_n($1, "uppercase", 9, 1);
+
+!if (keymap_p ($1)) make_keymap ($1);
+%definekey("nasm_bol_self_ins", ";", $1);
+definekey("nasm_bol_self_ins", "#", $1);
+definekey("nasm_bol_self_ins", "%", $1);
+definekey("nasm_bol_self_ins", "[", $1);
+definekey("nasm_self_ins_ind", ":", $1);
+%definekey("nasm_insert_comment", "^[;", $1);
+definekey("nasm_insert_comment", ";", $1);
+
+define nasm_mode () {
+    set_mode("NASM", 4);
+    use_keymap ("NASM");
+    use_syntax_table ("NASM");
+    set_buffer_hook ("indent_hook", "nasm_indent_line");
+    set_buffer_hook ("newline_indent_hook", "nasm_newline_indent");
+    runhooks("nasm_mode_hook");
+}
--- jed-0.99-18_orig/lib/os.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/os.sl	2008-07-30 01:20:50.000000000 +0200
@@ -73,12 +77,16 @@
 . 0xFF09 '$' "\e[Z" x_set_keysym      % Key_Shift_Tab (reverse tab)
 #endif
 
+#ifndef OS2 UNIX WIN32
+autoload ("run_shell_cmd",		"shell");
+#endif
 % For compatability
 define shell_cmd ()
 {
    () = run_shell_cmd ();
 }
 
+
 define goto_visible_eol ()
 {
 #ifdef HAS_LINE_ATTR
@@ -166,7 +174,21 @@
 
 #ifdef WIN32 
 MSDOS_Has_Long_File_Names = 1;
-variable W32shell_Perform_Globbing;
+variable W32shell_Perform_Globbing = 0;
+define _win32_get_helper_app_name ()
+{
+   variable s, h;
+
+   s = getenv ("COMSPEC");
+   if (s == NULL)
+     s = "cmd.exe";
+   if (W32shell_Perform_Globbing)
+     h = dircat (Jed_Bin_Dir, "w32/g32shell.exe");
+   else
+     h = dircat (Jed_Bin_Dir, "w32/w32shell.exe");
+
+   sprintf ("%s %s /c", h, s);
+}
 #else
 # ifdef MSDOS
 #  ifdef 16_BIT_SYSTEM
@@ -179,3 +201,7 @@
 # endif
 #endif
 
+#ifdef SUBPROCESSES
+autoload ("aprocess_stringify_status", "aprocess");
+#endif
+
--- jed-0.99-18_orig/lib/perl.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/perl.sl	2008-07-30 01:20:50.000000000 +0200
@@ -188,92 +188,85 @@
 definekey("perl_mark_chunk", "\e^H", $1);
 definekey("perl_next_chunk", "\e^N", $1);
 definekey("perl_prev_chunk", "\e^P", $1);
-definekey("perltidy",        "\e^T", $1);
 definekey("perl_mark_matching", "\e^M", $1);
 definekey("perl_format_paragraph", "\eq", $1);
-definekey("newline_and_indent", "\r", $1);
-% some people may like this: 
-%  definekey(".\"\\\\n\" insert", "^J", $1);
-
+% definekey ("perl_newline_and_indent", "\r", $1);
 definekey("perl_indent_region", "\e\t", $1);	% override 'move-to-tab'
 %}}} key map
 %{{{ create/initialize syntax tables
 $1 = "perl";
 create_syntax_table($1);
 define_syntax("#", "", '%', $1);		% single line comment
-define_syntax(pod_beg, pod_end, '%', $1);	% multi-line comment (POD)
-define_syntax("([{", ")]}", '(', $1);		% matching brackets
-define_syntax('\'', '"', $1);			% string
-define_syntax('"', '"', $1);			% string
-define_syntax('\\', '\\', $1);			% backslash escaping
-define_syntax("$%0-9@A-Z_a-z", 'w', $1);	% words plus sigils
-define_syntax("-+.0-9_xa-fA-F", '0', $1);	% numbers
-define_syntax(",.:;?", ',', $1);		% punctuation
-define_syntax("!&*+-/<=>`^|~", '+', $1);	% operators - leave %-sigil alone
+define_syntax ("=pod", "=cut", '%', $1);	% multiline comments
+define_syntax ("([{", ")]}", '(', $1);
+define_syntax ('\'', '"', $1);
+define_syntax ('"', '"', $1);
+define_syntax ('\\', '\\', $1);
+define_syntax ("$0-9A-Z_a-z", 'w', $1);     % words
+define_syntax ("-+.0-9_xa-fA-F", '0', $1);   % Numbers
+define_syntax (",;.?:", ',', $1);
+define_syntax ("%-+/&*=<>|!~^", '+', $1);
 set_syntax_flags ($1, 0x10|0x80);
 %}}} syntax table
 
-% with DFA, the =pod/=head/=cut block is not recognized
-#ifdef HAS_DFA_SYNTAX_NOT_OK
-%% #ifdef HAS_DFA_SYNTAX
-%{{{ DFA syntax tables - have these be verified??
-enable_highlight_cache("perl.dfa", $1);
-define_highlight_rule("^#.*$", "comment", $1);
-define_highlight_rule("[ \t;]#.*$", "comment", $1);
-% normal => qr{([$%&@*]|\$#)\w+/};
-% normal => qr{\$([-+_./,\"\'\`#*?\[(<>)\];!@:$%=~^|&]|\^[A-Z])}
-define_highlight_rule("([\\$%&@\\*]|\\$#)[A-Za-z_0-9]+", "normal", $1);
-define_highlight_rule("\\$([_\\./,\"\\\\#\\*\\?\\]\\[;!@:\\$<>\\(\\)" +
-		      "%=\\-~\\^\\|&`'\\+]|\\^[A-Z])",
-		      "normal", $1);
-% define_highlight_rule("[A-Za-z_\\$][A-Za-z0-9_]*", "Knormal", $1);
-define_highlight_rule("[A-Za-z_][A-Za-z0-9_]*", "Knormal", $1);
-define_highlight_rule("[0-9]+(\\.[0-9]+)?([Ee][\\-\\+]?[0-9]+)?", "number", $1);
-define_highlight_rule("0x[0-9A-Fa-f]+", "number", $1);
-% strings: 
-%   strange ... " abc \" def"; would appear to be invalid
-define_highlight_rule("\"([^\"\\\\]|\\\\.)*\"", "string", $1);
-define_highlight_rule("'([^'\\\\]|\\\\.)*'", "string", $1);
-%
-define_highlight_rule("[\\(\\[\\{\\<\\>\\}\\]\\),\\.:;\\?]", "delimiter", $1);
-define_highlight_rule("[\\-\\+!%&\\*/=<>\\|~\\^]", "operator", $1);
-define_highlight_rule("[A-Za-z0-9]", "keyword0", $1);
-%
-% unfortunately these rules are not robust enough and are also incomplete
-% eg, 's{/+}{/}g' or 's|/+|/|g';
-% 
-%fixme? define_highlight_rule("m?/([^/\\\\]|\\\\.)*/[gio]*", "string", $1);
-%fixme? define_highlight_rule("m/([^/\\\\]|\\\\.)*\\\\?$", "string", $1);
-%fixme? define_highlight_rule("s/([^/\\\\]|\\\\.)*(/([^/\\\\]|\\\\.)*)?/[geio]*",
-%fixme? 		      "string", $1);
-%fixme? define_highlight_rule("s/([^/\\\\]|\\\\.)*(/([^/\\\\]|\\\\.)*)?\\\\?$",
-%fixme? 		      "string", $1);
-%fixme? define_highlight_rule("tr/([^/\\\\]|\\\\.)*(/([^/\\\\]|\\\\.)*)?/[cds]*",
-%fixme? 		      "string", $1);
-%fixme? define_highlight_rule("tr/([^/\\\\]|\\\\.)*(/([^/\\\\]|\\\\.)*)?\\\\?$",
-%fixme? 		      "string", $1);
-define_highlight_rule(".", "normal", $1);
-build_highlight_table($1);
-%}}} DFA syntax tables
+% this experiment didn't work
+% set_syntax_flags ($1, 0x10|0x80|0x02);
+% set_fortran_comment_chars ($1, "=");
+
+% with DFA =pod / =cut directives are not recognized
+
+#ifdef HAS_DFA_SYNTAX %{{{
+%%% DFA_CACHE_BEGIN %%%
+static define setup_dfa_callback (name)
+{
+   dfa_enable_highlight_cache("perl.dfa", name);
+   dfa_define_highlight_rule("#.*$", "comment", name);
+   dfa_define_highlight_rule("([\\$%&@\\*]|\\$#)[A-Za-z_0-9]+", "normal", name);
+   dfa_define_highlight_rule(strcat("\\$([_\\./,\"\\\\#\\*\\?\\]\\[;!@:\\$<>\\(\\)",
+				"%=\\-~\\^\\|&`'\\+]|\\^[A-Z])"), "normal", name);
+   dfa_define_highlight_rule("[A-Za-z_][A-Za-z_0-9]*", "Knormal", name);
+   dfa_define_highlight_rule("[0-9]+(\\.[0-9]+)?([Ee][\\+\\-]?[0-9]*)?", "number",
+			 name);
+   dfa_define_highlight_rule("0[xX][0-9A-Fa-f]*", "number", name);
+   dfa_define_highlight_rule("[\\(\\[\\{\\<\\>\\}\\]\\),;\\.\\?:]", "delimiter", name);
+   dfa_define_highlight_rule("[%\\-\\+/&\\*=<>\\|!~\\^]", "operator", name);
+   dfa_define_highlight_rule("-[A-Za-z]", "keyword0", name);
+   dfa_define_highlight_rule("'[^']*'", "string", name);
+   dfa_define_highlight_rule("'[^']*$", "string", name);
+   dfa_define_highlight_rule("\"([^\"\\\\]|\\\\.)*\"", "string", name);
+   dfa_define_highlight_rule("\"([^\"\\\\]|\\\\.)*\\\\?$", "string", name);
+   dfa_define_highlight_rule("m?/([^/\\\\]|\\\\.)*/[gio]*", "string", name);
+   dfa_define_highlight_rule("m/([^/\\\\]|\\\\.)*\\\\?$", "string", name);
+   dfa_define_highlight_rule("s/([^/\\\\]|\\\\.)*(/([^/\\\\]|\\\\.)*)?/[geio]*",
+			 "string", name);
+   dfa_define_highlight_rule("s/([^/\\\\]|\\\\.)*(/([^/\\\\]|\\\\.)*)?\\\\?$",
+			 "string", name);
+   dfa_define_highlight_rule("(tr|y)/([^/\\\\]|\\\\.)*(/([^/\\\\]|\\\\.)*)?/[cds]*",
+			 "string", name);
+   dfa_define_highlight_rule("(tr|y)/([^/\\\\]|\\\\.)*(/([^/\\\\]|\\\\.)*)?\\\\?$",
+			 "string", name);
+   dfa_define_highlight_rule(".", "normal", name);
+   dfa_build_highlight_table (name);
+}
+dfa_set_init_callback (&setup_dfa_callback, "perl");
+%%% DFA_CACHE_END %%%
+%}}}
 #endif
+
 %{{{ keywords
 % Type 0 keywords
-% ignore the functions that do special, pre-defined things including
-%   `BEGIN', `CHECK', `INIT', `END', `AUTOLOAD', and
-%   `DESTROY'--plus all functions mentioned in the perltie manpage.
-% $1 = "perl";
 () = define_keywords($1,
-		     "doiflcmynoqqqrqwqxtruc",
+		      "doiflcmynoqqqwqxtruc",
 		     2);
 () = define_keywords($1,
-		     "abschrcosdieeofexpforhexintlogmapoctordour" +
-		     "popposrefsinsubtieusevec",
+		      "abschrcosdieeofexpforhexintlogmapoctordpoppos" +
+		      "refsinsubtieusevec",
 		     3);
 () = define_keywords($1,
-		     "bindcarpchopdumpeachelseevalexecexitfork" + 
-		     "getcglobgotogrepjoinkeyskilllastlinklocknextopen"+
-		     "packpipepushrandreadrecvredoseeksendsortsqrtstat" +
-		     "telltiedtimewaitwarn",
+		      "bindcarpchopdumpeachelseevalexecexitforkgetcglobgoto" +
+		      "grepjoinkeyskilllastlinknextopenpackpipepush" +
+		      "randreadrecvredoseeksendsortsqrtstattelltime" +
+		      "waitwarn",
 		     4);
 () = define_keywords($1,
 		     "alarmatan2blesschdirchmodchompchownclosecroakcrypt" +
@@ -282,7 +275,7 @@
 		     "umaskundefuntieuntilutimewhilewrite",
 		     5);
 () = define_keywords($1,
-		     "acceptcallerchrootdeleteexistsfilenoformatgmtime" +
+		      "acceptcallerchrootdeleteexistsfilenogmtime" +
 		     "importlengthlistenmsgctlmsggetmsgrcvmsgsnd" + 
 		     "printfrenamereturnrindexscalarselectsemctl" +
 		     "semgetshmctlshmgetsocketsplicesubstrsystem" + 
@@ -291,21 +284,20 @@
 () = define_keywords($1,
 		     "binmodeconnectdefinedforeachgetpgrpgetppid" + 
 		     "lcfirstopendirpackagereaddirrequirereverse" + 
-		     "seekdirsetpgrpshmreadsprintfsymlink" +
-		     "syscallsysopensysreadsysseek" +
-		     "telldirucfirstunshiftwaitpid",
+		      "seekdirsetpgrpshmreadsprintfsymlinksyscall" +
+		      "sysreadtelldirucfirstunshiftwaitpid",
 		     7);
 () = define_keywords($1,
-		     "closedircontinueendgrentendpwentformline" +
+		      "closedirendgrentendpwentformline" +
 		     "getgrentgetgrgidgetgrnamgetlogingetpwent" +
-		     "getpwnamgetpwuidreadlinereadlinkreadpipe" +
-		     "setgrentsetpwentshmwriteshutdownsyswrite" + 
-		     "truncate",
+		      "getpwnamgetpwuidreadlinksetgrentsetpwent" +
+		      "shmwriteshutdownsyswritetruncate",
 		     8);
 () = define_keywords($1,
-		     "endnetentgetnetentlocaltimeprototypequotemeta" +
+		      "endnetentgetnetentlocaltimequotemeta" +
 		     "rewinddirsetnetentwantarray",
 		     9);
+
 () = define_keywords($1,
 		     "endhostentendserventgethostentgetservent" +
 		     "getsockoptsethostentsetserventsetsockoptsocketpair",
@@ -454,159 +446,92 @@
     variable ch;	% the first character
     variable col = 1;	% default to indent on first column
     variable indent_ok = 0;
-    variable extra_indent = Perl_Indent;
-    variable ptp;	% parse-to-point results
 
     push_spot();
-    bol();
-    ch  = what_char();		% the first character
-    ptp = perl_parse_to_point();
-    
-    % flush( sprintf("ptp = %d", ptp) );
-
-    % do not indent POD, but do trim blank lines to avoid problems
-    %
-    % don't indent a line that has '#' on column 1 ...
-    % we probably want to keep our comment there
-    if ( (ptp == -3) or ((ptp == -2) and (ch == '#')) ) {
-	eol_trim();	% trim blank lines to avoid problems
-	pop_spot();
-	return;
-    }
-
-    skip_white();
-    ch = what_char();		% the first non-blank character
-
     % on exit: restore position and indent to the prescribed 'col'
     EXIT_BLOCK {
 	goto_spot();
-	bol_skip_white();
-	if ( what_column != col ) {
-	    bol_trim();
-	    col--;
-	    whitespace(col);
-	}
-	goto_spot();
+	perl_indent_to (col);
 	bskip_white();
-	bolp();				% leave on the stack
+	col = bolp();
 	pop_spot();
-	if (()) bol_skip_white();	% (start of line)
+	if (col) bol_skip_white();	% (start of line)
     }
 
-    variable rc, endch = ')';
-    rc = find_matching_delimiter(endch);
-
-    !if (rc) {	% enclosing '()' not found - retry with enclosing '[]'
-	goto_spot(); bol();
-	endch = ']';
-	rc = find_matching_delimiter(endch);
+    % ---------------------------------------------------------------------
+    % how to indent Perl POD (Perl plain old documentation)
+    % simple indent mode, assumes the previous line is correctly indented
+    % trims blank lines (since this gives pod problems otherwise)
+    %----------------------------------------------------------------------
+    bol();
+    ch = what_char ();	% the first character
+    if (in_pod()) {
+	if (ch == '=') return;
+	do {
+	    eol_trim (); bol_skip_white();
+	    if (eolp()) return;	% don't indent blanks!
+	    col = what_column();	% best guess - leave here
+	} while (up_1());
+	return;
     }
-    if (rc == 1) {
-#iftrue	% the latest version - uniform 'Perl_Indent'
+
+    % ---------------------------------------------------------------------
+    % indent normal Perl
+    %----------------------------------------------------------------------
 	bol_skip_white();
-	col = what_column();
-#elifdef PERL_INDENT_V1    
-	% -----------------------------------------------------------
-	% inside '()' (or '[]')- indent to level of opening '(' + 1
-	% A solitary closing ')' gets the same indent level as the '(
+    ch = what_char ();	% the first character
+
+    % If inside a () indent to level of opening '(' + 1
 	% Ex:
 	%  foo (bar
 	%       baz(fum
-	%           foz)
-	%      )
-	% -----------------------------------------------------------
-	col = what_column();
-	bskip_white();
-	extra_indent = 1;	% bracket offset is 1
-	% '<<= [' and '=> [' constructs are special
-	if ( blooking_at("<=") or blooking_at("=>") ) {
-	    bol_skip_white();
-	    col = what_column();
-	    extra_indent = Perl_Indent;	
-	}
-#endif
-	if (ch != endch) col += extra_indent;
-	indent_ok++;	
+    %           foz))
+    if (find_matching_delimiter(')') == 1) {
+	col = what_column() + 1;
+	indent_ok = 1;
     }
 
     goto_spot(); bol();	% (original position : start of line)
 
-    % ---------------------------------------------------------------------
-    % take care of indentation for '{' blocks
-    % ---------------------------------------------------------------------
-    endch = '}';
-    if (ch == '{') indent_ok++;
-    if (andelse
-        {find_matching_delimiter(endch) == 1}
-	{not( blooking_at("#{{") ) }	% don't match '#{{{' fold
-	)
-    {	
-	extra_indent = Perl_Indent;
-
-	% ---------------------------------------------------------------
-	% check for a '(' or '[' on the same line as the '{'
-	% this covers many code-blocks such as:
-	%
-	% for my $var (grep {
-	%                       defined $_ and /foobar/ and /
-	%		     }
-	%	         @list
-	%             )
-	% {
-	%  	...
-	% }
-	%
-	% but still could use a bit of work ...
-	% ---------------------------------------------------------------
+    % could skip this ...
+    % parse_to_point() doesn't seem to work with the perl mode anyhow
 
-	% save indent level and position of the '{'
-	col = what_column();
-	bskip_white();
-	push_spot();
-	rc = 0;
-
-	if (orelse {bfind(char('('))} {bfind(char('['))}) {
-	    goto_spot();
-	    rc = find_matching_delimiter(')');
-	    !if (rc) {	% enclosing '()' not found
-		goto_spot();	% retry with enclosing '[]'
-		rc = find_matching_delimiter(']');
-	    }
+    % If strings continue through lines, indent them to the first column.
+    % Ex:
+    %    "foo
+    % bar
+    % baz"
+    %    foobar();
+    if (perl_parse_to_point() == -1) {
+	col = 1;
+	return;
 	}
-	pop_spot();
 	
-	if (rc == 1) {	% matched from within an enclosing '()' or '[]'
-	    indent_ok++;
-	} else {
-	    % check for '= {', '+{' or '=> {'  constructs
-	    % and for functions taking references
-	    _get_point ();	% leave on the stack
-	    bskip_chars("+<=>");
-	    if (() - _get_point ()) {
-		indent_ok++;
-	    }
-	    else if (perl_blooking_at("bless")) {	% a naked 'bless'
-		indent_ok++;
-	    }
-%%	    else if ( perl_blooking_at("grep", "map", "sort") ) {
-%%		extra_indent = Perl_Continued_Offset;
-%%	    }
+    goto_spot (); bol ();	% (original position : start of line)
 
-	    bol_skip_white();
-	    col = what_column();	% Indent level
-	}
 
-	if (ch != endch)
-	  col += extra_indent;	% Indent to last '{' + extra
+    if (andelse 
+	{find_matching_delimiter('}') == 1}
+	  {not (blooking_at("#{{")) }	% '}' did not match a '#{{{' fold
+	) {
+	% (original position : start of line : start of last '{' line)
+	bol_skip_white();
+	col = what_column();	% Indent to last '{'
+
+	% variable p;
+	% p = perl_parse_to_point();
+	% message (sprintf ("ptp = %d", p));
+
+	if (ch == '}')
+	  indent_ok = 1;
 	else
-	  indent_ok++;
-	% flush(sprintf("col '%c' = %d", endch, col));
+	  col += Perl_Indent;	% Indent to last '{' + Perl_Indent
     }
+    if (ch == '{') indent_ok = 1; % don't need any extra offset
 
-    if (indent_ok) return;	% we're done
+    if (indent_ok) return;
 
-    % find out if we're on a continued line
-    goto_spot();
+    goto_spot ();	% (original position)
   
     % Find previous non-comment line
     do {
@@ -617,126 +542,92 @@
 	}
 	bol_skip_white();
 	!if (eolp()) go_right_1();
-    } while (perl_parse_to_point() <= -2);
+    } while (perl_parse_to_point() == -2);
+    %trim();
     eol();
 
     % Find last non-comment character
-    while ( ptp = perl_parse_to_point(), (ptp <= -2) ) {
-	!if (left(1)) break;
+    variable ptp;
+    while (ptp = perl_parse_to_point (), (ptp == -2)) {
+	!if (left(1)) break;	% Oops?
     }
 
-    %% flush(sprintf("look  = %c", what_char));
-
     bskip_white();
     ch = ';';		% default final character
     !if (bolp()) {
 	go_left_1();
-	if (perl_parse_to_point() >= -2) ch = what_char();
-    }
-
+	if (perl_parse_to_point() != -2) ch = what_char ();
     % flush(sprintf("end char = %c", ch));
+    }
     
-    extra_indent = Perl_Continued_Offset;
-    if ( not(is_substr (";({}", char(ch))) ) {
-	col += extra_indent;
-#iftrue
-    } else if ('}' == ch) {
-	% started '{}' with grep/map/sort filter?
-	() = find_matching_delimiter(ch);
-	bskip_white();
+    % commas are annoying:
+    % either I can properly indent something like this:
+    %   print "This is a ",
+    %     "multi-line",
+    %     " print \n";
+    % or something like this:
+    %  %hash =
+    %   (
+    %    key1 =>
+    %    {
+    %      subkey1 => 'foo',
+    %      subkey2 => 'bar',
+    %    },
+    %    key2 =>
+    %    {
+    %      subkey1 => 'bar',
+    %      subkey2 => 'foo',
+    %    }
+    %  );
+    % but I apparently cannot do both!
 	
-	if (perl_blooking_at("grep", "map", "sort")) {
 	    bol_skip_white();
-	    col = what_column;
+    %    !if (is_substr("(,;{}", char(ch))) col += Perl_Continued_Offset;
+    !if (is_substr("(;{}", char(ch))) col += Perl_Continued_Offset;
 	}
-	else {
-	    % ended with '}', but continued with filter or logical operator?
-	    goto_spot();	% (original position)
-	    bol_skip_white();
 	    
-	    if (perl_looking_at("grep", "map", "sort",
-				"and", "or", 
-				"&&", "||",
-				"?", ":" )) 
-	      col += extra_indent;
-	}
-#endif
-    }
-}
-
-public define perl_indent_region()
+define perl_indent_region ()
 {
-    !if (markp()) {
-	perl_indent_line();	% do this line and get out
-	return;
-    }
-
-    check_region(1);		% canonical region
-    narrow();
-    
     variable line = 0;
-    variable nlines = what_line();	% number of lines
-    bob();
-    widen();
+    variable nlines;
+    push_spot ();
 
-    variable cs = CASE_SEARCH; CASE_SEARCH = 1;
-    ERROR_BLOCK { pop_spot(); CASE_SEARCH = cs; }
+    if (markp ()) {
+	check_region (0);	% canonical region
+    } else {
+	bob (); push_mark (); eob ();	% mark whole buffer
+    }
+    narrow ();
+    nlines = what_line ();	% number of lines
+    bob ();      		% start here
 
     do {
 	line++;
-	eol_trim(); bol();
+	eol_trim ();
+	bol ();
 	% skip the comment
-	if ( looking_at(pod_beg) or looking_at(pod_too) ) {
+	if (looking_at ("=pod") or looking_at ("=head")) {
 	    while (down_1()) {
 		line++;
-		if (looking_at(pod_end)) break;
+		if (looking_at ("=cut")) break;
 		eol_trim();
 	    }
 	    continue;
 	}
-	if (eolp()) continue;	% skip blank lines
 	skip_white();
 
 	% skip the comment
-	if (looking_at_char('#')) {
-	    indent_line();
-	} else {
-	    % try our best to avoid indenting '<<HERE_DOCUMENT' code
+	if (looking_at ("#")) {
 	    indent_line();	   
-	    if (ffind("<<")) {
-		go_right(2);
-		push_mark();
-		skip_chars("A-Z_a-z");
-		variable junk = "\t ;";
-		variable here = bufsubstr();
-		variable len  = strlen(here);
-		skip_chars(junk);
-		if (len and (eolp() or looking_at_char('#'))) {
-		    while (down_1()) {
-			line++;
-			if (looking_at(here)) {
-			    go_right(len);
-			    skip_chars(junk);
-			    if (eolp() or looking_at_char('#')) break;
-			}
-			eol_trim();
+	    continue;
 		    }
-		} else {
+
 		    indent_line();
-		}
-	    }
-	}
 	flush(sprintf("processed %d/%d lines.", line, nlines));
-    } while (down_1() and (line < nlines));
-    
-    EXECUTE_ERROR_BLOCK;	% pop_spot and restore CASE_SEARCH
-}
-
-public define perl_indent_buffer ()
-{
-    push_spot();
-    bob(); push_mark(); eob();		% mark whole buffer
-    perl_indent_region();
+    } while (down_1 ());
+    trim_buffer ();
+    widen ();
+    flush (sprintf ("processed %d/%d lines.", line, nlines));
     pop_spot();
 }
 
@@ -792,6 +683,22 @@
     exchange_point_and_mark();
 }
 
+static define perl_prev_next_chunk (dirfun)
+{
+    push_mark ();
+    while (@dirfun()) {
+	bol();
+	if (looking_at ("=pod") or looking_at ("sub")) {
+	    pop_mark_0 ();
+	    return;
+	}
+    }
+    pop_mark_1 ();
+}
+
+define perl_prev_chunk () { perl_prev_next_chunk (&up_1); }
+define perl_next_chunk () { perl_prev_next_chunk (&down_1); }
+
 define perl_mark_matching()
 {
     variable beg = "([{", end = ")]}";
@@ -801,41 +708,17 @@
 	pop_mark_1(); 
     }
    
-    USER_BLOCK0 {
-	variable fn = ();
-	set_mark_cmd();		% we only want a single visible mark
+    if (is_substr (beg, char (ch))) {
+	push_visible_mark ();
 	if (1 != find_matching_delimiter(ch))
 	  error("matching delimiter not found");
-	@fn();
+	go_right_1 ();
 	exchange_point_and_mark();
-	return;
-    }
-
-    if (is_substr (beg, char(ch))) {
-	X_USER_BLOCK0 (&go_right_1);
     } else if (is_substr(end, char(ch))) {
-	X_USER_BLOCK0 (&skip_word_chars);	% actually serves as a no-op
-    }
-
-    % not on a beg/end character
-
-    % look backwards for an enclosing "([{"
-    bskip_white ();
-    _get_point();
-    bskip_chars(beg);
-    if (() - _get_point()) {
-	ch = what_char();
-	X_USER_BLOCK0 (&go_right_1);
-    } 
-
-    % look forewards for an enclosing ")]}"
-    skip_white ();
-    _get_point();
-    skip_chars(end);
-    if (() - _get_point()) {
-	go_left_1 ();	% backup again
-	ch = what_char();
-	X_USER_BLOCK0 (&skip_word_chars);	% actually serves as a no-op
+	push_visible_mark ();
+	if (1 != find_matching_delimiter (ch)) 
+	  error ("matching delimiter not found");
+	exchange_point_and_mark ();
     }
 }
 
@@ -894,40 +777,40 @@
 
 define perl_format_paragraph()
 {
-    variable dwrap;
+    variable col;
     
+    % !if (is_c_mode ()) return;
     Perlmode_Fill_Chars = "";
     if (perl_paragraph_sep()) return;
-    push_spot();
+    push_spot (); push_spot (); push_spot ();
     while ( not(perl_paragraph_sep()) ) {
 	!if (up_1()) break;
     }
     if (perl_paragraph_sep()) go_down_1();
     push_mark();
-    goto_spot();
+    pop_spot ();
     
     while ( not(perl_paragraph_sep()) ) {
 	!if (down_1()) break;
     }
     if (perl_paragraph_sep()) go_up_1();
     narrow();
-    goto_spot();
-
+    pop_spot ();
     bol();
     push_mark();
     skip_white();
-    if ( looking_at(PerlMode_Comment) ) go_right(PerlMode_CommentLen);
+    if (looking_at (Perlmode_Comment)) go_right (Perlmode_CommentLen);
 
     Perlmode_Fill_Chars = bufsubstr();
-    dwrap = what_column();
+    col = what_column ();
     bob();
     do {
 	bol_trim();
-	if ( looking_at(PerlMode_Comment) ) deln(PerlMode_CommentLen);
+	if (looking_at (Perlmode_Comment)) deln (Perlmode_CommentLen);
     } while (down_1());
-    WRAP -= dwrap;
+    WRAP -= col;
     call("format_paragraph");
-    WRAP += dwrap;
+    WRAP += col;
     bob();
     do {
 	insert(Perlmode_Fill_Chars);
@@ -1114,9 +997,6 @@
 %\description
 % This is a mode that is dedicated to editing Perl language files
 % including a bimodal Pod/Perl indentation mode.
-% The indentation style matches the results of perltidy(1) with
-% '-ci=2 -i=4 -en=8' fairly closely, except some of the closing brackets.
-%
 % Functions that affect this mode include:
 %#v+
 %  function:             default binding:
@@ -1124,22 +1004,11 @@
 %  perl_beg_chunk             ESC Ctrl-A
 %  perl_end_chunk             ESC Ctrl-E
 %  perl_mark_chunk            ESC Ctrl-H
-%  perl_mark_matching         ESC Ctrl-M
 %  perl_next_chuck            ESC Ctrl-N
 %  perl_prev_chunk            ESC Ctrl-P
 %  perl_indent_region         ESC TAB
-%  perl_indent_region         Ctrl-C TAB
 %  perl_format_paragraph      ESC q
-%  perl_newline_and_indent    not bound (Ctrl-M)
-%  perl_indent_buffer         not bound
-%
-%  perl_exec                  not bound  (Ctrl-C Ctrl-C)
-%  perl_check                 not bound  (Ctrl-C ?)
-%  perltidy                   ESC Ctrl-T
-%
-%
-%  perl_exec, perl_check, and perltidy work on a region or the whole buffer
-%
+%  perl_newline_and_indent    Ctrl-M (not bound)
 %#v-
 % Variables affecting this mode include:
 %#v+
@@ -1151,64 +1020,22 @@
 define perl_mode()
 {
     variable mode = "perl";
-
     set_mode(mode, 4);
     use_keymap(mode);
-    use_syntax_table(mode);
-
-    % 2001-02-19  Mark Olesen <mark.olesen@gmx.net>
-    % - changed syntax highlighting to start with /^=head/ instead
-    %   of the more correct but less common /^=pod/ as a comment.
-    %   Note that this only affects the syntax highlighting ... the
-    %   indentation continues to work as before and /^=cut/ is always the end
-
-    push_spot_bob();
-    variable beg = pod_beg;
-    if ( (not(bol_fsearch(beg))) and (bol_fsearch(pod_too)) ) beg = pod_too;
-    define_syntax(beg, pod_end, '%', mode);
+#iftrue
+    push_spot ();
+    bob ();
+    if ((0 == bol_fsearch ("=pod")) and (bol_fsearch ("=head")))
+      define_syntax ("=head", "=cut", '%', mode);
+    else
+      define_syntax ("=pod", "=cut", '%', mode);
     pop_spot();
-
+#endif
+    use_syntax_table (mode);
     set_buffer_hook("par_sep", "perl_paragraph_sep");
     set_buffer_hook("indent_hook", &perl_indent_line);
-#ifnfalse
     mode_set_mode_info(mode, "fold_info", "#{{{\r#}}}\r\r");
-#else
-    mode_set_mode_info(mode, "fold_info", "=pod\r=cut\r\r");
-#endif
     mode_set_mode_info(mode, "init_mode_menu", &perl_init_menu);
     run_mode_hooks("perl_mode_hook");
 }
-% ------------------------------------------------------------- [end of S-Lang]
-% Run this code snippet thru 'perl -x' to extract the function names from
-% 'perlfunc' - keywords 'if', 'else', etc. added by hand
-%
-% use '##' so comments don't look like S-Lang pre-processor directives
-% ----------------------------------------------------------------------------
-#iffalse
-#!perl -w
-use strict;	# yes even for such a small program!
-
-@ARGV = 'perldoc -u perlfunc|';
-while (<>) { /^=head2\s+Alphabetical/ and last }	# cue up
-
-my %kw = map { $_ => length } map { /^=item\s+([a-z\d]+)/ } <>;  # keywords
-
-## standard keywords + carp/croak (which everyone always uses)
-for (qw(if else elsif for foreach unless until while carp croak)) {
-    $kw{$_} = length
-}
-delete @kw{ grep { /^dbm/ } keys %kw };	# obsolete
-
-my @list;		# store sorted keywords by length
-$list[$kw{$_}] .= $_  for ( sort keys %kw );
-
-splice @list, 0, (my $n = 2);	# keywords with < 2 letters are useless
-
-for (@list) {
-  defined and length
-    and print "() = define_keywords(\$1,\n  \"$_\",\n  $n);\n";
-  $n++
-}
-__END__
-#endif	% done processing perl
-% --------------------------------------------------------------- [end of Perl]
+% ----------------------------------------------------------------- end-of-file
--- jed-0.99-18_orig/lib/phpmode.sl	1970-01-01 01:00:00.000000000 +0100
+++ jed-0.99-18/lib/phpmode.sl	2008-07-30 01:20:50.000000000 +0200
@@ -0,0 +1,684 @@
+% PHP mode is just a superset of C mode so make sure it is loaded.
+require ("cmode");
+
+$1 = "php";
+
+create_syntax_table( $1 );
+define_syntax( "/*", "*/", '%', $1 );          % comments
+define_syntax( "#", "", '%', $1 );             % comments
+define_syntax( "//", "", '%', $1 );            % comments
+%define_syntax ("<>", '<', $1);
+define_syntax( "([{", ")]}", '(', $1 );        % parentheses
+define_syntax( '"', '"', $1 );                 % strings
+define_syntax( '\'', '\'', $1 );               % strings
+define_syntax( '\\', '\\', $1 );               % escape character
+define_syntax( "0-9a-zA-Z_", 'w', $1 );        % words
+define_syntax( "-+0-9a-fA-F.xXL", '0', $1 );   % numbers
+define_syntax( ",;.:", ',', $1 );              % delimiters
+define_syntax( "+-*/%=.&|^~<>!?@`", '+', $1 ); % operators
+set_syntax_flags( $1, 0x05 );
+
+#ifdef HAS_DFA_SYNTAX
+%%% DFA_CACHE_BEGIN %%%
+static define setup_dfa_callback( name )
+{
+        dfa_enable_highlight_cache( "phpmode.dfa", name );
+        dfa_define_highlight_rule( "<%", "Qpreprocess", name );          % Asp style start tag
+        dfa_define_highlight_rule( "%>", "Qpreprocess", name );          % Asp style end tag
+        dfa_define_highlight_rule( "<\\?|<\\?php", "preprocess", name ); % Php style start tag
+        dfa_define_highlight_rule( "\\?>", "Qpreprocess", name ); % Php style end tag
+        dfa_define_highlight_rule ("<!\\-\\-.*\\-\\-[ \t]*>", "Qcomment", name); % HTML comments
+        dfa_define_highlight_rule ("<!\\-\\-", "comment", name); % HTML comments
+        dfa_define_highlight_rule ("\\-\\-[ \t]*>", "comment", name); % HTML comments
+        dfa_define_highlight_rule( "//.*", "comment", name );            % C++ style comment
+        dfa_define_highlight_rule( "#.*", "comment", name );             % Shell style comment
+        dfa_define_highlight_rule( "/\\*.*\\*/", "Qcomment", name );     % C style comment
+        dfa_define_highlight_rule( "^([^/]|/[^\\*])*\\*/", "Qcomment", name ); % C style comment
+        dfa_define_highlight_rule( "/\\*.*", "comment", name );          % C style comment
+        dfa_define_highlight_rule( "^[ \t]*\\*+([ \t].*)?$", "comment", name ); % C style comment
+        dfa_define_highlight_rule( "[A-Za-z_\\$][A-Za-z_0-9\\$]*", "Knormal", name );
+        dfa_define_highlight_rule( "[ \t]+", "normal", name );
+        dfa_define_highlight_rule( "[0-9]+(\\.[0-9][LlUu]*)?([Ee][\\+\\-]?[0-9]*)?","number", name );
+        dfa_define_highlight_rule( "0[xX][0-9A-Fa-f]*[LlUu]*", "number", name );
+        dfa_define_highlight_rule( "[\\(\\[{}\\]\\),;\\.:]", "delimiter", name );
+        dfa_define_highlight_rule( "[%@\\?\\.\\-\\+/&\\*=<>\\|!~\\^]", "operator", name );
+        dfa_define_highlight_rule( "\"([^\"\\\\]|\\\\.)*\"", "string", name );
+        dfa_define_highlight_rule( "\"([^\"\\\\]|\\\\.)*\\\\?$", "string", name );
+        dfa_define_highlight_rule( "'([^'\\\\]|\\\\.)*'", "string", name );
+        dfa_define_highlight_rule( "'([^'\\\\]|\\\\.)*\\\\?$", "string", name );
+        dfa_build_highlight_table( name );
+}
+dfa_set_init_callback (&setup_dfa_callback, $1);
+%%% DFA_CACHE_END %%%
+#endif
+
+() = define_keywords_n ($1, "asdoifinis", 2, 0);
+() = define_keywords_n ($1, "forintnewtryusevar", 3, 0);
+() = define_keywords_n ($1, "bytecasecharelseenumgotolongnullthistruevoidwith", 4, 0);
+() = define_keywords_n ($1, "breakcatchclassconstfalsefinalfloatshortsuperthrowwhile", 5, 0);
+() = define_keywords_n ($1, "deletedoubleexportimportnativepublicreturnstaticswitchthrowstypeof", 6, 0);
+() = define_keywords_n ($1, "booleandefaultextendsfinallypackageprivate", 7, 0);
+() = define_keywords_n ($1, "abstractcontinuedebuggerfunctionvolatile", 8, 0);
+() = define_keywords_n ($1, "interfacenamespaceprotectedtransient", 9, 0);
+() = define_keywords_n ($1, "implementsinstanceof", 10, 0);
+
+define php_mode ()
+{
+   variable php = "php";
+   c_mode ();
+   set_mode (php, 2);
+   use_syntax_table (php);
+   run_mode_hooks("php_mode_hook");
+}
+
+% Type 0 keywords (keywords and constants) %{{{
+() = define_keywords_n ($1, "asdoifor", 2,0);
+() = define_keywords_n ($1, "andfornewvarxor", 3,0);
+() = define_keywords_n ($1, "argcargvcaseelsetrue", 4,0);
+() = define_keywords_n ($1, "breakclassfalsewhile", 5,0);
+() = define_keywords_n ($1, "elseifglobalphp_osswitch", 6,0);
+() = define_keywords_n ($1, "defaulte_errore_parseextendsforeach" + "globals", 7,0);
+() = define_keywords_n ($1, "continuee_notice__file__function" + "__line__php_self", 8,0);
+() = define_keywords_n ($1, "e_warning", 9,0);
+() = define_keywords_n ($1, "php_version", 11,0);
+() = define_keywords_n ($1, "php_errormsg", 12,0);
+() = define_keywords_n ($1, "http_get_vars", 13,0);
+() = define_keywords_n ($1, "http_post_vars", 14,0);
+() = define_keywords_n ($1, "http_cookie_vars", 16,0);
+%}}}
+
+% Type 1 keywords (functions) %{{{
+() = define_keywords_n ($1, "dlpi", 2,1);
+() = define_keywords_n ($1, "abschrcosdieendexpkeylogmaxmd5minordpos" + 
+                            "powsintan", 3,1);
+() = define_keywords_n ($1, "acosasinatanbindceilchopcopydateeach" +
+                            "echoeregevalexecexitfeoffilejoinleaklink" +
+                            "listmailmsqlnextpackprevrandreadsortsqrt" +
+                            "stattimetrim", 4,1);
+() = define_keywords_n ($1, "arrayasortatan2bcaddbcdivbcmodbcmul" + 
+                            "bcpowbcsubchdirchgrpchmodchownclosecount" + 
+                            "crc32cryptemptyeregifgetcfgetsflockfloor" + 
+                            "flushfopenfputsfreadfseekfstatftellgzeof" + 
+                            "hw_cphw_mviconvissetksortlog10lstatltrim" + 
+                            "mhashmkdirnl2brpopenprintrangeresetrmdir" + 
+                            "roundrsortrtrimsleepsplitsrandstrtrtouch" + 
+                            "umaskunsetusortwrite", 5,1);
+() = define_keywords_n ($1, "arsortassertbccompbcsqrtbindecbzopen" +
+                            "bzreadchrootdblistdecbindechexdecoctdefine" +
+                            "deletefclosefflushfgetssfscanffwritegetcwd" +
+                            "getenvgmdategmp_orgzfilegzgetcgzgetsgzopen" +
+                            "gzputsgzreadgzseekgztellheaderhebrevhexdec" +
+                            "hw_whoifx_dointvalis_diris_intkrsortlisten" +
+                            "mktimeoctdecora_dopclosepg_ttyprintfputenv" +
+                            "recoderenamerewindsizeofsocketsplitisscanf" +
+                            "strchrstrcmpstrlenstrposstrrevstrspnstrstr" +
+                            "strtokstrvalsubstrsyslogsystemuasortuksort" +
+                            "uniqidunlinkunpackusleepxmldoc", 6,1);
+() = define_keywords_n ($1, "bcscalebin2hexbzclosebzerrnobzerror" +
+                            "bzflushbzwritecom_getcompactcom_setconnect" +
+                            "currentdbmopendefineddeg2raddirnameexplode" +
+                            "extractfgetcsvfileproftp_getftp_putftp_pwd" +
+                            "getdategetmxrrgettextgettypegmp_absgmp_add" +
+                            "gmp_andgmp_cmpgmp_divgmp_gcdgmp_modgmp_mul" +
+                            "gmp_neggmp_powgmp_subgmp_xorgzclosegzgetss" +
+                            "gzwritehebrevchw_infohw_rootimagesximagesy" +
+                            "implodeincludeini_getini_setip2longis_bool" +
+                            "is_fileis_linkis_longis_nullis_reallong2ip" +
+                            "mt_randnatsortodbc_doopendiropenlogpdf_arc" +
+                            "pdf_newpg_execpg_hostpg_portphpinfoprint_r" +
+                            "rad2degreaddirrequiresem_getsettypeshuffle" +
+                            "snmpgetsnmpsetsoundexsprintfstrcollstrcspn" +
+                            "stristrstrncmpstr_padstrrchrstrrposswffill" +
+                            "swffontswftextsymlinktempnamtmpfileucfirst" +
+                            "ucwordsvirtualxmltreeyp_next", 7,1);
+() = define_keywords_n ($1, "basenamebzerrstrclosedircloselog" +
+                            "com_loadconstantcpdf_arcdba_opendba_sync" +
+                            "dbmclosedbmfetchdbx_sortdgettextfdf_open" +
+                            "fdf_savefilesizefiletypefloatvalftp_cdup" +
+                            "ftp_fgetftp_fputftp_mdtmftp_pasvftp_quit" +
+                            "ftp_siteftp_sizegetmypidgetmyuidgmmktime" +
+                            "gmp_factgmp_initgmp_powmgmp_signgmp_sqrt" +
+                            "gzencodegzrewindhw_closehw_errorhw_mapid" +
+                            "imagearcimagegifimagepngimap_uidin_array" +
+                            "ircg_msgis_arrayis_floatjdtounixldap_add" +
+                            "linkinfomt_srandob_startocierrorocifetch" +
+                            "ocilogonociparseora_bindora_execora_open" +
+                            "passthrupathinfopdf_arcnpdf_clippdf_fill" +
+                            "pdf_openpdf_rectpdf_savepdf_showpdf_skew" +
+                            "pg_closepg_tracereadfilereadlinereadlink" +
+                            "realpathsnmpwalkstrerrorstrftimeswfmorph" +
+                            "swfmovieswfshapeudm_findunixtojdvar_dump" +
+                            "wordwrapxslt_runyaz_hitsyaz_scanyaz_sort" +
+                            "yaz_waityp_firstyp_matchyp_orderzip_open" +
+                            "zip_read", 8,1);
+() = define_keywords_n ($1, "array_maparray_padarray_poparray_sum" +
+                            "checkdatecpdf_clipcpdf_fillcpdf_opencpdf_rect" +
+                            "cpdf_savecpdf_showcpdf_textcurl_execcurl_init" +
+                            "dba_closedba_fetchdba_popendbmdeletedbmexists" +
+                            "dbminsertdbx_closedbx_errordbx_querydcgettext" +
+                            "doublevalerror_logfdf_closefileatimefilectime" +
+                            "filegroupfileinodefilemtimefileownerfileperms" +
+                            "fpassthrufsockopenftp_chdirftp_loginftp_mkdir" +
+                            "ftp_nlistftp_rmdirftruncatefunctionsget_class" +
+                            "getrusagegmp_div_qgmp_div_rgmp_scan0gmp_scan1" +
+                            "gzdeflategzinflatehw_insdochw_unlockicap_open" +
+                            "ifx_closeifx_errorifx_queryimagecharimagecopy" +
+                            "imagefillimagejpegimagelineimagewbmpimap_8bit" +
+                            "imap_bodyimap_mailimap_openimap_pingimap_sort" +
+                            "imap_utf8ini_alteriptcparseircg_joinircg_kick" +
+                            "ircg_nickircg_partis_doubleis_objectis_scalar" +
+                            "is_stringlcg_valueldap_bindldap_listldap_read" +
+                            "localtimemb_strcutmb_strlenmb_strposmb_substr" +
+                            "mcal_openmetaphonemicrotimeocicancelocicommit" +
+                            "ocilogoffocinlogonociplogonociresultodbc_exec" +
+                            "ora_closeora_errorora_fetchora_logonora_parse" +
+                            "parse_strparse_urlpdf_closepdf_scalepg_dbname" +
+                            "pg_loopenpg_loreadpg_resultphp_unamepreg_grep" +
+                            "quotemetarewinddirserializesetcookiesetlocale" +
+                            "strnatcmpstrtotimeswfactionswfbitmapswfbutton" +
+                            "swf_orthoswf_scaleswfspriteudm_errnoudm_error" +
+                            "urldecodeurlencodexml_parsexslt_freeyaz_close" +
+                            "yaz_errnoyaz_erroryaz_rangeyp_masterzip_close", 9,1);
+() = define_keywords_n ($1, "addslashesarray_diffarray_flip" +
+                            "array_keysarray_pusharray_randarray_walk" +
+                            "aspell_newbzcompresscheckdnsrrcom_addref" +
+                            "com_invokecpdf_closecpdf_scalecurl_close" +
+                            "dba_deletedba_existsdba_insertdbase_open" +
+                            "dbase_packdbmnextkeydbmreplacedbplus_add" +
+                            "dbplus_aqldbplus_sqldbplus_tclezmlm_hash" +
+                            "fdf_createfdf_set_apfrenchtojdftp_delete" +
+                            "ftp_renamegetlastmodgetmyinodegetrandmax" +
+                            "gmp_clrbitgmp_div_qrgmp_gcdextgmp_intval" +
+                            "gmp_invertgmp_jacobigmp_randomgmp_setbit" +
+                            "gmp_sqrtrmgmp_strvalgmstrftimegzcompress" +
+                            "gzpassthruhw_connecthw_gettexthw_inscoll" +
+                            "icap_closeimagetypesimap_checkimap_close" +
+                            "imap_msgnoircg_topicircg_whoisis_integer" +
+                            "is_numericjdtofrenchjdtojewishjdtojulian" +
+                            "jewishtojdjuliantojdldap_closeldap_errno" +
+                            "ldap_errorlocaleconvmb_strrposmcal_close" +
+                            "mcal_popenmcrypt_cbcmcrypt_cfbmcrypt_ecb" +
+                            "mcrypt_ofbmsql_closemsql_errormsql_query" +
+                            "ocicollmaxociexecuteociloadlobocinumcols" +
+                            "ocisavelobodbc_closeodbc_errorora_commit" +
+                            "ora_logoffora_plogonpdf_circlepdf_concat" +
+                            "pdf_deletepdf_linetopdf_movetopdf_rotate" +
+                            "pdf_strokepfpro_initpfsockopenpg_connect" +
+                            "pg_loclosepg_lowritepg_numrowspg_options" +
+                            "pg_untracephpcreditsphpversionposix_kill" +
+                            "preg_matchpreg_quotepreg_splitpspell_new" +
+                            "readgzfilesem_removesession_idshm_attach" +
+                            "shm_detachshmop_openshmop_readshmop_size" +
+                            "shm_removestrcasecmpstrip_tagsstr_repeat" +
+                            "strtolowerstrtoupperswf_lookatswf_nextid" +
+                            "swf_ortho2swf_rotatetextdomainuser_error" +
+                            "xmldocfilexpath_evalxslt_errnoxslt_error" +
+                            "yaz_recordyaz_searchyaz_syntax", 10,1);
+() = define_keywords_n ($1, "addcslashesapache_notearray_merge" +
+                            "array_shiftarray_slicechunk_splitcom_propget" +
+                            "com_propputcom_propsetcom_releasecount_chars" +
+                            "cpdf_circlecpdf_linetocpdf_movetocpdf_rotate" +
+                            "cpdf_strokectype_alnumctype_alphactype_cntrl" +
+                            "ctype_digitctype_graphctype_lowerctype_print" +
+                            "ctype_punctctype_spacectype_uppercurl_setopt" +
+                            "dba_nextkeydba_replacedbase_closedbmfirstkey" +
+                            "dbplus_currdbplus_finddbplus_infodbplus_last" +
+                            "dbplus_nextdbplus_opendbplus_prevdbplus_rzap" +
+                            "dbplus_undodbx_comparedbx_connectdebugger_on" +
+                            "domxml_rooteaster_dateeaster_daysfbsql_close" +
+                            "fbsql_errnofbsql_errorfbsql_queryfdf_set_opt" +
+                            "file_existsftp_connectftp_rawlistftp_systype" +
+                            "get_browserget_cfg_vargmp_hamdisthw_children" +
+                            "hw_edittexthw_errormsghw_identifyhw_pconnect" +
+                            "ibase_closeibase_queryibase_transicap_snooze" +
+                            "ifx_connectifx_prepareimagecharupimagecreate" +
+                            "imagepsbboximagepstextimagestringimap_alerts" +
+                            "imap_appendimap_base64imap_binaryimap_delete" +
+                            "imap_errorsimap_headerimap_qprintimap_reopen" +
+                            "imap_searchimap_statusini_get_allini_restore" +
+                            "ircg_noticeis_readableis_resourceis_writable" +
+                            "jddayofweekjdmonthnameldap_deleteldap_dn2ufn" +
+                            "ldap_get_dnldap_modifyldap_renameldap_search" +
+                            "ldap_unbindlevenshteinmb_languagemb_strwidth" +
+                            "mcal_reopenmcal_snoozemhash_countmsql_dbname" +
+                            "msql_dropdbmsql_resultmssql_closemssql_query" +
+                            "mysql_closemysql_errnomysql_errormysql_query" +
+                            "natcasesortocicollsizeocicolltrimocifreedesc" +
+                            "ocirollbackocirowcountodbc_commitodbc_cursor" +
+                            "odbc_resultodbc_tablesora_numcolsora_numrows" +
+                            "pdf_curvetopdf_endpathpdf_restorepdf_setdash" +
+                            "pdf_setflatpdf_setfontpdf_setgraypdf_show_xy" +
+                            "pg_end_copypg_fieldnumpg_locreatepg_loexport" +
+                            "pg_loimportpg_lounlinkpg_pconnectpg_put_line" +
+                            "posix_timesposix_unamerecode_filesem_acquire" +
+                            "sem_releasesesam_queryshm_get_varshmop_close" +
+                            "shmop_writeshm_put_varshow_sourcesnmpwalkoid" +
+                            "sql_regcasestrncasecmpstr_replaceswfgradient" +
+                            "swf_setfontunserializeutf8_decodeutf8_encode" +
+                            "xslt_createyaz_addinfoyaz_connectyaz_element" +
+                            "yaz_present", 11,1);
+() = define_keywords_n ($1, "array_filterarray_reducearray_search" +
+                            "array_splicearray_uniquearray_valuesascii2ebcdic" +
+                            "aspell_checkbase_convertbzdecompressclass_exists" +
+                            "cpdf_curvetocpdf_newpathcpdf_restorecpdf_rlineto" +
+                            "cpdf_rmovetocpdf_setdashcpdf_setflatcpdf_setgray" +
+                            "cpdf_show_xyctype_xdigitcurl_versiondba_firstkey" +
+                            "dba_optimizedbase_createdbplus_chdirdbplus_close" +
+                            "dbplus_errnodbplus_firstdbplus_flushdbplus_rkeys" +
+                            "dbplus_ropendebugger_offebcdic2asciiereg_replace" +
+                            "fbsql_commitfbsql_resultfdf_get_filefdf_set_file" +
+                            "func_get_arggetimagesizegettimeofdaygmp_divexact" +
+                            "gmp_legendregmp_popcountgzuncompressheaders_sent" +
+                            "htmlentitieshw_getobjecthw_getremoteibase_commit" +
+                            "ibase_errmsgifx_errormsgifx_get_blobifx_get_char" +
+                            "ifx_getsqlcaifx_num_rowsifx_pconnectimagecolorat" +
+                            "imagedestroyimageellipseimagepolygonimagesettile" +
+                            "imagettfbboximagettftextimap_expungeimap_headers" +
+                            "imap_num_msginclude_onceingres_closeingres_query" +
+                            "is_writeableldap_compareldap_connectldap_err2str" +
+                            "ldap_mod_addldap_mod_delmb_parse_strmb_send_mail" +
+                            "mcal_expungemsql_connectmsql_drop_dbmsql_listdbs" +
+                            "msql_numrowsmsql_regcasemssql_resultmysql_result" +
+                            "ob_end_cleanob_end_flushob_gzhandlerocifetchinto" +
+                            "ocinewcursorodbc_binmodeodbc_columnsodbc_connect" +
+                            "odbc_executeodbc_prepareold_functionopenssl_open" +
+                            "openssl_sealopenssl_signora_commitonora_rollback" +
+                            "ovrimos_execpdf_add_notepdf_end_pagepdf_findfont" +
+                            "pdf_get_fontpdf_open_gifpdf_open_pdipdf_open_png" +
+                            "pdf_setcolorpdf_set_fontpdf_set_infopg_cmdtuples" +
+                            "pg_fetch_rowpg_fieldnamepg_fieldsizepg_fieldtype" +
+                            "pg_loreadallpg_numfieldsposix_getcwdposix_getgid" +
+                            "posix_getpidposix_getsidposix_getuidposix_isatty" +
+                            "posix_mkfifoposix_setgidposix_setsidposix_setuid" +
+                            "preg_replaceprinter_listprinter_openpspell_check" +
+                            "rawurldecoderawurlencoderequire_oncesesam_commit" +
+                            "session_nameshmop_deletesimilar_textstripslashes" +
+                            "substr_countswf_addcolorswf_endshapeswf_fontsize" +
+                            "swf_getframeswf_mulcolorswf_openfileswf_posround" +
+                            "swf_setframeswf_shapearcswftextfieldswf_viewport" +
+                            "sybase_closesybase_queryudm_cat_listudm_cat_path" +
+                            "udm_free_resxslt_openlogxslt_processyaz_ccl_conf" +
+                            "yaz_databasezend_version", 12,1);
+() = define_keywords_n ($1, "array_reversearray_unshiftbase64_decode" +
+                            "base64_encodecpdf_end_textcpdf_finalizecpdf_set_font" +
+                            "dbplus_rquerydbplus_updatediskfreespaceeregi_replace" +
+                            "fbsql_connectfbsql_drop_dbfbsql_stop_dbfdf_get_value" +
+                            "fdf_set_flagsfdf_set_valuefunc_get_argsfunc_num_args" +
+                            "getallheadersgethostbyaddrgethostbynameget_meta_tags" +
+                            "getservbynamegetservbyportgregoriantojdhw_getanchors" +
+                            "hw_getandlockhw_getparentsibase_connectibase_execute" +
+                            "ibase_prepareibase_timefmtifx_copy_blobifx_fetch_row" +
+                            "ifx_free_blobifx_free_charimagecolorsetimageloadfont" +
+                            "imagesetbrushimagesetpixelimagesetstyleimagestringup" +
+                            "imap_undeleteingres_commitircg_pconnectis_executable" +
+                            "jdtogregorianmb_http_inputmb_strimwidthmethod_exists" +
+                            "msql_createdbmsql_fieldlenmsql_list_dbsmsql_num_rows" +
+                            "msql_pconnectmsql_selectdbmssql_connectmt_getrandmax" +
+                            "mysql_connectmysql_db_namemysql_drop_dbnumber_format" +
+                            "ob_get_lengthocibindbynameocicollassignocicolumnname" +
+                            "ocicolumnsizeocicolumntypeocifreecursorodbc_errormsg" +
+                            "odbc_num_rowsodbc_pconnectodbc_rollbackora_commitoff" +
+                            "ora_errorcodeora_getcolumnovrimos_closepdf_closepath" +
+                            "pdf_close_pdipdf_get_valuepdf_open_filepdf_open_jpeg" +
+                            "pdf_open_tiffpdf_setmatrixpdf_set_valuepdf_translate" +
+                            "pfpro_cleanuppfpro_processpfpro_versionpg_freeresult" +
+                            "pg_getlastoidphp_logo_guidphp_sapi_nameposix_ctermid" +
+                            "posix_getegidposix_geteuidposix_getpgidposix_getpgrp" +
+                            "posix_getppidposix_setpgidposix_ttynameprinter_abort" +
+                            "printer_closeprinter_writereadline_inforecode_string" +
+                            "sesam_connectsesam_execimmsession_startsession_unset" +
+                            "stripcslashesstrnatcasecmpswf_closefileswf_endbutton" +
+                            "swf_endsymbolswf_fontslantswf_polarviewswf_popmatrix" +
+                            "swf_showframeswf_textwidthswf_translatesybase_result" +
+                            "trigger_errorwddx_add_varsxslt_closelogyaz_ccl_parse" +
+                            "yaz_itemorder", 13,1);
+() = define_keywords_n ($1, "accept_connectaspell_suggest" +
+                            "assert_optionsbindtextdomaincall_user_func" +
+                            "clearstatcachecpdf_closepathcpdf_page_init" +
+                            "cpdf_set_titlecpdf_translatecybercash_decr" +
+                            "cybercash_encrdbplus_errcodedbplus_getlock" +
+                            "dbplus_lockreldbplus_rchpermdbplus_rcreate" +
+                            "dbplus_resolvedbplus_rrenamedbplus_runlink" +
+                            "dbplus_saveposdbplus_tremovedomxml_dumpmem" +
+                            "escapeshellargescapeshellcmdfbsql_db_query" +
+                            "fbsql_list_dbsfbsql_num_rowsfbsql_pconnect" +
+                            "fbsql_rollbackfbsql_start_dbfbsql_warnings" +
+                            "fdf_get_statusfdf_set_statusget_class_vars" +
+                            "gethostbynamelgetprotobynamegmp_prob_prime" +
+                            "highlight_filehw_childrenobjhw_docbyanchor" +
+                            "hw_getusernameibase_pconnectibase_rollback" +
+                            "ifx_fieldtypesifx_nullformatifx_num_fields" +
+                            "imagecopymergeimagefilledarcimagefontwidth" +
+                            "imageinterlaceimagerectangleimap_fetchbody" +
+                            "imap_get_quotaimap_mail_copyimap_mail_move" +
+                            "imap_set_quotaimap_subscribeingres_connect" +
+                            "is_subclass_ofmb_http_outputmcrypt_decrypt" +
+                            "mcrypt_encryptmcrypt_genericmsql_create_db" +
+                            "msql_data_seekmsql_fetch_rowmsql_fieldname" +
+                            "msql_fieldtypemsql_numfieldsmsql_select_db" +
+                            "msql_tablenamemssql_num_rowsmssql_pconnect" +
+                            "mysql_db_querymysql_list_dbsmysql_num_rows" +
+                            "mysql_pconnectocicollgetelemocicolumnscale" +
+                            "ocisavelobfileocisetprefetchodbc_close_all" +
+                            "odbc_fetch_rowodbc_field_lenodbc_field_num" +
+                            "odbc_setoptionopenssl_verifyora_columnname" +
+                            "ora_columnsizeora_columntypeora_fetch_into" +
+                            "ovrimos_commitovrimos_cursorovrimos_result" +
+                            "pdf_begin_pagepdf_get_bufferpdf_open_ccitt" +
+                            "pdf_open_imagepdf_setlinecappdf_show_boxed" +
+                            "pg_fetch_arraypg_fieldisnullpg_fieldprtlen" +
+                            "posix_getgrgidposix_getgrnamposix_getlogin" +
+                            "posix_getpwnamposix_getpwuidpreg_match_all" +
+                            "pspell_suggestread_exif_datasesam_errormsg" +
+                            "sesam_rollbacksesam_seek_rowsession_decode" +
+                            "session_encodeset_time_limitshm_remove_var" +
+                            "substr_replaceswf_actionplayswf_actionstop" +
+                            "swf_definefontswf_definelineswf_definepoly" +
+                            "swf_definerectswf_definetextswfdisplayitem" +
+                            "swf_labelframeswf_pushmatrixswf_startshape" +
+                            "sybase_connectudm_free_agentxml_set_object" +
+                            "xslt_transformzend_logo_guidzip_entry_name" +
+                            "zip_entry_openzip_entry_read", 14,1);
+() = define_keywords_n ($1, "array_intersectarray_multisort" +
+                            "cpdf_begin_textcpdf_setlinecapcreate_function" +
+                            "dbase_numfieldsdbplus_freelockdbplus_rcrtlike" +
+                            "dbplus_setindexdbplus_unselectdbplus_xlockrel" +
+                            "domxml_add_rootdomxml_childrenerror_reporting" +
+                            "fbsql_create_dbfbsql_data_seekfbsql_db_status" +
+                            "fbsql_fetch_rowfbsql_field_lenfbsql_insert_id" +
+                            "fbsql_select_dbfbsql_tablenamefunction_exists" +
+                            "get_object_varshw_array2objrechw_deleteobject" +
+                            "hw_getchildcollhw_insertobjecthw_modifyobject" +
+                            "hw_new_documenthw_objrec2arrayhw_pipedocument" +
+                            "ibase_fetch_rowifx_create_blobifx_create_char" +
+                            "ifx_free_resultifx_update_blobifx_update_char" +
+                            "ifxus_free_slobifxus_open_slobifxus_read_slob" +
+                            "ifxus_seek_slobifxus_tell_slobimagecolorexact" +
+                            "imagedashedlineimagefontheightimagepsfreefont" +
+                            "imagepsloadfontimap_headerinfoimap_last_error" +
+                            "imap_num_recentingres_num_rowsingres_pconnect" +
+                            "ingres_rollbackircg_disconnectircg_ignore_add" +
+                            "ircg_ignore_delldap_explode_dnldap_get_option" +
+                            "ldap_get_valuesldap_next_entryldap_set_option" +
+                            "mb_convert_kanamb_detect_ordermcal_date_valid" +
+                            "mcal_event_initmcal_time_validmsql_fieldflags" +
+                            "msql_field_seekmsql_fieldtablemsql_freeresult" +
+                            "msql_listfieldsmsql_listtablesmsql_num_fields" +
+                            "mssql_data_seekmssql_fetch_rowmssql_select_db" +
+                            "mysql_create_dbmysql_data_seekmysql_fetch_row" +
+                            "mysql_field_lenmysql_insert_idmysql_select_db" +
+                            "mysql_tablenameob_get_contentsocicolumnisnull" +
+                            "ocidefinebynameodbc_autocommitodbc_fetch_into" +
+                            "odbc_field_nameodbc_field_typeodbc_num_fields" +
+                            "odbc_proceduresodbc_result_allodbc_statistics" +
+                            "ovrimos_connectovrimos_executeovrimos_prepare" +
+                            "pdf_add_outlinepdf_add_pdflinkpdf_add_weblink" +
+                            "pdf_attach_filepdf_close_imagepdf_end_pattern" +
+                            "pdf_fill_strokepdf_place_imagepdf_set_leading" +
+                            "pdf_setlinejoinpdf_setpolydashpdf_setrgbcolor" +
+                            "pdf_stringwidthpg_errormessagepg_fetch_object" +
+                            "posix_getgroupsposix_getrlimitprinter_end_doc" +
+                            "sesam_fetch_rowsession_destroyset_file_buffer" +
+                            "swf_enddoactionswf_getfontinfoswf_oncondition" +
+                            "swf_perspectiveswf_placeobjectswf_shapelineto" +
+                            "swf_shapemovetoswf_startbuttonswf_startsymbol" +
+                            "sybase_num_rowssybase_pconnectudm_alloc_agent" +
+                            "udm_api_versionwddx_packet_endxml_parser_free" +
+                            "yaz_scan_resultzip_entry_close", 15,1);
+() = define_keywords_n ($1, "aspell_check_rawcall_user_method" +
+                            "cpdf_add_outlinecpdf_fill_strokecpdf_import_jpeg" +
+                            "cpdf_set_creatorcpdf_set_leadingcpdf_setlinejoin" +
+                            "cpdf_setrgbcolorcpdf_set_subjectcpdf_stringwidth" +
+                            "cybermut_testmacdbase_add_recorddbase_get_record" +
+                            "dbase_numrecordsdbplus_getuniquedbplus_rcrtexact" +
+                            "dbplus_rsecindexdbplus_unlockreldisk_total_space" +
+                            "domxml_new_childextension_loadedfbsql_autocommit" +
+                            "fbsql_field_namefbsql_field_seekfbsql_field_type" +
+                            "fbsql_num_fieldsfdf_set_encodingfilepro_retrieve" +
+                            "filepro_rowcountget_current_userget_defined_vars" +
+                            "get_parent_classgetprotobynumberhighlight_string" +
+                            "htmlspecialcharshw_document_sizehw_free_document" +
+                            "hw_getanchorsobjhw_getparentsobjhw_incollections" +
+                            "ibase_field_infoibase_free_queryibase_num_fields" +
+                            "icap_fetch_eventicap_list_alarmsicap_list_events" +
+                            "icap_store_eventifxus_close_slobifxus_write_slob" +
+                            "imagecolorstotalimagecopyresizedimagepsslantfont" +
+                            "imap_fetchheaderimap_listmailboximap_scanmailbox" +
+                            "imap_unsubscribeimap_utf7_decodeimap_utf7_encode" +
+                            "ingres_fetch_rowircg_html_encodeircg_set_current" +
+                            "is_uploaded_fileldap_first_entryldap_free_result" +
+                            "ldap_get_entriesldap_mod_replacemcal_day_of_week" +
+                            "mcal_day_of_yearmcal_fetch_eventmcal_list_alarms" +
+                            "mcal_list_eventsmcal_store_eventmcrypt_create_iv" +
+                            "mdecrypt_genericmhash_keygen_s2kmsql_fetch_array" +
+                            "msql_fetch_fieldmsql_free_resultmsql_list_fields" +
+                            "msql_list_tablesmssql_field_namemssql_field_seek" +
+                            "mssql_field_typemssql_num_fieldsmysql_field_name" +
+                            "mysql_field_seekmysql_field_typemysql_num_fields" +
+                            "ob_iconv_handlerocicolumntyperawocifreestatement" +
+                            "ociinternaldebugocinewcollectionocinewdescriptor" +
+                            "ociserverversionocistatementtypeodbc_field_scale" +
+                            "odbc_foreignkeysodbc_free_resultodbc_gettypeinfo" +
+                            "odbc_longreadlenodbc_primarykeysopenssl_free_key" +
+                            "ovrimos_num_rowsovrimos_rollbackpdf_add_bookmark" +
+                            "pdf_end_templatepdf_get_fontnamepdf_get_fontsize" +
+                            "pdf_initgraphicspdf_set_durationpdf_setgray_fill" +
+                            "pdf_setlinewidthpdf_set_text_posprinter_draw_bmp" +
+                            "printer_draw_pieprinter_end_pagesesam_diagnostic" +
+                            "sesam_disconnectsesam_field_namesesam_num_fields" +
+                            "session_registerswf_actiongeturlswf_definebitmap" +
+                            "swf_fonttrackingswf_modifyobjectswf_removeobject" +
+                            "swf_shapecurvetoswf_shapefilloffsybase_data_seek" +
+                            "sybase_fetch_rowsybase_select_dbwddx_deserialize" +
+                            "xml_error_string", 16,1);
+() = define_keywords_n ($1, "apache_lookup_uriconnection_status" +
+                            "cpdf_save_to_filecpdf_setgray_fillcpdf_set_keywords" +
+                            "cpdf_setlinewidthcpdf_set_text_posdbplus_freerlocks" +
+                            "dbplus_restoreposdbplus_xunlockreldomxml_attributes" +
+                            "domxml_new_xmldocfbsql_change_userfbsql_fetch_array" +
+                            "fbsql_fetch_assocfbsql_fetch_fieldfbsql_field_flags" +
+                            "fbsql_field_tablefbsql_free_resultfbsql_list_fields" +
+                            "fbsql_list_tablesfbsql_next_resultfilepro_fieldname" +
+                            "filepro_fieldtypeget_class_methodsget_resource_type" +
+                            "hw_docbyanchorobjhw_insertdocumentibase_free_result" +
+                            "icap_delete_eventifx_affected_rowsifx_byteasvarchar" +
+                            "ifx_textasvarcharifxus_create_slobignore_user_abort" +
+                            "imagecolorclosestimagecolorresolveimagefilltoborder" +
+                            "imagegammacorrectimagepsencodefontimagepsextendfont" +
+                            "imagesetthicknessimap_getmailboxesimap_mail_compose" +
+                            "imap_setflag_fullingres_autocommitingres_field_name" +
+                            "ingres_field_typeingres_num_fieldsircg_channel_mode" +
+                            "mb_output_handlermcal_append_eventmcal_date_compare" +
+                            "mcal_delete_eventmcal_is_leap_yearmcrypt_list_modes" +
+                            "msql_fetch_objectmssql_fetch_arraymssql_fetch_field" +
+                            "mssql_free_resultmssql_next_resultmysql_change_user" +
+                            "mysql_fetch_arraymysql_fetch_assocmysql_fetch_field" +
+                            "mysql_field_flagsmysql_field_tablemysql_free_result" +
+                            "mysql_list_fieldsmysql_list_tablesob_implicit_flush" +
+                            "ocicollassignelemocifetchstatementocifreecollection" +
+                            "ociwritelobtofileopenssl_x509_freeopenssl_x509_read" +
+                            "ovrimos_fetch_rowovrimos_field_lenovrimos_field_num" +
+                            "pdf_add_locallinkpdf_add_thumbnailpdf_begin_pattern" +
+                            "pdf_continue_textpdf_get_parameterpdf_get_pdi_value" +
+                            "pdf_makespotcolorpdf_open_pdi_pagepdf_setmiterlimit" +
+                            "pdf_set_parameterpdf_set_text_risepfpro_process_raw" +
+                            "printer_create_dcprinter_delete_dcprinter_draw_line" +
+                            "printer_draw_textprinter_start_docpspell_new_config" +
+                            "sesam_fetch_arraysesam_field_arraysesam_free_result" +
+                            "session_save_pathset_error_handlersocket_get_status" +
+                            "swf_getbitmapinfoswf_shapecurveto3swf_startdoaction" +
+                            "sybase_field_seeksybase_num_fieldsudm_get_doc_count" +
+                            "udm_get_res_fieldudm_get_res_paramwddx_packet_start" +
+                            "xml_parser_createxpath_new_contextxslt_fetch_result", 17,1);
+() = define_keywords_n ($1, "array_count_valuesconnection_aborted" +
+                            "connection_timeoutconvert_cyr_stringcpdf_continue_text" +
+                            "cpdf_finalize_pagecpdf_output_buffercpdf_setmiterlimit" +
+                            "cpdf_set_text_risedbplus_undopreparefbsql_fetch_object" +
+                            "filepro_fieldcountfilepro_fieldwidthget_included_files" +
+                            "get_required_filesgmp_perfect_squarehw_getchildcollobj" +
+                            "hw_getchilddoccollhw_getsrcbydestobjhw_output_document" +
+                            "ibase_fetch_objecticonv_get_encodingiconv_set_encoding" +
+                            "ifx_htmltbl_resultimagealphablendingimagecolorallocate" +
+                            "imagecopymergegrayimagecopyresampledimagecreatefromgif" +
+                            "imagecreatefrompngimagefilledellipseimagefilledpolygon" +
+                            "imap_createmailboximap_deletemailboximap_getsubscribed" +
+                            "imap_renamemailboxingres_fetch_arrayingres_field_scale" +
+                            "ircg_is_conn_aliveldap_count_entriesmb_detect_encoding" +
+                            "mcal_days_in_monthmcal_event_set_endmcrypt_generic_end" +
+                            "mcrypt_get_iv_sizemcrypt_module_openmove_uploaded_file" +
+                            "msql_affected_rowsmssql_fetch_objectmssql_field_length" +
+                            "mysql_fetch_objectocicolumnprecisionopenssl_pkcs7_sign" +
+                            "openssl_x509_parseovrimos_fetch_intoovrimos_field_name" +
+                            "ovrimos_field_typeovrimos_num_fieldsovrimos_result_all" +
+                            "pdf_add_annotationpdf_add_launchlinkpdf_begin_template" +
+                            "pdf_close_pdi_pagepdf_place_pdi_pagepdf_setgray_stroke" +
+                            "pg_client_encodingprinter_create_penprinter_delete_pen" +
+                            "printer_draw_chordprinter_get_optionprinter_select_pen" +
+                            "printer_set_optionprinter_start_pagepspell_config_mode" +
+                            "pspell_config_replsesam_fetch_resultsession_unregister" +
+                            "socket_set_timeoutswf_shapefillsolidswf_shapelinesolid" +
+                            "sybase_fetch_arraysybase_fetch_fieldsybase_free_result" +
+                            "xml_get_error_codezip_entry_filesize", 18,1);
+() = define_keywords_n ($1, "cpdf_add_annotationcpdf_setgray_stroke" +
+                            "dbase_delete_recorddbplus_freealllocksfbsql_affected_rows" +
+                            "fbsql_fetch_lengthsfdf_next_field_nameget_extension_funcs" +
+                            "hw_document_bodytaghw_document_contenthw_getobjectbyquery" +
+                            "ifx_blobinfile_modeifx_fieldpropertiesimagecolorsforindex" +
+                            "imagecreatefromjpegimagecreatefromwbmpimap_clearflag_full" +
+                            "imap_fetch_overviewimap_fetchstructureimap_listsubscribed" +
+                            "imap_mailboxmsginfoingres_fetch_objectingres_field_length" +
+                            "ldap_get_attributesldap_get_values_lenldap_next_attribute" +
+                            "mb_convert_encodingmcrypt_generic_initmcrypt_get_key_size" +
+                            "mhash_get_hash_namemysql_affected_rowsmysql_escape_string" +
+                            "mysql_fetch_lengthsmysql_get_host_infoodbc_specialcolumns" +
+                            "ovrimos_free_resultovrimos_longreadlenpdf_get_image_width" +
+                            "pdf_open_image_filepdf_set_border_dashpdf_set_text_matrix" +
+                            "printer_create_fontprinter_delete_fontprinter_draw_elipse" +
+                            "printer_select_fontpspell_new_personalsesam_affected_rows" +
+                            "session_module_namesession_write_closesocket_set_blocking" +
+                            "swf_actiongotoframeswf_actiongotolabelswf_actionnextframe" +
+                            "swf_actionprevframeswf_actionsettargetswf_addbuttonrecord" +
+                            "sybase_fetch_objectudm_set_agent_paramwddx_serialize_vars", 19,1);
+() = define_keywords_n ($1, "call_user_func_array" +
+                            "cpdf_set_text_matrixdbase_replace_record" +
+                            "domxml_get_attributedomxml_set_attribute" +
+                            "get_declared_classesget_magic_quotes_gpc" +
+                            "hw_getremotechildrenimagecolordeallocate" +
+                            "imagecolorexactalphaimagecreatetruecolor" +
+                            "imagefilledrectangleircg_fetch_error_msg" +
+                            "ldap_first_attributemb_convert_variables" +
+                            "mb_decode_mimeheadermb_encode_mimeheader" +
+                            "mb_internal_encodingmcal_create_calendar" +
+                            "mcal_delete_calendarmcal_event_set_alarm" +
+                            "mcal_event_set_classmcal_event_set_start" +
+                            "mcal_event_set_titlemcal_next_recurrence" +
+                            "mcal_rename_calendarmcrypt_enc_self_test" +
+                            "mhash_get_block_sizemysql_get_proto_info" +
+                            "odbc_field_precisionodbc_tableprivileges" +
+                            "openssl_error_stringopenssl_pkcs7_verify" +
+                            "pdf_closepath_strokepdf_get_image_height" +
+                            "pdf_set_border_colorpdf_set_border_style" +
+                            "pdf_set_char_spacingpdf_setrgbcolor_fill" +
+                            "pdf_set_word_spacingprinter_create_brush" +
+                            "printer_delete_brushprinter_select_brush" +
+                            "pspell_clear_sessionpspell_config_create" +
+                            "pspell_config_ignorepspell_save_wordlist" +
+                            "readline_add_historysesam_settransaction" +
+                            "snmp_get_quick_printsnmp_set_quick_print" +
+                            "sybase_affected_rowsudm_add_search_limit" +
+                            "udm_free_ispell_dataudm_load_ispell_data" +
+                            "wddx_serialize_valuexslt_set_sax_handler", 20,1);
+() = define_keywords_n ($1, "array_merge_recursive" +
+                            "cpdf_closepath_strokecpdf_set_char_spacing" +
+                            "cpdf_set_current_pagecpdf_setrgbcolor_fill" +
+                            "cpdf_set_word_spacingget_defined_constants" +
+                            "get_defined_functionsget_loaded_extensions" +
+                            "hw_getchilddoccollobjimagecolortransparent" +
+                            "imagecreatefromstringingres_field_nullable" +
+                            "mcrypt_get_block_sizemysql_get_client_info" +
+                            "mysql_get_server_infoodbc_columnprivileges" +
+                            "odbc_procedurecolumnsopenssl_get_publickey" +
+                            "openssl_pkcs7_decryptopenssl_pkcs7_encrypt" +
+                            "pdf_get_pdi_parameterpdf_open_memory_image" +
+                            "pdf_set_horiz_scalingpreg_replace_callback" +
+                            "pspell_add_to_sessionreadline_list_history" +
+                            "readline_read_historyrestore_error_handler" +
+                            "session_cache_limitersession_is_registered" +
+                            "xml_parse_into_structxml_parser_get_option" +
+                            "xml_parser_set_optionyp_get_default_domain", 21,1);
+() = define_keywords_n ($1, "call_user_method_array" +
+                            "cpdf_set_horiz_scalinghw_document_attributes" +
+                            "hw_document_setcontenthw_getobjectbyqueryobj" +
+                            "imagecolorclosestalphaimagecolorresolvealpha" +
+                            "ingres_field_precisionmb_preferred_mime_name" +
+                            "mcrypt_enc_get_iv_sizemcrypt_get_cipher_name" +
+                            "mcrypt_list_algorithmsmssql_get_last_message" +
+                            "mysql_unbuffered_queryopenssl_get_privatekey" +
+                            "pdf_setrgbcolor_strokepdf_set_text_rendering" +
+                            "pg_set_client_encodingprinter_draw_rectangle" +
+                            "printer_draw_roundrectpspell_add_to_personal" +
+                            "pspell_config_personalreadline_clear_history" +
+                            "readline_write_historyregister_tick_function" +
+                            "satellite_exception_idswf_actionwaitforframe", 22,1);
+() = define_keywords_n ($1, "cpdf_place_inline_image" +
+                            "cpdf_set_page_animationcpdf_setrgbcolor_stroke" +
+                            "cpdf_set_text_renderingcybercash_base64_decode" +
+                            "cybercash_base64_encodecybermut_creerreponsecm" +
+                            "dbplus_setindexbynumberdefine_syslog_variables" +
+                            "fbsql_database_passwordhw_getobjectbyquerycoll" +
+                            "imagetruecolortopaletteimap_mime_header_decode" +
+                            "java_last_exception_getmb_decode_numericentity" +
+                            "mb_encode_numericentitymb_substitute_character" +
+                            "mcal_event_set_categorymcrypt_enc_get_key_size" +
+                            "mcrypt_module_self_testpspell_config_save_repl" +
+                            "quoted_printable_decodeswf_actiontogglequality" +
+                            "swf_shapefillbitmapclipswf_shapefillbitmaptile" +
+                            "sybase_get_last_messageudm_clear_search_limits" +
+                            "xml_set_default_handlerxml_set_element_handler", 23,1);
+() = define_keywords_n ($1,
+"get_magic_quotes_runtime" +
+                            "mcal_event_add_attributemcrypt_enc_is_block_mode" +
+                            "mssql_min_error_severitypspell_store_replacement" +
+                            "session_set_save_handlerset_magic_quotes_runtime" +
+                            "unregister_tick_functionxslt_output_endtransform" +
+                            "zip_entry_compressedsize", 24,1);
+() = define_keywords_n ($1, "fdf_set_javascript_action" +
+                            "imap_rfc822_parse_adrlistimap_rfc822_parse_headers" +
+                            "imap_rfc822_write_addressjava_last_exception_clear" +
+                            "mcal_event_set_recur_nonemcrypt_enc_get_block_size" +
+                            "mcrypt_enc_get_modes_nameopenssl_x509_checkpurpose" +
+                            "pdf_closepath_fill_strokepspell_config_runtogether" +
+                            "satellite_exception_valuesession_get_cookie_params" +
+                            "session_set_cookie_paramssybase_min_error_severity", 25,1);
+() = define_keywords_n ($1, "cpdf_closepath_fill_stroke" +
+                            "cybermut_creerformulairecmfdf_set_submit_form_action" +
+                            "get_html_translation_tablehw_getobjectbyquerycollobj" +
+                            "mcal_event_set_descriptionmcal_event_set_recur_daily" + 
+                            "mssql_min_message_severityprinter_logical_fontheight" +
+                            "register_shutdown_functionsatellite_caught_exception" +
+                            "sybase_min_client_severitysybase_min_server_severity" + 
+                            "xml_get_current_byte_indexxslt_output_begintransform", 26,1);
+() = define_keywords_n ($1, "dbase_get_record_with_names" + 
+                            "ircg_lookup_format_messagesmcal_event_set_recur_weekly" +
+                            "mcal_event_set_recur_yearlymcrypt_module_is_block_mode" +
+                            "sybase_min_message_severityxml_get_current_line_number" + 
+                            "zip_entry_compressionmethod", 27,1);
+() = define_keywords_n ($1, "readline_completion_function", 28,1);
+() = define_keywords_n ($1, "ircg_register_format_messages" + 
+                            "mcrypt_enc_is_block_algorithmxml_get_current_column_number" + 
+                            "xml_set_notation_decl_handler", 29,1);
+() = define_keywords_n ($1, "mcrypt_enc_get_algorithms_name" + 
+                            "xml_set_character_data_handler", 30,1);
+() = define_keywords_n ($1, "cpdf_global_set_document_limits" + 
+                            "mcal_fetch_current_stream_eventmcrypt_module_get_algo_key_size", 31,1);
+() = define_keywords_n ($1, "mcrypt_module_is_block_algorithm", 32,1);
+() = define_keywords_n ($1, "mcal_event_set_recur_monthly_mday" + 
+                            "mcal_event_set_recur_monthly_wdaymcrypt_module_get_algo_block_size", 33,1);
+() = define_keywords_n ($1, "mcrypt_enc_get_supported_key_sizes" +
+                            "mcrypt_enc_is_block_algorithm_mode", 34,1);
+() = define_keywords_n ($1, "xml_set_external_entity_ref_handler", 35,1);
+() = define_keywords_n ($1, "xml_set_unparsed_entity_decl_handler", 36,1);
+() = define_keywords_n ($1, "mcrypt_module_is_block_algorithm_mode", 37,1);
+() = define_keywords_n ($1, "xml_set_processing_instruction_handler", 38,1);
+() = define_keywords_n ($1, "mcrypt_module_get_algo_supported_key_sizes", 42,1);
+%}}}
--- jed-0.99-18_orig/lib/popups.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/popups.sl	2008-07-30 01:20:50.000000000 +0200
@@ -71,13 +71,18 @@
 menu_append_item ($1, "&Cut Region", "yp_kill_region");
 menu_append_item ($1, "C&opy Region", "yp_copy_region_as_kill");
 menu_append_item ($1, "&Paste", "yp_yank");
-menu_append_popup ($1, "Re&gion Ops");
 menu_append_popup ($1, "&Rectangles");
 menu_append_separator ($1);
+menu_append_popup ($1, "Re&gisters");
 menu_append_popup ($1, "&Key Macros");
 menu_append_separator ($1);
 menu_append_item ($1, "&Undo", "undo");
 
+$1 = "Global.&Edit.Re&gisters";
+menu_append_item ($1, "&Copy To Register", "reg_copy_to_register");
+menu_append_item ($1, "&Paste From Register", "reg_insert_register");
+menu_append_item ($1, "&View Registers", "register_mode");
+
 $1 = "Global.&Edit.&Key Macros";
 menu_append_item ($1, "&Start Macro", "begin_macro");
 menu_append_item ($1, "S&top Macro", "end_macro");
@@ -90,19 +95,6 @@
 menu_append_item ($1, "Op&en Rectangle", "open_rect");
 menu_append_item ($1, "&Blank Rectangle", "blank_rect");
 
-$1 = "Global.&Edit.Re&gion Ops";
-menu_append_item ($1, "&Upper Case", ".'u' xform_region");
-menu_append_item ($1, "&Lower Case", ".'d' xform_region");
-menu_append_item ($1, "&Comment", "comment_region");
-menu_append_item ($1, "U&ncomment", "uncomment_region");
-menu_append_separator ($1);
-menu_append_item ($1, "&Save to File", "write_region");
-menu_append_item ($1, "&Append to File", "append_region");
-menu_append_separator ($1);
-menu_append_item ($1, "Copy To &Register", "reg_copy_to_register");
-menu_append_item ($1, "&Paste From Register", "reg_insert_register");
-menu_append_item ($1, "&View Registers", "register_mode");
-
 $1 = "Global.&Search";
 menu_append_item ($1, "Search &Forward", "search_forward");
 menu_append_item ($1, "Search &Backward", "search_backward");
@@ -137,7 +129,6 @@
 menu_append_item ($1, "&Kill Buffer", "kill_buffer");
 menu_append_item ($1, "&List Buffers", "bufed");
 menu_append_popup ($1, "&Select Mode");
-menu_append_item ($1, "Enable &Folding", "folding_mode");
 
 $1 = "Global.&Buffers.&Select Mode";
 menu_append_item ($1, "&C Mode", "c_mode");
@@ -247,7 +238,7 @@
 }
 
 $1 = "Global.&Help";
-menu_append_item ($1, "About &Jed", &about_jed, NULL);
+menu_append_item ($1, "A&bout Jed", &about_jed, NULL);
 #ifndef VMS
 add_files_popup_with_callback ($1, "&Browse Docs",
 			       dircat (JED_ROOT, "doc/txt"),
@@ -282,5 +273,3 @@
    _jed_run_hooks ("load_popup_hooks", 1, [menubar]);
 }
 menu_set_select_menubar_callback ("Global", NULL);
-
-Menu_Popups_Loaded = 1;
--- jed-0.99-18_orig/lib/preparse.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/preparse.sl	2008-07-30 01:20:50.000000000 +0200
@@ -59,8 +59,10 @@
 	  "cmode.sl",
 	  "html.sl",
 	  "javamode.sl",
+	  "jsmode.sl",
+	  "makemode.sl",
 	  "perl.sl",
-	  "php.sl",
+	  "phpmode.sl",
 	  "preparse.sl",
 	  "pscript.sl",
 	  "pymode.sl",
--- jed-0.99-18_orig/lib/pymode.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/pymode.sl	2008-07-30 01:20:50.000000000 +0200
@@ -1,5 +1,5 @@
 % Python mode 
-% File: pymode.sl v1.3.1
+% File: pymode.sl v1.3
 %
 % For editing source code written in the Python programming language.
 % Provides basic compatibility with Python mode under real Emacs
@@ -44,10 +44,6 @@
 % Changes from v1.2
 % - autoindent correction
 
-% Changes from v1.3
-% - discard return value from run_shell_cmd
-% - avoid use of create_array and explicit loop for initializing it.
-
 $1 = "python";
 
 !if (keymap_p ($1)) make_keymap ($1);
@@ -360,9 +356,9 @@
    append_region_to_file(tmpfile); 
    oldbuf = pop2buf_whatbuf("*shell-output*"); erase_buffer (); 
 #ifdef UNIX 
-   ()=run_shell_cmd(sprintf("python %s 2>&1", tmpfile));
+   run_shell_cmd(sprintf("python %s 2>&1", tmpfile));
 #else 
-   ()=run_shell_cmd(sprintf("python %s", tmpfile));
+   run_shell_cmd(sprintf("python %s", tmpfile));
 #endif 
    () = delete_file(tmpfile); 
  
@@ -414,13 +410,14 @@
    % value of Py_Indent_Level.
    % Warning: Current version can be fooled by implicit or explicit
    %   continuation lines.
-   variable indent_level = Int_Type[64];
-   %variable indent_level = create_array('i', 64, 1);
+   variable indent_level = create_array('i', 64, 1);
    variable level = -1;
    variable current_indent = -1;
    variable errmsg, i, col, ignore, oldlevel;
    
-   indent_level[*] = -1;
+   for (i = 0; i < 64; i++) {
+      indent_level[i] = -1;
+   }
    bob();
    do {
       bol_skip_white();
--- jed-0.99-18_orig/lib/recent.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/recent.sl	2008-07-30 01:20:50.000000000 +0200
@@ -37,11 +37,10 @@
    variable file = RECENT_FILES_LIST;
    
 % Versions of slang prior to 1.4.3 have a bug in the path_is_absolute function.
-   if (_slang_version >= 10403)
-     {
+#ifeval _slang_version >= 10403
 	if (path_is_absolute (file))
 	  return file;
-     }
+#endif
 
    variable dir = Jed_Home_Directory;
 #ifdef IBMPC_SYSTEM
--- jed-0.99-18_orig/lib/register.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/register.sl	2008-07-30 01:20:50.000000000 +0200
@@ -1,13 +1,8 @@
-% Register facility.
+% Register facility.  This provides up to 95 pastebuffers.
 %
 % CHANGELOG
 % =========
 %
-% v2.0 2002/09/04
-%       o Re-implemented to use an associative array so that registers can
-%         be given meaningful names.   Added reg_get/set_registers functions 
-%         for use by Francesc's register load/save functions.
-%
 % v1.0 2000/12/29
 %
 %	o Added register management from the menu bar.
@@ -99,12 +94,12 @@
                 () = reg_next ();
           }
      }
-   bol ();
+   goto_column (2);
    Reg_Line = what_line ();
    Reg_Mark = create_line_mark (Reg_Cline);
 }
 
-public define reg_quit ()
+define reg_quit ()
 {
    setbuf ("*registers*");
    set_buffer_modified_flag (0);
@@ -120,18 +115,20 @@
       otherwindow ();
 }
 
-public define reg_insert ()
+define reg_insert ()
 {
-   push_mark ();
-   eol (); 
-   bskip_white ();
-   variable name = bufsubstr ();
+   $0 = what_char ();
+   if (andelse
+         {$0 == 'P'}
+         {looking_at ("PC")})
+      $0 = ' ';
+   $0 -= 32;
    reg_quit ();
-   insert (Register_Buffer_Arrays [name]);
+   insert (Register_Buffer_Arrays [$0]);
    recenter (0);
 }
 
-public define reg_help ()
+define reg_help ()
 {
    message ("?: this help, q: quit mode, RET: insert register");
 }
@@ -187,7 +184,7 @@
    bob ();
    set_buffer_modified_flag (0);
    set_buffer_hook ("update_hook", &reg_update_hook);
-   %set_column_colors (Colorin_Left, 1, 3);
+   set_column_colors (color_number ("menu_selection"), 1, 3);
    toggle_readonly ();
 
    %menu_set_object_available ("Global.&Edit.Re&gisters.&Insert", 1);
--- jed-0.99-18_orig/lib/site.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/site.sl	2008-07-30 01:20:52.000000000 +0200
@@ -43,17 +43,16 @@
 public variable _Jed_Default_Emulation = "emacs";
 public variable Default_Jedrc_Startup_File = "jed.rc";
 public variable _Jed_Color_Scheme = NULL;
-public variable _Jed_Default_Color_Scheme = "black3";
-
 %!%+
 %\variable{Tab_Always_Inserts_Tab}
 %\synopsis{Configure the tab key}
 %\description
 % If this variable is non-zero, then the tab key will insert tab characters
 % into the buffer.  It is possible to override this setting via a mode hook.
 %\seealso{local_setkey}
 %!%-
 public variable Tab_Always_Inserts_Tab = 0;
+public variable _Jed_Default_Color_Scheme = "smoli";
 
 variable _C_Indentation_Style = NULL;
 % This function will get overloaded by cmode.sl
@@ -205,7 +204,6 @@
 % function does nothing and returns -1.
 %
 % This function should be only used by slang programmers, not users.
-%\seealso{custom_color}
 %!%-
 public define custom_variable (name, value)
 {
@@ -258,6 +256,7 @@
 
 %}}}
 
+
 %}}}
 
 
@@ -459,6 +458,7 @@
 
 %}}}
 
+
 %!%+
 %\function{search_path_for_file}
 %\synopsis{search_path_for_file}
@@ -490,6 +490,7 @@
    return NULL;
 }
 
+   
 %{{{ expand_jedlib_file (f)
 %!%+
 %\function{expand_jedlib_file}
@@ -785,6 +786,7 @@
 	  "strncat",			"compat",
 
 	  "tiasm_mode",		"tiasm",
+%	    "x86_mode",	   	        "x86mode",
 
 	  "set_comment_info",		"comments",
 	  "comment_region",		"comments",
@@ -942,6 +944,7 @@
    insert_char('\n');
 }
 
+   
 %!%+
 %\function{insert_single_space}
 %\synopsis{insert_single_space}
@@ -967,8 +970,34 @@
    what_char () == ();
 }
 
+
 %}}}
 
+define global_mode_hook (hook)
+{
+}
+
+%!%+
+%\function{runhooks}
+%\synopsis{runhooks}
+%\usage{Void runhooks (String_Type hook, [optional args...]);}
+%!%-
+define runhooks ()
+{
+   variable args = __pop_args (_NARGS - 1);
+   variable hook = ();
+   hook = __get_reference (hook);
+   if (hook != NULL)
+     @hook (__push_args (args));
+}
+
+define run_mode_hooks (hook)
+{
+   global_mode_hook (hook);
+   runhooks (hook);
+}
+
+
 %!%+
 %\function{local_setkey}
 %\synopsis{local_setkey}
@@ -1335,6 +1364,7 @@
    push_mark_eob ();
 }
 
+
 %!%+
 %\function{bufsubstr_delete}
 %\synopsis{bufsubstr_delete}
@@ -1440,6 +1470,11 @@
    pop_spot ();
 }
 
+define get_mode_name ()
+{
+   what_mode (); pop ();
+}
+
 define enable_xmouse ()
 {
 #ifndef IBMPC_SYSTEM
@@ -1605,6 +1640,7 @@
      }
 }
 
+
 %}}}
 
 define goto_line_cmd()
@@ -1678,6 +1714,7 @@
    call("kbd_quit");
 }
 
+
 %}}}
 %{{{ Mode functions and settings
 
@@ -1697,6 +1734,7 @@
    run_mode_hooks ("no_mode_hook");
 }
 
+
 % Function prototypes
 % These 'functions' are only here to initialize function pointers.
 define _function_pop_0 (x) {0;}
@@ -1713,6 +1751,7 @@
 
 variable Default_Mode = &text_mode;
 
+
 % Emacs allows a mode definition on the first line of a file
 % -*- mode: MODENAME; VAR: VALUE; ... -*-
 % which can also include values of local variables
@@ -1758,7 +1797,7 @@
 	  {
 	     if (is_list_element ("bash,ksh,ash,zsh,csh", mode, ','))
 	       mode = "sh";
-	     else if (is_list_element ("slsh,jdl,jed-script,jdl-script", mode, ','))
+	     else if (is_list_element ("slsh,jdl", mode, ','))
 	       mode = "slang";
 	  }
      }
@@ -1818,6 +1857,7 @@
 Mode_List_Modes += ",text,text,text,slang";
 #endif
 
+  
 %!%+
 %\function{add_mode_for_extension}
 %\synopsis{add_mode_for_extension}
@@ -1896,6 +1936,7 @@
    @Default_Mode ();
 }
 
+
 %}}}
 %{{{ Buffer flags and related functions
 
@@ -1914,6 +1955,7 @@
    setbuf_info (());
 }
 
+
 define _unset_buffer_flag (x)
 {
    getbuf_info ();
@@ -1936,6 +1978,7 @@
    setbuf_info(getbuf_info() xor f);
 }
 
+
 %!%+
 %\function{set_buffer_modified_flag}
 %\synopsis{set_buffer_modified_flag}
@@ -1973,6 +2016,7 @@
    _set_or_unset_buffer_flag ((), 0x20);
 }
 
+
 %!%+
 %\function{set_readonly}
 %\synopsis{set_readonly}
@@ -2084,6 +2128,7 @@
    _toggle_buffer_flag (0x20);
 }
 
+
 %!%+
 %\function{set_buffer_no_backup}
 %\synopsis{set_buffer_no_backup}
@@ -2193,6 +2234,8 @@
    Email_Address = s;
 }
 
+
+
 %{{{ Help stuff
 
 %!%+
@@ -2337,7 +2380,7 @@
 %!%-
 define read_file_from_mini ()
 {
-   read_with_completion( () , "", "", 'f');
+   read_with_completion( () , Null_String, Null_String, 'f');
 }
 
 %!%+
@@ -2432,6 +2475,7 @@
 
 add_to_hook ("_jed_startup_hooks", &jed_startup_hook);
 
+
 %}}}
 
 #ifdef VMS
@@ -2516,6 +2560,7 @@
 		 "python_mode",
 		 _stkdepth - $0);      %  matches _add_completion
 
+
 %}}}
 
 %{{{ save_buffer()
@@ -2538,15 +2583,14 @@
 
    file = buffer_filename ();
    !if (strlen(file))
-     file = read_file_from_mini ("Save to file:");
+     file = read_file_from_mini ();
 
    !if (strlen(file))
      error ("File name not specified");
 
    () = write_buffer (file);
 
-}
-add_completion("save_buffer");
+} add_completion("save_buffer");
 
 %}}}
 %{{{ insert_buffer()
@@ -2557,11 +2601,11 @@
    ERROR_BLOCK {pop_spot();}
    insbuf(());
    EXECUTE_ERROR_BLOCK;
-}
-add_completion("insert_buffer");
+}  add_completion("insert_buffer");
 
 %}}}
 
+
 %{{{ Word movement and processing functions
 
 %%
@@ -2578,6 +2622,9 @@
    skip_word_chars();
 }
 
+
+   
+
 define bskip_word()
 {
    while (bskip_non_word_chars(), bolp())
@@ -2741,7 +2788,7 @@
 %{{{ rename_buffer(name)
 %!%+
 %\function{rename_buffer}
-%\synopsis{Rename the current buffer}
+%\apropos{Rename the current buffer}
 %\usage{rename_buffer (String_Type new_name)}
 %\description
 % This function may be used to change the name of the current buffer to the
@@ -2925,7 +2972,6 @@
      }
 }
 
-%!%+
 %\function{disable_dfa_syntax_for_mode}
 %\synopsis{Use DFA syntax highlighting for one or more modes}
 %\usage{disable_dfa_syntax_for_mode (String_Type mode, ...)}
@@ -2947,6 +2993,7 @@
      mode_set_mode_info ((), "use_dfa_syntax", 0);
 }
 
+   
 % This fixes some bug in OS2 dealing with 'dir' issued non-interactively.
 #ifdef OS2
 if (NULL != getenv("DIRCMD")) putenv("DIRCMD=/ogn");
@@ -2963,8 +3010,8 @@
 %  The value of this variable specifies the user's so-called home directory
 %  where personal jed-related files are assumed to be found.  Normally, this
 %  corresponds to the user's home directory unless the user has specified
-%  an alternate directory via the \var{JED_HOME} environment variable.
-%!%-
+%  an alternate directory via the \variable{JED_HOME} environment variable.
+%!%
 public variable Jed_Home_Directory;
 #ifdef VMS
 Jed_Home_Directory = "SYS$LOGIN:";
@@ -2990,11 +3037,7 @@
 private define patch_cmdline_file (file)
 {
 #ifdef UNIX
-   variable ch = file[0];
-   file = strcompress (file, "/");
-   if (ch == '/')
-     file = strcat ("/", file);
-   return file;
+   return str_replace_all (file, "//", "/");
 #else
    file;
 #endif
@@ -3024,7 +3067,7 @@
 		       );
 
    if (1 != file_status (init_file))
-     init_file = Default_Jedrc_Startup_File;
+     init_file = NULL;
 
    % if first argument is -n then do NOT load init file
    while (n)
@@ -3084,8 +3127,6 @@
      }
 
    % Set up defaults in case user did not do it.
-   !if (BATCH)
-     {
 	if (_Jed_Emulation == NULL)
 	  {
 	     () = evalfile (_Jed_Default_Emulation);
@@ -3093,7 +3134,6 @@
 	  }
 	if (_Jed_Color_Scheme == NULL)
 	  set_color_scheme (_Jed_Default_Color_Scheme);
-     }
 
    mini_init_minibuffer ();
 
@@ -3261,6 +3301,7 @@
 }
 #endif
 
+
 %
 %  This code fragment looks for the existence of "defaults.sl" and loads
 %  it.  This file IS NOT distributed with JED.
--- jed-0.99-18_orig/lib/srchmisc.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/srchmisc.sl	2008-07-30 01:20:52.000000000 +0200
@@ -39,7 +39,6 @@
      };
    variable undo_stack = NULL;
    variable tmp;
-   variable replacement_length = strlen (rep);
 
    prompt =  sprintf ("Replace '%s' with '%s'? (y/n/!/+/q/h)", pat, rep);
    
--- jed-0.99-18_orig/lib/syntax.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/syntax.sl	2008-07-30 01:20:52.000000000 +0200
@@ -70,7 +70,7 @@
 %!%+
 %\function{add_keyword}
 %\synopsis{add_keyword}
-%\usage{Void add_keyword (String_Type tbl, String_Type kw);}
+%\usage{Void add_keyword (String tbl, String kw);}
 %\description
 % 
 % Adds a single keyword `kw' to the already existing syntax table `tbl'.
--- jed-0.99-18_orig/lib/tex.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/tex.sl	2008-07-30 01:20:52.000000000 +0200
@@ -69,8 +69,7 @@
    run_mode_hooks ("tex_mode_hook");
    % This is called after the hook to give the hook a chance to load the
    % abbrev table.
-   %if (abbrev_table_p (mode)) use_abbrev_table (mode); 
-   %(Now handled in run_mode_hooks)
+   if (abbrev_table_p (mode)) use_abbrev_table (mode);
 }
 
 %-----------------------------------------------------------%
--- jed-0.99-18_orig/lib/texcom.sl	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/lib/texcom.sl	2008-07-30 01:20:52.000000000 +0200
@@ -54,7 +54,7 @@
 	    {looking_at ("\\begin")}
 	    {looking_at ("\\item")}
 	    {looking_at ("\\end")}
-	    {re_looking_at ("\\\\[sub]+section{")})
+	    {re_looking_at ("\\\\[sub]+ection{")})
 	  return 1;
      }
 
--- jed-0.99-18_orig/src/Makefile.in	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/src/Makefile.in	2008-07-30 01:20:52.000000000 +0200
@@ -21,6 +21,7 @@
 INSTALL_DATA	= @INSTALL_DATA@
 MKINSDIR = ../autoconf/mkinsdir.sh
 JED_LIB_FILES = ../lib/*.sl ../lib/*.dat ../lib/*.hlp ../lib/jed.rc
+JED_ETC_FILES = ../lib/jed.conf
 JED_DOC_FILES = ../doc/README
 JED_DOC_TXT_FILES = ../doc/txt/*.txt
 JED_DOC_HLP_FILES = ../doc/hlp/*.hlp
@@ -35,6 +36,7 @@
 #---------------------------------------------------------------------------
 DESTDIR =
 DEST_BIN_DIR = $(DESTDIR)$(BIN_DIR)
+DEST_ETC_DIR = $(DESTDIR)$(ETC_DIR)
 DEST_MAN_DIR = $(DESTDIR)$(MAN_DIR)
 DEST_JED_ROOT = $(DESTDIR)$(JED_ROOT)
 
@@ -203,24 +205,24 @@
 	-$(INSTALL) $(OBJDIR)/getmail $(DEST_JED_ROOT)/bin/
 	@for i in $(JED_LIB_FILES); \
 	do \
-		echo $(INSTALL_DATA) $$i $(DEST_JED_ROOT)/lib/; \
-		$(INSTALL_DATA) $$i $(DEST_JED_ROOT)/lib/; \
+		echo $(INSTALL_DATA) $$i $(DEST_JED_ROOT)/lib/jed/; \
+		$(INSTALL_DATA) $$i $(DEST_JED_ROOT)/lib/jed/; \
 		if [ "$$?" != "0" ]; then \
 		  exit 1; \
 		fi; \
 	done
 	@for i in $(JED_COLOR_FILES); \
 	do \
-		echo $(INSTALL_DATA) $$i $(DEST_JED_ROOT)/lib/colors/; \
-		$(INSTALL_DATA) $$i $(DEST_JED_ROOT)/lib/colors/; \
+		echo $(INSTALL_DATA) $$i $(DEST_JED_ROOT)/lib/jed/colors/; \
+		$(INSTALL_DATA) $$i $(DEST_JED_ROOT)/lib/jed/colors/; \
 		if [ "$$?" != "0" ]; then \
 		  exit 1; \
 		fi; \
 	done
 	@for i in $(XJED_COLOR_FILES); \
 	do \
-		echo $(INSTALL_DATA) $$i $(DEST_JED_ROOT)/lib/colors/Xjed/; \
-		$(INSTALL_DATA) $$i $(DEST_JED_ROOT)/lib/colors/Xjed/; \
+		echo $(INSTALL_DATA) $$i $(DEST_JED_ROOT)/lib/jed/colors/Xjed/; \
+		$(INSTALL_DATA) $$i $(DEST_JED_ROOT)/lib/jed/colors/Xjed/; \
 		if [ "$$?" != "0" ]; then \
 		  exit 1; \
 		fi; \
--- jed-0.99-18_orig/src/getmail.c	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/src/getmail.c	2008-07-30 01:20:52.000000000 +0200
@@ -103,7 +103,6 @@
 	if (errno == EINTR) 
 	  {
 	     errno = 0;
-	     sleep (1);
 	     continue;
 	  }
 #endif
@@ -143,7 +142,6 @@
 	  {
 	     unlock_mail_file ();
 	  }
-	sleep (1);
      }
    return (-1);
 }
--- jed-0.99-18_orig/src/jprocess.c	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/src/jprocess.c	2008-07-30 01:20:52.000000000 +0200
@@ -155,7 +155,6 @@
 #ifdef EAGAIN
 	if (errno == EAGAIN)
 	  {
-	     sleep (1);
 	     continue;
 	  }
 #endif
@@ -177,7 +176,6 @@
 #ifdef EAGAIN
 	if (errno == EAGAIN)
 	  {
-	     sleep (1);
 	     continue;
 	  }
 #endif
--- jed-0.99-18_orig/src/main.c	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/src/main.c	2008-07-30 01:20:52.000000000 +0200
@@ -170,7 +170,7 @@
 	strcpy (jed_lib, jr);
 #ifndef VMS
 	fixup_dir (jed_lib);
-	strcat (jed_lib, "lib");
+	strcat (jed_lib, "lib/jed");
 #else
 	strcat(jed_lib, "[lib]");
 #endif
@@ -507,7 +507,6 @@
 	fprintf (stderr, "***Warning: Executable compiled against S-Lang %d but linked to %d\n",
 		 SLANG_VERSION, SLang_Version);
 	fflush (stderr);
-	sleep (2);
      }
 
    set_jed_root (argv[0]);
--- jed-0.99-18_orig/src/userinfo.c	2008-07-30 01:20:30.000000000 +0200
+++ jed-0.99-18/src/userinfo.c	2008-07-30 01:20:52.000000000 +0200
@@ -230,7 +230,6 @@
 #if defined(TRY_AGAIN) && !defined(MULTINET)
    if ((host_entry == NULL) && (h_errno == TRY_AGAIN))
      {
-	sleep (2);
 	host_entry = gethostbyname (b);
      }
 #endif
--- jed-0.99-18_orig/lib/jed.sl	2008-08-06 21:25:31.000000000 +0200
+++ jed-0.99-18/lib/jed.sl	2008-08-07 09:41:02.000000000 +0200
@@ -26,84 +26,84 @@
 setkey("backward_paragraph",	"\e{");
 setkey("forward_paragraph",	"\e}");
 
-setkey("dabbrev", 		"^A");
-setkey("beg_of_line",		"^B");
-setkey("page_down",		"^D");
+setkey("dabbrev", 		"^Q");
+setkey("beg_of_line",		"^A");
+%setkey("page_down",		"^D");
 setkey("eol_cmd",		"^E");
 
-setkey("occur",			"^FA");
-setkey("search_backward",	"^FB");
-setkey("search_forward",	"^FF");
-setkey("isearch_backward",	"^FIB");
-setkey("isearch_forward",	"^FIF");
-setkey("re_search_backward",	"^FWB");
-setkey("re_search_forward",	"^FWF");
+%setkey("occur",			"^FA");
+setkey("search_backward",	"^B");
+setkey("search_forward",	"^F");
+%setkey("isearch_backward",	"^IB");
+%setkey("isearch_forward",	"^IF");
+%setkey("re_search_backward",	"^FWB");
+%setkey("re_search_forward",	"^FWF");
 
-setkey("kbd_quit",		"^G");
+%setkey("kbd_quit",		"^D");
 setkey("indent_line",		"\t");
-setkey("yp_kill_word",		"^J");
+setkey("yp_kill_word",		"^W");
 
 
-setkey("set_mark_cmd",		"^K^B");
-setkey("insert_file",		"^K^I");
-setkey("double_line",		"^K^L");
-setkey("bkmrk_goto_mark", 	"^K\r");
-setkey("yp_yank",		"^K^P");
-setkey("replace_cmd",		"^K^R");
-setkey("yp_kill_region",	"^K^V");
-setkey("write_buffer",		"^K^W");
-setkey("begin_macro",		"^K(");
-setkey("end_macro",		"^K)");
-setkey("goto_column_cmd",	"^KC");
-setkey("evaluate_cmd",		"^KD");
-setkey("exit_jed",		"^KE");
-setkey("find_file",		"^KG");
-setkey("yp_copy_region_as_kill","^KK");
-setkey("goto_line_cmd",		"^KL");
-setkey("bkmrk_set_mark", 	"^KM");
-setkey("execute_macro",		"^KX");
+setkey("set_mark_cmd",		"^Y");
+%setkey("insert_file",		"^K^I");
+%setkey("double_line",		"^K^L");
+%setkey("bkmrk_goto_mark", 	"^K\r");
+setkey("yp_yank",		"^V");
+setkey("replace_cmd",		"^R");
+setkey("yp_kill_region",	"^X");
+setkey("save_buffer",		"^S");
+%setkey("begin_macro",		"^K(");
+%setkey("end_macro",		"^K)");
+%setkey("goto_column_cmd",	"^KC");
+%setkey("evaluate_cmd",		"^KD");
+setkey("exit_jed",		"^D");
+%setkey("find_file",		"^KG");
+setkey("yp_copy_region_as_kill","^C");
+setkey("goto_line_cmd",        "^L");
+%setkey("bkmrk_set_mark",       "^KM");
+%setkey("execute_macro",        "^KX");
 
-setkey("left_justify_line",	"^K^?");
+%setkey("left_justify_line",	"^K^?");
 
-setkey("yp_kill_line",		"^L");
+setkey("yp_kill_line",		"^K");
 setkey("newline_and_indent",	"^M");
 setkey("redraw",		"^R");
 setkey("page_up",		"^U");
-setkey("delete_char_cmd",	"^V");
+%setkey("delete_char_cmd",	"^V");
 
-setkey("insert_other_window",	"^W\t");
-setkey("one_window",		"^W1");
-setkey("split_window",		"^W2");
-setkey("other_window",		"^Wo");
-setkey("delete_window",		"^W0");
-
-setkey("list_buffers",		"^X^B");
-setkey("list_directory",	"^X^D");
-setkey("transpose_lines",	"^X^T");
-setkey("exchange",		"^X^X");
-setkey("evaluate_cmd",		"^X\e");
-setkey("set_selective_display",	"^X$");
-setkey("compile_parse_errors",	"^X'");
-setkey("changelog_add_change",	"^X4a");
-setkey("digraph_cmd",		"^X8");
-setkey("uncomment_region_or_line","^X:");
-setkey("comment_region_or_line","^X;");
-setkey("whatpos",		"^X?");
-setkey("switch_to_buffer",	"^XB");
-setkey("set_fill_column",	"^XF");
-setkey("reg_insert_register",	"^XG");
-setkey("kill_buffer",		"^XK");
-setkey("narrow_to_region",	"^XN");
-setkey("macro_query",		"^XQ");
-setkey("save_some_buffers",	"^XS");
-setkey("toggle_readonly",	"^XT");
-setkey("undo",			"^XU");
-setkey("widen_region",		"^XW");
-setkey("reg_copy_to_register",	"^XX");
-setkey("enlarge_window",	"^X^");
+%setkey("insert_other_window",	"^W\t");
+%setkey("one_window",		"^W1");
+%setkey("split_window",		"^W2");
+%setkey("other_window",	"^Wo");
+%setkey("delete_window",		"^W0");
+
+setkey("list_buffers",		"^^B");
+setkey("list_directory",	"^^D");
+setkey("transpose_lines",	"^^T");
+setkey("exchange",		"^^X");
+setkey("evaluate_cmd",		"^\e");
+%setkey("set_selective_display","^X$");
+%setkey("compile_parse_errors",	"^X'");
+%setkey("changelog_add_change",	"^X4a");
+%setkey("digraph_cmd",		"^X8");
+%setkey("uncomment_region_or_line","^X:");
+%setkey("comment_region_or_line","^X;");
+%setkey("whatpos",		"^X?");
+setkey("switch_to_buffer",	"^J");
+%setkey("set_fill_column",	"^XF");
+%setkey("reg_insert_register",	"^XG");
+%setkey("kill_buffer",		"^XK");
+%setkey("narrow_to_region",	"^XN");
+%setkey("macro_query",		"^XQ");
+%setkey("save_some_buffers",	"^S");
+%setkey("toggle_readonly",	"^XT");
+setkey("undo",			"^Z");
+%setkey("widen_region",		"^XW");
+%setkey("reg_copy_to_register",	"^XX");
+%setkey("enlarge_window",	"^X^");
 
 #ifdef UNIX VMS
-setkey("mail",			"^XM");
+%setkey("mail",			"^XM");
 #endif
 
 setkey ("sys_spawn_cmd",	"^Z");
