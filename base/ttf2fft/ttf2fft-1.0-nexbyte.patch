diff -ruN ttf2fft_orig/fontinfo.c ttf2fft/fontinfo.c
--- ttf2fft_orig/fontinfo.c	1970-01-01 00:00:00.000000000 +0000
+++ ttf2fft/fontinfo.c	2006-01-20 10:50:17.000000000 +0000
@@ -0,0 +1,464 @@
+/*
+  Most of the source comes from ttf2fft
+  modified by p.bieri
+  created: 19.08.2003 / pb
+  changed: 19.08.2003 / pb
+*/
+
+
+#include <ft2build.h>
+#include FT_FREETYPE_H
+#include FT_CACHE_H
+
+#include FT_CACHE_IMAGE_H
+#include FT_CACHE_SMALL_BITMAPS_H
+#include FT_CACHE_CHARMAP_H
+#include <freetype/ftoutln.h>
+#include <freetype/ftbbox.h>
+#include <freetype/internal/tttypes.h>
+#include <freetype/ttnameid.h>
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdarg.h>
+#include <string.h>
+
+/* platform and encoding tables */
+typedef struct Encoding_ {
+    int   id;
+    char* name;
+} Encoding;
+
+
+typedef struct Platform_ {
+    int        id;
+    char*      name;
+    Encoding*  encodings;
+} Platform;
+
+
+
+Encoding AppleUnicodeEncodings[] = {
+    { TT_APPLE_ID_DEFAULT,     "Unicode 1.0" },
+    { TT_APPLE_ID_UNICODE_1_1, "Unicode 1.1" },
+    { TT_APPLE_ID_ISO_10646,   "ISO 10646" },
+    { TT_APPLE_ID_UNICODE_2_0, "Unicode 2.0" },
+    { -1, NULL }
+};
+
+Encoding MacintoshEncodings[] = {
+    { TT_MAC_ID_ROMAN                , "Roman" },
+    { TT_MAC_ID_JAPANESE             , "Japanese" },
+    { TT_MAC_ID_TRADITIONAL_CHINESE  , "Chinese (Traditional)" },
+    { TT_MAC_ID_KOREAN               , "Korean" },
+    { TT_MAC_ID_ARABIC               , "Arabic" },
+    { TT_MAC_ID_HEBREW               , "Hebrew" },
+    { TT_MAC_ID_GREEK                , "Greek" },
+    { TT_MAC_ID_RUSSIAN              , "Russian" },
+    { TT_MAC_ID_RSYMBOL              , "RSymbol" },
+    { TT_MAC_ID_DEVANAGARI           , "Devanagari" },
+    { TT_MAC_ID_GURMUKHI             , "Gurmukhi" },
+    { TT_MAC_ID_GUJARATI             , "Gujarati" },
+    { TT_MAC_ID_ORIYA                , "Oriya" },
+    { TT_MAC_ID_BENGALI              , "Bengali" },
+    { TT_MAC_ID_TAMIL                , "Tamil" },
+    { TT_MAC_ID_TELUGU               , "Telugu" },
+    { TT_MAC_ID_KANNADA              , "Kannada" },
+    { TT_MAC_ID_MALAYALAM            , "Malayalam" },
+    { TT_MAC_ID_SINHALESE            , "Sinhalese" },
+    { TT_MAC_ID_BURMESE              , "Burmese" },
+    { TT_MAC_ID_KHMER                , "Khmer" },
+    { TT_MAC_ID_THAI                 , "Thai" },
+    { TT_MAC_ID_LAOTIAN              , "Laotian" },
+    { TT_MAC_ID_GEORGIAN             , "Georgian" },
+    { TT_MAC_ID_ARMENIAN             , "Armenian" },
+    { TT_MAC_ID_MALDIVIAN            , "Maldivian" },
+    { TT_MAC_ID_SIMPLIFIED_CHINESE   , "Chinese (Simplified)" },
+    { TT_MAC_ID_TIBETAN              , "Tibetan" },
+    { TT_MAC_ID_MONGOLIAN            , "Mongolian" },
+    { TT_MAC_ID_GEEZ                 , "Geez" },
+    { TT_MAC_ID_SLAVIC               , "Slavic" },
+    { TT_MAC_ID_VIETNAMESE           , "Vietnamese" },
+    { TT_MAC_ID_SINDHI               , "Sindhi" },
+    { TT_MAC_ID_UNINTERP             , "Uninterp" },
+    { -1, NULL }
+};
+
+Encoding ISOEncodings[] = {
+    { TT_ISO_ID_7BIT_ASCII,     "ASCII (7bit)" },
+    { TT_ISO_ID_10646,          "ISO 10646" },
+    { TT_ISO_ID_8859_1,         "ISO 8859-1" },
+    { -1, NULL }
+};
+
+Encoding MicrosoftEncodings[] = {
+    { TT_MS_ID_SYMBOL_CS,       "Symbol" },
+    { TT_MS_ID_UNICODE_CS,      "Unicode" },
+    { TT_MS_ID_SJIS,            "ShiftJIS" },
+    { TT_MS_ID_GB2312,          "PRC (GB2312)" },
+    { TT_MS_ID_BIG_5,           "Big5" },
+    { TT_MS_ID_WANSUNG,         "Wansung" },
+    { TT_MS_ID_JOHAB,           "Johab" },
+    { TT_MS_ID_UCS_4,           "UCS-4" },
+    { -1, NULL }
+};
+
+Platform platforms[] = {
+    { TT_PLATFORM_APPLE_UNICODE, "Apple Unicode", AppleUnicodeEncodings },
+    { TT_PLATFORM_MACINTOSH,     "Macintosh",     MacintoshEncodings },
+    { TT_PLATFORM_ISO,           "ISO",           ISOEncodings },
+    { TT_PLATFORM_MICROSOFT,     "Microsoft",     MicrosoftEncodings },
+//    { TT_PLATFORM_CUSTOM,        "Custom",        CustomEncodings },
+    { -1, NULL, NULL }
+};
+
+
+
+
+
+FT_Error    error;
+FT_Library  library;       /* the FreeType library            */
+FT_Face     face;          /* the font face                   */
+FT_Encoding encoding = ft_encoding_none;
+
+int         face_num = 0;
+int         charmap_num = 0;
+char        fft_file[1024+5];
+char*       font_file = NULL;
+char        filename[1024 + 5];
+
+static const char*  file_suffixes[] = { ".ttf", ".ttc", ".pfa", ".pfb", 0 };
+
+
+
+/**
+ * Returns base name of specified pathname
+ *
+ * @param name   specified path
+ * @return base name of specified path
+ */
+char* ft_basename ( const char*  name )
+{
+    const char*  base;
+    const char*  current;
+    char         c;
+
+    base    = name;
+    current = name;
+
+    c = *current;
+
+    while ( c ) {
+#ifndef macintosh
+        if ( c == '/' || c == '\\' )
+#else
+        if ( c == ':' )
+#endif
+            base = current + 1;
+
+        current++;
+        c = *current;
+    }
+
+    return(char*)base;
+}
+
+void error_msg( const char* fmt, ... )
+{
+    va_list  ap;
+    va_start( ap, fmt );
+    vfprintf( stderr, fmt, ap );
+    va_end( ap );
+
+    exit(1);
+}
+
+void fterror_msg( const char* fmt, ... )
+{
+    va_list  ap;
+    va_start( ap, fmt );
+    vfprintf( stderr, fmt, ap );
+    va_end( ap );
+
+    fprintf( stderr, "\nerror = 0x%04x\n", error );
+    exit(1);
+}
+
+void warning_msg( const char* fmt, ... )
+{
+    va_list  ap;
+    va_start( ap, fmt );
+    vfprintf( stderr, fmt, ap );
+    va_end( ap );
+}
+
+/**
+ * Makes encoding from its name
+ *
+ * @param s      encoding name
+ * @return encoding in its binary format
+ */
+static unsigned int make_encoding( char  *s )
+{
+    int            i;
+    unsigned int  l = 0;
+
+    for ( i = 0; i < 4; i++ ) {
+        if ( !s[i] )
+            break;
+        l <<= 8;
+        l  += (unsigned int)s[i];
+    }
+
+    return l;
+}
+
+/**
+ * Loads font file and return number of faces or -1
+ *
+ * @param filepath font file path
+ * @return number of faces or -1
+ */
+static int loadFontFile() {
+    int num_faces;
+    int len = strlen( font_file );
+    if ( len > 1024 )
+        len = 1024;
+
+    strncpy( filename, font_file, len );
+    filename[len] = 0;
+
+    font_file = filename;
+
+    error = FT_New_Face( library, filename, 0, &face );
+
+    if( error ) {
+        /* could not open the file directly; we will now try various */
+        /* suffixes like `.ttf' or `.pfb'                            */
+
+#ifndef macintosh
+
+        const char** suffix = file_suffixes;
+        int suffix_len = 0;
+        int i = len - 1;
+
+        while ( i > 0 && filename[i] != '\\' && filename[i] != '/' ) {
+            if ( filename[i] == '.' ) {
+                suffix_len = i;
+                break;
+            }
+            i--;
+        }
+        if ( suffix_len == 0 ) {
+            for ( suffix = file_suffixes; suffix[0]; suffix++ ) {
+                /* try with current suffix */
+                strcpy( filename + len, suffix[0] );
+
+                error = FT_New_Face( library, filename, 0, &face );
+                if ( !error )
+                    goto Success;
+            }
+        }
+
+#endif /* !macintosh */
+
+        error_msg("Could not open font file %s\n", font_file);
+    }
+
+    Success:
+
+    num_faces = face->num_faces;
+
+    return num_faces;
+}
+
+/**
+ * Prints charmap info
+ *
+ * @param i charmap index in the current face
+ */
+static void printCMapInfo( int i )
+{
+    FT_CharMap cmap = face->charmaps[i];
+    int platform_id = cmap->platform_id;
+    int encoding_id = cmap->encoding_id;
+    static char s[20];
+    Platform* plat = platforms;
+    Encoding* enc;
+
+    char * platform = NULL;
+    char * encoding = NULL;
+    for( ; plat->id >= 0; plat++ ) {
+        if( plat->id == platform_id ) {
+            platform = plat->name;
+            for( enc = plat->encodings; enc->id >= 0; enc++ ) {
+                if( enc->id == encoding_id ) {
+                    encoding = enc->name;
+                    break;
+                }
+            }
+            break;
+        }
+    }
+
+    if( platform == NULL ) {
+
+        sprintf(s, "%d", platform_id);
+        platform = s;
+    }
+
+    if( encoding == NULL ) {
+        unsigned long enc = encoding_id;
+        static char s[5];
+        s[0] = (char) (enc>>24);
+        s[1] = (char) (enc>>16);
+        s[2] = (char) (enc>>8);
+        s[3] = (char) (enc);
+        s[4] = (char) 0;
+        encoding = s;
+    }
+
+    printf("   %d: platform: %s, encoding: %s\n", i, platform, encoding);
+}
+
+/**
+ * Prints face info
+ *
+ * @param face   face
+ */
+static void printFaceInfo( FT_Face face )
+{
+    int i;
+
+    printf( "   family: %s\n", face->family_name );
+    printf( "   style:  %s\n", face->style_name );
+
+    /* CharMaps */
+    printf( "   charmaps:\n" );
+
+    for(i=0; i<face->num_charmaps; i++ ) {
+        printCMapInfo(i);
+    }
+}
+
+/**
+ * Prints font info
+ *
+ * @param font_file name of font file to print
+ */
+static void printFontInfo()
+  {
+  int i;
+  float font_height;
+  int font_size = 17;
+  int resolution = 100;
+
+  int num_faces = loadFontFile();
+  if( num_faces < 0 ) return;
+
+
+
+  //  font_height = (face->units_per_EM * font_size * resolution) / (72 * face->height);
+  font_height = (face->ascender * font_size * resolution) / (72 * face->units_per_EM);
+
+  //  printf("[[[%f]]]\n", font_height);
+
+  printf("family:%s\nstyle:%s\nnr_of_faces:%d\nunits_per_em:%d\nascender:%d\ndescender:%d\n",
+         face->family_name,
+         face->style_name,
+         num_faces,
+         face->units_per_EM,
+         face->ascender,
+         face->descender*-1,
+         font_height);
+
+
+  /*
+    printf( "There %s %d %s in this file.\n",
+            num_faces == 1 ? (char *)"is" : (char *)"are",
+            num_faces,
+            num_faces == 1 ? (char *)"face" : (char *)"faces" );
+
+    for( i = 0; i < num_faces; i++ ) {
+        if( i > 0 ) {
+            error = FT_New_Face( library, font_file, i, &face );
+            if ( error )
+              fterror_msg("Could not open face %d.\n", i);
+        }
+
+        printf( "\n----- Face number: %d -----\n\n", i );
+        printFaceInfo( face );
+        printf( "\n" );
+        FT_Done_Face( face );
+    }
+  */
+
+
+}
+
+/**
+ * Loads font file, face and charmap
+ *
+ * @param filepath font file name
+ * @return 0 - ok, -1 - error
+ */
+static int install_font_file()
+{
+    int num_faces = loadFontFile();
+    if( num_faces < 0 ) return -1;
+    if( face_num >= num_faces ) {
+        error_msg("Invalid face number %d.\n", face_num);
+        return -1;
+    }
+
+    if( face_num != 0 ) {
+        FT_Done_Face( face );
+        error = FT_New_Face( library, font_file, face_num, &face );
+        if( error )
+            fterror_msg("Could not open face %d.\n", face_num);
+    }
+
+    if( charmap_num >= face->num_charmaps ) charmap_num = 0;
+    error = FT_Set_Charmap(face, face->charmaps[charmap_num]);
+    if ( error ) {
+        FT_Done_Face( face );
+        fterror_msg("Could not set charmap %d.\n", charmap_num);
+    }
+
+    return 0;
+}
+
+static void init_freetype( void )
+{
+    error = FT_Init_FreeType( &library );
+    if( error )
+        fterror_msg("Could not initialize FreeType.\n");
+}
+
+static void done_freetype( void )
+{
+    FT_Done_FreeType( library );
+}
+
+
+
+
+
+
+
+int main( int argc, char*  argv[] )
+  {
+  if (argv[1]==NULL)
+    error_msg("No file specified\nUsage: %s fontfile.ttf|ttf|ttc|pfa|pfb\n", argv[0]);
+
+  font_file = argv[1];
+
+  /* Initialize engine */
+  init_freetype();
+
+  printFontInfo();
+
+  done_freetype();
+
+  return 0;
+  }
diff -ruN ttf2fft_orig/makefile ttf2fft/makefile
--- ttf2fft_orig/makefile	2006-01-20 10:50:09.000000000 +0000
+++ ttf2fft/makefile	2006-01-20 10:50:17.000000000 +0000
@@ -1,10 +1,33 @@
-CFLAGS = `freetype-config --cflags`
-LIBS = `freetype-config --libs` -lm -lstdc++
+# program names
+CC=gcc
+CXX=g++
+INSTALL=install
 
-all: ttf2fft
+# compiler flags
+CFLAGS=$(shell freetype-config --cflags)
+LIBS=$(shell freetype-config --libs) -lm
+
+# installation path
+prefix=/usr
+
+# the programs we'll compile
+PROGRAMS=ttf2fft fontinfo
+
+#
+# build and install rules:
+#
+all: $(PROGRAMS)
 
 clean:
-	rm -f ttf2fft
+	rm -f $(PROGRAMS)
+
+ttf2fft: ttf2fft.cxx geom.cxx swflib.cxx
+	$(CXX) $(CFLAGS) -o ttf2fft ttf2fft.cxx geom.cxx swflib.cxx $(LIBS)
+
+fontinfo: fontinfo.c
+	$(CXX) $(CFLAGS) -o fontinfo fontinfo.c $(LIBS)
 
-ttf2fft: ttf2fft.cxx
-	gcc -o ttf2fft *.cxx $(CFLAGS) $(LIBS)
+install:
+	$(INSTALL) -d $(DESTDIR)$(prefix)/bin
+	$(INSTALL) ttf2fft $(DESTDIR)$(prefix)/bin
+	$(INSTALL) fontinfo $(DESTDIR)$(prefix)/bin
diff -ruN ttf2fft_orig/ttf2fft.cxx ttf2fft/ttf2fft.cxx
--- ttf2fft_orig/ttf2fft.cxx	2006-01-20 10:50:09.000000000 +0000
+++ ttf2fft/ttf2fft.cxx	2006-01-20 10:50:17.000000000 +0000
@@ -598,11 +598,11 @@
     int nGlyph = codetable.size();
     printf("found %d chars\n", nGlyph);
 
-    int maxcode = indexes.elementAt(0);
-    for (int i=1; i<nGlyph; i++)
-	if (indexes.elementAt(i) > maxcode) maxcode = indexes.elementAt(i);
-    if( maxcode>255 ) flags |= WIDE_CODES;
-    printf("using %s-byte char codes\n", maxcode>255?"2":"1");
+    int lastcode = indexes.elementAt(nGlyph-1);
+    printf("lastcode:%d\n", lastcode);
+    //lastcode=300;
+    if(lastcode>255 ) flags |= WIDE_CODES;
+    printf("using %s-byte char codes\n", lastcode>255?"2":"1");
 
     fob->writeWord(nGlyph);
 
