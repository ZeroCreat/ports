Binary files bsedsrc_orig/bsed and bsedsrc/bsed differ
diff -r -u -w -- bsedsrc_orig/bsed.1 bsedsrc/bsed.1
--- bsedsrc_orig/bsed.1	2007-06-26 09:53:50.000000000 +0000
+++ bsedsrc/bsed.1	2007-06-26 10:04:15.000000000 +0000
@@ -4,10 +4,10 @@
 bsed - binary stream editor
 .SH SYNOPSIS
 .B bsed
-[-vsw] [-m [min-]max] search=replace infile outfile
+[-vswz] [-m [min-]max] search=replace infile outfile
 .br
 .B bsed
-[-vsw] [-m [min-]max] search infile
+[-vswz] [-m [min-]max] search infile
 .SH DESCRIPTION
 .B bsed
 searches for a binary string in a file.  If a replace string is given,
@@ -51,6 +51,11 @@
 .B bsed
 will warn if the search and replace strings are not the same length.
 This option suppresses that warning.
+.IP "-z" 5
+If the search and replace strings are not the same length, the shorter will
+be zero-padded to fit the longer one.
+.IP "-0" 5
+Assume both, search and replace strings, to be nul-terminated.
 .IP "-m [min-]max" 5
 Normally
 .B bsed
diff -r -u -w -- bsedsrc_orig/bsed.c bsedsrc/bsed.c
--- bsedsrc_orig/bsed.c	2007-06-26 09:53:50.000000000 +0000
+++ bsedsrc/bsed.c	2007-06-26 10:04:25.000000000 +0000
@@ -12,18 +12,20 @@
 char *Version = "@(#) bsed 1.0, November 16, 1989";
 
 #include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
+#include <getopt.h>
 
-unsigned char *arg0;		/* program name argv[0] */
+char *arg0;		/* program name argv[0] */
 
 FILE *ifile,*ofile;		/* input and output files */
-unsigned char *ifilenm,*ofilenm; /* input and output file names */
+char *ifilenm,*ofilenm; /* input and output file names */
 #define REPLACESIZE	128	/* maximum replacement string size */
 unsigned char *search;		/* search string */
-unsigned char sbuf[REPLACESIZE+1]; /* search string buffer */
+unsigned char sbuf[REPLACESIZE+1+1]; /* search string buffer */
 int slen;			/* search string length */
 unsigned char *replace;		/* replace string */
-unsigned char rbuf[REPLACESIZE+1]; /* replace string buffer */
+unsigned char rbuf[REPLACESIZE+1+1]; /* replace string buffer */
 int rlen;			/* replace string length */
 
 int silent = 0;			/* silent flag */
@@ -32,6 +34,8 @@
 int minmatch = 1;		/* minimum match count */
 int maxmatch = -1;		/* maxmatch count */
 int match = 0;			/* match count */
+int zeropad = 0;    /* zero-pad replacement string if it is smaller */
+int nulterm = 0;   /* zero-terminate both strings */
 
 #define CTXTSIZE	5	/* size of left and right context  */
 unsigned char ltxt[CTXTSIZE+1],rtxt[CTXTSIZE+1];
@@ -41,6 +45,9 @@
 int stack[REPLACESIZE+CTXTSIZE+1]; /* saved character stack */
 int topstack = 0;
 
+static int convert(unsigned char *s,unsigned char *o);
+static unsigned char *dump(unsigned char *str,int len);
+
 #define mygetc()	((topstack == 0) ? getc(ifile) : stack[--topstack])
 #define myungetc(c)	(stack[topstack++] = c)
 /* myputc saves the character in the ltxt arrray for context printing */
@@ -59,19 +66,18 @@
 			} while(0);
 #endif
 
-usage()
+void usage()
 {
     fprintf(stderr,
-"Usage:\t%s [-vsw] [-m [minmatch-]maxmatch] search=replace infile outfile\n",
+"Usage:\t%s [-0vswz] [-m [minmatch-]maxmatch] search=replace infile outfile\n",
 							arg0);
     fprintf(stderr,
-      "\t%s [-vsw] [-m [minmatch-]maxmatch] search infile\n",arg0);
+      "\t%s [-0vswz] [-m [minmatch-]maxmatch] search infile\n",arg0);
     fprintf(stderr, "%s\n", Version);
     exit(2);
 }
 
-main(argc,argv)
-unsigned char **argv;
+int main(int argc,char *argv[])
 {
     register int c;
     register long cnt;
@@ -81,7 +87,7 @@
     extern int optind;
     int errflg = 0;
 
-    if ((arg0 = (unsigned char *) strrchr(*argv,'/')) == NULL)
+    if ((arg0 = strrchr(*argv,'/')) == NULL)
 	arg0 = *argv;
     else
 	arg0++;
@@ -90,7 +96,7 @@
     ofilenm = NULL;
     ofile = NULL;
 
-    while ((c = getopt(argc, argv, "svwm:")) != EOF)
+    while ((c = getopt(argc, (char**)argv, "svwm:z0")) != EOF)
     {
 	switch (c)
 	{
@@ -103,6 +109,12 @@
 	case 'v':
 	    verbose++;
 	    break;
+	case 'z':
+	    zeropad++;
+	    break;
+	case '0':
+	    nulterm++;
+	    break;
 	case 'm':
 	    if ((c = sscanf(optarg,"%d-%d",&minmatch,&maxmatch)) <= 0)
 	    {
@@ -140,10 +152,10 @@
     if (argc < 2)
 	usage();
 
-    search = *argv++;
+    search = (unsigned char *)*argv++;
     ifilenm = *argv++;
 
-    if ((s = (unsigned char *) strchr(search,'=')) != NULL)
+    if ((s = (unsigned char *) strchr((char*)search,'=')) != NULL)
     {
 	if (argc != 3)
 	    usage();
@@ -183,11 +195,37 @@
 	    fprintf(stderr,"%s: null replace string\n",arg0);
 	    usage();
 	}
-	if ((slen != rlen) && !nowarn)
+      if(nulterm)
+      {
+        sbuf[slen++] = '\0';
+        rbuf[rlen++] = '\0';
+      }
+      if((slen != rlen))
+      {
+        if(zeropad)
+        {
+          if(rlen < slen)
+          {
+            memset(&rbuf[rlen], 0, slen - rlen);
+            rlen = slen;
+          }
+          if(rlen > slen)
+          {
+            memset(&sbuf[slen], 0, rlen - slen);
+            slen = rlen;
+            if(!nowarn)
+              fprintf(stderr,
+                      "%s: warning: zero-padding search string. this is probably not what you intended.\n",
+                      arg0);
+          }
+        }
+        else if(!nowarn)
 	    fprintf(stderr,
 		"%s: warning: search and replace strings not same length\n",
 				arg0);
     }
+    }  
+      
     if (verbose)
     {
 	fprintf(stderr,"search\t%s\n",dump(search,slen));
@@ -255,7 +293,7 @@
 			if (verbose)
 			{
 			    register unsigned char *p;
-			    register int c;
+			    register int c=0;
 
 			    /* read next few characters for right context */
 			    rtlen = 0;
@@ -357,9 +395,7 @@
 				     (((c) >= 'A') && ((c) <= 'F')))
 #define hexval(c)	(isnum(c) ? ((c) & 0xf) : (((c) & 0xf) + 9))
 
-convert(s,o)
-register unsigned char *s;
-register unsigned char *o;
+int convert(unsigned char *s,unsigned char *o)
 {
     register unsigned char *p;
     register unsigned char c,t;
@@ -445,9 +481,7 @@
 #define isprint(c)	(((c) >= ' ') && ((c) <= '~'))
 
 unsigned char *
-dump(str,len)
-unsigned char *str;
-register int len;
+dump(unsigned char *str,int len)
 {
     static unsigned char buf[NUMDUMP*4+1];
     register unsigned char c,*p,*s,*end;
@@ -477,3 +511,4 @@
     *p++ = '\0';
     return(&buf[0]);
 }
+  
