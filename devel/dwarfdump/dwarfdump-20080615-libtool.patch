diff -r -u -N -- dwarf-20080615_orig/Makefile.am dwarf-20080615/Makefile.am
--- dwarf-20080615_orig/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ dwarf-20080615/Makefile.am	2008-07-08 05:14:00.000000000 +0200
@@ -0,0 +1 @@
+SUBDIRS = dwarfdump
diff -r -u -N -- dwarf-20080615_orig/configure.in dwarf-20080615/configure.in
--- dwarf-20080615_orig/configure.in	1970-01-01 01:00:00.000000000 +0100
+++ dwarf-20080615/configure.in	2008-07-08 05:22:40.000000000 +0200
@@ -0,0 +1,10 @@
+AC_INIT([dwarf], [20080615])
+AC_CONFIG_AUX_DIR([.])
+AC_CONFIG_MACRO_DIR([m4])
+AM_INIT_AUTOMAKE
+
+AC_CANONICAL_HOST
+
+AC_CONFIG_SUBDIRS([dwarfdump])
+
+AC_OUTPUT([Makefile])
diff -r -u -N -- dwarf-20080615_orig/dwarfdump/Makefile.am dwarf-20080615/dwarfdump/Makefile.am
--- dwarf-20080615_orig/dwarfdump/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ dwarf-20080615/dwarfdump/Makefile.am	2008-07-08 06:13:44.000000000 +0200
@@ -0,0 +1,81 @@
+#
+#  Makefile for dwarfdump
+#  This is made very simple so it should work with
+#  any 'make'.
+
+#
+
+# ../libdwarf gets us to local headers
+
+DIRINC = $(srcdir)/../libdwarf
+CPPFLAGS = -I$(DIRINC) -I$(srcdir) -I$(builddir)
+
+bin_PROGRAMS = dwarfdump
+noinst_PROGRAMS = tag_tree_build tag_attr_build
+
+dwarfdump_SOURCES = _tag_tree_table.c \
+	_tag_attr_table.c \
+	dwarfdump.c \
+	dwconf.c \
+	esb.c \
+	dwarf_names.c \
+	makename.c \
+  dwarf_names.h \
+  dwarf_names_enum.h \
+  dwarf_names_new.h \
+  dwconf.h \
+  esb.h \
+  globals.h \
+  makename.h \
+  print_frames.h \
+	print_sections.c \
+	print_die.c \
+	print_reloc.c \
+	print_frames.c
+
+LIBS = -ldwarf
+
+tag_tree_build_SOURCES = tag_tree.c
+tag_attr_build_SOURCES = tag_attr.c
+
+GEN_HFILES = \
+	dwarf_names.h    \
+	_tag_tree_table.c \
+	_tag_attr_table.c
+
+man_MANS = dwarfdump.1
+sysconf_DATA = dwarfdump.conf
+
+EXTRA_DIST = \
+  tag_tree.list \
+  tag_attr.list \
+  dwarf_names.awk
+
+binprefix =
+
+GEN_CFILES = \
+	dwarf_names.c
+
+CONFIG_CLEAN_FILES = $(GEN_HFILES)
+
+_tag_tree_table.c: $(srcdir)/tag_tree.list tag_tree_build
+	$(RM) _tmp1.c && cp -f $(srcdir)/tag_tree.list _tmp1.c
+	$(CC) $(CFLAGS) $(CPPFLAGS) -E _tmp1.c \
+		| awk '!/^#/ && !/^[ \t]*$$/' > ./tag_tree_build.tmp
+	./tag_tree_build <tag_tree_build.tmp > $@
+	$(RM) tag_tree_build.tmp tag_tree_build _tmp1.c
+
+_tag_attr_table.c: $(srcdir)/tag_attr.list tag_attr_build
+	$(RM) _tmp2.c && cp -f $(srcdir)/tag_attr.list _tmp2.c
+	$(CC) $(CFLAGS) $(CPPFLAGS) -E _tmp2.c \
+		| awk '!/^#/ && !/^[ \t]*$$/' > ./tag_attr_build.tmp
+	./tag_attr_build <tag_attr_build.tmp > $@
+	$(RM) tag_attr_build.tmp tag_attr_build _tmp2.c
+
+# The file dwarf_names.awk generates BOTH dwarf_names.h and dwarf_names.c
+#   be careful of the make dependencies here
+dwarf_names.h dwarf_names.c: dwarf_names.awk $(DIRINC)/dwarf.h
+	$(RM) dwarf_names.h dwarf_names.c
+	awk -f $(srcdir)/dwarf_names.awk $(DIRINC)/dwarf.h > dwarf_names.c
+
+print_sections.lo dwarf_names.lo: dwarf_names.h
diff -r -u -N -- dwarf-20080615_orig/dwarfdump/configure.in dwarf-20080615/dwarfdump/configure.in
--- dwarf-20080615_orig/dwarfdump/configure.in	2008-07-08 05:03:58.000000000 +0200
+++ dwarf-20080615/dwarfdump/configure.in	2008-07-08 05:37:31.000000000 +0200
@@ -1,17 +1,21 @@
 dnl Process this file with autoconf to produce a configure script.
-AC_INIT(dwarfdump.c)
-AC_CONFIG_HEADER(config.h)
+AC_INIT([dwarfdump],[20080615],[dwarfdump.c])
+AC_CONFIG_AUX_DIR([..])
+AC_CONFIG_MACRO_DIR([../m4])
+AC_CONFIG_HEADER([config.h])
+AM_INIT_AUTOMAKE
 
 AC_PROG_CC
-AC_GCC_TRADITIONAL
+AC_PROG_GCC_TRADITIONAL
 AC_PROG_INSTALL
-AC_CHECK_TOOL(RANLIB, ranlib, :)
-AC_CHECK_TOOL(AR, ar)
+AC_PROG_LIBTOOL
+dnl AC_CHECK_TOOL(RANLIB, ranlib, :)
+dnl AC_CHECK_TOOL(AR, ar)
 dnl AC_ARFLAGS
 
 
-/* Define to 1 if the elf64_getehdr function is in libelf.a */
-#undef HAVE_ELF64_GETEHDR
+dnl /* Define to 1 if the elf64_getehdr function is in libelf.a */
+dnl #undef HAVE_ELF64_GETEHDR
 
 
 
@@ -31,28 +35,26 @@
 	[Define to header that first defines elf.])
 fi
 
-AC_TRY_COMPILE([#include LOCATION_OF_LIBELFHEADER],  Elf64_Rel *p; int i; i = p->r_info; ,AC_DEFINE(HAVE_ELF64_R_INFO,1,
-	[Define to 1 if the Elf64_Rel structure has r_info field.]))
-AC_TRY_COMPILE([],  __uint32_t p; p = 3; ,AC_DEFINE(HAVE___UINT32_T,
-	1,[See if __uint32_t is predefined in the compiler.  ]))
-AC_TRY_COMPILE([],  __uint64_t p; p = 3; ,AC_DEFINE(HAVE___UINT64_T,
-	1,[See if __uint64_t is predefined in the compiler. ]))
-AC_TRY_COMPILE([#include <sys/types.h>],[  __uint32_t p; p = 3]; ,
-	AC_DEFINE(HAVE___UINT32_T_IN_SYS_TYPES_H,1,
-		[Define 1 if sys/types.h defines __uint32_t.]))
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include LOCATION_OF_LIBELFHEADER]], [[Elf64_Rel *p; int i; i = p->r_info; ]])],[AC_DEFINE(HAVE_ELF64_R_INFO,1,
+	Define to 1 if the Elf64_Rel structure has r_info field.)],[])
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[__uint32_t p; p = 3; ]])],[AC_DEFINE(HAVE___UINT32_T,
+	1,See if __uint32_t is predefined in the compiler.  )],[])
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[__uint64_t p; p = 3; ]])],[AC_DEFINE(HAVE___UINT64_T,
+	1,See if __uint64_t is predefined in the compiler. )],[])
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>]], [[  __uint32_t p; p = 3; ]])],[AC_DEFINE(HAVE___UINT32_T_IN_SYS_TYPES_H,1,
+		Define 1 if sys/types.h defines __uint32_t.)],[])
 
-AC_TRY_COMPILE([
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #include <libelf.h>
-],[  int p; p = 0; ] ,
-  AC_DEFINE(HAVE_RAW_LIBELF_OK,1,
-        [Define 1 if plain libelf builds.]))
-AC_TRY_COMPILE([
+]], [[  int p; p = 0;  ]])],[AC_DEFINE(HAVE_RAW_LIBELF_OK,1,
+        Define 1 if plain libelf builds.)],[])
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #define _GNU_SOURCE
 #include <libelf.h>
-],[  off64_t  p; p = 0;] ,
-  AC_DEFINE(HAVE_LIBELF_OFF64_OK,1,
-        [Define 1 if  off64 is defined via libelf with GNU_SOURCE.]))
+]], [[  off64_t  p; p = 0; ]])],[AC_DEFINE(HAVE_LIBELF_OFF64_OK,1,
+        Define 1 if  off64 is defined via libelf with GNU_SOURCE.)],[])
 
 
 
-AC_OUTPUT(Makefile)
+AC_CONFIG_FILES([Makefile])
+AC_OUTPUT
