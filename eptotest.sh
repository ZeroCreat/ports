#!/bin/sh



# NAME
#   eptotest - a program for [:-- insert purpose here --:]
# 
# SYNOPSIS
#   eptotest [-DNUvV] [-A logfile] [-F logfile] [-S logarg] [-T timeout]  [:--your options and arguments here--:]
#
# DESCRIPTION
#   
#   
# OPTIONS
#   [:-- your options go here, to be 100% epto compatible, use lower case --:]
#
#   epto options
#   ------------
#   -A file	Append to file when logging and tracing. See also -F.
#   -D		Debug mode. Turn on the sh -x flag. Start from main.
#   -DD         Debug mode. Turn on the sh -vx flags. Start very early
#   -F file	File used for logging and tracing. Overwrite instead of Append.
#   -S logarg   Log to syslog instead of (or in addition to)  stderr or file. 
#               Epto uses the logger(1) command to print to syslog.
#               
#               Log entries are written to syslog 'as is'. This means that
#               the syslog entry will contain two timestamps, one from syslog
#               and one (in the actual message part of the entry) from epto.
#               Since syslog entries are often sent to a separate syslog host,
#               and the syslog timestamp tells you when the entry was received,
#               not when it was generated, the only reliable timestamp you have
#               is the one generated by epto which is part of the actual entry.
#               This is especially true if the syslog host is unsynchronized 
#               with respect to the originating host, or in another timezone.
#               
#               Logarg can either be just a dot ('.'), which tells epto to log
#               to syslog with facility=user and the default levels (se below).
#               Logarg can also contain a more finegrained specification of
#               syslogs behaviour. It can specify the tag text (see logger -t),
#               and the facility and levels (see logger -p).
#               If logarg begins with '+', logs will go both to syslog and
#               the usual place (stderr or file). Also, if either '-F file' or 
#               '-A file' is specified on the command line, epto logs to that 
#               file (usual place) too.
#               
#               In the following table, all parts are optional, but you must
#               specify at least one of the parts. The must also be present
#               in the order specified.
#               
#               Logarg parts (if not just dot '.'): 
#               ------------------------------
#               +         Tell epto to log both to syslog and the usual place.
#               tag text: All text upto last colon (':') is used as the tag.
#               facility. Specify the facility to use (the dot is required).
#               a,b,c,d,e Specify the mapping for the five epto log levels
#                         trace, log, warn, alert, panic, in that order.
#               
#               The default mapping of epto log levels to syslog levels are:
#               
#               epto        syslog
#               ----        ------
#               trace       debug
#               log         notice 
#               warn        warning
#               alert       err
#               panic       crit
#               
#               Don't forget to check that user.debug will be logged somewhere
#               (/etc/syslog.conf is the usual config file).
#               
#               Examples:  cmd -S.   cmd -S+    cmd -Slocal2.   
#                          cmd -S"+txt: $duh:local1.debug,notice,err,crit,emerg
#               
#   -T timeout  Timeout after <timeout> seconds, and kill this program, and
#               all its subprocesses. The subprocesses will be killed in 
#               backwards order (with signal SIGTERM), so that each process can
#               undo anything it needs to. A process that is not finished with
#               cleaning up after 3 seconds, will be killed with signal 9.
#               This does not mean that each process will take 3 seconds to 
#               handle. If the process is finished after a fraction of a 
#               second, that is how long you wait. After that, the process is
#               checked once a second.
#               You can change the number of seconds to wait for cleanup, by
#               appending a comma and the number of seconds you want to wait
#               for cleanup (like this: cmd -T 30,5). Appending ",0" means 
#               just wait a fraction of a second for cleanup before killing
#               the process. Appending just a comma (like this: cmd -T 30,)
#               means: Wait until the cleanup is done, even if it takes forever
#               (where forever really is more like 40 years, but that should
#               be a good enough approximation of forever).
#            
#   -U          Unset (and export) EPTOTEST_OPTIONS.
#   -v		Version. Print version information and exit with exit code 0.
#   -V          Verbose. Turn on tracing. Activate after parsing options.
#   -VV		Very Verbose. More verbose tracing and logging.
#   
# EXAMPLES
#   [:-- Very important sections. Good examples are pure gold. --:]
#   
# ENVIRONMENT
#   EPTOTEST_OPTIONS
# 		Same syntax as options on the command line, 
#		but parsed before the command line. 
#   
# FILES
#   [:-- Config files and such that this program reads/uses go here. --:]
#   
# SEE ALSO
#   epto(1), eptolite(1)
#   
# DIAGNOSTICS
#   0	eptotest succeeded.
#   1   eptotest failed
#   2   Syntax error. eptotest was invoked in a wrong way.
#   [:-- Many programs have a need for more exit codes. Document them here --:]
#
# NOTES
#   This script is compatible with epto version 0.8.16.
#   
#   EPTOTEST_OPTIONS can not have option arguments with spaces in them.
#   For example: EPTOTEST_OPTIONS='-F logfile'  is fine, 
#   but:  EPTOTEST_OPTIONS='-z "yucky spaces"'  will not work
#   		
#   
# VERSION
#   1.0
#
# AUTHOR
#      
#
# COPYRIGHT
#   Copyright (c) 2008 Jonas Mölsä 
#    
#   Permission is hereby granted, free of charge, to any person obtaining 
#   a copy of this software and associated documentation files 
#   (the "Software"), to deal in the Software without restriction, including 
#   without limitation the rights to use, copy, modify, merge, publish, 
#   distribute, sublicense, and/or sell copies of the Software, and to 
#   permit persons to whom the Software is furnished to do so, 
#   subject to the following conditions:
#   
#   The above copyright notice and this permission notice shall be included 
#   in all copies or substantial portions of the Software.
#   
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
#   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#   DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
#   OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
#   THE USE OR OTHER DEALINGS IN THE SOFTWARE.                             
#    


init_variables ()
{

    # Options without arguments first, then options with arguments.
    # Epto opts auto-appended: [-ADUvV] [-F file] [-S logarg] [-T timeout]
    #
    set_option_syntax ""    		       

    set_argument_syntax ""       

    set_version_id '$Id$'        # or V1.0 or whatever is appropriate 


    # global variable initalizations goes here

    return 0
}


handle_options_and_command_arguments ()  #Your opts. Std opts handled elsewhere
{
    return 0
}


setup_initial_commit_rollback_and_exit_handling ()
{
    return 0
}


main ()   # Arguments are $1, $2 etc. Options have already been shifted away.
{
    # The main code goes here 

    return 0
}


init_option_argument_separators () { :; }  #Advanced multi-arg options handling

################################### Do not change anything after this line!
# Use EPTOLIB_DIR if set, else use /usr/lib/epto
#
. ${EPTOLIB_DIR:="/usr/lib/epto"}/eptolib.sh ||
    { echo "Can't read eptolib.sh" >&2; exit 1; }
  
epto_normal_exit
