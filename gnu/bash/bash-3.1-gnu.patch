Only in bash-3.1: .build
Only in bash-3.1: Makefile
Only in bash-3.1: bashversion
Only in bash-3.1: buildversion.o
Only in bash-3.1/builtins: Makefile
Only in bash-3.1/builtins: builtext.h
Only in bash-3.1/builtins: builtins.c
Only in bash-3.1/builtins: mkbuiltins
Only in bash-3.1/builtins: mkbuiltins.o
Only in bash-3.1: config.h
Only in bash-3.1: config.log
Only in bash-3.1: config.status
Only in bash-3.1/doc: Makefile
diff -ru bash-3.1_orig/doc/bash.1 bash-3.1/doc/bash.1
--- bash-3.1_orig/doc/bash.1	2005-10-12 17:40:52.000000000 +0200
+++ bash-3.1/doc/bash.1	2006-01-26 16:55:01.000000000 +0100
@@ -6,12 +6,12 @@
 .\"	Case Western Reserve University
 .\"	chet@po.cwru.edu
 .\"
-.\"	Last Change: Sat Aug 27 13:28:44 EDT 2005
+.\"	Last Change: Wed Dec 28 19:58:45 EST 2005
 .\"
 .\" bash_builtins, strip all but Built-Ins section
 .if \n(zZ=1 .ig zZ
 .if \n(zY=1 .ig zY
-.TH BASH 1 "2005 Aug 27" "GNU Bash-3.1-beta1"
+.TH BASH 1 "2005 Dec 28" "GNU Bash-3.1"
 .\"
 .\" There's some problem with having a `@'
 .\" in a tagged paragraph with the BSD man macros.
@@ -677,8 +677,8 @@
 .B nocasematch
 is enabled, the match is performed without regard to the case
 of alphabetic characters.
-The return value is 0 if the string matches or does not match
-the pattern, respectively, and 1 otherwise.
+The return value is 0 if the string matches (\fB==\fP) or does not match
+(\fB!=\fP) the pattern, and 1 otherwise.
 Any part of the pattern may be quoted to force it to be matched as a
 string.
 .if t .sp 0.5
@@ -807,6 +807,12 @@
 as for pathname expansion (see
 .B Pathname Expansion
 below).
+The \fIword\fP is expanded using tilde
+expansion, parameter and variable expansion, arithmetic substituion,
+command substitution, process substitution and quote removal.
+Each \fIpattern\fP examined is expanded using tilde
+expansion, parameter and variable expansion, arithmetic substituion,
+command substitution, and process substitution.
 If the shell option
 .B nocasematch
 is enabled, the match is performed without regard to the case
@@ -8484,7 +8490,7 @@
 returns true if any of the arguments are found, false if
 none are found.
 .TP
-\fBulimit\fP [\fB\-SHacdflmnpstuv\fP [\fIlimit\fP]]
+\fBulimit\fP [\fB\-SHacdfilmnpqstuvx\fP [\fIlimit\fP]]
 Provides control over the resources available to the shell and to
 processes started by it, on systems that allow such control.
 The \fB\-H\fP and \fB\-S\fP options specify that the hard or soft limit is
@@ -8523,6 +8529,9 @@
 .B \-f
 The maximum size of files created by the shell
 .TP
+.B \-i
+The maximum number of pending signals
+.TP
 .B \-l
 The maximum size that may be locked into memory
 .TP
@@ -8536,6 +8545,9 @@
 .B \-p
 The pipe size in 512-byte blocks (this may not be set)
 .TP
+.B \-q
+The maximum number of bytes in POSIX message queues
+.TP
 .B \-s
 The maximum stack size
 .TP
@@ -8547,6 +8559,9 @@
 .TP
 .B \-v
 The maximum amount of virtual memory available to the shell
+.TP
+.B \-x
+The maximum number of file locks
 .PD
 .PP
 If
diff -ru bash-3.1_orig/doc/bashref.texi bash-3.1/doc/bashref.texi
--- bash-3.1_orig/doc/bashref.texi	2005-10-03 21:07:21.000000000 +0200
+++ bash-3.1/doc/bashref.texi	2006-01-26 16:55:01.000000000 +0100
@@ -961,8 +961,8 @@
 (see the description of @code{shopt} in @ref{Bash Builtins})
 is enabled, the match is performed without regard to the case
 of alphabetic characters.
-The return value is 0 if the string matches or does not match
-the pattern, respectively, and 1 otherwise.
+The return value is 0 if the string matches (@samp{==}) or does not
+match (@samp{!=})the pattern, and 1 otherwise.
 Any part of the pattern may be quoted to force it to be matched as a
 string.
 
@@ -2598,7 +2598,7 @@
 Builtin commands are necessary to implement functionality impossible
 or inconvenient to obtain with separate utilities.
 
-This section briefly the builtins which Bash inherits from
+This section briefly describes the builtins which Bash inherits from
 the Bourne Shell, as well as the builtin commands which are unique
 to or have been extended in Bash.
 
@@ -3833,7 +3833,7 @@
 @item ulimit
 @btindex ulimit
 @example
-ulimit [-acdflmnpstuvSH] [@var{limit}]
+ulimit [-acdfilmnpqstuvxSH] [@var{limit}]
 @end example
 @code{ulimit} provides control over the resources available to processes
 started by the shell, on systems that allow such control.  If an
@@ -3857,6 +3857,9 @@
 @item -f
 The maximum size of files created by the shell.
 
+@item -i
+The maximum number of pending signals.
+
 @item -l
 The maximum size that may be locked into memory.
 
@@ -3869,6 +3872,9 @@
 @item -p
 The pipe buffer size.
 
+@item -q
+The maximum number of bytes in POSIX message queues.
+
 @item -s
 The maximum stack size.
 
@@ -3881,6 +3887,9 @@
 @item -v
 The maximum amount of virtual memory available to the process.
 
+@item -x
+The maximum number of file locks.
+
 @end table
 
 If @var{limit} is given, it is the new value of the specified resource;
@@ -4089,8 +4098,8 @@
 Print shell input lines as they are read.
 
 @item -x
-Print a trace of simple commands, \fBfor\fP commands, \fBcase\fP
-commands, \fBselect\fP commands, and arithmetic \fBfor\fP commands
+Print a trace of simple commands, @code{for} commands, @code{case}
+commands, @code{select} commands, and arithmetic @code{for} commands
 and their arguments or associated word lists after they are
 expanded and before they are executed.  The value of the @env{PS4}
 variable is expanded and the resultant value is printed before
diff -ru bash-3.1_orig/doc/version.texi bash-3.1/doc/version.texi
--- bash-3.1_orig/doc/version.texi	2005-09-20 20:52:56.000000000 +0200
+++ bash-3.1/doc/version.texi	2006-01-26 16:55:01.000000000 +0100
@@ -2,9 +2,9 @@
 Copyright (C) 1988-2005 Free Software Foundation, Inc.
 @end ignore
 
-@set LASTCHANGE Mon Sep  5 11:47:04 EDT 2005
+@set LASTCHANGE Fri Dec 30 10:50:51 EST 2005
 
-@set EDITION 3.1-beta1
-@set VERSION 3.1-beta1
-@set UPDATED 5 September 2005
-@set UPDATED-MONTH September 2005
+@set EDITION 3.1
+@set VERSION 3.1
+@set UPDATED 30 December 2005
+@set UPDATED-MONTH December 2005
Only in bash-3.1: eval.o
Only in bash-3.1/examples/loadables: Makefile
Only in bash-3.1/examples/loadables/perl: Makefile
Only in bash-3.1/lib/glob: Makefile
Only in bash-3.1/lib/intl: Makefile
Only in bash-3.1/lib/malloc: Makefile
Only in bash-3.1/lib/readline: Makefile
Only in bash-3.1/lib/sh: Makefile
Only in bash-3.1/lib/termcap: Makefile
Only in bash-3.1/lib/tilde: Makefile
Only in bash-3.1: mksyntax
diff -ru bash-3.1_orig/parse.y bash-3.1/parse.y
--- bash-3.1_orig/parse.y	2005-11-12 05:14:18.000000000 +0100
+++ bash-3.1/parse.y	2006-01-26 16:55:01.000000000 +0100
@@ -3695,7 +3695,9 @@
       struct builtin *b;
       b = builtin_address_internal (token, 0);
       if (b && (b->flags & ASSIGNMENT_BUILTIN))
-        parser_state |= PST_ASSIGNOK;
+	parser_state |= PST_ASSIGNOK;
+      else if (STREQ (token, "eval") || STREQ (token, "let"))
+	parser_state |= PST_ASSIGNOK;
     }
 
   yylval.word = the_word;
@@ -4686,18 +4688,21 @@
      int *retlenp;
 {
   WORD_LIST *wl, *rl;
-  int tok, orig_line_number, orig_token_size;
+  int tok, orig_line_number, orig_token_size, orig_last_token, assignok;
   char *saved_token, *ret;
 
   saved_token = token;
   orig_token_size = token_buffer_size;
   orig_line_number = line_number;
+  orig_last_token = last_read_token;
 
   last_read_token = WORD;	/* WORD to allow reserved words here */
 
   token = (char *)NULL;
   token_buffer_size = 0;
 
+  assignok = parser_state&PST_ASSIGNOK;		/* XXX */
+
   wl = (WORD_LIST *)NULL;	/* ( */
   parser_state |= PST_COMPASSIGN;
 
@@ -4740,7 +4745,7 @@
 	jump_to_top_level (DISCARD);
     }
 
-  last_read_token = WORD;
+  last_read_token = orig_last_token;		/* XXX - was WORD? */
   if (wl)
     {
       rl = REVERSE_LIST (wl, WORD_LIST *);
@@ -4752,6 +4757,10 @@
 
   if (retlenp)
     *retlenp = (ret && *ret) ? strlen (ret) : 0;
+
+  if (assignok)
+    parser_state |= PST_ASSIGNOK;
+
   return ret;
 }
 
diff -ru bash-3.1_orig/patchlevel.h bash-3.1/patchlevel.h
--- bash-3.1_orig/patchlevel.h	2005-07-20 19:58:20.000000000 +0200
+++ bash-3.1/patchlevel.h	2006-01-26 16:55:01.000000000 +0100
@@ -25,6 +25,6 @@
    regexp `^#define[ 	]*PATCHLEVEL', since that's what support/mkversion.sh
    looks for to find the patch level (for the sccs version string). */
 
-#define PATCHLEVEL 0
+#define PATCHLEVEL 5
 
 #endif /* _PATCHLEVEL_H_ */
Only in bash-3.1: pathnames.h
Only in bash-3.1/po: Makefile
Only in bash-3.1/po: Makefile.in
Only in bash-3.1/po: POTFILES
Only in bash-3.1: shell.o
Only in bash-3.1: stamp-h
diff -ru bash-3.1_orig/subst.c bash-3.1/subst.c
--- bash-3.1_orig/subst.c	2005-10-24 15:51:13.000000000 +0200
+++ bash-3.1/subst.c	2006-01-26 16:55:01.000000000 +0100
@@ -2187,7 +2187,7 @@
   if (mklocal && variable_context)
     {
       v = find_variable (name);
-      if (v == 0 || array_p (v) == 0)
+      if (v == 0 || array_p (v) == 0 || v->context != variable_context)
         v = make_local_array_variable (name);
       v = assign_array_var_from_string (v, value, flags);
     }
@@ -6795,6 +6795,12 @@
 	  if (temp && *temp && t_index > 0)
 	    {
 	      temp1 = bash_tilde_expand (temp, tflag);
+	      if  (temp1 && *temp1 == '~' && STREQ (temp, temp1))
+		{
+		  FREE (temp);
+		  FREE (temp1);
+		  goto add_character;		/* tilde expansion failed */
+		}
 	      free (temp);
 	      temp = temp1;
 	      sindex += t_index;
Only in bash-3.1/support: Makefile
Only in bash-3.1: syntax.c
diff -ru bash-3.1_orig/variables.c bash-3.1/variables.c
--- bash-3.1_orig/variables.c	2005-11-13 03:22:37.000000000 +0100
+++ bash-3.1/variables.c	2006-01-26 16:55:01.000000000 +0100
@@ -860,9 +860,11 @@
 {
   char val[INT_STRLEN_BOUND(int) + 1], *v;
 
+#if defined (READLINE)
   /* If we are currently assigning to LINES or COLUMNS, don't do anything. */
   if (winsize_assignment)
     return;
+#endif
 
   v = inttostr (lines, val, sizeof (val));
   bind_variable ("LINES", v, 0);
Only in bash-3.1: version.h
diff -ru bash-3.1_orig/y.tab.c bash-3.1/y.tab.c
--- bash-3.1_orig/y.tab.c	2005-11-14 15:53:30.000000000 +0100
+++ bash-3.1/y.tab.c	2006-01-26 16:55:35.000000000 +0100
@@ -1,51 +1,146 @@
+/* A Bison parser, made by GNU Bison 1.875d.  */
 
-/*  A Bison parser, made from /usr/src/local/chet/src/bash/src/parse.y
-    by GNU Bison version 1.28  */
+/* Skeleton parser for Yacc-like parsing with Bison,
+   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
 
-#define YYBISON 1  /* Identify Bison output.  */
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+/* As a special exception, when this file is copied by Bison into a
+   Bison output file, you may use that output file without restriction.
+   This special exception was added by the Free Software Foundation
+   in version 1.24 of Bison.  */
 
-#define	IF	257
-#define	THEN	258
-#define	ELSE	259
-#define	ELIF	260
-#define	FI	261
-#define	CASE	262
-#define	ESAC	263
-#define	FOR	264
-#define	SELECT	265
-#define	WHILE	266
-#define	UNTIL	267
-#define	DO	268
-#define	DONE	269
-#define	FUNCTION	270
-#define	COND_START	271
-#define	COND_END	272
-#define	COND_ERROR	273
-#define	IN	274
-#define	BANG	275
-#define	TIME	276
-#define	TIMEOPT	277
-#define	WORD	278
-#define	ASSIGNMENT_WORD	279
-#define	NUMBER	280
-#define	ARITH_CMD	281
-#define	ARITH_FOR_EXPRS	282
-#define	COND_CMD	283
-#define	AND_AND	284
-#define	OR_OR	285
-#define	GREATER_GREATER	286
-#define	LESS_LESS	287
-#define	LESS_AND	288
-#define	LESS_LESS_LESS	289
-#define	GREATER_AND	290
-#define	SEMI_SEMI	291
-#define	LESS_LESS_MINUS	292
-#define	AND_GREATER	293
-#define	LESS_GREATER	294
-#define	GREATER_BAR	295
-#define	yacc_EOF	296
+/* Written by Richard Stallman by simplifying the original so called
+   ``semantic'' parser.  */
 
-#line 21 "/usr/src/local/chet/src/bash/src/parse.y"
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+/* Identify Bison output.  */
+#define YYBISON 1
+
+/* Skeleton name.  */
+#define YYSKELETON_NAME "yacc.c"
+
+/* Pure parsers.  */
+#define YYPURE 0
+
+/* Using locations.  */
+#define YYLSP_NEEDED 0
+
+
+
+/* Tokens.  */
+#ifndef YYTOKENTYPE
+# define YYTOKENTYPE
+   /* Put the tokens into the symbol table, so that GDB and other debuggers
+      know about them.  */
+   enum yytokentype {
+     IF = 258,
+     THEN = 259,
+     ELSE = 260,
+     ELIF = 261,
+     FI = 262,
+     CASE = 263,
+     ESAC = 264,
+     FOR = 265,
+     SELECT = 266,
+     WHILE = 267,
+     UNTIL = 268,
+     DO = 269,
+     DONE = 270,
+     FUNCTION = 271,
+     COND_START = 272,
+     COND_END = 273,
+     COND_ERROR = 274,
+     IN = 275,
+     BANG = 276,
+     TIME = 277,
+     TIMEOPT = 278,
+     WORD = 279,
+     ASSIGNMENT_WORD = 280,
+     NUMBER = 281,
+     ARITH_CMD = 282,
+     ARITH_FOR_EXPRS = 283,
+     COND_CMD = 284,
+     AND_AND = 285,
+     OR_OR = 286,
+     GREATER_GREATER = 287,
+     LESS_LESS = 288,
+     LESS_AND = 289,
+     LESS_LESS_LESS = 290,
+     GREATER_AND = 291,
+     SEMI_SEMI = 292,
+     LESS_LESS_MINUS = 293,
+     AND_GREATER = 294,
+     LESS_GREATER = 295,
+     GREATER_BAR = 296,
+     yacc_EOF = 297
+   };
+#endif
+#define IF 258
+#define THEN 259
+#define ELSE 260
+#define ELIF 261
+#define FI 262
+#define CASE 263
+#define ESAC 264
+#define FOR 265
+#define SELECT 266
+#define WHILE 267
+#define UNTIL 268
+#define DO 269
+#define DONE 270
+#define FUNCTION 271
+#define COND_START 272
+#define COND_END 273
+#define COND_ERROR 274
+#define IN 275
+#define BANG 276
+#define TIME 277
+#define TIMEOPT 278
+#define WORD 279
+#define ASSIGNMENT_WORD 280
+#define NUMBER 281
+#define ARITH_CMD 282
+#define ARITH_FOR_EXPRS 283
+#define COND_CMD 284
+#define AND_AND 285
+#define OR_OR 286
+#define GREATER_GREATER 287
+#define LESS_LESS 288
+#define LESS_AND 289
+#define LESS_LESS_LESS 290
+#define GREATER_AND 291
+#define SEMI_SEMI 292
+#define LESS_LESS_MINUS 293
+#define AND_GREATER 294
+#define LESS_GREATER 295
+#define GREATER_BAR 296
+#define yacc_EOF 297
+
+
+
+
+/* Copy the first part of user declarations.  */
+#line 21 "./parse.y"
 
 #include "config.h"
 
@@ -324,8 +419,23 @@
 
 static REDIRECTEE redir;
 
-#line 300 "/usr/src/local/chet/src/bash/src/parse.y"
-typedef union {
+
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 0
+#endif
+
+#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
+#line 300 "./parse.y"
+typedef union YYSTYPE {
   WORD_DESC *word;		/* the word that we read. */
   int number;			/* the number that we read. */
   WORD_LIST *word_list;
@@ -334,715 +444,1039 @@
   ELEMENT element;
   PATTERN_LIST *pattern;
 } YYSTYPE;
-#include <stdio.h>
-
-#ifndef __cplusplus
-#ifndef __STDC__
-#define const
-#endif
+/* Line 191 of yacc.c.  */
+#line 449 "y.tab.c"
+# define yystype YYSTYPE /* obsolescent; will be withdrawn */
+# define YYSTYPE_IS_DECLARED 1
+# define YYSTYPE_IS_TRIVIAL 1
 #endif
 
 
 
-#define	YYFINAL		302
-#define	YYFLAG		-32768
-#define	YYNTBASE	54
-
-#define YYTRANSLATE(x) ((unsigned)(x) <= 296 ? yytranslate[x] : 90)
-
-static const char yytranslate[] = {     0,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,    44,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,    42,     2,    52,
-    53,     2,     2,     2,    49,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,    43,    48,
-     2,    47,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,    50,    46,    51,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
-     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
-    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-    37,    38,    39,    40,    41,    45
-};
+/* Copy the second part of user declarations.  */
 
-#if YYDEBUG != 0
-static const short yyprhs[] = {     0,
-     0,     3,     5,     8,    10,    12,    15,    18,    21,    25,
-    29,    32,    36,    39,    43,    46,    50,    53,    57,    60,
-    64,    67,    71,    74,    78,    81,    85,    88,    92,    95,
-    99,   102,   106,   109,   112,   116,   118,   120,   122,   124,
-   127,   129,   132,   134,   136,   139,   141,   143,   145,   151,
-   157,   159,   161,   163,   165,   167,   169,   171,   178,   185,
-   193,   201,   212,   223,   233,   243,   251,   259,   265,   271,
-   278,   285,   293,   301,   312,   323,   330,   338,   345,   351,
-   358,   363,   365,   368,   372,   378,   386,   393,   397,   399,
-   403,   408,   415,   421,   423,   426,   431,   436,   442,   448,
-   451,   455,   457,   461,   464,   466,   469,   473,   477,   481,
-   486,   491,   496,   501,   506,   508,   510,   512,   514,   516,
-   518,   519,   522,   524,   527,   530,   535,   540,   544,   548,
-   550,   552,   555,   558,   562,   566,   569,   574,   576,   578
-};
 
-static const short yyrhs[] = {    85,
-    82,     0,    44,     0,     1,    44,     0,    45,     0,    24,
-     0,    55,    24,     0,    47,    24,     0,    48,    24,     0,
-    26,    47,    24,     0,    26,    48,    24,     0,    32,    24,
-     0,    26,    32,    24,     0,    33,    24,     0,    26,    33,
-    24,     0,    35,    24,     0,    26,    35,    24,     0,    34,
-    26,     0,    26,    34,    26,     0,    36,    26,     0,    26,
-    36,    26,     0,    34,    24,     0,    26,    34,    24,     0,
-    36,    24,     0,    26,    36,    24,     0,    38,    24,     0,
-    26,    38,    24,     0,    36,    49,     0,    26,    36,    49,
-     0,    34,    49,     0,    26,    34,    49,     0,    39,    24,
-     0,    26,    40,    24,     0,    40,    24,     0,    41,    24,
-     0,    26,    41,    24,     0,    24,     0,    25,     0,    56,
-     0,    56,     0,    58,    56,     0,    57,     0,    59,    57,
-     0,    59,     0,    61,     0,    61,    58,     0,    66,     0,
-    62,     0,    65,     0,    12,    79,    14,    79,    15,     0,
-    13,    79,    14,    79,    15,     0,    64,     0,    69,     0,
-    68,     0,    70,     0,    71,     0,    72,     0,    63,     0,
-    10,    24,    84,    14,    79,    15,     0,    10,    24,    84,
-    50,    79,    51,     0,    10,    24,    43,    84,    14,    79,
-    15,     0,    10,    24,    43,    84,    50,    79,    51,     0,
-    10,    24,    84,    20,    55,    83,    84,    14,    79,    15,
-     0,    10,    24,    84,    20,    55,    83,    84,    50,    79,
-    51,     0,    10,    24,    84,    20,    83,    84,    14,    79,
-    15,     0,    10,    24,    84,    20,    83,    84,    50,    79,
-    51,     0,    10,    28,    83,    84,    14,    79,    15,     0,
-    10,    28,    83,    84,    50,    79,    51,     0,    10,    28,
-    14,    79,    15,     0,    10,    28,    50,    79,    51,     0,
-    11,    24,    84,    14,    78,    15,     0,    11,    24,    84,
-    50,    78,    51,     0,    11,    24,    43,    84,    14,    78,
-    15,     0,    11,    24,    43,    84,    50,    78,    51,     0,
-    11,    24,    84,    20,    55,    83,    84,    14,    78,    15,
-     0,    11,    24,    84,    20,    55,    83,    84,    50,    78,
-    51,     0,     8,    24,    84,    20,    84,     9,     0,     8,
-    24,    84,    20,    76,    84,     9,     0,     8,    24,    84,
-    20,    74,     9,     0,    24,    52,    53,    84,    67,     0,
-    16,    24,    52,    53,    84,    67,     0,    16,    24,    84,
-    67,     0,    61,     0,    61,    58,     0,    52,    79,    53,
-     0,     3,    79,     4,    79,     7,     0,     3,    79,     4,
-    79,     5,    79,     7,     0,     3,    79,     4,    79,    73,
-     7,     0,    50,    79,    51,     0,    27,     0,    17,    29,
-    18,     0,     6,    79,     4,    79,     0,     6,    79,     4,
-    79,     5,    79,     0,     6,    79,     4,    79,    73,     0,
-    75,     0,    76,    75,     0,    84,    77,    53,    79,     0,
-    84,    77,    53,    84,     0,    84,    52,    77,    53,    79,
-     0,    84,    52,    77,    53,    84,     0,    75,    37,     0,
-    76,    75,    37,     0,    24,     0,    77,    46,    24,     0,
-    84,    80,     0,    78,     0,    84,    81,     0,    81,    44,
-    84,     0,    81,    42,    84,     0,    81,    43,    84,     0,
-    81,    30,    84,    81,     0,    81,    31,    84,    81,     0,
-    81,    42,    84,    81,     0,    81,    43,    84,    81,     0,
-    81,    44,    84,    81,     0,    87,     0,    44,     0,    45,
-     0,    44,     0,    43,     0,    45,     0,     0,    84,    44,
-     0,    86,     0,    86,    42,     0,    86,    43,     0,    86,
-    30,    84,    86,     0,    86,    31,    84,    86,     0,    86,
-    42,    86,     0,    86,    43,    86,     0,    87,     0,    88,
-     0,    21,    88,     0,    89,    88,     0,    89,    21,    88,
-     0,    21,    89,    88,     0,    89,    83,     0,    88,    46,
-    84,    88,     0,    60,     0,    22,     0,    22,    23,     0
-};
+/* Line 214 of yacc.c.  */
+#line 461 "y.tab.c"
 
-#endif
+#if ! defined (yyoverflow) || YYERROR_VERBOSE
 
-#if YYDEBUG != 0
-static const short yyrline[] = { 0,
-   351,   360,   367,   382,   392,   394,   398,   403,   408,   413,
-   418,   423,   428,   434,   440,   445,   450,   455,   460,   465,
-   470,   475,   480,   485,   490,   497,   504,   509,   514,   519,
-   524,   529,   534,   539,   544,   551,   553,   555,   559,   563,
-   574,   576,   580,   582,   584,   600,   604,   606,   608,   610,
-   612,   614,   616,   618,   620,   622,   624,   628,   633,   638,
-   643,   648,   653,   658,   663,   670,   675,   680,   685,   692,
-   697,   702,   707,   712,   717,   724,   729,   734,   741,   744,
-   747,   752,   754,   785,   792,   794,   796,   801,   805,   809,
-   813,   815,   817,   821,   822,   826,   828,   830,   832,   836,
-   837,   841,   843,   852,   860,   861,   867,   868,   875,   879,
-   881,   883,   890,   892,   894,   898,   899,   902,   904,   906,
-   910,   911,   920,   926,   935,   943,   945,   947,   954,   957,
-   961,   963,   969,   975,   981,   987,  1007,  1010,  1014,  1016
-};
-#endif
+# ifndef YYFREE
+#  define YYFREE free
+# endif
+# ifndef YYMALLOC
+#  define YYMALLOC malloc
+# endif
 
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
 
-#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
+# ifdef YYSTACK_USE_ALLOCA
+#  if YYSTACK_USE_ALLOCA
+#   define YYSTACK_ALLOC alloca
+#  endif
+# else
+#  if defined (alloca) || defined (_ALLOCA_H)
+#   define YYSTACK_ALLOC alloca
+#  else
+#   ifdef __GNUC__
+#    define YYSTACK_ALLOC __builtin_alloca
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's `empty if-body' warning. */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
+# else
+#  if defined (__STDC__) || defined (__cplusplus)
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   define YYSIZE_T size_t
+#  endif
+#  define YYSTACK_ALLOC YYMALLOC
+#  define YYSTACK_FREE YYFREE
+# endif
+#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */
+
+
+#if (! defined (yyoverflow) \
+     && (! defined (__cplusplus) \
+	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  short int yyss;
+  YYSTYPE yyvs;
+  };
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (short int) + sizeof (YYSTYPE))			\
+      + YYSTACK_GAP_MAXIMUM)
+
+/* Copy COUNT objects from FROM to TO.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined (__GNUC__) && 1 < __GNUC__
+#   define YYCOPY(To, From, Count) \
+      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
+#  else
+#   define YYCOPY(To, From, Count)		\
+      do					\
+	{					\
+	  register YYSIZE_T yyi;		\
+	  for (yyi = 0; yyi < (Count); yyi++)	\
+	    (To)[yyi] = (From)[yyi];		\
+	}					\
+      while (0)
+#  endif
+# endif
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack)					\
+    do									\
+      {									\
+	YYSIZE_T yynewbytes;						\
+	YYCOPY (&yyptr->Stack, Stack, yysize);				\
+	Stack = &yyptr->Stack;						\
+	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
+	yyptr += yynewbytes / sizeof (*yyptr);				\
+      }									\
+    while (0)
 
-static const char * const yytname[] = {   "$","error","$undefined.","IF","THEN",
-"ELSE","ELIF","FI","CASE","ESAC","FOR","SELECT","WHILE","UNTIL","DO","DONE",
-"FUNCTION","COND_START","COND_END","COND_ERROR","IN","BANG","TIME","TIMEOPT",
-"WORD","ASSIGNMENT_WORD","NUMBER","ARITH_CMD","ARITH_FOR_EXPRS","COND_CMD","AND_AND",
-"OR_OR","GREATER_GREATER","LESS_LESS","LESS_AND","LESS_LESS_LESS","GREATER_AND",
-"SEMI_SEMI","LESS_LESS_MINUS","AND_GREATER","LESS_GREATER","GREATER_BAR","'&'",
-"';'","'\\n'","yacc_EOF","'|'","'>'","'<'","'-'","'{'","'}'","'('","')'","inputunit",
-"word_list","redirection","simple_command_element","redirection_list","simple_command",
-"command","shell_command","for_command","arith_for_command","select_command",
-"case_command","function_def","function_body","subshell","if_command","group_command",
-"arith_command","cond_command","elif_clause","case_clause","pattern_list","case_clause_sequence",
-"pattern","list","compound_list","list0","list1","simple_list_terminator","list_terminator",
-"newline_list","simple_list","simple_list1","pipeline_command","pipeline","timespec", NULL
-};
 #endif
 
-static const short yyr1[] = {     0,
-    54,    54,    54,    54,    55,    55,    56,    56,    56,    56,
-    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
-    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
-    56,    56,    56,    56,    56,    57,    57,    57,    58,    58,
-    59,    59,    60,    60,    60,    60,    61,    61,    61,    61,
-    61,    61,    61,    61,    61,    61,    61,    62,    62,    62,
-    62,    62,    62,    62,    62,    63,    63,    63,    63,    64,
-    64,    64,    64,    64,    64,    65,    65,    65,    66,    66,
-    66,    67,    67,    68,    69,    69,    69,    70,    71,    72,
-    73,    73,    73,    74,    74,    75,    75,    75,    75,    76,
-    76,    77,    77,    78,    79,    79,    80,    80,    80,    81,
-    81,    81,    81,    81,    81,    82,    82,    83,    83,    83,
-    84,    84,    85,    85,    85,    86,    86,    86,    86,    86,
-    87,    87,    87,    87,    87,    87,    88,    88,    89,    89
-};
+#if defined (__STDC__) || defined (__cplusplus)
+   typedef signed char yysigned_char;
+#else
+   typedef short int yysigned_char;
+#endif
 
-static const short yyr2[] = {     0,
-     2,     1,     2,     1,     1,     2,     2,     2,     3,     3,
-     2,     3,     2,     3,     2,     3,     2,     3,     2,     3,
-     2,     3,     2,     3,     2,     3,     2,     3,     2,     3,
-     2,     3,     2,     2,     3,     1,     1,     1,     1,     2,
-     1,     2,     1,     1,     2,     1,     1,     1,     5,     5,
-     1,     1,     1,     1,     1,     1,     1,     6,     6,     7,
-     7,    10,    10,     9,     9,     7,     7,     5,     5,     6,
-     6,     7,     7,    10,    10,     6,     7,     6,     5,     6,
-     4,     1,     2,     3,     5,     7,     6,     3,     1,     3,
-     4,     6,     5,     1,     2,     4,     4,     5,     5,     2,
-     3,     1,     3,     2,     1,     2,     3,     3,     3,     4,
-     4,     4,     4,     4,     1,     1,     1,     1,     1,     1,
-     0,     2,     1,     2,     2,     4,     4,     3,     3,     1,
-     1,     2,     2,     3,     3,     2,     4,     1,     1,     2
+/* YYFINAL -- State number of the termination state. */
+#define YYFINAL  95
+/* YYLAST -- Last index in YYTABLE.  */
+#define YYLAST   603
+
+/* YYNTOKENS -- Number of terminals. */
+#define YYNTOKENS  54
+/* YYNNTS -- Number of nonterminals. */
+#define YYNNTS  37
+/* YYNRULES -- Number of rules. */
+#define YYNRULES  141
+/* YYNRULES -- Number of states. */
+#define YYNSTATES  302
+
+/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
+#define YYUNDEFTOK  2
+#define YYMAXUTOK   297
+
+#define YYTRANSLATE(YYX) 						\
+  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+
+/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
+static const unsigned char yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+      44,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,    42,     2,
+      52,    53,     2,     2,     2,    49,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,    43,
+      48,     2,    47,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    50,    46,    51,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
+       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    45
 };
 
-static const short yydefact[] = {     0,
-     0,   121,     0,     0,     0,   121,   121,     0,     0,     0,
-   139,    36,    37,     0,    89,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     2,     4,     0,     0,   121,   121,
-    38,    41,    43,   138,    44,    47,    57,    51,    48,    46,
-    53,    52,    54,    55,    56,     0,   123,   130,   131,     0,
-     3,   105,     0,     0,   121,   121,     0,   121,     0,     0,
-   121,     0,   132,     0,   140,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,    11,    13,    21,    17,
-    29,    15,    23,    19,    27,    25,    31,    33,    34,     7,
-     8,     0,     0,    36,    42,    39,    45,   116,   117,     1,
-   121,   121,   124,   125,   121,     0,   119,   118,   120,   136,
-   133,   121,   122,   104,   106,   115,     0,   121,     0,   121,
-   121,   121,   121,     0,   121,   121,     0,     0,    90,   135,
-   121,    12,    14,    22,    18,    30,    16,    24,    20,    28,
-    26,    32,    35,     9,    10,    88,    84,    40,     0,     0,
-   128,   129,     0,   134,     0,   121,   121,   121,   121,   121,
-   121,     0,   121,     0,   121,     0,     0,     0,     0,   121,
-     0,   121,     0,     0,   121,    82,    81,     0,   126,   127,
-     0,     0,   137,   121,   121,    85,     0,     0,     0,   108,
-   109,   107,     0,    94,   121,     0,   121,   121,     0,     5,
-     0,   121,     0,    68,    69,   121,   121,   121,   121,     0,
-     0,     0,     0,    49,    50,     0,    83,    79,     0,     0,
-    87,   110,   111,   112,   113,   114,    78,   100,    95,     0,
-    76,   102,     0,     0,     0,     0,    58,     6,   121,     0,
-    59,     0,     0,     0,     0,    70,     0,   121,    71,    80,
-    86,   121,   121,   121,   121,   101,    77,     0,     0,   121,
-    60,    61,     0,   121,   121,    66,    67,    72,    73,     0,
-    91,     0,     0,     0,   121,   103,    96,    97,   121,   121,
-     0,     0,   121,   121,   121,    93,    98,    99,     0,     0,
-    64,    65,     0,     0,    92,    62,    63,    74,    75,     0,
-     0,     0
+#if YYDEBUG
+/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
+   YYRHS.  */
+static const unsigned short int yyprhs[] =
+{
+       0,     0,     3,     6,     8,    11,    13,    15,    18,    21,
+      24,    28,    32,    35,    39,    42,    46,    49,    53,    56,
+      60,    63,    67,    70,    74,    77,    81,    84,    88,    91,
+      95,    98,   102,   105,   109,   112,   115,   119,   121,   123,
+     125,   127,   130,   132,   135,   137,   139,   142,   144,   146,
+     148,   154,   160,   162,   164,   166,   168,   170,   172,   174,
+     181,   188,   196,   204,   215,   226,   236,   246,   254,   262,
+     268,   274,   281,   288,   296,   304,   315,   326,   333,   341,
+     348,   354,   361,   366,   368,   371,   375,   381,   389,   396,
+     400,   402,   406,   411,   418,   424,   426,   429,   434,   439,
+     445,   451,   454,   458,   460,   464,   467,   469,   472,   476,
+     480,   484,   489,   494,   499,   504,   509,   511,   513,   515,
+     517,   519,   521,   522,   525,   527,   530,   533,   538,   543,
+     547,   551,   553,   555,   558,   561,   565,   569,   572,   577,
+     579,   581
 };
 
-static const short yydefgoto[] = {   300,
-   201,    31,    32,    97,    33,    34,    35,    36,    37,    38,
-    39,    40,   177,    41,    42,    43,    44,    45,   187,   193,
-   194,   195,   234,    52,    53,   114,   115,   100,   110,    54,
-    46,   151,   116,    49,    50
+/* YYRHS -- A `-1'-separated list of the rules' RHS. */
+static const yysigned_char yyrhs[] =
+{
+      55,     0,    -1,    86,    83,    -1,    44,    -1,     1,    44,
+      -1,    45,    -1,    24,    -1,    56,    24,    -1,    47,    24,
+      -1,    48,    24,    -1,    26,    47,    24,    -1,    26,    48,
+      24,    -1,    32,    24,    -1,    26,    32,    24,    -1,    33,
+      24,    -1,    26,    33,    24,    -1,    35,    24,    -1,    26,
+      35,    24,    -1,    34,    26,    -1,    26,    34,    26,    -1,
+      36,    26,    -1,    26,    36,    26,    -1,    34,    24,    -1,
+      26,    34,    24,    -1,    36,    24,    -1,    26,    36,    24,
+      -1,    38,    24,    -1,    26,    38,    24,    -1,    36,    49,
+      -1,    26,    36,    49,    -1,    34,    49,    -1,    26,    34,
+      49,    -1,    39,    24,    -1,    26,    40,    24,    -1,    40,
+      24,    -1,    41,    24,    -1,    26,    41,    24,    -1,    24,
+      -1,    25,    -1,    57,    -1,    57,    -1,    59,    57,    -1,
+      58,    -1,    60,    58,    -1,    60,    -1,    62,    -1,    62,
+      59,    -1,    67,    -1,    63,    -1,    66,    -1,    12,    80,
+      14,    80,    15,    -1,    13,    80,    14,    80,    15,    -1,
+      65,    -1,    70,    -1,    69,    -1,    71,    -1,    72,    -1,
+      73,    -1,    64,    -1,    10,    24,    85,    14,    80,    15,
+      -1,    10,    24,    85,    50,    80,    51,    -1,    10,    24,
+      43,    85,    14,    80,    15,    -1,    10,    24,    43,    85,
+      50,    80,    51,    -1,    10,    24,    85,    20,    56,    84,
+      85,    14,    80,    15,    -1,    10,    24,    85,    20,    56,
+      84,    85,    50,    80,    51,    -1,    10,    24,    85,    20,
+      84,    85,    14,    80,    15,    -1,    10,    24,    85,    20,
+      84,    85,    50,    80,    51,    -1,    10,    28,    84,    85,
+      14,    80,    15,    -1,    10,    28,    84,    85,    50,    80,
+      51,    -1,    10,    28,    14,    80,    15,    -1,    10,    28,
+      50,    80,    51,    -1,    11,    24,    85,    14,    79,    15,
+      -1,    11,    24,    85,    50,    79,    51,    -1,    11,    24,
+      43,    85,    14,    79,    15,    -1,    11,    24,    43,    85,
+      50,    79,    51,    -1,    11,    24,    85,    20,    56,    84,
+      85,    14,    79,    15,    -1,    11,    24,    85,    20,    56,
+      84,    85,    50,    79,    51,    -1,     8,    24,    85,    20,
+      85,     9,    -1,     8,    24,    85,    20,    77,    85,     9,
+      -1,     8,    24,    85,    20,    75,     9,    -1,    24,    52,
+      53,    85,    68,    -1,    16,    24,    52,    53,    85,    68,
+      -1,    16,    24,    85,    68,    -1,    62,    -1,    62,    59,
+      -1,    52,    80,    53,    -1,     3,    80,     4,    80,     7,
+      -1,     3,    80,     4,    80,     5,    80,     7,    -1,     3,
+      80,     4,    80,    74,     7,    -1,    50,    80,    51,    -1,
+      27,    -1,    17,    29,    18,    -1,     6,    80,     4,    80,
+      -1,     6,    80,     4,    80,     5,    80,    -1,     6,    80,
+       4,    80,    74,    -1,    76,    -1,    77,    76,    -1,    85,
+      78,    53,    80,    -1,    85,    78,    53,    85,    -1,    85,
+      52,    78,    53,    80,    -1,    85,    52,    78,    53,    85,
+      -1,    76,    37,    -1,    77,    76,    37,    -1,    24,    -1,
+      78,    46,    24,    -1,    85,    81,    -1,    79,    -1,    85,
+      82,    -1,    82,    44,    85,    -1,    82,    42,    85,    -1,
+      82,    43,    85,    -1,    82,    30,    85,    82,    -1,    82,
+      31,    85,    82,    -1,    82,    42,    85,    82,    -1,    82,
+      43,    85,    82,    -1,    82,    44,    85,    82,    -1,    88,
+      -1,    44,    -1,    45,    -1,    44,    -1,    43,    -1,    45,
+      -1,    -1,    85,    44,    -1,    87,    -1,    87,    42,    -1,
+      87,    43,    -1,    87,    30,    85,    87,    -1,    87,    31,
+      85,    87,    -1,    87,    42,    87,    -1,    87,    43,    87,
+      -1,    88,    -1,    89,    -1,    21,    89,    -1,    90,    89,
+      -1,    90,    21,    89,    -1,    21,    90,    89,    -1,    90,
+      84,    -1,    89,    46,    85,    89,    -1,    61,    -1,    22,
+      -1,    22,    23,    -1
 };
 
-static const short yypact[] = {   274,
-   -23,-32768,     5,    55,    10,-32768,-32768,    21,    31,   446,
-    32,    19,-32768,   553,-32768,    56,    72,   -12,    89,   -11,
-    92,   102,   111,   113,-32768,-32768,   117,   124,-32768,-32768,
--32768,-32768,   183,-32768,   202,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,   -13,   134,-32768,    52,   317,
--32768,-32768,   148,   360,-32768,   115,    22,   120,   154,   173,
-   114,   155,    52,   532,-32768,   140,   180,   181,   101,   182,
-   112,   186,   188,   189,   190,   205,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,   193,   195,-32768,-32768,-32768,   202,-32768,-32768,-32768,
--32768,-32768,   403,   403,-32768,   532,-32768,-32768,-32768,-32768,
-    52,-32768,-32768,-32768,   221,-32768,    -9,-32768,    42,-32768,
--32768,-32768,-32768,    61,-32768,-32768,   200,    41,-32768,    52,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   360,   360,
-   152,   152,   489,    52,   192,-32768,-32768,-32768,-32768,-32768,
--32768,    26,-32768,   127,-32768,   218,   194,    34,    73,-32768,
-   215,-32768,   242,   245,-32768,   202,-32768,    41,-32768,-32768,
-   403,   403,    52,-32768,-32768,-32768,   254,   360,   360,   360,
-   360,   360,   253,   229,-32768,    -2,-32768,-32768,   252,-32768,
-   151,-32768,   217,-32768,-32768,-32768,-32768,-32768,-32768,   255,
-   360,   151,   220,-32768,-32768,    41,   202,-32768,   265,   272,
--32768,-32768,-32768,   159,   159,   159,-32768,-32768,   241,    17,
--32768,-32768,   256,    36,   266,   232,-32768,-32768,-32768,    74,
--32768,   273,   238,   277,   243,-32768,   221,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,   116,   269,-32768,
--32768,-32768,    90,-32768,-32768,-32768,-32768,-32768,-32768,    95,
-   197,   360,   360,   360,-32768,-32768,-32768,   360,-32768,-32768,
-   282,   251,-32768,-32768,-32768,-32768,-32768,   360,   288,   260,
--32768,-32768,   289,   280,-32768,-32768,-32768,-32768,-32768,   305,
-   316,-32768
+/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
+static const unsigned short int yyrline[] =
+{
+       0,   351,   351,   360,   367,   382,   392,   394,   398,   403,
+     408,   413,   418,   423,   428,   434,   440,   445,   450,   455,
+     460,   465,   470,   475,   480,   485,   490,   497,   504,   509,
+     514,   519,   524,   529,   534,   539,   544,   551,   553,   555,
+     559,   563,   574,   576,   580,   582,   584,   600,   604,   606,
+     608,   610,   612,   614,   616,   618,   620,   622,   624,   628,
+     633,   638,   643,   648,   653,   658,   663,   670,   675,   680,
+     685,   692,   697,   702,   707,   712,   717,   724,   729,   734,
+     741,   744,   747,   752,   754,   785,   792,   794,   796,   801,
+     805,   809,   813,   815,   817,   821,   822,   826,   828,   830,
+     832,   836,   837,   841,   843,   852,   860,   861,   867,   868,
+     875,   879,   881,   883,   890,   892,   894,   898,   899,   902,
+     904,   906,   910,   911,   920,   926,   935,   943,   945,   947,
+     954,   957,   961,   963,   969,   975,   981,   987,  1008,  1010,
+    1014,  1016
 };
+#endif
 
-static const short yypgoto[] = {-32768,
-   146,   -33,   290,   156,-32768,-32768,  -119,-32768,-32768,-32768,
--32768,-32768,  -153,-32768,-32768,-32768,-32768,-32768,    64,-32768,
-   141,-32768,   104,  -162,    -6,-32768,  -172,-32768,   -52,   -28,
--32768,     6,     4,    -7,   329
+#if YYDEBUG || YYERROR_VERBOSE
+/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
+   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
+static const char *const yytname[] =
+{
+  "$end", "error", "$undefined", "IF", "THEN", "ELSE", "ELIF", "FI",
+  "CASE", "ESAC", "FOR", "SELECT", "WHILE", "UNTIL", "DO", "DONE",
+  "FUNCTION", "COND_START", "COND_END", "COND_ERROR", "IN", "BANG", "TIME",
+  "TIMEOPT", "WORD", "ASSIGNMENT_WORD", "NUMBER", "ARITH_CMD",
+  "ARITH_FOR_EXPRS", "COND_CMD", "AND_AND", "OR_OR", "GREATER_GREATER",
+  "LESS_LESS", "LESS_AND", "LESS_LESS_LESS", "GREATER_AND", "SEMI_SEMI",
+  "LESS_LESS_MINUS", "AND_GREATER", "LESS_GREATER", "GREATER_BAR", "'&'",
+  "';'", "'\\n'", "yacc_EOF", "'|'", "'>'", "'<'", "'-'", "'{'", "'}'",
+  "'('", "')'", "$accept", "inputunit", "word_list", "redirection",
+  "simple_command_element", "redirection_list", "simple_command",
+  "command", "shell_command", "for_command", "arith_for_command",
+  "select_command", "case_command", "function_def", "function_body",
+  "subshell", "if_command", "group_command", "arith_command",
+  "cond_command", "elif_clause", "case_clause", "pattern_list",
+  "case_clause_sequence", "pattern", "list", "compound_list", "list0",
+  "list1", "simple_list_terminator", "list_terminator", "newline_list",
+  "simple_list", "simple_list1", "pipeline_command", "pipeline",
+  "timespec", 0
 };
+#endif
 
+# ifdef YYPRINT
+/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
+   token YYLEX-NUM.  */
+static const unsigned short int yytoknum[] =
+{
+       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
+     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
+     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
+     295,   296,    38,    59,    10,   297,   124,    62,    60,    45,
+     123,   125,    40,    41
+};
+# endif
 
-#define	YYLAST		601
-
+/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
+static const unsigned char yyr1[] =
+{
+       0,    54,    55,    55,    55,    55,    56,    56,    57,    57,
+      57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
+      57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
+      57,    57,    57,    57,    57,    57,    57,    58,    58,    58,
+      59,    59,    60,    60,    61,    61,    61,    61,    62,    62,
+      62,    62,    62,    62,    62,    62,    62,    62,    62,    63,
+      63,    63,    63,    63,    63,    63,    63,    64,    64,    64,
+      64,    65,    65,    65,    65,    65,    65,    66,    66,    66,
+      67,    67,    67,    68,    68,    69,    70,    70,    70,    71,
+      72,    73,    74,    74,    74,    75,    75,    76,    76,    76,
+      76,    77,    77,    78,    78,    79,    80,    80,    81,    81,
+      81,    82,    82,    82,    82,    82,    82,    83,    83,    84,
+      84,    84,    85,    85,    86,    86,    86,    87,    87,    87,
+      87,    87,    88,    88,    88,    88,    88,    88,    89,    89,
+      90,    90
+};
 
-static const short yytable[] = {    59,
-    60,    96,    63,    48,   122,    47,   231,   210,   176,   213,
-   161,    79,    83,    80,    84,   222,   223,   224,   225,   226,
-    51,   232,    92,    93,   218,   257,   117,   119,    55,   124,
-    98,    99,   128,    58,   113,   120,    81,    85,   247,   197,
-   232,   113,   111,     2,    61,   244,   245,   206,     3,   233,
-     4,     5,     6,     7,    65,   163,   130,     9,   176,    62,
-   113,   164,   250,   148,   107,   108,   109,    15,   233,   113,
-    66,   121,   149,   150,   170,   198,   153,   113,    56,    77,
-   171,   259,    57,   207,   113,   113,   208,   264,   260,   162,
-    29,   165,    30,   168,   169,    78,   176,   105,   154,   224,
-   225,   226,   178,   279,   113,   155,    48,    48,   283,   152,
-   172,   202,    82,   166,   167,    86,   113,   113,   173,   174,
-   293,   294,   209,   265,   134,    87,   135,   188,   189,   190,
-   191,   192,   196,   113,    88,   138,    89,   139,   113,   280,
-    90,   211,    96,   211,   284,   183,   216,    91,   239,   136,
-   200,   112,    48,    48,   179,   180,   199,   118,   203,   248,
-   140,   259,   123,   101,   102,   127,   230,   125,   275,   107,
-   108,   109,   129,   240,   238,   103,   104,   219,   220,   211,
-   211,   101,   102,   148,    48,    48,   126,   152,   156,   157,
-   235,   236,   131,   107,   108,   109,   184,   185,   186,   242,
-   243,   285,   185,   132,   133,   137,    94,    13,    14,   141,
-   263,   142,   143,   144,    16,    17,    18,    19,    20,   270,
-    21,    22,    23,    24,   272,   273,   274,    14,   145,    27,
-    28,   278,   204,    16,    17,    18,    19,    20,   200,    21,
-    22,    23,    24,   146,   205,   271,   288,   147,    27,    28,
-   156,   157,   175,   277,   211,   211,   214,   281,   282,   215,
-   221,   227,   158,   159,   160,   228,   237,   241,   287,   246,
-   249,   251,   289,   290,     1,   252,     2,   256,   295,   232,
-   261,     3,   262,     4,     5,     6,     7,   266,   267,     8,
-     9,   268,   276,   269,    10,    11,   291,    12,    13,    14,
-    15,   292,   296,   298,   301,    16,    17,    18,    19,    20,
-   297,    21,    22,    23,    24,   302,   212,    25,    26,     2,
-    27,    28,    95,    29,     3,    30,     4,     5,     6,     7,
-   299,   217,     8,     9,   286,   229,   258,   106,    64,     0,
-    12,    13,    14,    15,     0,     0,     0,     0,    16,    17,
-    18,    19,    20,     0,    21,    22,    23,    24,     0,   107,
-   108,   109,     2,    27,    28,     0,    29,     3,    30,     4,
-     5,     6,     7,     0,     0,     8,     9,     0,     0,     0,
-    10,    11,     0,    12,    13,    14,    15,     0,     0,     0,
-     0,    16,    17,    18,    19,    20,     0,    21,    22,    23,
-    24,     0,     0,   113,     0,     2,    27,    28,     0,    29,
-     3,    30,     4,     5,     6,     7,     0,     0,     8,     9,
-     0,     0,     0,    10,    11,     0,    12,    13,    14,    15,
-     0,     0,     0,     0,    16,    17,    18,    19,    20,     0,
-    21,    22,    23,    24,     0,     0,     0,     0,     2,    27,
-    28,     0,    29,     3,    30,     4,     5,     6,     7,     0,
-     0,     8,     9,     0,     0,     0,     0,    11,     0,    12,
-    13,    14,    15,     0,     0,     0,     0,    16,    17,    18,
-    19,    20,     0,    21,    22,    23,    24,     0,     0,     0,
-     0,     2,    27,    28,     0,    29,     3,    30,     4,     5,
-     6,     7,     0,     0,     8,     9,     0,     0,     0,     0,
-     0,     0,    12,    13,    14,    15,     0,     0,     0,     0,
-    16,    17,    18,    19,    20,     0,    21,    22,    23,    24,
-     0,     0,   113,     0,     2,    27,    28,     0,    29,     3,
-    30,     4,     5,     6,     7,     0,     0,     8,     9,     0,
-     0,     0,     0,     0,     0,    12,    13,    14,    15,     0,
-     0,     0,     0,    16,    17,    18,    19,    20,     0,    21,
-    22,    23,    24,     0,     0,     0,     0,     0,    27,    28,
-     0,    29,     0,    30,    67,    68,    69,    70,    71,     0,
-    72,     0,    73,    74,     0,     0,     0,     0,     0,    75,
-    76
+/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
+static const unsigned char yyr2[] =
+{
+       0,     2,     2,     1,     2,     1,     1,     2,     2,     2,
+       3,     3,     2,     3,     2,     3,     2,     3,     2,     3,
+       2,     3,     2,     3,     2,     3,     2,     3,     2,     3,
+       2,     3,     2,     3,     2,     2,     3,     1,     1,     1,
+       1,     2,     1,     2,     1,     1,     2,     1,     1,     1,
+       5,     5,     1,     1,     1,     1,     1,     1,     1,     6,
+       6,     7,     7,    10,    10,     9,     9,     7,     7,     5,
+       5,     6,     6,     7,     7,    10,    10,     6,     7,     6,
+       5,     6,     4,     1,     2,     3,     5,     7,     6,     3,
+       1,     3,     4,     6,     5,     1,     2,     4,     4,     5,
+       5,     2,     3,     1,     3,     2,     1,     2,     3,     3,
+       3,     4,     4,     4,     4,     4,     1,     1,     1,     1,
+       1,     1,     0,     2,     1,     2,     2,     4,     4,     3,
+       3,     1,     1,     2,     2,     3,     3,     2,     4,     1,
+       1,     2
 };
 
-static const short yycheck[] = {     6,
-     7,    35,    10,     0,    57,     0,     9,   170,   128,   172,
-    20,    24,    24,    26,    26,   188,   189,   190,   191,   192,
-    44,    24,    29,    30,   178,     9,    55,    56,    24,    58,
-    44,    45,    61,    24,    44,    14,    49,    49,   211,    14,
-    24,    44,    50,     3,    24,   208,   209,    14,     8,    52,
-    10,    11,    12,    13,    23,    14,    64,    17,   178,    29,
-    44,    20,   216,    97,    43,    44,    45,    27,    52,    44,
-    52,    50,   101,   102,    14,    50,   105,    44,    24,    24,
-    20,    46,    28,    50,    44,    44,    14,    14,    53,   118,
-    50,    50,    52,   122,   123,    24,   216,    46,   106,   272,
-   273,   274,   131,    14,    44,   112,   103,   104,    14,   104,
-    50,   164,    24,   120,   121,    24,    44,    44,   125,   126,
-   283,   284,    50,    50,    24,    24,    26,   156,   157,   158,
-   159,   160,   161,    44,    24,    24,    24,    26,    44,    50,
-    24,   170,   176,   172,    50,   153,   175,    24,   201,    49,
-    24,     4,   149,   150,   149,   150,   163,    43,   165,   212,
-    49,    46,    43,    30,    31,    52,   195,    14,    53,    43,
-    44,    45,    18,   202,    24,    42,    43,   184,   185,   208,
-   209,    30,    31,   217,   181,   182,    14,   182,    30,    31,
-   197,   198,    53,    43,    44,    45,     5,     6,     7,   206,
-   207,     5,     6,    24,    24,    24,    24,    25,    26,    24,
-   239,    24,    24,    24,    32,    33,    34,    35,    36,   248,
-    38,    39,    40,    41,   253,   254,   255,    26,    24,    47,
-    48,   260,    15,    32,    33,    34,    35,    36,    24,    38,
-    39,    40,    41,    51,    51,   252,   275,    53,    47,    48,
-    30,    31,    53,   260,   283,   284,    15,   264,   265,    15,
-     7,     9,    42,    43,    44,    37,    15,    51,   275,    15,
-    51,     7,   279,   280,     1,     4,     3,    37,   285,    24,
-    15,     8,    51,    10,    11,    12,    13,    15,    51,    16,
-    17,    15,    24,    51,    21,    22,    15,    24,    25,    26,
-    27,    51,    15,    15,     0,    32,    33,    34,    35,    36,
-    51,    38,    39,    40,    41,     0,   171,    44,    45,     3,
-    47,    48,    33,    50,     8,    52,    10,    11,    12,    13,
-    51,   176,    16,    17,   271,   195,   233,    21,    10,    -1,
-    24,    25,    26,    27,    -1,    -1,    -1,    -1,    32,    33,
-    34,    35,    36,    -1,    38,    39,    40,    41,    -1,    43,
-    44,    45,     3,    47,    48,    -1,    50,     8,    52,    10,
-    11,    12,    13,    -1,    -1,    16,    17,    -1,    -1,    -1,
-    21,    22,    -1,    24,    25,    26,    27,    -1,    -1,    -1,
-    -1,    32,    33,    34,    35,    36,    -1,    38,    39,    40,
-    41,    -1,    -1,    44,    -1,     3,    47,    48,    -1,    50,
-     8,    52,    10,    11,    12,    13,    -1,    -1,    16,    17,
-    -1,    -1,    -1,    21,    22,    -1,    24,    25,    26,    27,
-    -1,    -1,    -1,    -1,    32,    33,    34,    35,    36,    -1,
-    38,    39,    40,    41,    -1,    -1,    -1,    -1,     3,    47,
-    48,    -1,    50,     8,    52,    10,    11,    12,    13,    -1,
-    -1,    16,    17,    -1,    -1,    -1,    -1,    22,    -1,    24,
-    25,    26,    27,    -1,    -1,    -1,    -1,    32,    33,    34,
-    35,    36,    -1,    38,    39,    40,    41,    -1,    -1,    -1,
-    -1,     3,    47,    48,    -1,    50,     8,    52,    10,    11,
-    12,    13,    -1,    -1,    16,    17,    -1,    -1,    -1,    -1,
-    -1,    -1,    24,    25,    26,    27,    -1,    -1,    -1,    -1,
-    32,    33,    34,    35,    36,    -1,    38,    39,    40,    41,
-    -1,    -1,    44,    -1,     3,    47,    48,    -1,    50,     8,
-    52,    10,    11,    12,    13,    -1,    -1,    16,    17,    -1,
-    -1,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    -1,
-    -1,    -1,    -1,    32,    33,    34,    35,    36,    -1,    38,
-    39,    40,    41,    -1,    -1,    -1,    -1,    -1,    47,    48,
-    -1,    50,    -1,    52,    32,    33,    34,    35,    36,    -1,
-    38,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    47,
-    48
+/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
+   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
+   means the default is an error.  */
+static const unsigned char yydefact[] =
+{
+       0,     0,   122,     0,     0,     0,   122,   122,     0,     0,
+       0,   140,    37,    38,     0,    90,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     3,     5,     0,     0,   122,
+     122,     0,    39,    42,    44,   139,    45,    48,    58,    52,
+      49,    47,    54,    53,    55,    56,    57,     0,   124,   131,
+     132,     0,     4,   106,     0,     0,   122,   122,     0,   122,
+       0,     0,   122,     0,   133,     0,   141,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,    12,    14,
+      22,    18,    30,    16,    24,    20,    28,    26,    32,    34,
+      35,     8,     9,     0,     0,     1,    37,    43,    40,    46,
+     117,   118,     2,   122,   122,   125,   126,   122,     0,   120,
+     119,   121,   137,   134,   122,   123,   105,   107,   116,     0,
+     122,     0,   122,   122,   122,   122,     0,   122,   122,     0,
+       0,    91,   136,   122,    13,    15,    23,    19,    31,    17,
+      25,    21,    29,    27,    33,    36,    10,    11,    89,    85,
+      41,     0,     0,   129,   130,     0,   135,     0,   122,   122,
+     122,   122,   122,   122,     0,   122,     0,   122,     0,     0,
+       0,     0,   122,     0,   122,     0,     0,   122,    83,    82,
+       0,   127,   128,     0,     0,   138,   122,   122,    86,     0,
+       0,     0,   109,   110,   108,     0,    95,   122,     0,   122,
+     122,     0,     6,     0,   122,     0,    69,    70,   122,   122,
+     122,   122,     0,     0,     0,     0,    50,    51,     0,    84,
+      80,     0,     0,    88,   111,   112,   113,   114,   115,    79,
+     101,    96,     0,    77,   103,     0,     0,     0,     0,    59,
+       7,   122,     0,    60,     0,     0,     0,     0,    71,     0,
+     122,    72,    81,    87,   122,   122,   122,   122,   102,    78,
+       0,     0,   122,    61,    62,     0,   122,   122,    67,    68,
+      73,    74,     0,    92,     0,     0,     0,   122,   104,    97,
+      98,   122,   122,     0,     0,   122,   122,   122,    94,    99,
+     100,     0,     0,    65,    66,     0,     0,    93,    63,    64,
+      75,    76
 };
-/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
-#line 3 "/usr/share/bison.simple"
-/* This file comes from bison-1.28.  */
 
-/* Skeleton output parser for bison,
-   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.
+/* YYDEFGOTO[NTERM-NUM]. */
+static const short int yydefgoto[] =
+{
+      -1,    31,   203,    32,    33,    99,    34,    35,    36,    37,
+      38,    39,    40,    41,   179,    42,    43,    44,    45,    46,
+     189,   195,   196,   197,   236,    53,    54,   116,   117,   102,
+     112,    55,    47,   153,   118,    50,    51
+};
 
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
+/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
+   STATE-NUM.  */
+#define YYPACT_NINF -174
+static const short int yypact[] =
+{
+     276,    12,  -174,    36,     2,    43,  -174,  -174,    46,    51,
+     448,    49,    33,  -174,   555,  -174,    67,    75,   -13,    87,
+       1,    90,    95,   114,   119,  -174,  -174,   129,   136,  -174,
+    -174,   175,  -174,  -174,   185,  -174,   204,  -174,  -174,  -174,
+    -174,  -174,  -174,  -174,  -174,  -174,  -174,   123,    98,  -174,
+      41,   319,  -174,  -174,   187,   362,  -174,   146,    19,   149,
+     181,   186,   147,   183,    41,   534,  -174,   151,   182,   184,
+     101,   188,   113,   190,   191,   192,   207,   211,  -174,  -174,
+    -174,  -174,  -174,  -174,  -174,  -174,  -174,  -174,  -174,  -174,
+    -174,  -174,  -174,   154,   193,  -174,  -174,  -174,  -174,   204,
+    -174,  -174,  -174,  -174,  -174,   405,   405,  -174,   534,  -174,
+    -174,  -174,  -174,    41,  -174,  -174,  -174,   223,  -174,   -12,
+    -174,    21,  -174,  -174,  -174,  -174,    63,  -174,  -174,   194,
+      34,  -174,    41,  -174,  -174,  -174,  -174,  -174,  -174,  -174,
+    -174,  -174,  -174,  -174,  -174,  -174,  -174,  -174,  -174,  -174,
+    -174,   362,   362,   143,   143,   491,    41,   159,  -174,  -174,
+    -174,  -174,  -174,  -174,    44,  -174,   127,  -174,   226,   156,
+      45,    54,  -174,   231,  -174,   235,   244,  -174,   204,  -174,
+      34,  -174,  -174,   405,   405,    41,  -174,  -174,  -174,   255,
+     362,   362,   362,   362,   362,   254,   227,  -174,    29,  -174,
+    -174,   253,  -174,   153,  -174,   218,  -174,  -174,  -174,  -174,
+    -174,  -174,   257,   362,   153,   219,  -174,  -174,    34,   204,
+    -174,   266,   270,  -174,  -174,  -174,   148,   148,   148,  -174,
+    -174,   241,    30,  -174,  -174,   256,   -37,   267,   232,  -174,
+    -174,  -174,    76,  -174,   275,   234,   279,   240,  -174,   223,
+    -174,  -174,  -174,  -174,  -174,  -174,  -174,  -174,  -174,  -174,
+     -31,   271,  -174,  -174,  -174,    92,  -174,  -174,  -174,  -174,
+    -174,  -174,   104,   179,   362,   362,   362,  -174,  -174,  -174,
+     362,  -174,  -174,   281,   248,  -174,  -174,  -174,  -174,  -174,
+     362,   289,   262,  -174,  -174,   290,   268,  -174,  -174,  -174,
+    -174,  -174
+};
 
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
+/* YYPGOTO[NTERM-NUM].  */
+static const short int yypgoto[] =
+{
+    -174,  -174,   133,   -33,   273,   140,  -174,  -174,  -125,  -174,
+    -174,  -174,  -174,  -174,  -166,  -174,  -174,  -174,  -174,  -174,
+      52,  -174,   137,  -174,   102,  -162,    -6,  -174,  -173,  -174,
+     -51,   -28,  -174,     6,     4,    -8,   323
+};
 
-   You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 59 Temple Place - Suite 330,
-   Boston, MA 02111-1307, USA.  */
+/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
+   positive, shift that token.  If negative, reduce the rule which
+   number is the opposite.  If zero, do what YYDEFACT says.
+   If YYTABLE_NINF, syntax error.  */
+#define YYTABLE_NINF -1
+static const unsigned short int yytable[] =
+{
+      60,    61,    64,    98,    49,   178,    48,   124,   163,   261,
+     212,    80,   215,    81,   220,   261,   262,   224,   225,   226,
+     227,   228,   277,    93,    94,    84,    57,    85,   119,   121,
+      58,   126,   115,   122,   130,   165,    82,     2,   233,   259,
+     249,   166,     3,   113,     4,     5,     6,     7,   246,   247,
+      86,     9,   252,   234,   234,   178,    52,   132,   199,   208,
+      56,    15,   109,   110,   111,   115,   150,    59,   210,   123,
+      62,   167,    66,   115,   115,   151,   152,   172,   115,   155,
+      63,   235,   235,   173,    29,    67,    30,   107,   115,   115,
+     266,    78,   164,   178,   200,   209,   170,   171,   115,    79,
+     156,   226,   227,   228,   211,   180,   281,   115,   157,    49,
+      49,    83,   154,   174,    87,   204,   168,   169,   285,    88,
+     115,   175,   176,   295,   296,   136,   267,   137,   103,   104,
+     190,   191,   192,   193,   194,   198,   115,   140,    89,   141,
+     105,   106,   282,    90,   213,    98,   213,   185,   115,   218,
+     138,   202,   241,    91,   286,    49,    49,   181,   182,   201,
+      92,   205,   142,   250,   186,   187,   188,   100,   101,   232,
+     109,   110,   111,   103,   104,    95,   242,   240,   158,   159,
+     221,   222,   213,   213,   287,   187,   150,    49,    49,   120,
+     154,   114,   125,   237,   238,   127,   109,   110,   111,   129,
+     128,   131,   244,   245,   133,   148,   134,   207,   135,    96,
+      13,    14,   139,   265,   143,   144,   145,    16,    17,    18,
+      19,    20,   272,    21,    22,    23,    24,   274,   275,   276,
+      14,   146,    27,    28,   280,   147,    16,    17,    18,    19,
+      20,   206,    21,    22,    23,    24,   149,   177,   273,   290,
+     216,    27,    28,   158,   159,   202,   279,   213,   213,   217,
+     283,   284,   223,   229,   230,   160,   161,   162,   239,   243,
+     251,   289,   248,   253,   254,   291,   292,     1,   258,     2,
+     234,   297,   263,   264,     3,   269,     4,     5,     6,     7,
+     268,   271,     8,     9,   270,   278,   293,    10,    11,   294,
+      12,    13,    14,    15,   298,   300,   214,    97,    16,    17,
+      18,    19,    20,   299,    21,    22,    23,    24,   219,   301,
+      25,    26,     2,    27,    28,   288,    29,     3,    30,     4,
+       5,     6,     7,    65,   231,     8,     9,   260,     0,     0,
+     108,     0,     0,    12,    13,    14,    15,     0,     0,     0,
+       0,    16,    17,    18,    19,    20,     0,    21,    22,    23,
+      24,     0,   109,   110,   111,     2,    27,    28,     0,    29,
+       3,    30,     4,     5,     6,     7,     0,     0,     8,     9,
+       0,     0,     0,    10,    11,     0,    12,    13,    14,    15,
+       0,     0,     0,     0,    16,    17,    18,    19,    20,     0,
+      21,    22,    23,    24,     0,     0,   115,     0,     2,    27,
+      28,     0,    29,     3,    30,     4,     5,     6,     7,     0,
+       0,     8,     9,     0,     0,     0,    10,    11,     0,    12,
+      13,    14,    15,     0,     0,     0,     0,    16,    17,    18,
+      19,    20,     0,    21,    22,    23,    24,     0,     0,     0,
+       0,     2,    27,    28,     0,    29,     3,    30,     4,     5,
+       6,     7,     0,     0,     8,     9,     0,     0,     0,     0,
+      11,     0,    12,    13,    14,    15,     0,     0,     0,     0,
+      16,    17,    18,    19,    20,     0,    21,    22,    23,    24,
+       0,     0,     0,     0,     2,    27,    28,     0,    29,     3,
+      30,     4,     5,     6,     7,     0,     0,     8,     9,     0,
+       0,     0,     0,     0,     0,    12,    13,    14,    15,     0,
+       0,     0,     0,    16,    17,    18,    19,    20,     0,    21,
+      22,    23,    24,     0,     0,   115,     0,     2,    27,    28,
+       0,    29,     3,    30,     4,     5,     6,     7,     0,     0,
+       8,     9,     0,     0,     0,     0,     0,     0,    12,    13,
+      14,    15,     0,     0,     0,     0,    16,    17,    18,    19,
+      20,     0,    21,    22,    23,    24,     0,     0,     0,     0,
+       0,    27,    28,     0,    29,     0,    30,    68,    69,    70,
+      71,    72,     0,    73,     0,    74,    75,     0,     0,     0,
+       0,     0,    76,    77
+};
 
-/* As a special exception, when this file is copied by Bison into a
-   Bison output file, you may use that output file without restriction.
-   This special exception was added by the Free Software Foundation
-   in version 1.24 of Bison.  */
+static const short int yycheck[] =
+{
+       6,     7,    10,    36,     0,   130,     0,    58,    20,    46,
+     172,    24,   174,    26,   180,    46,    53,   190,   191,   192,
+     193,   194,    53,    29,    30,    24,    24,    26,    56,    57,
+      28,    59,    44,    14,    62,    14,    49,     3,     9,     9,
+     213,    20,     8,    51,    10,    11,    12,    13,   210,   211,
+      49,    17,   218,    24,    24,   180,    44,    65,    14,    14,
+      24,    27,    43,    44,    45,    44,    99,    24,    14,    50,
+      24,    50,    23,    44,    44,   103,   104,    14,    44,   107,
+      29,    52,    52,    20,    50,    52,    52,    46,    44,    44,
+      14,    24,   120,   218,    50,    50,   124,   125,    44,    24,
+     108,   274,   275,   276,    50,   133,    14,    44,   114,   105,
+     106,    24,   106,    50,    24,   166,   122,   123,    14,    24,
+      44,   127,   128,   285,   286,    24,    50,    26,    30,    31,
+     158,   159,   160,   161,   162,   163,    44,    24,    24,    26,
+      42,    43,    50,    24,   172,   178,   174,   155,    44,   177,
+      49,    24,   203,    24,    50,   151,   152,   151,   152,   165,
+      24,   167,    49,   214,     5,     6,     7,    44,    45,   197,
+      43,    44,    45,    30,    31,     0,   204,    24,    30,    31,
+     186,   187,   210,   211,     5,     6,   219,   183,   184,    43,
+     184,     4,    43,   199,   200,    14,    43,    44,    45,    52,
+      14,    18,   208,   209,    53,    51,    24,    51,    24,    24,
+      25,    26,    24,   241,    24,    24,    24,    32,    33,    34,
+      35,    36,   250,    38,    39,    40,    41,   255,   256,   257,
+      26,    24,    47,    48,   262,    24,    32,    33,    34,    35,
+      36,    15,    38,    39,    40,    41,    53,    53,   254,   277,
+      15,    47,    48,    30,    31,    24,   262,   285,   286,    15,
+     266,   267,     7,     9,    37,    42,    43,    44,    15,    51,
+      51,   277,    15,     7,     4,   281,   282,     1,    37,     3,
+      24,   287,    15,    51,     8,    51,    10,    11,    12,    13,
+      15,    51,    16,    17,    15,    24,    15,    21,    22,    51,
+      24,    25,    26,    27,    15,    15,   173,    34,    32,    33,
+      34,    35,    36,    51,    38,    39,    40,    41,   178,    51,
+      44,    45,     3,    47,    48,   273,    50,     8,    52,    10,
+      11,    12,    13,    10,   197,    16,    17,   235,    -1,    -1,
+      21,    -1,    -1,    24,    25,    26,    27,    -1,    -1,    -1,
+      -1,    32,    33,    34,    35,    36,    -1,    38,    39,    40,
+      41,    -1,    43,    44,    45,     3,    47,    48,    -1,    50,
+       8,    52,    10,    11,    12,    13,    -1,    -1,    16,    17,
+      -1,    -1,    -1,    21,    22,    -1,    24,    25,    26,    27,
+      -1,    -1,    -1,    -1,    32,    33,    34,    35,    36,    -1,
+      38,    39,    40,    41,    -1,    -1,    44,    -1,     3,    47,
+      48,    -1,    50,     8,    52,    10,    11,    12,    13,    -1,
+      -1,    16,    17,    -1,    -1,    -1,    21,    22,    -1,    24,
+      25,    26,    27,    -1,    -1,    -1,    -1,    32,    33,    34,
+      35,    36,    -1,    38,    39,    40,    41,    -1,    -1,    -1,
+      -1,     3,    47,    48,    -1,    50,     8,    52,    10,    11,
+      12,    13,    -1,    -1,    16,    17,    -1,    -1,    -1,    -1,
+      22,    -1,    24,    25,    26,    27,    -1,    -1,    -1,    -1,
+      32,    33,    34,    35,    36,    -1,    38,    39,    40,    41,
+      -1,    -1,    -1,    -1,     3,    47,    48,    -1,    50,     8,
+      52,    10,    11,    12,    13,    -1,    -1,    16,    17,    -1,
+      -1,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    -1,
+      -1,    -1,    -1,    32,    33,    34,    35,    36,    -1,    38,
+      39,    40,    41,    -1,    -1,    44,    -1,     3,    47,    48,
+      -1,    50,     8,    52,    10,    11,    12,    13,    -1,    -1,
+      16,    17,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,
+      26,    27,    -1,    -1,    -1,    -1,    32,    33,    34,    35,
+      36,    -1,    38,    39,    40,    41,    -1,    -1,    -1,    -1,
+      -1,    47,    48,    -1,    50,    -1,    52,    32,    33,    34,
+      35,    36,    -1,    38,    -1,    40,    41,    -1,    -1,    -1,
+      -1,    -1,    47,    48
+};
 
-/* This is the parser code that is written into each bison parser
-  when the %semantic_parser declaration is not specified in the grammar.
-  It was written by Richard Stallman by simplifying the hairy parser
-  used when %semantic_parser is specified.  */
-
-#ifndef YYSTACK_USE_ALLOCA
-#ifdef alloca
-#define YYSTACK_USE_ALLOCA
-#else /* alloca not defined */
-#ifdef __GNUC__
-#define YYSTACK_USE_ALLOCA
-#define alloca __builtin_alloca
-#else /* not GNU C.  */
-#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
-#define YYSTACK_USE_ALLOCA
-#include <alloca.h>
-#else /* not sparc */
-/* We think this test detects Watcom and Microsoft C.  */
-/* This used to test MSDOS, but that is a bad idea
-   since that symbol is in the user namespace.  */
-#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
-#if 0 /* No need for malloc.h, which pollutes the namespace;
-	 instead, just don't use alloca.  */
-#include <malloc.h>
-#endif
-#else /* not MSDOS, or __TURBOC__ */
-#if defined(_AIX)
-/* I don't know what this was needed for, but it pollutes the namespace.
-   So I turned it off.   rms, 2 May 1997.  */
-/* #include <malloc.h>  */
- #pragma alloca
-#define YYSTACK_USE_ALLOCA
-#else /* not MSDOS, or __TURBOC__, or _AIX */
-#if 0
-#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
-		 and on HPUX 10.  Eventually we can turn this on.  */
-#define YYSTACK_USE_ALLOCA
-#define alloca __builtin_alloca
-#endif /* __hpux */
-#endif
-#endif /* not _AIX */
-#endif /* not MSDOS, or __TURBOC__ */
-#endif /* not sparc */
-#endif /* not GNU C */
-#endif /* alloca not defined */
-#endif /* YYSTACK_USE_ALLOCA not defined */
+/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
+   symbol of state STATE-NUM.  */
+static const unsigned char yystos[] =
+{
+       0,     1,     3,     8,    10,    11,    12,    13,    16,    17,
+      21,    22,    24,    25,    26,    27,    32,    33,    34,    35,
+      36,    38,    39,    40,    41,    44,    45,    47,    48,    50,
+      52,    55,    57,    58,    60,    61,    62,    63,    64,    65,
+      66,    67,    69,    70,    71,    72,    73,    86,    87,    88,
+      89,    90,    44,    79,    80,    85,    24,    24,    28,    24,
+      80,    80,    24,    29,    89,    90,    23,    52,    32,    33,
+      34,    35,    36,    38,    40,    41,    47,    48,    24,    24,
+      24,    26,    49,    24,    24,    26,    49,    24,    24,    24,
+      24,    24,    24,    80,    80,     0,    24,    58,    57,    59,
+      44,    45,    83,    30,    31,    42,    43,    46,    21,    43,
+      44,    45,    84,    89,     4,    44,    81,    82,    88,    85,
+      43,    85,    14,    50,    84,    43,    85,    14,    14,    52,
+      85,    18,    89,    53,    24,    24,    24,    26,    49,    24,
+      24,    26,    49,    24,    24,    24,    24,    24,    51,    53,
+      57,    85,    85,    87,    87,    85,    89,    80,    30,    31,
+      42,    43,    44,    20,    85,    14,    20,    50,    80,    80,
+      85,    85,    14,    20,    50,    80,    80,    53,    62,    68,
+      85,    87,    87,    42,    43,    89,     5,     6,     7,    74,
+      85,    85,    85,    85,    85,    75,    76,    77,    85,    14,
+      50,    80,    24,    56,    84,    80,    15,    51,    14,    50,
+      14,    50,    79,    85,    56,    79,    15,    15,    85,    59,
+      68,    80,    80,     7,    82,    82,    82,    82,    82,     9,
+      37,    76,    85,     9,    24,    52,    78,    80,    80,    15,
+      24,    84,    85,    51,    80,    80,    79,    79,    15,    82,
+      84,    51,    68,     7,     4,    42,    43,    44,    37,     9,
+      78,    46,    53,    15,    51,    85,    14,    50,    15,    51,
+      15,    51,    85,    80,    85,    85,    85,    53,    24,    80,
+      85,    14,    50,    80,    80,    14,    50,     5,    74,    80,
+      85,    80,    80,    15,    51,    79,    79,    80,    15,    51,
+      15,    51
+};
 
-#ifdef YYSTACK_USE_ALLOCA
-#define YYSTACK_ALLOC alloca
-#else
-#define YYSTACK_ALLOC malloc
+#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
+# define YYSIZE_T __SIZE_TYPE__
+#endif
+#if ! defined (YYSIZE_T) && defined (size_t)
+# define YYSIZE_T size_t
+#endif
+#if ! defined (YYSIZE_T)
+# if defined (__STDC__) || defined (__cplusplus)
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# endif
+#endif
+#if ! defined (YYSIZE_T)
+# define YYSIZE_T unsigned int
 #endif
-
-/* Note: there must be only one dollar sign in this file.
-   It is replaced by the list of actions, each action
-   as one case of the switch.  */
 
 #define yyerrok		(yyerrstatus = 0)
 #define yyclearin	(yychar = YYEMPTY)
-#define YYEMPTY		-2
+#define YYEMPTY		(-2)
 #define YYEOF		0
+
 #define YYACCEPT	goto yyacceptlab
-#define YYABORT 	goto yyabortlab
-#define YYERROR		goto yyerrlab1
-/* Like YYERROR except do call yyerror.
-   This remains here temporarily to ease the
-   transition to the new meaning of YYERROR, for GCC.
+#define YYABORT		goto yyabortlab
+#define YYERROR		goto yyerrorlab
+
+
+/* Like YYERROR except do call yyerror.  This remains here temporarily
+   to ease the transition to the new meaning of YYERROR, for GCC.
    Once GCC version 2 has supplanted version 1, this can go.  */
+
 #define YYFAIL		goto yyerrlab
+
 #define YYRECOVERING()  (!!yyerrstatus)
-#define YYBACKUP(token, value) \
+
+#define YYBACKUP(Token, Value)					\
 do								\
   if (yychar == YYEMPTY && yylen == 1)				\
-    { yychar = (token), yylval = (value);			\
-      yychar1 = YYTRANSLATE (yychar);				\
+    {								\
+      yychar = (Token);						\
+      yylval = (Value);						\
+      yytoken = YYTRANSLATE (yychar);				\
       YYPOPSTACK;						\
       goto yybackup;						\
     }								\
   else								\
-    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
+    { 								\
+      yyerror ("syntax error: cannot back up");\
+      YYERROR;							\
+    }								\
 while (0)
 
 #define YYTERROR	1
 #define YYERRCODE	256
 
-#ifndef YYPURE
-#define YYLEX		yylex()
-#endif
+/* YYLLOC_DEFAULT -- Compute the default location (before the actions
+   are run).  */
 
-#ifdef YYPURE
-#ifdef YYLSP_NEEDED
-#ifdef YYLEX_PARAM
-#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
-#else
-#define YYLEX		yylex(&yylval, &yylloc)
+#ifndef YYLLOC_DEFAULT
+# define YYLLOC_DEFAULT(Current, Rhs, N)		\
+   ((Current).first_line   = (Rhs)[1].first_line,	\
+    (Current).first_column = (Rhs)[1].first_column,	\
+    (Current).last_line    = (Rhs)[N].last_line,	\
+    (Current).last_column  = (Rhs)[N].last_column)
 #endif
-#else /* not YYLSP_NEEDED */
+
+/* YYLEX -- calling `yylex' with the right arguments.  */
+
 #ifdef YYLEX_PARAM
-#define YYLEX		yylex(&yylval, YYLEX_PARAM)
+# define YYLEX yylex (YYLEX_PARAM)
 #else
-#define YYLEX		yylex(&yylval)
-#endif
-#endif /* not YYLSP_NEEDED */
+# define YYLEX yylex ()
 #endif
 
-/* If nonreentrant, generate the variables here */
+/* Enable debugging if requested.  */
+#if YYDEBUG
 
-#ifndef YYPURE
+# ifndef YYFPRINTF
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYFPRINTF fprintf
+# endif
+
+# define YYDPRINTF(Args)			\
+do {						\
+  if (yydebug)					\
+    YYFPRINTF Args;				\
+} while (0)
+
+# define YYDSYMPRINT(Args)			\
+do {						\
+  if (yydebug)					\
+    yysymprint Args;				\
+} while (0)
+
+# define YYDSYMPRINTF(Title, Token, Value, Location)		\
+do {								\
+  if (yydebug)							\
+    {								\
+      YYFPRINTF (stderr, "%s ", Title);				\
+      yysymprint (stderr, 					\
+                  Token, Value);	\
+      YYFPRINTF (stderr, "\n");					\
+    }								\
+} while (0)
 
-int	yychar;			/*  the lookahead symbol		*/
-YYSTYPE	yylval;			/*  the semantic value of the		*/
-				/*  lookahead symbol			*/
+/*------------------------------------------------------------------.
+| yy_stack_print -- Print the state stack from its BOTTOM up to its |
+| TOP (included).                                                   |
+`------------------------------------------------------------------*/
 
-#ifdef YYLSP_NEEDED
-YYLTYPE yylloc;			/*  location data for the lookahead	*/
-				/*  symbol				*/
+#if defined (__STDC__) || defined (__cplusplus)
+static void
+yy_stack_print (short int *bottom, short int *top)
+#else
+static void
+yy_stack_print (bottom, top)
+    short int *bottom;
+    short int *top;
 #endif
+{
+  YYFPRINTF (stderr, "Stack now");
+  for (/* Nothing. */; bottom <= top; ++bottom)
+    YYFPRINTF (stderr, " %d", *bottom);
+  YYFPRINTF (stderr, "\n");
+}
 
-int yynerrs;			/*  number of parse errors so far       */
-#endif  /* not YYPURE */
+# define YY_STACK_PRINT(Bottom, Top)				\
+do {								\
+  if (yydebug)							\
+    yy_stack_print ((Bottom), (Top));				\
+} while (0)
 
-#if YYDEBUG != 0
-int yydebug;			/*  nonzero means print parse trace	*/
-/* Since this is uninitialized, it does not stop multiple parsers
-   from coexisting.  */
+
+/*------------------------------------------------.
+| Report that the YYRULE is going to be reduced.  |
+`------------------------------------------------*/
+
+#if defined (__STDC__) || defined (__cplusplus)
+static void
+yy_reduce_print (int yyrule)
+#else
+static void
+yy_reduce_print (yyrule)
+    int yyrule;
 #endif
+{
+  int yyi;
+  unsigned int yylno = yyrline[yyrule];
+  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
+             yyrule - 1, yylno);
+  /* Print the symbols being reduced, and their result.  */
+  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
+    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
+  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
+}
+
+# define YY_REDUCE_PRINT(Rule)		\
+do {					\
+  if (yydebug)				\
+    yy_reduce_print (Rule);		\
+} while (0)
+
+/* Nonzero means print parse trace.  It is left uninitialized so that
+   multiple parsers can coexist.  */
+int yydebug;
+#else /* !YYDEBUG */
+# define YYDPRINTF(Args)
+# define YYDSYMPRINT(Args)
+# define YYDSYMPRINTF(Title, Token, Value, Location)
+# define YY_STACK_PRINT(Bottom, Top)
+# define YY_REDUCE_PRINT(Rule)
+#endif /* !YYDEBUG */
 
-/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/
 
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
 #ifndef	YYINITDEPTH
-#define YYINITDEPTH 200
+# define YYINITDEPTH 200
 #endif
 
-/*  YYMAXDEPTH is the maximum size the stacks can grow to
-    (effective only if the built-in stack extension method is used).  */
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
 
-#if YYMAXDEPTH == 0
-#undef YYMAXDEPTH
+   Do not make this value too large; the results are undefined if
+   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
+
+#if defined (YYMAXDEPTH) && YYMAXDEPTH == 0
+# undef YYMAXDEPTH
 #endif
 
 #ifndef YYMAXDEPTH
-#define YYMAXDEPTH 10000
+# define YYMAXDEPTH 10000
 #endif
+
 
-/* Define __yy_memcpy.  Note that the size argument
-   should be passed with type unsigned int, because that is what the non-GCC
-   definitions require.  With GCC, __builtin_memcpy takes an arg
-   of type size_t, but it can handle unsigned int.  */
-
-#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
-#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
-#else				/* not GNU C or C++ */
-#ifndef __cplusplus
 
-/* This is the most reliable way to avoid incompatibilities
-   in available built-in functions on various systems.  */
-static void
-__yy_memcpy (to, from, count)
-     char *to;
-     char *from;
-     unsigned int count;
+#if YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined (__GLIBC__) && defined (_STRING_H)
+#   define yystrlen strlen
+#  else
+/* Return the length of YYSTR.  */
+static YYSIZE_T
+#   if defined (__STDC__) || defined (__cplusplus)
+yystrlen (const char *yystr)
+#   else
+yystrlen (yystr)
+     const char *yystr;
+#   endif
+{
+  register const char *yys = yystr;
+
+  while (*yys++ != '\0')
+    continue;
+
+  return yys - yystr - 1;
+}
+#  endif
+# endif
+
+# ifndef yystpcpy
+#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+static char *
+#   if defined (__STDC__) || defined (__cplusplus)
+yystpcpy (char *yydest, const char *yysrc)
+#   else
+yystpcpy (yydest, yysrc)
+     char *yydest;
+     const char *yysrc;
+#   endif
 {
-  register char *f = from;
-  register char *t = to;
-  register int i = count;
+  register char *yyd = yydest;
+  register const char *yys = yysrc;
+
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
 
-  while (i-- > 0)
-    *t++ = *f++;
+  return yyd - 1;
 }
+#  endif
+# endif
 
-#else /* __cplusplus */
+#endif /* !YYERROR_VERBOSE */
 
-/* This is the most reliable way to avoid incompatibilities
-   in available built-in functions on various systems.  */
+
+
+#if YYDEBUG
+/*--------------------------------.
+| Print this symbol on YYOUTPUT.  |
+`--------------------------------*/
+
+#if defined (__STDC__) || defined (__cplusplus)
+static void
+yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
+#else
 static void
-__yy_memcpy (char *to, char *from, unsigned int count)
+yysymprint (yyoutput, yytype, yyvaluep)
+    FILE *yyoutput;
+    int yytype;
+    YYSTYPE *yyvaluep;
+#endif
 {
-  register char *t = to;
-  register char *f = from;
-  register int i = count;
+  /* Pacify ``unused variable'' warnings.  */
+  (void) yyvaluep;
+
+  if (yytype < YYNTOKENS)
+    {
+      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
+# ifdef YYPRINT
+      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
+# endif
+    }
+  else
+    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
 
-  while (i-- > 0)
-    *t++ = *f++;
+  switch (yytype)
+    {
+      default:
+        break;
+    }
+  YYFPRINTF (yyoutput, ")");
 }
 
+#endif /* ! YYDEBUG */
+/*-----------------------------------------------.
+| Release the memory associated to this symbol.  |
+`-----------------------------------------------*/
+
+#if defined (__STDC__) || defined (__cplusplus)
+static void
+yydestruct (int yytype, YYSTYPE *yyvaluep)
+#else
+static void
+yydestruct (yytype, yyvaluep)
+    int yytype;
+    YYSTYPE *yyvaluep;
 #endif
-#endif
+{
+  /* Pacify ``unused variable'' warnings.  */
+  (void) yyvaluep;
+
+  switch (yytype)
+    {
+
+      default:
+        break;
+    }
+}
 
-#line 217 "/usr/share/bison.simple"
 
-/* The user can define YYPARSE_PARAM as the name of an argument to be passed
-   into yyparse.  The argument should have type void *.
-   It should actually point to an object.
-   Grammar actions can access the variable by casting it
-   to the proper pointer type.  */
+/* Prevent warnings from -Wmissing-prototypes.  */
 
 #ifdef YYPARSE_PARAM
-#ifdef __cplusplus
-#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
-#define YYPARSE_PARAM_DECL
-#else /* not __cplusplus */
-#define YYPARSE_PARAM_ARG YYPARSE_PARAM
-#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
-#endif /* not __cplusplus */
-#else /* not YYPARSE_PARAM */
-#define YYPARSE_PARAM_ARG
-#define YYPARSE_PARAM_DECL
-#endif /* not YYPARSE_PARAM */
+# if defined (__STDC__) || defined (__cplusplus)
+int yyparse (void *YYPARSE_PARAM);
+# else
+int yyparse ();
+# endif
+#else /* ! YYPARSE_PARAM */
+#if defined (__STDC__) || defined (__cplusplus)
+int yyparse (void);
+#else
+int yyparse ();
+#endif
+#endif /* ! YYPARSE_PARAM */
+
+
+
+/* The lookahead symbol.  */
+int yychar;
+
+/* The semantic value of the lookahead symbol.  */
+YYSTYPE yylval;
+
+/* Number of syntax errors so far.  */
+int yynerrs;
+
+
+
+/*----------.
+| yyparse.  |
+`----------*/
 
-/* Prevent warning if -Wstrict-prototypes.  */
-#ifdef __GNUC__
 #ifdef YYPARSE_PARAM
-int yyparse (void *);
+# if defined (__STDC__) || defined (__cplusplus)
+int yyparse (void *YYPARSE_PARAM)
+# else
+int yyparse (YYPARSE_PARAM)
+  void *YYPARSE_PARAM;
+# endif
+#else /* ! YYPARSE_PARAM */
+#if defined (__STDC__) || defined (__cplusplus)
+int
+yyparse (void)
 #else
-int yyparse (void);
+int
+yyparse ()
+
 #endif
 #endif
-
-int
-yyparse(YYPARSE_PARAM_ARG)
-     YYPARSE_PARAM_DECL
 {
+  
   register int yystate;
   register int yyn;
-  register short *yyssp;
+  int yyresult;
+  /* Number of tokens to shift before error messages enabled.  */
+  int yyerrstatus;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yytoken = 0;
+
+  /* Three stacks and their tools:
+     `yyss': related to states,
+     `yyvs': related to semantic values,
+     `yyls': related to locations.
+
+     Refer to the stacks thru separate pointers, to allow yyoverflow
+     to reallocate them elsewhere.  */
+
+  /* The state stack.  */
+  short int yyssa[YYINITDEPTH];
+  short int *yyss = yyssa;
+  register short int *yyssp;
+
+  /* The semantic value stack.  */
+  YYSTYPE yyvsa[YYINITDEPTH];
+  YYSTYPE *yyvs = yyvsa;
   register YYSTYPE *yyvsp;
-  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
-  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */
 
-  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
-  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/
 
-  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
-  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */
 
-#ifdef YYLSP_NEEDED
-  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
-  YYLTYPE *yyls = yylsa;
-  YYLTYPE *yylsp;
-
-#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
-#else
 #define YYPOPSTACK   (yyvsp--, yyssp--)
-#endif
 
-  int yystacksize = YYINITDEPTH;
-  int yyfree_stacks = 0;
+  YYSIZE_T yystacksize = YYINITDEPTH;
 
-#ifdef YYPURE
-  int yychar;
-  YYSTYPE yylval;
-  int yynerrs;
-#ifdef YYLSP_NEEDED
-  YYLTYPE yylloc;
-#endif
-#endif
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
 
-  YYSTYPE yyval;		/*  the variable used to return		*/
-				/*  semantic values from the action	*/
-				/*  routines				*/
 
+  /* When reducing, the number of symbols on the RHS of the reduced
+     rule.  */
   int yylen;
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Starting parse\n");
-#endif
+  YYDPRINTF ((stderr, "Starting parse\n"));
 
   yystate = 0;
   yyerrstatus = 0;
@@ -1054,110 +1488,97 @@
      so that they stay on the same level as the state stack.
      The wasted elements are never initialized.  */
 
-  yyssp = yyss - 1;
+  yyssp = yyss;
   yyvsp = yyvs;
-#ifdef YYLSP_NEEDED
-  yylsp = yyls;
-#endif
 
-/* Push a new state, which is found in  yystate  .  */
-/* In all cases, when you get here, the value and location stacks
-   have just been pushed. so pushing a state here evens the stacks.  */
-yynewstate:
 
-  *++yyssp = yystate;
+  goto yysetstate;
 
-  if (yyssp >= yyss + yystacksize - 1)
-    {
-      /* Give user a chance to reallocate the stack */
-      /* Use copies of these so that the &'s don't force the real ones into memory. */
-      YYSTYPE *yyvs1 = yyvs;
-      short *yyss1 = yyss;
-#ifdef YYLSP_NEEDED
-      YYLTYPE *yyls1 = yyls;
-#endif
+/*------------------------------------------------------------.
+| yynewstate -- Push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+ yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed. so pushing a state here evens the stacks.
+     */
+  yyssp++;
+
+ yysetstate:
+  *yyssp = yystate;
 
+  if (yyss + yystacksize - 1 <= yyssp)
+    {
       /* Get the current used size of the three stacks, in elements.  */
-      int size = yyssp - yyss + 1;
+      YYSIZE_T yysize = yyssp - yyss + 1;
 
 #ifdef yyoverflow
-      /* Each stack pointer address is followed by the size of
-	 the data in use in that stack, in bytes.  */
-#ifdef YYLSP_NEEDED
-      /* This used to be a conditional around just the two extra args,
-	 but that might be undefined if yyoverflow is a macro.  */
-      yyoverflow("parser stack overflow",
-		 &yyss1, size * sizeof (*yyssp),
-		 &yyvs1, size * sizeof (*yyvsp),
-		 &yyls1, size * sizeof (*yylsp),
-		 &yystacksize);
-#else
-      yyoverflow("parser stack overflow",
-		 &yyss1, size * sizeof (*yyssp),
-		 &yyvs1, size * sizeof (*yyvsp),
-		 &yystacksize);
-#endif
+      {
+	/* Give user a chance to reallocate the stack. Use copies of
+	   these so that the &'s don't force the real ones into
+	   memory.  */
+	YYSTYPE *yyvs1 = yyvs;
+	short int *yyss1 = yyss;
+
+
+	/* Each stack pointer address is followed by the size of the
+	   data in use in that stack, in bytes.  This used to be a
+	   conditional around just the two extra args, but that might
+	   be undefined if yyoverflow is a macro.  */
+	yyoverflow ("parser stack overflow",
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
 
-      yyss = yyss1; yyvs = yyvs1;
-#ifdef YYLSP_NEEDED
-      yyls = yyls1;
-#endif
+		    &yystacksize);
+
+	yyss = yyss1;
+	yyvs = yyvs1;
+      }
 #else /* no yyoverflow */
+# ifndef YYSTACK_RELOCATE
+      goto yyoverflowlab;
+# else
       /* Extend the stack our own way.  */
-      if (yystacksize >= YYMAXDEPTH)
-	{
-	  yyerror("parser stack overflow");
-	  if (yyfree_stacks)
-	    {
-	      free (yyss);
-	      free (yyvs);
-#ifdef YYLSP_NEEDED
-	      free (yyls);
-#endif
-	    }
-	  return 2;
-	}
+      if (YYMAXDEPTH <= yystacksize)
+	goto yyoverflowlab;
       yystacksize *= 2;
-      if (yystacksize > YYMAXDEPTH)
+      if (YYMAXDEPTH < yystacksize)
 	yystacksize = YYMAXDEPTH;
-#ifndef YYSTACK_USE_ALLOCA
-      yyfree_stacks = 1;
-#endif
-      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
-      __yy_memcpy ((char *)yyss, (char *)yyss1,
-		   size * (unsigned int) sizeof (*yyssp));
-      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
-      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
-		   size * (unsigned int) sizeof (*yyvsp));
-#ifdef YYLSP_NEEDED
-      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
-      __yy_memcpy ((char *)yyls, (char *)yyls1,
-		   size * (unsigned int) sizeof (*yylsp));
-#endif
+
+      {
+	short int *yyss1 = yyss;
+	union yyalloc *yyptr =
+	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
+	if (! yyptr)
+	  goto yyoverflowlab;
+	YYSTACK_RELOCATE (yyss);
+	YYSTACK_RELOCATE (yyvs);
+
+#  undef YYSTACK_RELOCATE
+	if (yyss1 != yyssa)
+	  YYSTACK_FREE (yyss1);
+      }
+# endif
 #endif /* no yyoverflow */
 
-      yyssp = yyss + size - 1;
-      yyvsp = yyvs + size - 1;
-#ifdef YYLSP_NEEDED
-      yylsp = yyls + size - 1;
-#endif
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
 
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
-#endif
 
-      if (yyssp >= yyss + yystacksize - 1)
+      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
+		  (unsigned long int) yystacksize));
+
+      if (yyss + yystacksize - 1 <= yyssp)
 	YYABORT;
     }
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Entering state %d\n", yystate);
-#endif
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
 
   goto yybackup;
- yybackup:
+
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
 
 /* Do appropriate processing given the current state.  */
 /* Read a lookahead token if we need one and don't already have one.  */
@@ -1166,155 +1587,121 @@
   /* First try to decide what to do without reference to lookahead token.  */
 
   yyn = yypact[yystate];
-  if (yyn == YYFLAG)
+  if (yyn == YYPACT_NINF)
     goto yydefault;
 
   /* Not known => get a lookahead token if don't already have one.  */
 
-  /* yychar is either YYEMPTY or YYEOF
-     or a valid token in external form.  */
-
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
   if (yychar == YYEMPTY)
     {
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Reading a token: ");
-#endif
+      YYDPRINTF ((stderr, "Reading a token: "));
       yychar = YYLEX;
     }
 
-  /* Convert token to internal form (in yychar1) for indexing tables with */
-
-  if (yychar <= 0)		/* This means end of input. */
+  if (yychar <= YYEOF)
     {
-      yychar1 = 0;
-      yychar = YYEOF;		/* Don't call YYLEX any more */
-
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Now at end of input.\n");
-#endif
+      yychar = yytoken = YYEOF;
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
     }
   else
     {
-      yychar1 = YYTRANSLATE(yychar);
-
-#if YYDEBUG != 0
-      if (yydebug)
-	{
-	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
-	  /* Give the individual parser a way to print the precise meaning
-	     of a token, for further debugging info.  */
-#ifdef YYPRINT
-	  YYPRINT (stderr, yychar, yylval);
-#endif
-	  fprintf (stderr, ")\n");
-	}
-#endif
+      yytoken = YYTRANSLATE (yychar);
+      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
     }
 
-  yyn += yychar1;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
+  /* If the proper action on seeing token YYTOKEN is to reduce or to
+     detect an error, take that action.  */
+  yyn += yytoken;
+  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
     goto yydefault;
-
   yyn = yytable[yyn];
-
-  /* yyn is what to do for this token type in this state.
-     Negative => reduce, -yyn is rule number.
-     Positive => shift, yyn is new state.
-       New state is final state => don't bother to shift,
-       just return success.
-     0, or most negative number => error.  */
-
-  if (yyn < 0)
+  if (yyn <= 0)
     {
-      if (yyn == YYFLAG)
+      if (yyn == 0 || yyn == YYTABLE_NINF)
 	goto yyerrlab;
       yyn = -yyn;
       goto yyreduce;
     }
-  else if (yyn == 0)
-    goto yyerrlab;
 
   if (yyn == YYFINAL)
     YYACCEPT;
 
   /* Shift the lookahead token.  */
-
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
-#endif
+  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));
 
   /* Discard the token being shifted unless it is eof.  */
   if (yychar != YYEOF)
     yychar = YYEMPTY;
 
   *++yyvsp = yylval;
-#ifdef YYLSP_NEEDED
-  *++yylsp = yylloc;
-#endif
 
-  /* count tokens shifted since error; after three, turn off error status.  */
-  if (yyerrstatus) yyerrstatus--;
+
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
 
   yystate = yyn;
   goto yynewstate;
 
-/* Do the default action for the current state.  */
-yydefault:
 
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
   yyn = yydefact[yystate];
   if (yyn == 0)
     goto yyerrlab;
+  goto yyreduce;
 
-/* Do a reduction.  yyn is the number of a rule to reduce with.  */
+
+/*-----------------------------.
+| yyreduce -- Do a reduction.  |
+`-----------------------------*/
 yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
   yylen = yyr2[yyn];
-  if (yylen > 0)
-    yyval = yyvsp[1-yylen]; /* implement default value of the action */
-
-#if YYDEBUG != 0
-  if (yydebug)
-    {
-      int i;
 
-      fprintf (stderr, "Reducing via rule %d (line %d), ",
-	       yyn, yyrline[yyn]);
-
-      /* Print the symbols being reduced, and their result.  */
-      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
-	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
-      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
-    }
-#endif
+  /* If YYLEN is nonzero, implement the default value of the action:
+     `$$ = $1'.
 
+     Otherwise, the following line sets YYVAL to garbage.
+     This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
 
-  switch (yyn) {
 
-case 1:
-#line 352 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+  YY_REDUCE_PRINT (yyn);
+  switch (yyn)
+    {
+        case 2:
+#line 352 "./parse.y"
+    {
 			  /* Case of regular command.  Discard the error
 			     safety net,and return the command just parsed. */
 			  global_command = yyvsp[-1].command;
 			  eof_encountered = 0;
 			  /* discard_parser_constructs (0); */
 			  YYACCEPT;
-			;
-    break;}
-case 2:
-#line 361 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 3:
+#line 361 "./parse.y"
+    {
 			  /* Case of regular command, but not a very
 			     interesting one.  Return a NULL command. */
 			  global_command = (COMMAND *)NULL;
 			  YYACCEPT;
-			;
-    break;}
-case 3:
-#line 368 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 4:
+#line 368 "./parse.y"
+    {
 			  /* Error during parsing.  Return NULL command. */
 			  global_command = (COMMAND *)NULL;
 			  eof_encountered = 0;
@@ -1327,283 +1714,325 @@
 			    {
 			      YYABORT;
 			    }
-			;
-    break;}
-case 4:
-#line 383 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 5:
+#line 383 "./parse.y"
+    {
 			  /* Case of EOF seen by itself.  Do ignoreeof or
 			     not. */
 			  global_command = (COMMAND *)NULL;
 			  handle_eof_input_unit ();
 			  YYACCEPT;
-			;
-    break;}
-case 5:
-#line 393 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.word_list = make_word_list (yyvsp[0].word, (WORD_LIST *)NULL); ;
-    break;}
-case 6:
-#line 395 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.word_list = make_word_list (yyvsp[0].word, yyvsp[-1].word_list); ;
-    break;}
-case 7:
-#line 399 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 6:
+#line 393 "./parse.y"
+    { yyval.word_list = make_word_list (yyvsp[0].word, (WORD_LIST *)NULL); }
+    break;
+
+  case 7:
+#line 395 "./parse.y"
+    { yyval.word_list = make_word_list (yyvsp[0].word, yyvsp[-1].word_list); }
+    break;
+
+  case 8:
+#line 399 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (1, r_output_direction, redir);
-			;
-    break;}
-case 8:
-#line 404 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 9:
+#line 404 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (0, r_input_direction, redir);
-			;
-    break;}
-case 9:
-#line 409 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 10:
+#line 409 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_output_direction, redir);
-			;
-    break;}
-case 10:
-#line 414 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 11:
+#line 414 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_input_direction, redir);
-			;
-    break;}
-case 11:
-#line 419 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 12:
+#line 419 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (1, r_appending_to, redir);
-			;
-    break;}
-case 12:
-#line 424 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 13:
+#line 424 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_appending_to, redir);
-			;
-    break;}
-case 13:
-#line 429 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 14:
+#line 429 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (0, r_reading_until, redir);
 			  redir_stack[need_here_doc++] = yyval.redirect;
-			;
-    break;}
-case 14:
-#line 435 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 15:
+#line 435 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_reading_until, redir);
 			  redir_stack[need_here_doc++] = yyval.redirect;
-			;
-    break;}
-case 15:
-#line 441 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 16:
+#line 441 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (0, r_reading_string, redir);
-			;
-    break;}
-case 16:
-#line 446 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 17:
+#line 446 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_reading_string, redir);
-			;
-    break;}
-case 17:
-#line 451 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 18:
+#line 451 "./parse.y"
+    {
 			  redir.dest = yyvsp[0].number;
 			  yyval.redirect = make_redirection (0, r_duplicating_input, redir);
-			;
-    break;}
-case 18:
-#line 456 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 19:
+#line 456 "./parse.y"
+    {
 			  redir.dest = yyvsp[0].number;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_duplicating_input, redir);
-			;
-    break;}
-case 19:
-#line 461 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 20:
+#line 461 "./parse.y"
+    {
 			  redir.dest = yyvsp[0].number;
 			  yyval.redirect = make_redirection (1, r_duplicating_output, redir);
-			;
-    break;}
-case 20:
-#line 466 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 21:
+#line 466 "./parse.y"
+    {
 			  redir.dest = yyvsp[0].number;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_duplicating_output, redir);
-			;
-    break;}
-case 21:
-#line 471 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 22:
+#line 471 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (0, r_duplicating_input_word, redir);
-			;
-    break;}
-case 22:
-#line 476 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 23:
+#line 476 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_duplicating_input_word, redir);
-			;
-    break;}
-case 23:
-#line 481 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 24:
+#line 481 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (1, r_duplicating_output_word, redir);
-			;
-    break;}
-case 24:
-#line 486 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 25:
+#line 486 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_duplicating_output_word, redir);
-			;
-    break;}
-case 25:
-#line 491 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 26:
+#line 491 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection
 			    (0, r_deblank_reading_until, redir);
 			  redir_stack[need_here_doc++] = yyval.redirect;
-			;
-    break;}
-case 26:
-#line 498 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 27:
+#line 498 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection
 			    (yyvsp[-2].number, r_deblank_reading_until, redir);
 			  redir_stack[need_here_doc++] = yyval.redirect;
-			;
-    break;}
-case 27:
-#line 505 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 28:
+#line 505 "./parse.y"
+    {
 			  redir.dest = 0;
 			  yyval.redirect = make_redirection (1, r_close_this, redir);
-			;
-    break;}
-case 28:
-#line 510 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 29:
+#line 510 "./parse.y"
+    {
 			  redir.dest = 0;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_close_this, redir);
-			;
-    break;}
-case 29:
-#line 515 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 30:
+#line 515 "./parse.y"
+    {
 			  redir.dest = 0;
 			  yyval.redirect = make_redirection (0, r_close_this, redir);
-			;
-    break;}
-case 30:
-#line 520 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 31:
+#line 520 "./parse.y"
+    {
 			  redir.dest = 0;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_close_this, redir);
-			;
-    break;}
-case 31:
-#line 525 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 32:
+#line 525 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (1, r_err_and_out, redir);
-			;
-    break;}
-case 32:
-#line 530 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 33:
+#line 530 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_input_output, redir);
-			;
-    break;}
-case 33:
-#line 535 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 34:
+#line 535 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (0, r_input_output, redir);
-			;
-    break;}
-case 34:
-#line 540 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 35:
+#line 540 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (1, r_output_force, redir);
-			;
-    break;}
-case 35:
-#line 545 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 36:
+#line 545 "./parse.y"
+    {
 			  redir.filename = yyvsp[0].word;
 			  yyval.redirect = make_redirection (yyvsp[-2].number, r_output_force, redir);
-			;
-    break;}
-case 36:
-#line 552 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.element.word = yyvsp[0].word; yyval.element.redirect = 0; ;
-    break;}
-case 37:
-#line 554 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.element.word = yyvsp[0].word; yyval.element.redirect = 0; ;
-    break;}
-case 38:
-#line 556 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.element.redirect = yyvsp[0].redirect; yyval.element.word = 0; ;
-    break;}
-case 39:
-#line 560 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 37:
+#line 552 "./parse.y"
+    { yyval.element.word = yyvsp[0].word; yyval.element.redirect = 0; }
+    break;
+
+  case 38:
+#line 554 "./parse.y"
+    { yyval.element.word = yyvsp[0].word; yyval.element.redirect = 0; }
+    break;
+
+  case 39:
+#line 556 "./parse.y"
+    { yyval.element.redirect = yyvsp[0].redirect; yyval.element.word = 0; }
+    break;
+
+  case 40:
+#line 560 "./parse.y"
+    {
 			  yyval.redirect = yyvsp[0].redirect;
-			;
-    break;}
-case 40:
-#line 564 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 41:
+#line 564 "./parse.y"
+    {
 			  register REDIRECT *t;
 
 			  for (t = yyvsp[-1].redirect; t->next; t = t->next)
 			    ;
 			  t->next = yyvsp[0].redirect;
 			  yyval.redirect = yyvsp[-1].redirect;
-			;
-    break;}
-case 41:
-#line 575 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_simple_command (yyvsp[0].element, (COMMAND *)NULL); ;
-    break;}
-case 42:
-#line 577 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_simple_command (yyvsp[0].element, yyvsp[-1].command); ;
-    break;}
-case 43:
-#line 581 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = clean_simple_command (yyvsp[0].command); ;
-    break;}
-case 44:
-#line 583 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 45:
-#line 585 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 42:
+#line 575 "./parse.y"
+    { yyval.command = make_simple_command (yyvsp[0].element, (COMMAND *)NULL); }
+    break;
+
+  case 43:
+#line 577 "./parse.y"
+    { yyval.command = make_simple_command (yyvsp[0].element, yyvsp[-1].command); }
+    break;
+
+  case 44:
+#line 581 "./parse.y"
+    { yyval.command = clean_simple_command (yyvsp[0].command); }
+    break;
+
+  case 45:
+#line 583 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 46:
+#line 585 "./parse.y"
+    {
 			  COMMAND *tc;
 
 			  tc = yyvsp[-1].command;
@@ -1617,222 +2046,260 @@
 			  else
 			    tc->redirects = yyvsp[0].redirect;
 			  yyval.command = yyvsp[-1].command;
-			;
-    break;}
-case 46:
-#line 601 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 47:
-#line 605 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 48:
-#line 607 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 49:
-#line 609 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_while_command (yyvsp[-3].command, yyvsp[-1].command); ;
-    break;}
-case 50:
-#line 611 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_until_command (yyvsp[-3].command, yyvsp[-1].command); ;
-    break;}
-case 51:
-#line 613 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 52:
-#line 615 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 53:
-#line 617 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 54:
-#line 619 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 55:
-#line 621 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 56:
-#line 623 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 57:
-#line 625 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 58:
-#line 629 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 47:
+#line 601 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 48:
+#line 605 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 49:
+#line 607 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 50:
+#line 609 "./parse.y"
+    { yyval.command = make_while_command (yyvsp[-3].command, yyvsp[-1].command); }
+    break;
+
+  case 51:
+#line 611 "./parse.y"
+    { yyval.command = make_until_command (yyvsp[-3].command, yyvsp[-1].command); }
+    break;
+
+  case 52:
+#line 613 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 53:
+#line 615 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 54:
+#line 617 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 55:
+#line 619 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 56:
+#line 621 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 57:
+#line 623 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 58:
+#line 625 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 59:
+#line 629 "./parse.y"
+    {
 			  yyval.command = make_for_command (yyvsp[-4].word, add_string_to_list ("\"$@\"", (WORD_LIST *)NULL), yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 59:
-#line 634 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 60:
+#line 634 "./parse.y"
+    {
 			  yyval.command = make_for_command (yyvsp[-4].word, add_string_to_list ("\"$@\"", (WORD_LIST *)NULL), yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 60:
-#line 639 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 61:
+#line 639 "./parse.y"
+    {
 			  yyval.command = make_for_command (yyvsp[-5].word, add_string_to_list ("\"$@\"", (WORD_LIST *)NULL), yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 61:
-#line 644 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 62:
+#line 644 "./parse.y"
+    {
 			  yyval.command = make_for_command (yyvsp[-5].word, add_string_to_list ("\"$@\"", (WORD_LIST *)NULL), yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 62:
-#line 649 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 63:
+#line 649 "./parse.y"
+    {
 			  yyval.command = make_for_command (yyvsp[-8].word, REVERSE_LIST (yyvsp[-5].word_list, WORD_LIST *), yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 63:
-#line 654 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 64:
+#line 654 "./parse.y"
+    {
 			  yyval.command = make_for_command (yyvsp[-8].word, REVERSE_LIST (yyvsp[-5].word_list, WORD_LIST *), yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 64:
-#line 659 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 65:
+#line 659 "./parse.y"
+    {
 			  yyval.command = make_for_command (yyvsp[-7].word, (WORD_LIST *)NULL, yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 65:
-#line 664 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 66:
+#line 664 "./parse.y"
+    {
 			  yyval.command = make_for_command (yyvsp[-7].word, (WORD_LIST *)NULL, yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 66:
-#line 671 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 67:
+#line 671 "./parse.y"
+    {
 				  yyval.command = make_arith_for_command (yyvsp[-5].word_list, yyvsp[-1].command, arith_for_lineno);
 				  if (word_top > 0) word_top--;
-				;
-    break;}
-case 67:
-#line 676 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+				}
+    break;
+
+  case 68:
+#line 676 "./parse.y"
+    {
 				  yyval.command = make_arith_for_command (yyvsp[-5].word_list, yyvsp[-1].command, arith_for_lineno);
 				  if (word_top > 0) word_top--;
-				;
-    break;}
-case 68:
-#line 681 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+				}
+    break;
+
+  case 69:
+#line 681 "./parse.y"
+    {
 				  yyval.command = make_arith_for_command (yyvsp[-3].word_list, yyvsp[-1].command, arith_for_lineno);
 				  if (word_top > 0) word_top--;
-				;
-    break;}
-case 69:
-#line 686 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+				}
+    break;
+
+  case 70:
+#line 686 "./parse.y"
+    {
 				  yyval.command = make_arith_for_command (yyvsp[-3].word_list, yyvsp[-1].command, arith_for_lineno);
 				  if (word_top > 0) word_top--;
-				;
-    break;}
-case 70:
-#line 693 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+				}
+    break;
+
+  case 71:
+#line 693 "./parse.y"
+    {
 			  yyval.command = make_select_command (yyvsp[-4].word, add_string_to_list ("\"$@\"", (WORD_LIST *)NULL), yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 71:
-#line 698 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 72:
+#line 698 "./parse.y"
+    {
 			  yyval.command = make_select_command (yyvsp[-4].word, add_string_to_list ("\"$@\"", (WORD_LIST *)NULL), yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 72:
-#line 703 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 73:
+#line 703 "./parse.y"
+    {
 			  yyval.command = make_select_command (yyvsp[-5].word, add_string_to_list ("\"$@\"", (WORD_LIST *)NULL), yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 73:
-#line 708 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 74:
+#line 708 "./parse.y"
+    {
 			  yyval.command = make_select_command (yyvsp[-5].word, add_string_to_list ("\"$@\"", (WORD_LIST *)NULL), yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 74:
-#line 713 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 75:
+#line 713 "./parse.y"
+    {
 			  yyval.command = make_select_command (yyvsp[-8].word, REVERSE_LIST (yyvsp[-5].word_list, WORD_LIST *), yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 75:
-#line 718 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 76:
+#line 718 "./parse.y"
+    {
 			  yyval.command = make_select_command (yyvsp[-8].word, REVERSE_LIST (yyvsp[-5].word_list, WORD_LIST *), yyvsp[-1].command, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 76:
-#line 725 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 77:
+#line 725 "./parse.y"
+    {
 			  yyval.command = make_case_command (yyvsp[-4].word, (PATTERN_LIST *)NULL, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 77:
-#line 730 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 78:
+#line 730 "./parse.y"
+    {
 			  yyval.command = make_case_command (yyvsp[-5].word, yyvsp[-2].pattern, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 78:
-#line 735 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 79:
+#line 735 "./parse.y"
+    {
 			  yyval.command = make_case_command (yyvsp[-4].word, yyvsp[-1].pattern, word_lineno[word_top]);
 			  if (word_top > 0) word_top--;
-			;
-    break;}
-case 79:
-#line 742 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_function_def (yyvsp[-4].word, yyvsp[0].command, function_dstart, function_bstart); ;
-    break;}
-case 80:
-#line 745 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_function_def (yyvsp[-4].word, yyvsp[0].command, function_dstart, function_bstart); ;
-    break;}
-case 81:
-#line 748 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_function_def (yyvsp[-2].word, yyvsp[0].command, function_dstart, function_bstart); ;
-    break;}
-case 82:
-#line 753 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 83:
-#line 755 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 80:
+#line 742 "./parse.y"
+    { yyval.command = make_function_def (yyvsp[-4].word, yyvsp[0].command, function_dstart, function_bstart); }
+    break;
+
+  case 81:
+#line 745 "./parse.y"
+    { yyval.command = make_function_def (yyvsp[-4].word, yyvsp[0].command, function_dstart, function_bstart); }
+    break;
+
+  case 82:
+#line 748 "./parse.y"
+    { yyval.command = make_function_def (yyvsp[-2].word, yyvsp[0].command, function_dstart, function_bstart); }
+    break;
+
+  case 83:
+#line 753 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 84:
+#line 755 "./parse.y"
+    {
 			  COMMAND *tc;
 
 			  tc = yyvsp[-1].command;
@@ -1859,238 +2326,282 @@
 			  else
 			    tc->redirects = yyvsp[0].redirect;
 			  yyval.command = yyvsp[-1].command;
-			;
-    break;}
-case 84:
-#line 786 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 85:
+#line 786 "./parse.y"
+    {
 			  yyval.command = make_subshell_command (yyvsp[-1].command);
 			  yyval.command->flags |= CMD_WANT_SUBSHELL;
-			;
-    break;}
-case 85:
-#line 793 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_if_command (yyvsp[-3].command, yyvsp[-1].command, (COMMAND *)NULL); ;
-    break;}
-case 86:
-#line 795 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_if_command (yyvsp[-5].command, yyvsp[-3].command, yyvsp[-1].command); ;
-    break;}
-case 87:
-#line 797 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_if_command (yyvsp[-4].command, yyvsp[-2].command, yyvsp[-1].command); ;
-    break;}
-case 88:
-#line 802 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_group_command (yyvsp[-1].command); ;
-    break;}
-case 89:
-#line 806 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_arith_command (yyvsp[0].word_list); ;
-    break;}
-case 90:
-#line 810 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[-1].command; ;
-    break;}
-case 91:
-#line 814 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_if_command (yyvsp[-2].command, yyvsp[0].command, (COMMAND *)NULL); ;
-    break;}
-case 92:
-#line 816 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_if_command (yyvsp[-4].command, yyvsp[-2].command, yyvsp[0].command); ;
-    break;}
-case 93:
-#line 818 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = make_if_command (yyvsp[-3].command, yyvsp[-1].command, yyvsp[0].command); ;
-    break;}
-case 95:
-#line 823 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyvsp[0].pattern->next = yyvsp[-1].pattern; yyval.pattern = yyvsp[0].pattern; ;
-    break;}
-case 96:
-#line 827 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.pattern = make_pattern_list (yyvsp[-2].word_list, yyvsp[0].command); ;
-    break;}
-case 97:
-#line 829 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.pattern = make_pattern_list (yyvsp[-2].word_list, (COMMAND *)NULL); ;
-    break;}
-case 98:
-#line 831 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.pattern = make_pattern_list (yyvsp[-2].word_list, yyvsp[0].command); ;
-    break;}
-case 99:
-#line 833 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.pattern = make_pattern_list (yyvsp[-2].word_list, (COMMAND *)NULL); ;
-    break;}
-case 101:
-#line 838 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyvsp[-1].pattern->next = yyvsp[-2].pattern; yyval.pattern = yyvsp[-1].pattern; ;
-    break;}
-case 102:
-#line 842 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.word_list = make_word_list (yyvsp[0].word, (WORD_LIST *)NULL); ;
-    break;}
-case 103:
-#line 844 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.word_list = make_word_list (yyvsp[0].word, yyvsp[-2].word_list); ;
-    break;}
-case 104:
-#line 853 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 86:
+#line 793 "./parse.y"
+    { yyval.command = make_if_command (yyvsp[-3].command, yyvsp[-1].command, (COMMAND *)NULL); }
+    break;
+
+  case 87:
+#line 795 "./parse.y"
+    { yyval.command = make_if_command (yyvsp[-5].command, yyvsp[-3].command, yyvsp[-1].command); }
+    break;
+
+  case 88:
+#line 797 "./parse.y"
+    { yyval.command = make_if_command (yyvsp[-4].command, yyvsp[-2].command, yyvsp[-1].command); }
+    break;
+
+  case 89:
+#line 802 "./parse.y"
+    { yyval.command = make_group_command (yyvsp[-1].command); }
+    break;
+
+  case 90:
+#line 806 "./parse.y"
+    { yyval.command = make_arith_command (yyvsp[0].word_list); }
+    break;
+
+  case 91:
+#line 810 "./parse.y"
+    { yyval.command = yyvsp[-1].command; }
+    break;
+
+  case 92:
+#line 814 "./parse.y"
+    { yyval.command = make_if_command (yyvsp[-2].command, yyvsp[0].command, (COMMAND *)NULL); }
+    break;
+
+  case 93:
+#line 816 "./parse.y"
+    { yyval.command = make_if_command (yyvsp[-4].command, yyvsp[-2].command, yyvsp[0].command); }
+    break;
+
+  case 94:
+#line 818 "./parse.y"
+    { yyval.command = make_if_command (yyvsp[-3].command, yyvsp[-1].command, yyvsp[0].command); }
+    break;
+
+  case 96:
+#line 823 "./parse.y"
+    { yyvsp[0].pattern->next = yyvsp[-1].pattern; yyval.pattern = yyvsp[0].pattern; }
+    break;
+
+  case 97:
+#line 827 "./parse.y"
+    { yyval.pattern = make_pattern_list (yyvsp[-2].word_list, yyvsp[0].command); }
+    break;
+
+  case 98:
+#line 829 "./parse.y"
+    { yyval.pattern = make_pattern_list (yyvsp[-2].word_list, (COMMAND *)NULL); }
+    break;
+
+  case 99:
+#line 831 "./parse.y"
+    { yyval.pattern = make_pattern_list (yyvsp[-2].word_list, yyvsp[0].command); }
+    break;
+
+  case 100:
+#line 833 "./parse.y"
+    { yyval.pattern = make_pattern_list (yyvsp[-2].word_list, (COMMAND *)NULL); }
+    break;
+
+  case 102:
+#line 838 "./parse.y"
+    { yyvsp[-1].pattern->next = yyvsp[-2].pattern; yyval.pattern = yyvsp[-1].pattern; }
+    break;
+
+  case 103:
+#line 842 "./parse.y"
+    { yyval.word_list = make_word_list (yyvsp[0].word, (WORD_LIST *)NULL); }
+    break;
+
+  case 104:
+#line 844 "./parse.y"
+    { yyval.word_list = make_word_list (yyvsp[0].word, yyvsp[-2].word_list); }
+    break;
+
+  case 105:
+#line 853 "./parse.y"
+    {
 			  yyval.command = yyvsp[0].command;
 			  if (need_here_doc)
 			    gather_here_documents ();
-			 ;
-    break;}
-case 106:
-#line 862 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			 }
+    break;
+
+  case 107:
+#line 862 "./parse.y"
+    {
 			  yyval.command = yyvsp[0].command;
-			;
-    break;}
-case 108:
-#line 869 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 109:
+#line 869 "./parse.y"
+    {
 			  if (yyvsp[-2].command->type == cm_connection)
 			    yyval.command = connect_async_list (yyvsp[-2].command, (COMMAND *)NULL, '&');
 			  else
 			    yyval.command = command_connect (yyvsp[-2].command, (COMMAND *)NULL, '&');
-			;
-    break;}
-case 110:
-#line 880 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, AND_AND); ;
-    break;}
-case 111:
-#line 882 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, OR_OR); ;
-    break;}
-case 112:
-#line 884 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 111:
+#line 880 "./parse.y"
+    { yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, AND_AND); }
+    break;
+
+  case 112:
+#line 882 "./parse.y"
+    { yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, OR_OR); }
+    break;
+
+  case 113:
+#line 884 "./parse.y"
+    {
 			  if (yyvsp[-3].command->type == cm_connection)
 			    yyval.command = connect_async_list (yyvsp[-3].command, yyvsp[0].command, '&');
 			  else
 			    yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, '&');
-			;
-    break;}
-case 113:
-#line 891 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, ';'); ;
-    break;}
-case 114:
-#line 893 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, ';'); ;
-    break;}
-case 115:
-#line 895 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 118:
-#line 903 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.number = '\n'; ;
-    break;}
-case 119:
-#line 905 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.number = ';'; ;
-    break;}
-case 120:
-#line 907 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.number = yacc_EOF; ;
-    break;}
-case 123:
-#line 921 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 114:
+#line 891 "./parse.y"
+    { yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, ';'); }
+    break;
+
+  case 115:
+#line 893 "./parse.y"
+    { yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, ';'); }
+    break;
+
+  case 116:
+#line 895 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 119:
+#line 903 "./parse.y"
+    { yyval.number = '\n'; }
+    break;
+
+  case 120:
+#line 905 "./parse.y"
+    { yyval.number = ';'; }
+    break;
+
+  case 121:
+#line 907 "./parse.y"
+    { yyval.number = yacc_EOF; }
+    break;
+
+  case 124:
+#line 921 "./parse.y"
+    {
 			  yyval.command = yyvsp[0].command;
 			  if (need_here_doc)
 			    gather_here_documents ();
-			;
-    break;}
-case 124:
-#line 927 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 125:
+#line 927 "./parse.y"
+    {
 			  if (yyvsp[-1].command->type == cm_connection)
 			    yyval.command = connect_async_list (yyvsp[-1].command, (COMMAND *)NULL, '&');
 			  else
 			    yyval.command = command_connect (yyvsp[-1].command, (COMMAND *)NULL, '&');
 			  if (need_here_doc)
 			    gather_here_documents ();
-			;
-    break;}
-case 125:
-#line 936 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 126:
+#line 936 "./parse.y"
+    {
 			  yyval.command = yyvsp[-1].command;
 			  if (need_here_doc)
 			    gather_here_documents ();
-			;
-    break;}
-case 126:
-#line 944 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, AND_AND); ;
-    break;}
-case 127:
-#line 946 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, OR_OR); ;
-    break;}
-case 128:
-#line 948 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 127:
+#line 944 "./parse.y"
+    { yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, AND_AND); }
+    break;
+
+  case 128:
+#line 946 "./parse.y"
+    { yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, OR_OR); }
+    break;
+
+  case 129:
+#line 948 "./parse.y"
+    {
 			  if (yyvsp[-2].command->type == cm_connection)
 			    yyval.command = connect_async_list (yyvsp[-2].command, yyvsp[0].command, '&');
 			  else
 			    yyval.command = command_connect (yyvsp[-2].command, yyvsp[0].command, '&');
-			;
-    break;}
-case 129:
-#line 955 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = command_connect (yyvsp[-2].command, yyvsp[0].command, ';'); ;
-    break;}
-case 130:
-#line 958 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 131:
-#line 962 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 132:
-#line 964 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 130:
+#line 955 "./parse.y"
+    { yyval.command = command_connect (yyvsp[-2].command, yyvsp[0].command, ';'); }
+    break;
+
+  case 131:
+#line 958 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 132:
+#line 962 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 133:
+#line 964 "./parse.y"
+    {
 			  if (yyvsp[0].command)
 			    yyvsp[0].command->flags |= CMD_INVERT_RETURN;
 			  yyval.command = yyvsp[0].command;
-			;
-    break;}
-case 133:
-#line 970 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 134:
+#line 970 "./parse.y"
+    {
 			  if (yyvsp[0].command)
 			    yyvsp[0].command->flags |= yyvsp[-1].number;
 			  yyval.command = yyvsp[0].command;
-			;
-    break;}
-case 134:
-#line 976 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 135:
+#line 976 "./parse.y"
+    {
 			  if (yyvsp[0].command)
 			    yyvsp[0].command->flags |= yyvsp[-2].number|CMD_INVERT_RETURN;
 			  yyval.command = yyvsp[0].command;
-			;
-    break;}
-case 135:
-#line 982 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 136:
+#line 982 "./parse.y"
+    {
 			  if (yyvsp[0].command)
 			    yyvsp[0].command->flags |= yyvsp[-1].number|CMD_INVERT_RETURN;
 			  yyval.command = yyvsp[0].command;
-			;
-    break;}
-case 136:
-#line 988 "/usr/src/local/chet/src/bash/src/parse.y"
-{
+			}
+    break;
+
+  case 137:
+#line 988 "./parse.y"
+    {
 			  ELEMENT x;
 
 			  /* Boy, this is unclean.  `time' by itself can
@@ -2105,247 +2616,259 @@
 			  /* XXX - let's cheat and push a newline back */
 			  if (yyvsp[0].number == '\n')
 			    token_to_read = '\n';
-			;
-    break;}
-case 137:
-#line 1009 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, '|'); ;
-    break;}
-case 138:
-#line 1011 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.command = yyvsp[0].command; ;
-    break;}
-case 139:
-#line 1015 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.number = CMD_TIME_PIPELINE; ;
-    break;}
-case 140:
-#line 1017 "/usr/src/local/chet/src/bash/src/parse.y"
-{ yyval.number = CMD_TIME_PIPELINE|CMD_TIME_POSIX; ;
-    break;}
-}
-   /* the action file gets copied in in place of this dollarsign */
-#line 543 "/usr/share/bison.simple"
+			}
+    break;
+
+  case 138:
+#line 1009 "./parse.y"
+    { yyval.command = command_connect (yyvsp[-3].command, yyvsp[0].command, '|'); }
+    break;
+
+  case 139:
+#line 1011 "./parse.y"
+    { yyval.command = yyvsp[0].command; }
+    break;
+
+  case 140:
+#line 1015 "./parse.y"
+    { yyval.number = CMD_TIME_PIPELINE; }
+    break;
+
+  case 141:
+#line 1017 "./parse.y"
+    { yyval.number = CMD_TIME_PIPELINE|CMD_TIME_POSIX; }
+    break;
+
+
+    }
+
+/* Line 1010 of yacc.c.  */
+#line 2647 "y.tab.c"
 
   yyvsp -= yylen;
   yyssp -= yylen;
-#ifdef YYLSP_NEEDED
-  yylsp -= yylen;
-#endif
 
-#if YYDEBUG != 0
-  if (yydebug)
-    {
-      short *ssp1 = yyss - 1;
-      fprintf (stderr, "state stack now");
-      while (ssp1 != yyssp)
-	fprintf (stderr, " %d", *++ssp1);
-      fprintf (stderr, "\n");
-    }
-#endif
+
+  YY_STACK_PRINT (yyss, yyssp);
 
   *++yyvsp = yyval;
 
-#ifdef YYLSP_NEEDED
-  yylsp++;
-  if (yylen == 0)
-    {
-      yylsp->first_line = yylloc.first_line;
-      yylsp->first_column = yylloc.first_column;
-      yylsp->last_line = (yylsp-1)->last_line;
-      yylsp->last_column = (yylsp-1)->last_column;
-      yylsp->text = 0;
-    }
-  else
-    {
-      yylsp->last_line = (yylsp+yylen-1)->last_line;
-      yylsp->last_column = (yylsp+yylen-1)->last_column;
-    }
-#endif
 
-  /* Now "shift" the result of the reduction.
-     Determine what state that goes to,
-     based on the state we popped back to
-     and the rule number reduced by.  */
+  /* Now `shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
 
   yyn = yyr1[yyn];
 
-  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
-  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
+  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
     yystate = yytable[yystate];
   else
-    yystate = yydefgoto[yyn - YYNTBASE];
+    yystate = yydefgoto[yyn - YYNTOKENS];
 
   goto yynewstate;
 
-yyerrlab:   /* here on detecting error */
 
-  if (! yyerrstatus)
-    /* If not already recovering from an error, report this error.  */
+/*------------------------------------.
+| yyerrlab -- here on detecting error |
+`------------------------------------*/
+yyerrlab:
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
     {
       ++yynerrs;
-
-#ifdef YYERROR_VERBOSE
+#if YYERROR_VERBOSE
       yyn = yypact[yystate];
 
-      if (yyn > YYFLAG && yyn < YYLAST)
+      if (YYPACT_NINF < yyn && yyn < YYLAST)
 	{
-	  int size = 0;
-	  char *msg;
-	  int x, count;
-
-	  count = 0;
-	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
-	  for (x = (yyn < 0 ? -yyn : 0);
-	       x < (sizeof(yytname) / sizeof(char *)); x++)
-	    if (yycheck[x + yyn] == x)
-	      size += strlen(yytname[x]) + 15, count++;
-	  msg = (char *) malloc(size + 15);
-	  if (msg != 0)
+	  YYSIZE_T yysize = 0;
+	  int yytype = YYTRANSLATE (yychar);
+	  const char* yyprefix;
+	  char *yymsg;
+	  int yyx;
+
+	  /* Start YYX at -YYN if negative to avoid negative indexes in
+	     YYCHECK.  */
+	  int yyxbegin = yyn < 0 ? -yyn : 0;
+
+	  /* Stay within bounds of both yycheck and yytname.  */
+	  int yychecklim = YYLAST - yyn;
+	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+	  int yycount = 0;
+
+	  yyprefix = ", expecting ";
+	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
+	      {
+		yysize += yystrlen (yyprefix) + yystrlen (yytname [yyx]);
+		yycount += 1;
+		if (yycount == 5)
+		  {
+		    yysize = 0;
+		    break;
+		  }
+	      }
+	  yysize += (sizeof ("syntax error, unexpected ")
+		     + yystrlen (yytname[yytype]));
+	  yymsg = (char *) YYSTACK_ALLOC (yysize);
+	  if (yymsg != 0)
 	    {
-	      strcpy(msg, "parse error");
+	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
+	      yyp = yystpcpy (yyp, yytname[yytype]);
 
-	      if (count < 5)
+	      if (yycount < 5)
 		{
-		  count = 0;
-		  for (x = (yyn < 0 ? -yyn : 0);
-		       x < (sizeof(yytname) / sizeof(char *)); x++)
-		    if (yycheck[x + yyn] == x)
+		  yyprefix = ", expecting ";
+		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
 		      {
-			strcat(msg, count == 0 ? ", expecting `" : " or `");
-			strcat(msg, yytname[x]);
-			strcat(msg, "'");
-			count++;
+			yyp = yystpcpy (yyp, yyprefix);
+			yyp = yystpcpy (yyp, yytname[yyx]);
+			yyprefix = " or ";
 		      }
 		}
-	      yyerror(msg);
-	      free(msg);
+	      yyerror (yymsg);
+	      YYSTACK_FREE (yymsg);
 	    }
 	  else
-	    yyerror ("parse error; also virtual memory exceeded");
+	    yyerror ("syntax error; also virtual memory exhausted");
 	}
       else
 #endif /* YYERROR_VERBOSE */
-	yyerror("parse error");
+	yyerror ("syntax error");
     }
 
-  goto yyerrlab1;
-yyerrlab1:   /* here on error raised explicitly by an action */
+
 
   if (yyerrstatus == 3)
     {
-      /* if just tried and failed to reuse lookahead token after an error, discard it.  */
-
-      /* return failure if at end of input */
-      if (yychar == YYEOF)
-	YYABORT;
+      /* If just tried and failed to reuse lookahead token after an
+	 error, discard it.  */
 
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
-#endif
+      if (yychar <= YYEOF)
+        {
+          /* If at end of input, pop the error token,
+	     then the rest of the stack, then return failure.  */
+	  if (yychar == YYEOF)
+	     for (;;)
+	       {
+		 YYPOPSTACK;
+		 if (yyssp == yyss)
+		   YYABORT;
+		 YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
+		 yydestruct (yystos[*yyssp], yyvsp);
+	       }
+        }
+      else
+	{
+	  YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
+	  yydestruct (yytoken, &yylval);
+	  yychar = YYEMPTY;
 
-      yychar = YYEMPTY;
+	}
     }
 
-  /* Else will try to reuse lookahead token
-     after shifting the error token.  */
-
-  yyerrstatus = 3;		/* Each real token shifted decrements this */
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
+  goto yyerrlab1;
 
-  goto yyerrhandle;
 
-yyerrdefault:  /* current state does not do anything special for the error token. */
+/*---------------------------------------------------.
+| yyerrorlab -- error raised explicitly by YYERROR.  |
+`---------------------------------------------------*/
+yyerrorlab:
 
-#if 0
-  /* This is wrong; only states that explicitly want error tokens
-     should shift them.  */
-  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
-  if (yyn) goto yydefault;
+#ifdef __GNUC__
+  /* Pacify GCC when the user code never invokes YYERROR and the label
+     yyerrorlab therefore never appears in user code.  */
+  if (0)
+     goto yyerrorlab;
 #endif
 
-yyerrpop:   /* pop the current state because it cannot handle the error token */
-
-  if (yyssp == yyss) YYABORT;
-  yyvsp--;
-  yystate = *--yyssp;
-#ifdef YYLSP_NEEDED
-  yylsp--;
-#endif
+  yyvsp -= yylen;
+  yyssp -= yylen;
+  yystate = *yyssp;
+  goto yyerrlab1;
 
-#if YYDEBUG != 0
-  if (yydebug)
-    {
-      short *ssp1 = yyss - 1;
-      fprintf (stderr, "Error: state stack now");
-      while (ssp1 != yyssp)
-	fprintf (stderr, " %d", *++ssp1);
-      fprintf (stderr, "\n");
-    }
-#endif
 
-yyerrhandle:
+/*-------------------------------------------------------------.
+| yyerrlab1 -- common code for both syntax error and YYERROR.  |
+`-------------------------------------------------------------*/
+yyerrlab1:
+  yyerrstatus = 3;	/* Each real token shifted decrements this.  */
 
-  yyn = yypact[yystate];
-  if (yyn == YYFLAG)
-    goto yyerrdefault;
+  for (;;)
+    {
+      yyn = yypact[yystate];
+      if (yyn != YYPACT_NINF)
+	{
+	  yyn += YYTERROR;
+	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
+	    {
+	      yyn = yytable[yyn];
+	      if (0 < yyn)
+		break;
+	    }
+	}
 
-  yyn += YYTERROR;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
-    goto yyerrdefault;
+      /* Pop the current state because it cannot handle the error token.  */
+      if (yyssp == yyss)
+	YYABORT;
 
-  yyn = yytable[yyn];
-  if (yyn < 0)
-    {
-      if (yyn == YYFLAG)
-	goto yyerrpop;
-      yyn = -yyn;
-      goto yyreduce;
+      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
+      yydestruct (yystos[yystate], yyvsp);
+      YYPOPSTACK;
+      yystate = *yyssp;
+      YY_STACK_PRINT (yyss, yyssp);
     }
-  else if (yyn == 0)
-    goto yyerrpop;
 
   if (yyn == YYFINAL)
     YYACCEPT;
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Shifting error token, ");
-#endif
+  YYDPRINTF ((stderr, "Shifting error token, "));
 
   *++yyvsp = yylval;
-#ifdef YYLSP_NEEDED
-  *++yylsp = yylloc;
-#endif
+
 
   yystate = yyn;
   goto yynewstate;
 
- yyacceptlab:
-  /* YYACCEPT comes here.  */
-  if (yyfree_stacks)
-    {
-      free (yyss);
-      free (yyvs);
-#ifdef YYLSP_NEEDED
-      free (yyls);
-#endif
-    }
-  return 0;
 
- yyabortlab:
-  /* YYABORT comes here.  */
-  if (yyfree_stacks)
-    {
-      free (yyss);
-      free (yyvs);
-#ifdef YYLSP_NEEDED
-      free (yyls);
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+#ifndef yyoverflow
+/*----------------------------------------------.
+| yyoverflowlab -- parser overflow comes here.  |
+`----------------------------------------------*/
+yyoverflowlab:
+  yyerror ("parser stack overflow");
+  yyresult = 2;
+  /* Fall through.  */
+#endif
+
+yyreturn:
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
 #endif
-    }
-  return 1;
+  return yyresult;
 }
-#line 1019 "/usr/src/local/chet/src/bash/src/parse.y"
+
+
+#line 1019 "./parse.y"
 
 
 /* Possible states for the parser that require it to do special things. */
@@ -5025,7 +5548,9 @@
       struct builtin *b;
       b = builtin_address_internal (token, 0);
       if (b && (b->flags & ASSIGNMENT_BUILTIN))
-        parser_state |= PST_ASSIGNOK;
+	parser_state |= PST_ASSIGNOK;
+      else if (STREQ (token, "eval") || STREQ (token, "let"))
+	parser_state |= PST_ASSIGNOK;
     }
 
   yylval.word = the_word;
@@ -6016,18 +6541,21 @@
      int *retlenp;
 {
   WORD_LIST *wl, *rl;
-  int tok, orig_line_number, orig_token_size;
+  int tok, orig_line_number, orig_token_size, orig_last_token, assignok;
   char *saved_token, *ret;
 
   saved_token = token;
   orig_token_size = token_buffer_size;
   orig_line_number = line_number;
+  orig_last_token = last_read_token;
 
   last_read_token = WORD;	/* WORD to allow reserved words here */
 
   token = (char *)NULL;
   token_buffer_size = 0;
 
+  assignok = parser_state&PST_ASSIGNOK;		/* XXX */
+
   wl = (WORD_LIST *)NULL;	/* ( */
   parser_state |= PST_COMPASSIGN;
 
@@ -6070,7 +6598,7 @@
 	jump_to_top_level (DISCARD);
     }
 
-  last_read_token = WORD;
+  last_read_token = orig_last_token;		/* XXX - was WORD? */
   if (wl)
     {
       rl = REVERSE_LIST (wl, WORD_LIST *);
@@ -6082,6 +6610,10 @@
 
   if (retlenp)
     *retlenp = (ret && *ret) ? strlen (ret) : 0;
+
+  if (assignok)
+    parser_state |= PST_ASSIGNOK;
+
   return ret;
 }
 
@@ -6245,3 +6777,4 @@
     }
 }
 #endif /* HANDLE_MULTIBYTE */
+
diff -ru bash-3.1_orig/y.tab.h bash-3.1/y.tab.h
--- bash-3.1_orig/y.tab.h	2005-11-14 15:53:30.000000000 +0100
+++ bash-3.1/y.tab.h	2006-01-26 16:55:35.000000000 +0100
@@ -1,4 +1,123 @@
-typedef union {
+/* A Bison parser, made by GNU Bison 1.875d.  */
+
+/* Skeleton parser for Yacc-like parsing with Bison,
+   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+/* As a special exception, when this file is copied by Bison into a
+   Bison output file, you may use that output file without restriction.
+   This special exception was added by the Free Software Foundation
+   in version 1.24 of Bison.  */
+
+/* Tokens.  */
+#ifndef YYTOKENTYPE
+# define YYTOKENTYPE
+   /* Put the tokens into the symbol table, so that GDB and other debuggers
+      know about them.  */
+   enum yytokentype {
+     IF = 258,
+     THEN = 259,
+     ELSE = 260,
+     ELIF = 261,
+     FI = 262,
+     CASE = 263,
+     ESAC = 264,
+     FOR = 265,
+     SELECT = 266,
+     WHILE = 267,
+     UNTIL = 268,
+     DO = 269,
+     DONE = 270,
+     FUNCTION = 271,
+     COND_START = 272,
+     COND_END = 273,
+     COND_ERROR = 274,
+     IN = 275,
+     BANG = 276,
+     TIME = 277,
+     TIMEOPT = 278,
+     WORD = 279,
+     ASSIGNMENT_WORD = 280,
+     NUMBER = 281,
+     ARITH_CMD = 282,
+     ARITH_FOR_EXPRS = 283,
+     COND_CMD = 284,
+     AND_AND = 285,
+     OR_OR = 286,
+     GREATER_GREATER = 287,
+     LESS_LESS = 288,
+     LESS_AND = 289,
+     LESS_LESS_LESS = 290,
+     GREATER_AND = 291,
+     SEMI_SEMI = 292,
+     LESS_LESS_MINUS = 293,
+     AND_GREATER = 294,
+     LESS_GREATER = 295,
+     GREATER_BAR = 296,
+     yacc_EOF = 297
+   };
+#endif
+#define IF 258
+#define THEN 259
+#define ELSE 260
+#define ELIF 261
+#define FI 262
+#define CASE 263
+#define ESAC 264
+#define FOR 265
+#define SELECT 266
+#define WHILE 267
+#define UNTIL 268
+#define DO 269
+#define DONE 270
+#define FUNCTION 271
+#define COND_START 272
+#define COND_END 273
+#define COND_ERROR 274
+#define IN 275
+#define BANG 276
+#define TIME 277
+#define TIMEOPT 278
+#define WORD 279
+#define ASSIGNMENT_WORD 280
+#define NUMBER 281
+#define ARITH_CMD 282
+#define ARITH_FOR_EXPRS 283
+#define COND_CMD 284
+#define AND_AND 285
+#define OR_OR 286
+#define GREATER_GREATER 287
+#define LESS_LESS 288
+#define LESS_AND 289
+#define LESS_LESS_LESS 290
+#define GREATER_AND 291
+#define SEMI_SEMI 292
+#define LESS_LESS_MINUS 293
+#define AND_GREATER 294
+#define LESS_GREATER 295
+#define GREATER_BAR 296
+#define yacc_EOF 297
+
+
+
+
+#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
+#line 300 "./parse.y"
+typedef union YYSTYPE {
   WORD_DESC *word;		/* the word that we read. */
   int number;			/* the number that we read. */
   WORD_LIST *word_list;
@@ -7,46 +126,14 @@
   ELEMENT element;
   PATTERN_LIST *pattern;
 } YYSTYPE;
-#define	IF	257
-#define	THEN	258
-#define	ELSE	259
-#define	ELIF	260
-#define	FI	261
-#define	CASE	262
-#define	ESAC	263
-#define	FOR	264
-#define	SELECT	265
-#define	WHILE	266
-#define	UNTIL	267
-#define	DO	268
-#define	DONE	269
-#define	FUNCTION	270
-#define	COND_START	271
-#define	COND_END	272
-#define	COND_ERROR	273
-#define	IN	274
-#define	BANG	275
-#define	TIME	276
-#define	TIMEOPT	277
-#define	WORD	278
-#define	ASSIGNMENT_WORD	279
-#define	NUMBER	280
-#define	ARITH_CMD	281
-#define	ARITH_FOR_EXPRS	282
-#define	COND_CMD	283
-#define	AND_AND	284
-#define	OR_OR	285
-#define	GREATER_GREATER	286
-#define	LESS_LESS	287
-#define	LESS_AND	288
-#define	LESS_LESS_LESS	289
-#define	GREATER_AND	290
-#define	SEMI_SEMI	291
-#define	LESS_LESS_MINUS	292
-#define	AND_GREATER	293
-#define	LESS_GREATER	294
-#define	GREATER_BAR	295
-#define	yacc_EOF	296
-
+/* Line 1285 of yacc.c.  */
+#line 131 "y.tab.h"
+# define yystype YYSTYPE /* obsolescent; will be withdrawn */
+# define YYSTYPE_IS_DECLARED 1
+# define YYSTYPE_IS_TRIVIAL 1
+#endif
 
 extern YYSTYPE yylval;
+
+
+
