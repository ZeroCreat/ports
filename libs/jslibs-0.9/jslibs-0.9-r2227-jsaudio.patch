diff -ru jslibs-0.9-r1881_orig/src/common/jsHelper.h jslibs-0.9-r1881/src/common/jsHelper.h
--- jslibs-0.9-r1881_orig/src/common/jsHelper.h	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/common/jsHelper.h	2009-02-06 04:38:02.000000000 +0100
@@ -323,7 +323,7 @@
 	J_S_ASSERT( (pointer) != NULL, J__ERRMSG_UNINITIALIZED )
 
 #define J_S_ASSERT_RESOURCE(resourcePointer) \
-	J_S_ASSERT( (resourcePointer) != NULL, J__ERRMSG_INVALID_RESOURCE )
+	J_S_ASSERT( (resourcePointer) != 0, J__ERRMSG_INVALID_RESOURCE )
 
 #define J_S_ASSERT_ALLOC(pointer) \
 	if (unlikely( (pointer) == NULL )) { J_REPORT_WARNING( J__ERRMSG_OUT_OF_MEMORY ); JS_ReportOutOfMemory(cx); return JS_FALSE; } // This does not cause an exception to be thrown.
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/Makefile jslibs-0.9-r1881/src/jsaudio/Makefile
--- jslibs-0.9-r1881_orig/src/jsaudio/Makefile	2009-02-06 04:54:38.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/Makefile	2009-02-06 04:30:14.000000000 +0100
@@ -0,0 +1,8 @@
+TARGET     = jsaudio.so
+SRC        = $(wildcard *.cpp)
+INCLUDES   = `pkg-config js openal --cflags`
+STATICLIBS = 
+SHAREDLIBS = `pkg-config js openal --libs`
+DEPENDS    = 
+
+include ../rules.mk
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/buffer.cpp jslibs-0.9-r1881/src/jsaudio/buffer.cpp
--- jslibs-0.9-r1881_orig/src/jsaudio/buffer.cpp	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/buffer.cpp	2009-02-06 04:51:41.000000000 +0100
@@ -1,202 +1,204 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-#include "stdafx.h"
-#include "error.h"
-
-
-BEGIN_CLASS( OalBuffer )
-
-
-DEFINE_FINALIZE() {
-
-	ALuint bid = (ALuint) JS_GetPrivate(cx, obj);
-	if ( bid )
-		alDeleteBuffers(1, &bid);
-}
-
-/**doc
- * $INAME( soundBlob )
-  $H arguments
-   $ARG Blob soundBlob:
-**/
-DEFINE_CONSTRUCTOR() {
-
-	J_S_ASSERT_ARG_MIN( 1 );
-	J_S_ASSERT_OBJECT( J_ARG(1) );
-
-	JSObject *blobObj = JSVAL_TO_OBJECT(J_ARG(1));
-
-	int rate, channels, bits;
-	J_CHK( GetPropertyInt(cx, blobObj, "rate", &rate) );
-	J_CHK( GetPropertyInt(cx, blobObj, "channels", &channels) );
-	J_CHK( GetPropertyInt(cx, blobObj, "bits", &bits) );
-
-	const char *buffer;
-	size_t bufferLength;
-	jsval tmp = OBJECT_TO_JSVAL(blobObj);
-	JsvalToStringAndLength(cx, &tmp, &buffer, &bufferLength); // warning: GC on the returned buffer !
-
-	ALenum format; // The sound data format
-	switch (channels) {
-		case 1:
-			format = bits == 16 ? AL_FORMAT_MONO16 : AL_FORMAT_MONO8;
-			break;
-		case 2:
-			format = bits == 16 ? AL_FORMAT_STEREO16 : AL_FORMAT_STEREO8;
-			break;
-		default:
-			J_REPORT_ERROR("Too may channels");
-	}
-
-	ALuint bid; // The OpenAL sound buffer ID
-
-	alGenBuffers(1, &bid);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	alBufferData(bid, format, buffer, bufferLength, rate); // Upload sound data to buffer
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( JS_SetPrivate(cx, obj, (void*)bid) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
-=== Methods ===
-**/
-
-/*
-DEFINE_FUNCTION_FAST( Free ) {
-
-	ALuint bid = (ALuint) JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( bid );
-	alBufferData(bid, AL_FORMAT_MONO8, NULL, 0, 0);
-	return JS_TRUE;
-	JL_BAD;
-}
-*/
-
-/**doc
- * $INT $INAME()
-**/
-DEFINE_FUNCTION_FAST( valueOf ) {
-
-	ALuint bid = (ALuint) JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( bid );
-	J_CHK( UIntToJsval(cx, bid, J_FRVAL) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
-=== Properties ===
-**/
-
-/**doc
- * $INT $INAME $READONLY
-  is the frquency (in Hz) of the sound hold by the buffer.
-**/
-DEFINE_PROPERTY( frequency ) {
-
-	ALuint bid = (ALuint) JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( bid );
-	ALint frequency;
-
-	alGetBufferi(bid, AL_FREQUENCY, &frequency);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( IntToJsval(cx, frequency, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-/**doc
- * $INT $INAME $READONLY
-  is the size (in bytes) of the sound hold by the buffer.
-**/
-DEFINE_PROPERTY( size ) {
-
-	ALuint bid = (ALuint) JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( bid );
-	ALint size;
-	
-	alGetBufferi(bid, AL_SIZE, &size);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( IntToJsval(cx, size, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $INT $INAME $READONLY
-  is the rezolution (in bits) of the sound hold by the buffer.
-**/
-DEFINE_PROPERTY( bits ) {
-
-	ALuint bid = (ALuint) JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( bid );
-	ALint bits;
-	
-	alGetBufferi(bid, AL_BITS, &bits);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( IntToJsval(cx, bits, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-/**doc
- * $INT $INAME $READONLY
-  is the number of channels of the sound hold by the buffer.
-**/
-DEFINE_PROPERTY( channels ) {
-
-	ALuint bid = (ALuint) JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( bid );
-	ALint channels;
-
-	alGetBufferi(bid, AL_CHANNELS, &channels);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( IntToJsval(cx, channels, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-CONFIGURE_CLASS
-
-	REVISION(SvnRevToInt("$Revision: 2210 $"))
-	HAS_PRIVATE
-	HAS_CONSTRUCTOR
-	HAS_FINALIZE
-
-	BEGIN_FUNCTION_SPEC
-		FUNCTION_FAST( valueOf )
-	END_FUNCTION_SPEC
-
-	BEGIN_PROPERTY_SPEC
-		PROPERTY_READ( frequency )
-		PROPERTY_READ( size )
-		PROPERTY_READ( bits )
-		PROPERTY_READ( channels )
-	END_PROPERTY_SPEC
-
-END_CLASS
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+#include "stdafx.h"
+#include "error.h"
+
+
+BEGIN_CLASS( OalBuffer )
+
+
+DEFINE_FINALIZE() {
+
+	ALuint bid = (ALuint) JS_GetPrivate(cx, obj);
+	if ( bid )
+		alDeleteBuffers(1, &bid);
+}
+
+/**doc
+ * $INAME( soundBlob )
+  $H arguments
+   $ARG Blob soundBlob:
+**/
+DEFINE_CONSTRUCTOR() {
+  jsval tmp;
+  JSObject *blobObj;
+
+	J_S_ASSERT_ARG_MIN( 1 );
+	J_S_ASSERT_OBJECT( J_ARG(1) );
+
+	blobObj = JSVAL_TO_OBJECT(J_ARG(1));
+
+	int rate, channels, bits;
+	J_CHK( GetPropertyInt(cx, blobObj, "rate", &rate) );
+	J_CHK( GetPropertyInt(cx, blobObj, "channels", &channels) );
+	J_CHK( GetPropertyInt(cx, blobObj, "bits", &bits) );
+
+	const char *buffer;
+	size_t bufferLength;
+	tmp = OBJECT_TO_JSVAL(blobObj);
+	JsvalToStringAndLength(cx, &tmp, &buffer, &bufferLength); // warning: GC on the returned buffer !
+
+	ALenum format; // The sound data format
+	switch (channels) {
+		case 1:
+			format = bits == 16 ? AL_FORMAT_MONO16 : AL_FORMAT_MONO8;
+			break;
+		case 2:
+			format = bits == 16 ? AL_FORMAT_STEREO16 : AL_FORMAT_STEREO8;
+			break;
+		default:
+			J_REPORT_ERROR("Too may channels");
+	}
+
+	ALuint bid; // The OpenAL sound buffer ID
+
+	alGenBuffers(1, &bid);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	alBufferData(bid, format, buffer, bufferLength, rate); // Upload sound data to buffer
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( JS_SetPrivate(cx, obj, (void*)bid) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+=== Methods ===
+**/
+
+/*
+DEFINE_FUNCTION_FAST( Free ) {
+
+	ALuint bid = (ALuint) JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( bid );
+	alBufferData(bid, AL_FORMAT_MONO8, NULL, 0, 0);
+	return JS_TRUE;
+	JL_BAD;
+}
+*/
+
+/**doc
+ * $INT $INAME()
+**/
+DEFINE_FUNCTION_FAST( valueOf ) {
+
+	ALuint bid = (ALuint) JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( bid );
+	J_CHK( UIntToJsval(cx, bid, J_FRVAL) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+=== Properties ===
+**/
+
+/**doc
+ * $INT $INAME $READONLY
+  is the frquency (in Hz) of the sound hold by the buffer.
+**/
+DEFINE_PROPERTY( frequency ) {
+
+	ALuint bid = (ALuint) JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( bid );
+	ALint frequency;
+
+	alGetBufferi(bid, AL_FREQUENCY, &frequency);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( IntToJsval(cx, frequency, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+/**doc
+ * $INT $INAME $READONLY
+  is the size (in bytes) of the sound hold by the buffer.
+**/
+DEFINE_PROPERTY( size ) {
+
+	ALuint bid = (ALuint) JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( bid );
+	ALint size;
+
+	alGetBufferi(bid, AL_SIZE, &size);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( IntToJsval(cx, size, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $INT $INAME $READONLY
+  is the rezolution (in bits) of the sound hold by the buffer.
+**/
+DEFINE_PROPERTY( bits ) {
+
+	ALuint bid = (ALuint) JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( bid );
+	ALint bits;
+
+	alGetBufferi(bid, AL_BITS, &bits);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( IntToJsval(cx, bits, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+/**doc
+ * $INT $INAME $READONLY
+  is the number of channels of the sound hold by the buffer.
+**/
+DEFINE_PROPERTY( channels ) {
+
+	ALuint bid = (ALuint) JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( bid );
+	ALint channels;
+
+	alGetBufferi(bid, AL_CHANNELS, &channels);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( IntToJsval(cx, channels, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+CONFIGURE_CLASS
+
+	REVISION(SvnRevToInt("$Revision: 2210 $"))
+	HAS_PRIVATE
+	HAS_CONSTRUCTOR
+	HAS_FINALIZE
+
+	BEGIN_FUNCTION_SPEC
+		FUNCTION_FAST( valueOf )
+	END_FUNCTION_SPEC
+
+	BEGIN_PROPERTY_SPEC
+		PROPERTY_READ( frequency )
+		PROPERTY_READ( size )
+		PROPERTY_READ( bits )
+		PROPERTY_READ( channels )
+	END_PROPERTY_SPEC
+
+END_CLASS
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/effect.cpp jslibs-0.9-r1881/src/jsaudio/effect.cpp
--- jslibs-0.9-r1881_orig/src/jsaudio/effect.cpp	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/effect.cpp	2009-02-06 04:51:41.000000000 +0100
@@ -1,469 +1,472 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-#include "stdafx.h"
-#include "oalefxapi.h"
-#include "error.h"
-
-struct Private {
-	ALuint effect;
-};
-
-
-BEGIN_CLASS( OalEffect )
-
-
-DEFINE_FINALIZE() {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	if ( pv ) {
-
-		if ( alcGetCurrentContext() ) {
-
-			alDeleteEffects(1, &pv->effect);
-		}
-		JS_free(cx, pv);
-	}
-}
-
-
-
-/**doc
- * $INAME()
-  Creates a new effect object.
-**/
-DEFINE_CONSTRUCTOR() {
-
-	Private *pv = (Private*)JS_malloc(cx, sizeof(Private));
-	alGenEffects(1, &pv->effect);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( JS_SetPrivate(cx, obj, pv) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
-=== Methods ===
-**/
-
-/**doc
- * $INT $INAME()
-**/
-DEFINE_FUNCTION_FAST( valueOf ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-
-	J_CHK( UIntToJsval(cx, pv->effect, J_FRVAL) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
-=== Properties ===
-**/
-
-/**doc
- * $INT $INAME
-  set the type of effect represented by the Effect object.
-  * undefined
-  * Oal.EFFECT_EAXREVERB
-  * Oal.EFFECT_REVERB
-  * Oal.EFFECT_CHORUS
-  * Oal.EFFECT_DISTORTION
-  * Oal.EFFECT_ECHO
-  * Oal.EFFECT_FLANGER
-  * Oal.EFFECT_FREQUENCY_SHIFTER
-  * Oal.EFFECT_VOCAL_MORPHER
-  * Oal.EFFECT_PITCH_SHIFTER
-  * Oal.EFFECT_RING_MODULATOR
-  * Oal.EFFECT_AUTOWAH
-  * Oal.EFFECT_COMPRESSOR
-  * Oal.EFFECT_EQUALIZER
-**/
-DEFINE_PROPERTY_SETTER( type ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE(pv);
-	int effectType;
-	J_CHK( JsvalToInt(cx, *vp, &effectType) );
-
-	alEffecti(pv->effect, AL_EFFECT_TYPE, effectType);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( type ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE(pv);
-	int effectType;
-
-	alGetEffecti(pv->effect, AL_EFFECT_TYPE, &effectType);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( IntToJsval(cx, effectType, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/*
-DEFINE_FUNCTION_FAST( Test ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-
-
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	return JS_TRUE;
-	JL_BAD;
-}
-*/
-
-DEFINE_PROPERTY_SETTER( effectFloat ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = JSVAL_TO_INT(id);
-	float f;
-	J_CHK( JsvalToFloat(cx, *vp, &f) );
-	alEffectf(pv->effect, param, f);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( effectFloat ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = JSVAL_TO_INT(id);
-	float f;
-	alGetEffectf(pv->effect, param, &f);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	J_CHK( FloatToJsval(cx, f, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_SETTER( effectInt ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = JSVAL_TO_INT(id);
-	int i;
-	J_CHK( JsvalToInt(cx, *vp, &i) );
-	alEffecti(pv->effect, param, i);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( effectInt ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = JSVAL_TO_INT(id);
-	int i;
-	alGetEffecti(pv->effect, param, &i);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	J_CHK( IntToJsval(cx, i, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_SETTER( effectBool ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = JSVAL_TO_INT(id);
-	bool b;
-	J_CHK( JsvalToBool(cx, *vp, &b) );
-	alEffecti(pv->effect, param, b ? AL_TRUE : AL_FALSE);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( effectBool ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = JSVAL_TO_INT(id);
-	int i;
-	alGetEffecti(pv->effect, param, &i);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	*vp = i == AL_TRUE ? JSVAL_TRUE : JSVAL_FALSE;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-enum {
-	reverbDensity             				= AL_REVERB_DENSITY					 ,
-	reverbDiffusion           				= AL_REVERB_DIFFUSION				 ,
-	reverbGain                				= AL_REVERB_GAIN						 ,
-	reverbGainHF              				= AL_REVERB_GAINHF					 ,
-	reverbDecayTime           				= AL_REVERB_DECAY_TIME				 ,
-	reverbDecayHFRatio        				= AL_REVERB_DECAY_HFRATIO			 ,
-	reverbReflectionsGain     				= AL_REVERB_REFLECTIONS_GAIN		 ,
-	reverbReflectionsDelay    				= AL_REVERB_REFLECTIONS_DELAY		 ,
-	reverbLateReverbGain      				= AL_REVERB_LATE_REVERB_GAIN		 ,
-	reverbLateReverbDelay     				= AL_REVERB_LATE_REVERB_DELAY		 ,
-	reverbAirAbsorptionGainHF 				= AL_REVERB_AIR_ABSORPTION_GAINHF ,
-	reverbRoomRolloffFactor   				= AL_REVERB_ROOM_ROLLOFF_FACTOR	 ,
-	reverbDecayHFLimit        				= AL_REVERB_DECAY_HFLIMIT			 ,
-
-	chorusWaveform 							= AL_CHORUS_WAVEFORM ,
-	chorusPhase    							= AL_CHORUS_PHASE    ,
-	chorusRate     							= AL_CHORUS_RATE     ,
-	chorusDepth    							= AL_CHORUS_DEPTH    ,
-	chorusFeedback 							= AL_CHORUS_FEEDBACK ,
-	chorusDelay    							= AL_CHORUS_DELAY    ,
-
-	distortionEdge           				= AL_DISTORTION_EDGE           ,
-	distortionGain           				= AL_DISTORTION_GAIN           ,
-	distortionLowpassCutoff  				= AL_DISTORTION_LOWPASS_CUTOFF ,
-	distortionEqcenter       				= AL_DISTORTION_EQCENTER       ,
-	distortionEqbandwidth    				= AL_DISTORTION_EQBANDWIDTH    ,
-
-	echoDelay    								= AL_ECHO_DELAY    ,
-	echoLrdelay  								= AL_ECHO_LRDELAY  ,
-	echoDamping  								= AL_ECHO_DAMPING  ,
-	echoFeedback 								= AL_ECHO_FEEDBACK ,
-	echoSpread   								= AL_ECHO_SPREAD   ,
-
-	flangerWaveform 							= AL_FLANGER_WAVEFORM ,
-	flangerPhase    							= AL_FLANGER_PHASE    ,
-	flangerRate     							= AL_FLANGER_RATE     ,
-	flangerDepth    							= AL_FLANGER_DEPTH    ,
-	flangerFeedback 							= AL_FLANGER_FEEDBACK ,
-	flangerDelay    							= AL_FLANGER_DELAY    ,
-
-	frequencyShifterFrequency      		= AL_FREQUENCY_SHIFTER_FREQUENCY       ,
-	frequencyShifterLeftDirection  		= AL_FREQUENCY_SHIFTER_LEFT_DIRECTION  ,
-	frequencyShifterRightDirection 		= AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION ,
-
-	vocalMorpherPhonemea               	= AL_VOCAL_MORPHER_PHONEMEA               ,
-	vocalMorpherPhonemeaCoarseTuning   	= AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING ,
-	vocalMorpherPhonemeb               	= AL_VOCAL_MORPHER_PHONEMEB               ,
-	vocalMorpherPhonemebCoarseTuning   	= AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING ,
-	vocalMorpherWaveform               	= AL_VOCAL_MORPHER_WAVEFORM               ,
-	vocalMorpherRate                   	= AL_VOCAL_MORPHER_RATE                   ,
-
-	pitchShifterCoarseTune 					= AL_PITCH_SHIFTER_COARSE_TUNE ,
-	pitchShifterFineTune   					= AL_PITCH_SHIFTER_FINE_TUNE   ,
-
-	ringModulatorFrequency      			= AL_RING_MODULATOR_FREQUENCY       ,
-	ringModulatorHighpassCutoff 			= AL_RING_MODULATOR_HIGHPASS_CUTOFF ,
-	ringModulatorWaveform       			= AL_RING_MODULATOR_WAVEFORM        ,
-
-	autowahAttackTime  						= AL_AUTOWAH_ATTACK_TIME  ,
-	autowahReleaseTime 						= AL_AUTOWAH_RELEASE_TIME ,
-	autowahResonance   						= AL_AUTOWAH_RESONANCE    ,
-	autowahPeakGain    						= AL_AUTOWAH_PEAK_GAIN    ,
-
-	compressorOnoff     						= AL_COMPRESSOR_ONOFF ,
-
-	equalizerLowGain    						= AL_EQUALIZER_LOW_GAIN	   ,
-	equalizerLowCutoff  						= AL_EQUALIZER_LOW_CUTOFF  ,
-	equalizerMid1Gain   						= AL_EQUALIZER_MID1_GAIN   ,
-	equalizerMid1Center 						= AL_EQUALIZER_MID1_CENTER ,
-	equalizerMid1Width  						= AL_EQUALIZER_MID1_WIDTH  ,
-	equalizerMid2Gain   						= AL_EQUALIZER_MID2_GAIN   ,
-	equalizerMid2Center 						= AL_EQUALIZER_MID2_CENTER ,
-	equalizerMid2Width  						= AL_EQUALIZER_MID2_WIDTH  ,
-	equalizerHighGain   						= AL_EQUALIZER_HIGH_GAIN   ,
-	equalizerHighCutoff 						= AL_EQUALIZER_HIGH_CUTOFF ,
-};
-
-
-/**doc
- * $REAL reverbDensity
- * $REAL reverbDiffusion
- * $REAL reverbGain
- * $REAL reverbGainHF
- * $REAL reverbDecayTime
- * $REAL reverbDecayHFRatio
- * $REAL reverbReflectionsGain
- * $REAL reverbReflectionsDelay
- * $REAL reverbLateReverbGain
- * $REAL reverbLateReverbDelay
- * $REAL reverbAirAbsorptionGainHF
- * $REAL reverbRoomRolloffFactor
- * $BOOL reverbDecayHFLimit
-
- * $INT chorusWaveform
- * $INT chorusPhase
- * $REAL chorusRate
- * $REAL chorusDepth
- * $REAL chorusFeedback
- * $REAL chorusDelay
-
- * $REAL distortionEdge
- * $REAL distortionGain
- * $REAL distortionLowpassCutoff
- * $REAL distortionEqcenter
- * $REAL distortionEqbandwidth
-
- * $REAL echoDelay
- * $REAL echoLrdelay
- * $REAL echoDamping
- * $REAL echoFeedback
- * $REAL echoSpread
-
- * $INT flangerWaveform
- * $REAL flangerPhase
- * $REAL flangerRate
- * $REAL flangerDepth
- * $REAL flangerFeedback
- * $REAL flangerDelay
-
- * $REAL frequencyShifterFrequency
- * $INT frequencyShifterLeftDirection
- * $INT frequencyShifterRightDirection
-
- * $INT vocalMorpherPhonemea
- * $INT vocalMorpherPhonemeaCoarseTuning
- * $INT vocalMorpherPhonemeb
- * $INT vocalMorpherPhonemebCoarseTuning
- * $INT vocalMorpherWaveform
- * $REAL vocalMorpherRate
-
- * $INT pitchShifterCoarseTune
- * $INT pitchShifterFineTune
-
- * $REAL ringModulatorFrequency
- * $REAL ringModulatorHighpassCutoff
- * $INT ringModulatorWaveform
-
- * $REAL autowahAttackTime
- * $REAL autowahReleaseTime
- * $REAL autowahResonance
- * $REAL autowahPeakGain
-
- * $BOOL compressorOnoff
-
- * $REAL equalizerLowGain
- * $REAL equalizerLowCutoff
- * $REAL equalizerMid1Gain
- * $REAL equalizerMid1Center
- * $REAL equalizerMid1Width
- * $REAL equalizerMid2Gain
- * $REAL equalizerMid2Center
- * $REAL equalizerMid2Width
- * $REAL equalizerHighGain
- * $REAL equalizerHighCutoff
-**/
-
-CONFIGURE_CLASS
-
-	REVISION(SvnRevToInt("$Revision: 2210 $"))
-	HAS_PRIVATE
-	HAS_CONSTRUCTOR
-	HAS_FINALIZE
-
-	BEGIN_FUNCTION_SPEC
-		FUNCTION_FAST_ARGC( valueOf, 0 )
-//		FUNCTION_FAST( Test )
-	END_FUNCTION_SPEC
-
-	BEGIN_PROPERTY_SPEC
-		PROPERTY( type )
-
-		PROPERTY_SWITCH( reverbDensity							, effectFloat )
-		PROPERTY_SWITCH( reverbDiffusion							, effectFloat )
-		PROPERTY_SWITCH( reverbGain								, effectFloat )
-		PROPERTY_SWITCH( reverbGainHF								, effectFloat )
-		PROPERTY_SWITCH( reverbDecayTime							, effectFloat )
-		PROPERTY_SWITCH( reverbDecayHFRatio						, effectFloat )
-		PROPERTY_SWITCH( reverbReflectionsGain					, effectFloat )
-		PROPERTY_SWITCH( reverbReflectionsDelay				, effectFloat )
-		PROPERTY_SWITCH( reverbLateReverbGain					, effectFloat )
-		PROPERTY_SWITCH( reverbLateReverbDelay					, effectFloat )
-		PROPERTY_SWITCH( reverbAirAbsorptionGainHF			, effectFloat )
-		PROPERTY_SWITCH( reverbRoomRolloffFactor				, effectFloat )
-		PROPERTY_SWITCH( reverbDecayHFLimit						, effectBool  )
-
-		PROPERTY_SWITCH( chorusWaveform 							, effectInt   ) // AL_CHORUS_WAVEFORM_SINUSOID, AL_CHORUS_WAVEFORM_TRIANGLE
-		PROPERTY_SWITCH( chorusPhase    							, effectInt   ) // -180, +180
-		PROPERTY_SWITCH( chorusRate     							, effectFloat )
-		PROPERTY_SWITCH( chorusDepth    							, effectFloat )
-		PROPERTY_SWITCH( chorusFeedback 							, effectFloat )
-		PROPERTY_SWITCH( chorusDelay    							, effectFloat )
-
-		PROPERTY_SWITCH( distortionEdge          				, effectFloat )
-		PROPERTY_SWITCH( distortionGain          				, effectFloat )
-		PROPERTY_SWITCH( distortionLowpassCutoff 				, effectFloat )
-		PROPERTY_SWITCH( distortionEqcenter      				, effectFloat )
-		PROPERTY_SWITCH( distortionEqbandwidth   				, effectFloat )
-
-		PROPERTY_SWITCH( echoDelay    							, effectFloat )
-		PROPERTY_SWITCH( echoLrdelay  							, effectFloat )
-		PROPERTY_SWITCH( echoDamping  							, effectFloat )
-		PROPERTY_SWITCH( echoFeedback 							, effectFloat )
-		PROPERTY_SWITCH( echoSpread   							, effectFloat )
-
-		PROPERTY_SWITCH( flangerWaveform 						, effectInt ) // AL_CHORUS_WAVEFORM_SINUSOID, AL_CHORUS_WAVEFORM_TRIANGLE
-		PROPERTY_SWITCH( flangerPhase    						, effectFloat )
-		PROPERTY_SWITCH( flangerRate     						, effectFloat )
-		PROPERTY_SWITCH( flangerDepth    						, effectFloat )
-		PROPERTY_SWITCH( flangerFeedback 						, effectFloat )
-		PROPERTY_SWITCH( flangerDelay    						, effectFloat )
-
-		PROPERTY_SWITCH( frequencyShifterFrequency      	, effectFloat )
-		PROPERTY_SWITCH( frequencyShifterLeftDirection  	, effectInt ) // Down, Up, Off
-		PROPERTY_SWITCH( frequencyShifterRightDirection 	, effectInt ) // Down, Up, Off
-
-		PROPERTY_SWITCH( vocalMorpherPhonemea              , effectInt )
-		PROPERTY_SWITCH( vocalMorpherPhonemeaCoarseTuning  , effectInt )
-		PROPERTY_SWITCH( vocalMorpherPhonemeb              , effectInt )
-		PROPERTY_SWITCH( vocalMorpherPhonemebCoarseTuning  , effectInt )
-		PROPERTY_SWITCH( vocalMorpherWaveform              , effectInt ) // Sin, Triangle, Saw
-		PROPERTY_SWITCH( vocalMorpherRate                  , effectFloat )
-
-		PROPERTY_SWITCH( pitchShifterCoarseTune 				, effectInt )
-		PROPERTY_SWITCH( pitchShifterFineTune   				, effectInt )
-
-		PROPERTY_SWITCH( ringModulatorFrequency      		, effectFloat )
-		PROPERTY_SWITCH( ringModulatorHighpassCutoff 		, effectFloat )
-		PROPERTY_SWITCH( ringModulatorWaveform       		, effectInt ) // Sin, Saw, Square
-
-		PROPERTY_SWITCH( autowahAttackTime  					, effectFloat )
-		PROPERTY_SWITCH( autowahReleaseTime 					, effectFloat )
-		PROPERTY_SWITCH( autowahResonance   					, effectFloat )
-		PROPERTY_SWITCH( autowahPeakGain    					, effectFloat )
-
-		PROPERTY_SWITCH( compressorOnoff     					, effectBool )
-
-		PROPERTY_SWITCH( equalizerLowGain    					, effectFloat )
-		PROPERTY_SWITCH( equalizerLowCutoff  					, effectFloat )
-		PROPERTY_SWITCH( equalizerMid1Gain   					, effectFloat )
-		PROPERTY_SWITCH( equalizerMid1Center 					, effectFloat )
-		PROPERTY_SWITCH( equalizerMid1Width  					, effectFloat )
-		PROPERTY_SWITCH( equalizerMid2Gain   					, effectFloat )
-		PROPERTY_SWITCH( equalizerMid2Center 					, effectFloat )
-		PROPERTY_SWITCH( equalizerMid2Width  					, effectFloat )
-		PROPERTY_SWITCH( equalizerHighGain   					, effectFloat )
-		PROPERTY_SWITCH( equalizerHighCutoff 					, effectFloat )
-
-	END_PROPERTY_SPEC
-
-END_CLASS
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+#include "stdafx.h"
+#include "oalefxapi.h"
+#include "error.h"
+
+struct Private {
+	ALuint effect;
+};
+
+#ifdef _WIN32
+
+BEGIN_CLASS( OalEffect )
+
+
+DEFINE_FINALIZE() {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	if ( pv ) {
+
+		if ( alcGetCurrentContext() ) {
+
+			alDeleteEffects(1, &pv->effect);
+		}
+		JS_free(cx, pv);
+	}
+}
+
+
+
+/**doc
+ * $INAME()
+  Creates a new effect object.
+**/
+DEFINE_CONSTRUCTOR() {
+
+	Private *pv = (Private*)JS_malloc(cx, sizeof(Private));
+	alGenEffects(1, &pv->effect);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( JS_SetPrivate(cx, obj, pv) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+=== Methods ===
+**/
+
+/**doc
+ * $INT $INAME()
+**/
+DEFINE_FUNCTION_FAST( valueOf ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+
+	J_CHK( UIntToJsval(cx, pv->effect, J_FRVAL) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+=== Properties ===
+**/
+
+/**doc
+ * $INT $INAME
+  set the type of effect represented by the Effect object.
+  * undefined
+  * Oal.EFFECT_EAXREVERB
+  * Oal.EFFECT_REVERB
+  * Oal.EFFECT_CHORUS
+  * Oal.EFFECT_DISTORTION
+  * Oal.EFFECT_ECHO
+  * Oal.EFFECT_FLANGER
+  * Oal.EFFECT_FREQUENCY_SHIFTER
+  * Oal.EFFECT_VOCAL_MORPHER
+  * Oal.EFFECT_PITCH_SHIFTER
+  * Oal.EFFECT_RING_MODULATOR
+  * Oal.EFFECT_AUTOWAH
+  * Oal.EFFECT_COMPRESSOR
+  * Oal.EFFECT_EQUALIZER
+**/
+DEFINE_PROPERTY_SETTER( type ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE(pv);
+	int effectType;
+	J_CHK( JsvalToInt(cx, *vp, &effectType) );
+
+	alEffecti(pv->effect, AL_EFFECT_TYPE, effectType);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( type ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE(pv);
+	int effectType;
+
+	alGetEffecti(pv->effect, AL_EFFECT_TYPE, &effectType);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( IntToJsval(cx, effectType, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/*
+DEFINE_FUNCTION_FAST( Test ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+
+
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	return JS_TRUE;
+	JL_BAD;
+}
+*/
+
+DEFINE_PROPERTY_SETTER( effectFloat ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	ALenum param = JSVAL_TO_INT(id);
+	float f;
+	J_CHK( JsvalToFloat(cx, *vp, &f) );
+	alEffectf(pv->effect, param, f);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( effectFloat ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	ALenum param = JSVAL_TO_INT(id);
+	float f;
+	alGetEffectf(pv->effect, param, &f);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	J_CHK( FloatToJsval(cx, f, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_SETTER( effectInt ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	ALenum param = JSVAL_TO_INT(id);
+	int i;
+	J_CHK( JsvalToInt(cx, *vp, &i) );
+	alEffecti(pv->effect, param, i);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( effectInt ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	ALenum param = JSVAL_TO_INT(id);
+	int i;
+	alGetEffecti(pv->effect, param, &i);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	J_CHK( IntToJsval(cx, i, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_SETTER( effectBool ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	ALenum param = JSVAL_TO_INT(id);
+	bool b;
+	J_CHK( JsvalToBool(cx, *vp, &b) );
+	alEffecti(pv->effect, param, b ? AL_TRUE : AL_FALSE);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( effectBool ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	ALenum param = JSVAL_TO_INT(id);
+	int i;
+	alGetEffecti(pv->effect, param, &i);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	*vp = i == AL_TRUE ? JSVAL_TRUE : JSVAL_FALSE;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+enum {
+	reverbDensity             				= AL_REVERB_DENSITY					 ,
+	reverbDiffusion           				= AL_REVERB_DIFFUSION				 ,
+	reverbGain                				= AL_REVERB_GAIN						 ,
+	reverbGainHF              				= AL_REVERB_GAINHF					 ,
+	reverbDecayTime           				= AL_REVERB_DECAY_TIME				 ,
+	reverbDecayHFRatio        				= AL_REVERB_DECAY_HFRATIO			 ,
+	reverbReflectionsGain     				= AL_REVERB_REFLECTIONS_GAIN		 ,
+	reverbReflectionsDelay    				= AL_REVERB_REFLECTIONS_DELAY		 ,
+	reverbLateReverbGain      				= AL_REVERB_LATE_REVERB_GAIN		 ,
+	reverbLateReverbDelay     				= AL_REVERB_LATE_REVERB_DELAY		 ,
+	reverbAirAbsorptionGainHF 				= AL_REVERB_AIR_ABSORPTION_GAINHF ,
+	reverbRoomRolloffFactor   				= AL_REVERB_ROOM_ROLLOFF_FACTOR	 ,
+	reverbDecayHFLimit        				= AL_REVERB_DECAY_HFLIMIT			 ,
+
+	chorusWaveform 							= AL_CHORUS_WAVEFORM ,
+	chorusPhase    							= AL_CHORUS_PHASE    ,
+	chorusRate     							= AL_CHORUS_RATE     ,
+	chorusDepth    							= AL_CHORUS_DEPTH    ,
+	chorusFeedback 							= AL_CHORUS_FEEDBACK ,
+	chorusDelay    							= AL_CHORUS_DELAY    ,
+
+	distortionEdge           				= AL_DISTORTION_EDGE           ,
+	distortionGain           				= AL_DISTORTION_GAIN           ,
+	distortionLowpassCutoff  				= AL_DISTORTION_LOWPASS_CUTOFF ,
+	distortionEqcenter       				= AL_DISTORTION_EQCENTER       ,
+	distortionEqbandwidth    				= AL_DISTORTION_EQBANDWIDTH    ,
+
+	echoDelay    								= AL_ECHO_DELAY    ,
+	echoLrdelay  								= AL_ECHO_LRDELAY  ,
+	echoDamping  								= AL_ECHO_DAMPING  ,
+	echoFeedback 								= AL_ECHO_FEEDBACK ,
+	echoSpread   								= AL_ECHO_SPREAD   ,
+
+	flangerWaveform 							= AL_FLANGER_WAVEFORM ,
+	flangerPhase    							= AL_FLANGER_PHASE    ,
+	flangerRate     							= AL_FLANGER_RATE     ,
+	flangerDepth    							= AL_FLANGER_DEPTH    ,
+	flangerFeedback 							= AL_FLANGER_FEEDBACK ,
+	flangerDelay    							= AL_FLANGER_DELAY    ,
+
+	frequencyShifterFrequency      		= AL_FREQUENCY_SHIFTER_FREQUENCY       ,
+	frequencyShifterLeftDirection  		= AL_FREQUENCY_SHIFTER_LEFT_DIRECTION  ,
+	frequencyShifterRightDirection 		= AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION ,
+
+	vocalMorpherPhonemea               	= AL_VOCAL_MORPHER_PHONEMEA               ,
+	vocalMorpherPhonemeaCoarseTuning   	= AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING ,
+	vocalMorpherPhonemeb               	= AL_VOCAL_MORPHER_PHONEMEB               ,
+	vocalMorpherPhonemebCoarseTuning   	= AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING ,
+	vocalMorpherWaveform               	= AL_VOCAL_MORPHER_WAVEFORM               ,
+	vocalMorpherRate                   	= AL_VOCAL_MORPHER_RATE                   ,
+
+	pitchShifterCoarseTune 					= AL_PITCH_SHIFTER_COARSE_TUNE ,
+	pitchShifterFineTune   					= AL_PITCH_SHIFTER_FINE_TUNE   ,
+
+	ringModulatorFrequency      			= AL_RING_MODULATOR_FREQUENCY       ,
+	ringModulatorHighpassCutoff 			= AL_RING_MODULATOR_HIGHPASS_CUTOFF ,
+	ringModulatorWaveform       			= AL_RING_MODULATOR_WAVEFORM        ,
+
+	autowahAttackTime  						= AL_AUTOWAH_ATTACK_TIME  ,
+	autowahReleaseTime 						= AL_AUTOWAH_RELEASE_TIME ,
+	autowahResonance   						= AL_AUTOWAH_RESONANCE    ,
+	autowahPeakGain    						= AL_AUTOWAH_PEAK_GAIN    ,
+
+	compressorOnoff     						= AL_COMPRESSOR_ONOFF ,
+
+	equalizerLowGain    						= AL_EQUALIZER_LOW_GAIN	   ,
+	equalizerLowCutoff  						= AL_EQUALIZER_LOW_CUTOFF  ,
+	equalizerMid1Gain   						= AL_EQUALIZER_MID1_GAIN   ,
+	equalizerMid1Center 						= AL_EQUALIZER_MID1_CENTER ,
+	equalizerMid1Width  						= AL_EQUALIZER_MID1_WIDTH  ,
+	equalizerMid2Gain   						= AL_EQUALIZER_MID2_GAIN   ,
+	equalizerMid2Center 						= AL_EQUALIZER_MID2_CENTER ,
+	equalizerMid2Width  						= AL_EQUALIZER_MID2_WIDTH  ,
+	equalizerHighGain   						= AL_EQUALIZER_HIGH_GAIN   ,
+	equalizerHighCutoff 						= AL_EQUALIZER_HIGH_CUTOFF ,
+};
+
+
+/**doc
+ * $REAL reverbDensity
+ * $REAL reverbDiffusion
+ * $REAL reverbGain
+ * $REAL reverbGainHF
+ * $REAL reverbDecayTime
+ * $REAL reverbDecayHFRatio
+ * $REAL reverbReflectionsGain
+ * $REAL reverbReflectionsDelay
+ * $REAL reverbLateReverbGain
+ * $REAL reverbLateReverbDelay
+ * $REAL reverbAirAbsorptionGainHF
+ * $REAL reverbRoomRolloffFactor
+ * $BOOL reverbDecayHFLimit
+
+ * $INT chorusWaveform
+ * $INT chorusPhase
+ * $REAL chorusRate
+ * $REAL chorusDepth
+ * $REAL chorusFeedback
+ * $REAL chorusDelay
+
+ * $REAL distortionEdge
+ * $REAL distortionGain
+ * $REAL distortionLowpassCutoff
+ * $REAL distortionEqcenter
+ * $REAL distortionEqbandwidth
+
+ * $REAL echoDelay
+ * $REAL echoLrdelay
+ * $REAL echoDamping
+ * $REAL echoFeedback
+ * $REAL echoSpread
+
+ * $INT flangerWaveform
+ * $REAL flangerPhase
+ * $REAL flangerRate
+ * $REAL flangerDepth
+ * $REAL flangerFeedback
+ * $REAL flangerDelay
+
+ * $REAL frequencyShifterFrequency
+ * $INT frequencyShifterLeftDirection
+ * $INT frequencyShifterRightDirection
+
+ * $INT vocalMorpherPhonemea
+ * $INT vocalMorpherPhonemeaCoarseTuning
+ * $INT vocalMorpherPhonemeb
+ * $INT vocalMorpherPhonemebCoarseTuning
+ * $INT vocalMorpherWaveform
+ * $REAL vocalMorpherRate
+
+ * $INT pitchShifterCoarseTune
+ * $INT pitchShifterFineTune
+
+ * $REAL ringModulatorFrequency
+ * $REAL ringModulatorHighpassCutoff
+ * $INT ringModulatorWaveform
+
+ * $REAL autowahAttackTime
+ * $REAL autowahReleaseTime
+ * $REAL autowahResonance
+ * $REAL autowahPeakGain
+
+ * $BOOL compressorOnoff
+
+ * $REAL equalizerLowGain
+ * $REAL equalizerLowCutoff
+ * $REAL equalizerMid1Gain
+ * $REAL equalizerMid1Center
+ * $REAL equalizerMid1Width
+ * $REAL equalizerMid2Gain
+ * $REAL equalizerMid2Center
+ * $REAL equalizerMid2Width
+ * $REAL equalizerHighGain
+ * $REAL equalizerHighCutoff
+**/
+
+CONFIGURE_CLASS
+
+	REVISION(SvnRevToInt("$Revision: 2210 $"))
+	HAS_PRIVATE
+	HAS_CONSTRUCTOR
+	HAS_FINALIZE
+
+	BEGIN_FUNCTION_SPEC
+		FUNCTION_FAST_ARGC( valueOf, 0 )
+//		FUNCTION_FAST( Test )
+	END_FUNCTION_SPEC
+
+	BEGIN_PROPERTY_SPEC
+		PROPERTY( type )
+
+		PROPERTY_SWITCH( reverbDensity							, effectFloat )
+		PROPERTY_SWITCH( reverbDiffusion							, effectFloat )
+		PROPERTY_SWITCH( reverbGain								, effectFloat )
+		PROPERTY_SWITCH( reverbGainHF								, effectFloat )
+		PROPERTY_SWITCH( reverbDecayTime							, effectFloat )
+		PROPERTY_SWITCH( reverbDecayHFRatio						, effectFloat )
+		PROPERTY_SWITCH( reverbReflectionsGain					, effectFloat )
+		PROPERTY_SWITCH( reverbReflectionsDelay				, effectFloat )
+		PROPERTY_SWITCH( reverbLateReverbGain					, effectFloat )
+		PROPERTY_SWITCH( reverbLateReverbDelay					, effectFloat )
+		PROPERTY_SWITCH( reverbAirAbsorptionGainHF			, effectFloat )
+		PROPERTY_SWITCH( reverbRoomRolloffFactor				, effectFloat )
+		PROPERTY_SWITCH( reverbDecayHFLimit						, effectBool  )
+
+		PROPERTY_SWITCH( chorusWaveform 							, effectInt   ) // AL_CHORUS_WAVEFORM_SINUSOID, AL_CHORUS_WAVEFORM_TRIANGLE
+		PROPERTY_SWITCH( chorusPhase    							, effectInt   ) // -180, +180
+		PROPERTY_SWITCH( chorusRate     							, effectFloat )
+		PROPERTY_SWITCH( chorusDepth    							, effectFloat )
+		PROPERTY_SWITCH( chorusFeedback 							, effectFloat )
+		PROPERTY_SWITCH( chorusDelay    							, effectFloat )
+
+		PROPERTY_SWITCH( distortionEdge          				, effectFloat )
+		PROPERTY_SWITCH( distortionGain          				, effectFloat )
+		PROPERTY_SWITCH( distortionLowpassCutoff 				, effectFloat )
+		PROPERTY_SWITCH( distortionEqcenter      				, effectFloat )
+		PROPERTY_SWITCH( distortionEqbandwidth   				, effectFloat )
+
+		PROPERTY_SWITCH( echoDelay    							, effectFloat )
+		PROPERTY_SWITCH( echoLrdelay  							, effectFloat )
+		PROPERTY_SWITCH( echoDamping  							, effectFloat )
+		PROPERTY_SWITCH( echoFeedback 							, effectFloat )
+		PROPERTY_SWITCH( echoSpread   							, effectFloat )
+
+		PROPERTY_SWITCH( flangerWaveform 						, effectInt ) // AL_CHORUS_WAVEFORM_SINUSOID, AL_CHORUS_WAVEFORM_TRIANGLE
+		PROPERTY_SWITCH( flangerPhase    						, effectFloat )
+		PROPERTY_SWITCH( flangerRate     						, effectFloat )
+		PROPERTY_SWITCH( flangerDepth    						, effectFloat )
+		PROPERTY_SWITCH( flangerFeedback 						, effectFloat )
+		PROPERTY_SWITCH( flangerDelay    						, effectFloat )
+
+		PROPERTY_SWITCH( frequencyShifterFrequency      	, effectFloat )
+		PROPERTY_SWITCH( frequencyShifterLeftDirection  	, effectInt ) // Down, Up, Off
+		PROPERTY_SWITCH( frequencyShifterRightDirection 	, effectInt ) // Down, Up, Off
+
+		PROPERTY_SWITCH( vocalMorpherPhonemea              , effectInt )
+		PROPERTY_SWITCH( vocalMorpherPhonemeaCoarseTuning  , effectInt )
+		PROPERTY_SWITCH( vocalMorpherPhonemeb              , effectInt )
+		PROPERTY_SWITCH( vocalMorpherPhonemebCoarseTuning  , effectInt )
+		PROPERTY_SWITCH( vocalMorpherWaveform              , effectInt ) // Sin, Triangle, Saw
+		PROPERTY_SWITCH( vocalMorpherRate                  , effectFloat )
+
+		PROPERTY_SWITCH( pitchShifterCoarseTune 				, effectInt )
+		PROPERTY_SWITCH( pitchShifterFineTune   				, effectInt )
+
+		PROPERTY_SWITCH( ringModulatorFrequency      		, effectFloat )
+		PROPERTY_SWITCH( ringModulatorHighpassCutoff 		, effectFloat )
+		PROPERTY_SWITCH( ringModulatorWaveform       		, effectInt ) // Sin, Saw, Square
+
+		PROPERTY_SWITCH( autowahAttackTime  					, effectFloat )
+		PROPERTY_SWITCH( autowahReleaseTime 					, effectFloat )
+		PROPERTY_SWITCH( autowahResonance   					, effectFloat )
+		PROPERTY_SWITCH( autowahPeakGain    					, effectFloat )
+
+		PROPERTY_SWITCH( compressorOnoff     					, effectBool )
+
+		PROPERTY_SWITCH( equalizerLowGain    					, effectFloat )
+		PROPERTY_SWITCH( equalizerLowCutoff  					, effectFloat )
+		PROPERTY_SWITCH( equalizerMid1Gain   					, effectFloat )
+		PROPERTY_SWITCH( equalizerMid1Center 					, effectFloat )
+		PROPERTY_SWITCH( equalizerMid1Width  					, effectFloat )
+		PROPERTY_SWITCH( equalizerMid2Gain   					, effectFloat )
+		PROPERTY_SWITCH( equalizerMid2Center 					, effectFloat )
+		PROPERTY_SWITCH( equalizerMid2Width  					, effectFloat )
+		PROPERTY_SWITCH( equalizerHighGain   					, effectFloat )
+		PROPERTY_SWITCH( equalizerHighCutoff 					, effectFloat )
+
+	END_PROPERTY_SPEC
+
+END_CLASS
+
+#endif // _WIN32
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/error.cpp jslibs-0.9-r1881/src/jsaudio/error.cpp
--- jslibs-0.9-r1881_orig/src/jsaudio/error.cpp	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/error.cpp	2009-02-06 04:54:18.000000000 +0100
@@ -1,176 +1,178 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-#include "stdafx.h"
-#include "error.h"
-
-/**doc fileIndex:bottom **/
-
-/**doc
-**/
-
-BEGIN_CLASS( OalError )
-
-
-DEFINE_PROPERTY( code ) {
-
-	JS_GetReservedSlot( cx, obj, 0, vp );
-	return JS_TRUE;
-}
-
-
-DEFINE_PROPERTY( text ) {
-
-	JS_GetReservedSlot( cx, obj, 0, vp );
-	int errorCode;
-	J_CHK( JsvalToInt(cx, *vp, &errorCode) );
-	char *errStr;
-	switch (errorCode) {
-		case AL_NO_ERROR:
-			errStr = "No Error.";
-			break;
-		case AL_INVALID_NAME:
-			errStr = "Invalid Name paramater passed to AL call.";
-			break;
-		case AL_ILLEGAL_ENUM: // AL_INVALID_ENUM
-			errStr = "Invalid parameter passed to AL call.";
-			break;
-		case AL_INVALID_VALUE:
-			errStr = "Invalid enum parameter value.";
-			break;
-		case AL_ILLEGAL_COMMAND: // AL_INVALID_OPERATION
-			errStr = "Illegal call.";
-			break;
-		case AL_OUT_OF_MEMORY:
-			errStr = "No mojo.";
-			break;
-		default:
-			errStr = "Unknown error.";
-			break;
-	}
-	JSString *str = JS_NewStringCopyZ( cx, errStr );
-	*vp = STRING_TO_JSVAL( str );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-DEFINE_PROPERTY( const ) {
-
-	JS_GetReservedSlot( cx, obj, 0, vp );
-	int errorCode;
-	J_CHK( JsvalToInt(cx, *vp, &errorCode) );
-	char *errStr;
-	switch (errorCode) {
-		case AL_NO_ERROR:
-			errStr = "AL_NO_ERROR";
-			break;
-		case AL_INVALID_NAME:
-			errStr = "AL_INVALID_NAME";
-			break;
-		case AL_ILLEGAL_ENUM: // AL_INVALID_ENUM
-			errStr = "AL_ILLEGAL_ENUM";
-			break;
-		case AL_INVALID_VALUE:
-			errStr = "AL_INVALID_VALUE";
-			break;
-		case AL_ILLEGAL_COMMAND: // AL_INVALID_OPERATION
-			errStr = "AL_ILLEGAL_COMMAND";
-			break;
-		case AL_OUT_OF_MEMORY:
-			errStr = "AL_OUT_OF_MEMORY";
-			break;
-		default:
-			errStr = "???";
-			break;
-	}
-	JSString *str = JS_NewStringCopyZ( cx, errStr );
-	*vp = STRING_TO_JSVAL( str );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-DEFINE_FUNCTION( toString ) {
-
-	J_CHK( _text(cx, obj, 0, rval) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-DEFINE_HAS_INSTANCE() { // see issue#52
-
-	*bp = !JSVAL_IS_PRIMITIVE(v) && OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(v)) == _class;
-	return JS_TRUE;
-}
-
-
-DEFINE_XDR() {
-	
-	if ( xdr->mode == JSXDR_ENCODE ) {
-
-		jsval tmp;
-		J_CHK( JS_GetReservedSlot(xdr->cx, *objp, 0, &tmp) );
-		JS_XDRValue(xdr, &tmp);
-		return JS_TRUE;
-	}
-
-	if ( xdr->mode == JSXDR_DECODE ) {
-
-		*objp = JS_NewObject(xdr->cx, _class, NULL, NULL);
-		jsval tmp;
-		JS_XDRValue(xdr, &tmp);
-		J_CHK( JS_SetReservedSlot(xdr->cx, *objp, 0, tmp) );
-		return JS_TRUE;
-	}
-
-	if ( xdr->mode == JSXDR_FREE ) {
-
-		// (TBD) nothing to free ?
-		return JS_TRUE;
-	}
-
-	JL_BAD;
-}
-
-
-CONFIGURE_CLASS
-
-	HAS_XDR
-	HAS_RESERVED_SLOTS(1)
-	HAS_HAS_INSTANCE // see issue#52
-
-	BEGIN_PROPERTY_SPEC
-		PROPERTY_READ( code )
-		PROPERTY_READ( text )
-		PROPERTY_READ( const )
-	END_PROPERTY_SPEC
-
-	BEGIN_FUNCTION_SPEC
-		FUNCTION(toString)
-	END_FUNCTION_SPEC
-
-END_CLASS
-
-
-JSBool ThrowOalError( JSContext *cx, ALenum err ) {
-
-	JSObject *error = JS_NewObject( cx, _class, NULL, NULL );
-	JS_SetPendingException( cx, OBJECT_TO_JSVAL( error ) );
-	jsval errVal;
-	J_CHK( IntToJsval(cx, err, &errVal) );
-	J_CHK( JS_SetReservedSlot( cx, error, 0, errVal ) );
-	JL_BAD;
-}
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+#include "stdafx.h"
+#include "error.h"
+
+/**doc fileIndex:bottom **/
+
+/**doc
+**/
+
+BEGIN_CLASS( OalError )
+
+
+DEFINE_PROPERTY( code ) {
+
+	JS_GetReservedSlot( cx, obj, 0, vp );
+	return JS_TRUE;
+}
+
+
+DEFINE_PROPERTY( text ) {
+  JSString *str;
+
+	JS_GetReservedSlot( cx, obj, 0, vp );
+	int errorCode;
+	J_CHK( JsvalToInt(cx, *vp, &errorCode) );
+	const char *errStr;
+	switch (errorCode) {
+		case AL_NO_ERROR:
+			errStr = "No Error.";
+			break;
+		case AL_INVALID_NAME:
+			errStr = "Invalid Name paramater passed to AL call.";
+			break;
+		case AL_ILLEGAL_ENUM: // AL_INVALID_ENUM
+			errStr = "Invalid parameter passed to AL call.";
+			break;
+		case AL_INVALID_VALUE:
+			errStr = "Invalid enum parameter value.";
+			break;
+		case AL_ILLEGAL_COMMAND: // AL_INVALID_OPERATION
+			errStr = "Illegal call.";
+			break;
+		case AL_OUT_OF_MEMORY:
+			errStr = "No mojo.";
+			break;
+		default:
+			errStr = "Unknown error.";
+			break;
+	}
+	str = JS_NewStringCopyZ( cx, errStr );
+	*vp = STRING_TO_JSVAL( str );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+DEFINE_PROPERTY( const ) {
+  JSString *str;
+
+	JS_GetReservedSlot( cx, obj, 0, vp );
+	int errorCode;
+	J_CHK( JsvalToInt(cx, *vp, &errorCode) );
+	const char *errStr;
+	switch (errorCode) {
+		case AL_NO_ERROR:
+			errStr = "AL_NO_ERROR";
+			break;
+		case AL_INVALID_NAME:
+			errStr = "AL_INVALID_NAME";
+			break;
+		case AL_ILLEGAL_ENUM: // AL_INVALID_ENUM
+			errStr = "AL_ILLEGAL_ENUM";
+			break;
+		case AL_INVALID_VALUE:
+			errStr = "AL_INVALID_VALUE";
+			break;
+		case AL_ILLEGAL_COMMAND: // AL_INVALID_OPERATION
+			errStr = "AL_ILLEGAL_COMMAND";
+			break;
+		case AL_OUT_OF_MEMORY:
+			errStr = "AL_OUT_OF_MEMORY";
+			break;
+		default:
+			errStr = "???";
+			break;
+	}
+	str = JS_NewStringCopyZ( cx, errStr );
+	*vp = STRING_TO_JSVAL( str );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+DEFINE_FUNCTION( toString ) {
+
+	J_CHK( _text(cx, obj, 0, rval) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+DEFINE_HAS_INSTANCE() { // see issue#52
+
+	*bp = !JSVAL_IS_PRIMITIVE(v) && OBJ_GET_CLASS(cx, JSVAL_TO_OBJECT(v)) == _class;
+	return JS_TRUE;
+}
+
+
+DEFINE_XDR() {
+
+	if ( xdr->mode == JSXDR_ENCODE ) {
+
+		jsval tmp;
+		J_CHK( JS_GetReservedSlot(xdr->cx, *objp, 0, &tmp) );
+		JS_XDRValue(xdr, &tmp);
+		return JS_TRUE;
+	}
+
+	if ( xdr->mode == JSXDR_DECODE ) {
+
+		*objp = JS_NewObject(xdr->cx, _class, NULL, NULL);
+		jsval tmp;
+		JS_XDRValue(xdr, &tmp);
+		J_CHK( JS_SetReservedSlot(xdr->cx, *objp, 0, tmp) );
+		return JS_TRUE;
+	}
+
+	if ( xdr->mode == JSXDR_FREE ) {
+
+		// (TBD) nothing to free ?
+		return JS_TRUE;
+	}
+
+	JL_BAD;
+}
+
+
+CONFIGURE_CLASS
+
+	HAS_XDR
+	HAS_RESERVED_SLOTS(1)
+	HAS_HAS_INSTANCE // see issue#52
+
+	BEGIN_PROPERTY_SPEC
+		PROPERTY_READ( code )
+		PROPERTY_READ( text )
+		PROPERTY_READ( const )
+	END_PROPERTY_SPEC
+
+	BEGIN_FUNCTION_SPEC
+		FUNCTION(toString)
+	END_FUNCTION_SPEC
+
+END_CLASS
+
+
+JSBool ThrowOalError( JSContext *cx, ALenum err ) {
+
+	JSObject *error = JS_NewObject( cx, _class, NULL, NULL );
+	JS_SetPendingException( cx, OBJECT_TO_JSVAL( error ) );
+	jsval errVal;
+	J_CHK( IntToJsval(cx, err, &errVal) );
+	J_CHK( JS_SetReservedSlot( cx, error, 0, errVal ) );
+	JL_BAD;
+}
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/error.h jslibs-0.9-r1881/src/jsaudio/error.h
--- jslibs-0.9-r1881_orig/src/jsaudio/error.h	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/error.h	2009-02-06 04:51:41.000000000 +0100
@@ -1,25 +1,25 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-DECLARE_CLASS( OalError )
-JSBool ThrowOalError( JSContext *cx, ALenum err );
-
-inline JSBool CheckThrowCurrentOalError( JSContext *cx ) {
-
-	ALenum err = alGetError();
-	if (unlikely( err != AL_NO_ERROR ))
-		return ThrowOalError(cx, err);
-	return JS_TRUE;
-}
-
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+DECLARE_CLASS( OalError )
+JSBool ThrowOalError( JSContext *cx, ALenum err );
+
+inline JSBool CheckThrowCurrentOalError( JSContext *cx ) {
+
+	ALenum err = alGetError();
+	if (unlikely( err != AL_NO_ERROR ))
+		return ThrowOalError(cx, err);
+	return JS_TRUE;
+}
+
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/filter.cpp jslibs-0.9-r1881/src/jsaudio/filter.cpp
--- jslibs-0.9-r1881_orig/src/jsaudio/filter.cpp	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/filter.cpp	2009-02-06 04:51:41.000000000 +0100
@@ -1,200 +1,203 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-#include "stdafx.h"
-#include "oalefxapi.h"
-#include "error.h"
-
-struct Private {
-	ALuint filter;
-};
-
-
-BEGIN_CLASS( OalFilter )
-
-
-DEFINE_FINALIZE() {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	if ( pv ) {
-
-		if ( alcGetCurrentContext() ) {
-
-			alDeleteFilters(1, &pv->filter);
-		}
-		JS_free(cx, pv);
-	}
-}
-
-/**doc
- * $INAME()
-  Creates a new filter object.
-**/
-DEFINE_CONSTRUCTOR() {
-
-	Private *pv = (Private*)JS_malloc(cx, sizeof(Private));
-
-	alGenFilters(1, &pv->filter);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( JS_SetPrivate(cx, obj, pv) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
-=== Methods ===
-**/
-
-/**doc
- * $INT $INAME()
-**/
-DEFINE_FUNCTION_FAST( valueOf ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-	J_CHK( UIntToJsval(cx, pv->filter, J_FRVAL) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
-=== Properties ===
-**/
-
-
-
-/**doc
- * $INT $INAME
-  set the type of filter represented by the Filter object.
-  * undefined
-  * Oal.FILTER_NULL      
-  * Oal.FILTER_LOWPASS   
-  * Oal.FILTER_HIGHPASS  
-  * Oal.FILTER_BANDPASS  
-**/
-DEFINE_PROPERTY_SETTER( type ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE(pv);
-	int filterType;
-	if ( JSVAL_IS_VOID(*vp) )
-		filterType = AL_FILTER_NULL;
-	else
-		J_CHK( JsvalToInt(cx, *vp, &filterType) );
-	alFilteri(pv->filter, AL_FILTER_TYPE, filterType);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( type ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE(pv);
-	int filterType;
-	alGetFilteri(pv->filter, AL_FILTER_TYPE, &filterType);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	if ( filterType == AL_FILTER_NULL )
-		*vp = JSVAL_VOID;
-	else
-		J_CHK( IntToJsval(cx, filterType, vp) );
-
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-DEFINE_PROPERTY_SETTER( filterFloat ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = JSVAL_TO_INT(id);
-	float f;
-	J_CHK( JsvalToFloat(cx, *vp, &f) );
-	alFilterf(pv->filter, param, f);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( filterFloat ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = JSVAL_TO_INT(id);
-	float f;
-	alGetFilterf(pv->filter, param, &f);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	J_CHK( FloatToJsval(cx, f, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-enum {
-	lowpassGain				= AL_LOWPASS_GAIN    ,
-	lowpassGainHF			= AL_LOWPASS_GAINHF	,
-
-	highpassGain			= AL_HIGHPASS_GAIN   ,
-	highpassGainLF			= AL_HIGHPASS_GAINLF ,
-
-	bandpassGain			= AL_BANDPASS_GAIN   ,
-	bandpassGainLF			= AL_BANDPASS_GAINLF ,
-	bandpassGainHF			= AL_BANDPASS_GAINHF ,
-};
-
-
-/**doc
- * $REAL lowpassGain
- * $REAL lowpassGainHF
-
- * $REAL highpassGain
- * $REAL highpassGainLF
-
- * $REAL bandpassGain
- * $REAL bandpassGainLF
- * $REAL bandpassGainHF
-**/
-
-CONFIGURE_CLASS
-
-	REVISION(SvnRevToInt("$Revision: 2210 $"))
-	HAS_PRIVATE
-	HAS_CONSTRUCTOR
-	HAS_FINALIZE
-
-	BEGIN_FUNCTION_SPEC
-		FUNCTION_FAST_ARGC( valueOf, 0 )
-	END_FUNCTION_SPEC
-
-	BEGIN_PROPERTY_SPEC
-		PROPERTY( type )
-
-		PROPERTY_SWITCH( lowpassGain		, filterFloat )
-		PROPERTY_SWITCH( lowpassGainHF	, filterFloat )
-
-		PROPERTY_SWITCH( highpassGain		, filterFloat )
-		PROPERTY_SWITCH( highpassGainLF	, filterFloat )
-
-		PROPERTY_SWITCH( bandpassGain		, filterFloat )
-		PROPERTY_SWITCH( bandpassGainLF	, filterFloat )
-		PROPERTY_SWITCH( bandpassGainHF	, filterFloat )
-	END_PROPERTY_SPEC
-
-END_CLASS
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+#include "stdafx.h"
+#include "oalefxapi.h"
+#include "error.h"
+
+struct Private {
+	ALuint filter;
+};
+
+#ifdef _WIN32
+
+BEGIN_CLASS( OalFilter )
+
+
+DEFINE_FINALIZE() {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	if ( pv ) {
+
+		if ( alcGetCurrentContext() ) {
+
+			alDeleteFilters(1, &pv->filter);
+		}
+		JS_free(cx, pv);
+	}
+}
+
+/**doc
+ * $INAME()
+  Creates a new filter object.
+**/
+DEFINE_CONSTRUCTOR() {
+
+	Private *pv = (Private*)JS_malloc(cx, sizeof(Private));
+
+	alGenFilters(1, &pv->filter);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( JS_SetPrivate(cx, obj, pv) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+=== Methods ===
+**/
+
+/**doc
+ * $INT $INAME()
+**/
+DEFINE_FUNCTION_FAST( valueOf ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+	J_CHK( UIntToJsval(cx, pv->filter, J_FRVAL) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+=== Properties ===
+**/
+
+
+
+/**doc
+ * $INT $INAME
+  set the type of filter represented by the Filter object.
+  * undefined
+  * Oal.FILTER_NULL
+  * Oal.FILTER_LOWPASS
+  * Oal.FILTER_HIGHPASS
+  * Oal.FILTER_BANDPASS
+**/
+DEFINE_PROPERTY_SETTER( type ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE(pv);
+	int filterType;
+	if ( JSVAL_IS_VOID(*vp) )
+		filterType = AL_FILTER_NULL;
+	else
+		J_CHK( JsvalToInt(cx, *vp, &filterType) );
+	alFilteri(pv->filter, AL_FILTER_TYPE, filterType);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( type ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE(pv);
+	int filterType;
+	alGetFilteri(pv->filter, AL_FILTER_TYPE, &filterType);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	if ( filterType == AL_FILTER_NULL )
+		*vp = JSVAL_VOID;
+	else
+		J_CHK( IntToJsval(cx, filterType, vp) );
+
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+DEFINE_PROPERTY_SETTER( filterFloat ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	ALenum param = JSVAL_TO_INT(id);
+	float f;
+	J_CHK( JsvalToFloat(cx, *vp, &f) );
+	alFilterf(pv->filter, param, f);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( filterFloat ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	ALenum param = JSVAL_TO_INT(id);
+	float f;
+	alGetFilterf(pv->filter, param, &f);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	J_CHK( FloatToJsval(cx, f, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+enum {
+	lowpassGain				= AL_LOWPASS_GAIN    ,
+	lowpassGainHF			= AL_LOWPASS_GAINHF	,
+
+	highpassGain			= AL_HIGHPASS_GAIN   ,
+	highpassGainLF			= AL_HIGHPASS_GAINLF ,
+
+	bandpassGain			= AL_BANDPASS_GAIN   ,
+	bandpassGainLF			= AL_BANDPASS_GAINLF ,
+	bandpassGainHF			= AL_BANDPASS_GAINHF ,
+};
+
+
+/**doc
+ * $REAL lowpassGain
+ * $REAL lowpassGainHF
+
+ * $REAL highpassGain
+ * $REAL highpassGainLF
+
+ * $REAL bandpassGain
+ * $REAL bandpassGainLF
+ * $REAL bandpassGainHF
+**/
+
+CONFIGURE_CLASS
+
+	REVISION(SvnRevToInt("$Revision: 2210 $"))
+	HAS_PRIVATE
+	HAS_CONSTRUCTOR
+	HAS_FINALIZE
+
+	BEGIN_FUNCTION_SPEC
+		FUNCTION_FAST_ARGC( valueOf, 0 )
+	END_FUNCTION_SPEC
+
+	BEGIN_PROPERTY_SPEC
+		PROPERTY( type )
+
+		PROPERTY_SWITCH( lowpassGain		, filterFloat )
+		PROPERTY_SWITCH( lowpassGainHF	, filterFloat )
+
+		PROPERTY_SWITCH( highpassGain		, filterFloat )
+		PROPERTY_SWITCH( highpassGainLF	, filterFloat )
+
+		PROPERTY_SWITCH( bandpassGain		, filterFloat )
+		PROPERTY_SWITCH( bandpassGainLF	, filterFloat )
+		PROPERTY_SWITCH( bandpassGainHF	, filterFloat )
+	END_PROPERTY_SPEC
+
+END_CLASS
+
+#endif // _WIN32
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/jsaudio.cpp jslibs-0.9-r1881/src/jsaudio/jsaudio.cpp
--- jslibs-0.9-r1881_orig/src/jsaudio/jsaudio.cpp	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/jsaudio.cpp	2009-02-06 04:51:41.000000000 +0100
@@ -1,59 +1,60 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-#include "stdafx.h"
-#include "template.h"
-
-BEGIN_CLASS( Audio )
-
-DEFINE_FINALIZE() {
-}
-
-DEFINE_CONSTRUCTOR() {
-
-	J_S_ASSERT_CONSTRUCTING();
-	J_S_ASSERT_THIS_CLASS();
-	return JS_TRUE;
-}
-
-
-CONFIGURE_CLASS
-
-	HAS_CONSTRUCTOR
-	HAS_FINALIZE
-
-//DEFINE_FUNCTION( Call ) {
-//	return JS_TRUE;
-//}
-
-//DEFINE_PROPERTY( prop ) {
-//	return JS_TRUE;
-//}
-
-//DEFINE_FUNCTION( Func ) {
-//	return JS_TRUE;
-//}
-
-	BEGIN_FUNCTION_SPEC
-//		FUNCTION(Func)
-	END_FUNCTION_SPEC
-
-	BEGIN_PROPERTY_SPEC
-//		PROPERTY(prop)
-	END_PROPERTY_SPEC
-
-	HAS_PRIVATE
-	HAS_RESERVED_SLOTS(1)
-
-END_CLASS
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+#include "stdafx.h"
+#include "jsaudio.h"
+
+BEGIN_CLASS( Audio )
+
+DEFINE_FINALIZE() {
+}
+
+DEFINE_CONSTRUCTOR() {
+
+	J_S_ASSERT_CONSTRUCTING();
+	J_S_ASSERT_THIS_CLASS();
+	return JS_TRUE;
+  JL_BAD;
+}
+
+
+CONFIGURE_CLASS
+
+	HAS_CONSTRUCTOR
+	HAS_FINALIZE
+
+//DEFINE_FUNCTION( Call ) {
+//	return JS_TRUE;
+//}
+
+//DEFINE_PROPERTY( prop ) {
+//	return JS_TRUE;
+//}
+
+//DEFINE_FUNCTION( Func ) {
+//	return JS_TRUE;
+//}
+
+	BEGIN_FUNCTION_SPEC
+//		FUNCTION(Func)
+	END_FUNCTION_SPEC
+
+	BEGIN_PROPERTY_SPEC
+//		PROPERTY(prop)
+	END_PROPERTY_SPEC
+
+	HAS_PRIVATE
+	HAS_RESERVED_SLOTS(1)
+
+END_CLASS
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/jsaudio.h jslibs-0.9-r1881/src/jsaudio/jsaudio.h
--- jslibs-0.9-r1881_orig/src/jsaudio/jsaudio.h	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/jsaudio.h	2009-02-06 04:51:41.000000000 +0100
@@ -1,15 +1,15 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-DECLARE_CLASS( Template )
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+DECLARE_CLASS( Template )
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/listener.cpp jslibs-0.9-r1881/src/jsaudio/listener.cpp
--- jslibs-0.9-r1881_orig/src/jsaudio/listener.cpp	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/listener.cpp	2009-02-06 04:51:41.000000000 +0100
@@ -1,85 +1,85 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-#include "stdafx.h"
-#include "error.h"
-
-
-BEGIN_CLASS( OalListener )
-
-
-DEFINE_PROPERTY_SETTER( position ) {
-
-	float pos[3];
-	size_t len;
-	J_CHK( JsvalToFloatVector(cx, *vp, pos, 3, &len) );
-
-	alListener3f(AL_POSITION, pos[0], pos[1], pos[2]);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( position ) {
-
-	float pos[3];
-
-	alGetListener3f(AL_POSITION, &pos[0], &pos[1], &pos[2]);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( FloatVectorToJsval(cx, pos, 3, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-DEFINE_PROPERTY_SETTER( metersPerUnit ) {
-
-	float metersPerUnit;
-	J_CHK( JsvalToFloat(cx, *vp, &metersPerUnit) );
-
-	alListenerf(AL_METERS_PER_UNIT, metersPerUnit);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( metersPerUnit ) {
-
-	float metersPerUnit;
-
-	alGetListenerf(AL_METERS_PER_UNIT, &metersPerUnit);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( FloatToJsval(cx, metersPerUnit, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-CONFIGURE_CLASS
-
-	REVISION(SvnRevToInt("$Revision: 2210 $"))
-	BEGIN_STATIC_FUNCTION_SPEC
-	END_STATIC_FUNCTION_SPEC
-
-	BEGIN_STATIC_PROPERTY_SPEC
-		PROPERTY(position)
-		PROPERTY(metersPerUnit)
-	END_STATIC_PROPERTY_SPEC
-
-END_CLASS
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+#include "stdafx.h"
+#include "error.h"
+
+
+BEGIN_CLASS( OalListener )
+
+
+DEFINE_PROPERTY_SETTER( position ) {
+
+	float pos[3];
+	size_t len;
+	J_CHK( JsvalToFloatVector(cx, *vp, pos, 3, &len) );
+
+	alListener3f(AL_POSITION, pos[0], pos[1], pos[2]);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( position ) {
+
+	float pos[3];
+
+	alGetListener3f(AL_POSITION, &pos[0], &pos[1], &pos[2]);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( FloatVectorToJsval(cx, pos, 3, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+DEFINE_PROPERTY_SETTER( metersPerUnit ) {
+
+	float metersPerUnit;
+	J_CHK( JsvalToFloat(cx, *vp, &metersPerUnit) );
+
+	alListenerf(AL_METERS_PER_UNIT, metersPerUnit);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( metersPerUnit ) {
+
+	float metersPerUnit;
+
+	alGetListenerf(AL_METERS_PER_UNIT, &metersPerUnit);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( FloatToJsval(cx, metersPerUnit, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+CONFIGURE_CLASS
+
+	REVISION(SvnRevToInt("$Revision: 2210 $"))
+	BEGIN_STATIC_FUNCTION_SPEC
+	END_STATIC_FUNCTION_SPEC
+
+	BEGIN_STATIC_PROPERTY_SPEC
+		PROPERTY(position)
+		PROPERTY(metersPerUnit)
+	END_STATIC_PROPERTY_SPEC
+
+END_CLASS
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/main.cpp jslibs-0.9-r1881/src/jsaudio/main.cpp
--- jslibs-0.9-r1881_orig/src/jsaudio/main.cpp	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/main.cpp	2009-02-06 04:51:41.000000000 +0100
@@ -1,125 +1,125 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-#include "stdafx.h"
-#include "error.h"
-
-bool _unsafeMode = false;
-
-DECLARE_CLASS(Oal)
-DECLARE_CLASS(OalBuffer)
-DECLARE_CLASS(OalSource)
-DECLARE_CLASS(OalListener)
-DECLARE_CLASS(OalEffect);
-DECLARE_CLASS(OalFilter);
-
-
-//static ALCcontext *context = NULL;
-
-
-/**doc t:header
-$MODULE_HEADER
- Support 2D and 3D sound source and listener using OpenAL library.
-**/
-
-/**doc t:footer
-$MODULE_FOOTER
-**/
-
-EXTERN_C DLLEXPORT JSBool ModuleInit(JSContext *cx, JSObject *obj) {
-
-	_unsafeMode = GetHostPrivate(cx)->unsafeMode;
-
-/*
-	//J_S_ASSERT( context == NULL, "Invalid initialization context." );
-
-	ALCcontext *context;
-	ALCdevice *device;
-
-	// Initialize the OpenAL library (cf. alutInit)
-
-	// Doc: alcOpenDevice() open the Device specified. Current options are:
-	//   "Generic Hardware"
-	//   "Generic Software"
-	//   "DirectSound3D" (for legacy)
-	//   "DirectSound"
-	//   "MMSYSTEM"
-	// If no device name is specified, we will attempt to use DS3D.
-	device = alcOpenDevice ("Generic Software");
-	if (device == NULL)
-		J_REPORT_ERROR("ALUT_ERROR_OPEN_DEVICE");
-	context = alcCreateContext (device, NULL);
-	if (context == NULL) {
-		alcCloseDevice (device);
-		J_REPORT_ERROR("ALUT_ERROR_CREATE_CONTEXT");
-	}
-	if (!alcMakeContextCurrent(context)) {
-
-		alcDestroyContext (context);
-		alcCloseDevice (device);
-		J_REPORT_ERROR("ALUT_ERROR_MAKE_CONTEXT_CURRENT");
-	}
-*/
-
-	INIT_CLASS( OalError );
-	INIT_CLASS( Oal );
-	INIT_CLASS( OalBuffer );
-	INIT_CLASS( OalSource );
-	INIT_CLASS( OalListener );
-	INIT_CLASS( OalEffect );
-	INIT_CLASS( OalFilter );
-
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-EXTERN_C DLLEXPORT JSBool ModuleRelease(JSContext *cx) {
-
-	ALCcontext *context = alcGetCurrentContext();
-	if ( context == NULL )
-		return JS_TRUE; // already closed
-//		J_REPORT_ERROR("Unable to get the current context.");
-
-	// cf. alutExit
-	ALCdevice *device;
-	if (!alcMakeContextCurrent (NULL))
-		J_REPORT_ERROR("ALUT_ERROR_MAKE_CONTEXT_CURRENT");
-	device = alcGetContextsDevice (context);
-	if (alcGetError (device) != ALC_NO_ERROR )
-		J_REPORT_ERROR("ALUT_ERROR_ALC_ERROR_ON_ENTRY");
-	alcDestroyContext (context);
-	if (alcGetError (device) != ALC_NO_ERROR)
-		J_REPORT_ERROR("ALUT_ERROR_DESTROY_CONTEXT");
-	if (!alcCloseDevice (device))
-		J_REPORT_ERROR("ALUT_ERROR_CLOSE_DEVICE");
-
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-EXTERN_C DLLEXPORT void ModuleFree() {
-
-}
-
-
-#ifdef XP_WIN
-BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) {
-
-	if ( fdwReason == DLL_PROCESS_ATTACH )
-		DisableThreadLibraryCalls(hinstDLL);
-	return TRUE;
-}
-#endif // XP_WIN
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+#include "stdafx.h"
+#include "error.h"
+
+bool _unsafeMode = false;
+
+DECLARE_CLASS(Oal)
+DECLARE_CLASS(OalBuffer)
+DECLARE_CLASS(OalSource)
+DECLARE_CLASS(OalListener)
+DECLARE_CLASS(OalEffect);
+DECLARE_CLASS(OalFilter);
+
+
+//static ALCcontext *context = NULL;
+
+
+/**doc t:header
+$MODULE_HEADER
+ Support 2D and 3D sound source and listener using OpenAL library.
+**/
+
+/**doc t:footer
+$MODULE_FOOTER
+**/
+
+EXTERN_C DLLEXPORT JSBool ModuleInit(JSContext *cx, JSObject *obj) {
+
+	_unsafeMode = GetHostPrivate(cx)->unsafeMode;
+
+/*
+	//J_S_ASSERT( context == NULL, "Invalid initialization context." );
+
+	ALCcontext *context;
+	ALCdevice *device;
+
+	// Initialize the OpenAL library (cf. alutInit)
+
+	// Doc: alcOpenDevice() open the Device specified. Current options are:
+	//   "Generic Hardware"
+	//   "Generic Software"
+	//   "DirectSound3D" (for legacy)
+	//   "DirectSound"
+	//   "MMSYSTEM"
+	// If no device name is specified, we will attempt to use DS3D.
+	device = alcOpenDevice ("Generic Software");
+	if (device == NULL)
+		J_REPORT_ERROR("ALUT_ERROR_OPEN_DEVICE");
+	context = alcCreateContext (device, NULL);
+	if (context == NULL) {
+		alcCloseDevice (device);
+		J_REPORT_ERROR("ALUT_ERROR_CREATE_CONTEXT");
+	}
+	if (!alcMakeContextCurrent(context)) {
+
+		alcDestroyContext (context);
+		alcCloseDevice (device);
+		J_REPORT_ERROR("ALUT_ERROR_MAKE_CONTEXT_CURRENT");
+	}
+*/
+
+	INIT_CLASS( OalError );
+	INIT_CLASS( Oal );
+	INIT_CLASS( OalBuffer );
+	INIT_CLASS( OalSource );
+	INIT_CLASS( OalListener );
+	INIT_CLASS( OalEffect );
+	INIT_CLASS( OalFilter );
+
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+EXTERN_C DLLEXPORT JSBool ModuleRelease(JSContext *cx) {
+
+	ALCcontext *context = alcGetCurrentContext();
+	if ( context == NULL )
+		return JS_TRUE; // already closed
+//		J_REPORT_ERROR("Unable to get the current context.");
+
+	// cf. alutExit
+	ALCdevice *device;
+	if (!alcMakeContextCurrent (NULL))
+		J_REPORT_ERROR("ALUT_ERROR_MAKE_CONTEXT_CURRENT");
+	device = alcGetContextsDevice (context);
+	if (alcGetError (device) != ALC_NO_ERROR )
+		J_REPORT_ERROR("ALUT_ERROR_ALC_ERROR_ON_ENTRY");
+	alcDestroyContext (context);
+	if (alcGetError (device) != ALC_NO_ERROR)
+		J_REPORT_ERROR("ALUT_ERROR_DESTROY_CONTEXT");
+	if (!alcCloseDevice (device))
+		J_REPORT_ERROR("ALUT_ERROR_CLOSE_DEVICE");
+
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+EXTERN_C DLLEXPORT void ModuleFree() {
+
+}
+
+
+#ifdef XP_WIN
+BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) {
+
+	if ( fdwReason == DLL_PROCESS_ATTACH )
+		DisableThreadLibraryCalls(hinstDLL);
+	return TRUE;
+}
+#endif // XP_WIN
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/oal.cpp jslibs-0.9-r1881/src/jsaudio/oal.cpp
--- jslibs-0.9-r1881_orig/src/jsaudio/oal.cpp	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/oal.cpp	2009-02-06 04:51:41.000000000 +0100
@@ -1,1410 +1,1636 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-#include "stdafx.h"
-#include "error.h"
-#include "oalefxapi.h"
-
-
-/**doc
-$CLASS_HEADER
- $SVN_REVISION $Revision: 2212 $
-**/
-BEGIN_CLASS( Oal )
-
-/**doc
-=== Static functions ===
-**/
-
-
-/**doc
- * $VOID $INAME( [ deviceName ] )
-  Open an audio device.
-  $H arguments
-   $ARG string deviceName:  "Generic Hardware", "Generic Software", "DirectSound3D" (for legacy), "DirectSound", "MMSYSTEM"
-    If no device name is specified, we will attempt to use DS3D.
-  $H OpenAL API
-   alcOpenDevice, alcCreateContext, alcMakeContextCurrent
-**/
-DEFINE_FUNCTION_FAST( Open ) {
-
-	// Initialize the OpenAL library (cf. alutInit)
-
-	J_S_ASSERT( alcGetCurrentContext() == NULL, "OpenAL already open." );
-
-	const char *deviceName;
-	if ( J_FARG_ISDEF(1) )
-		J_CHK( JsvalToString(cx, &J_FARG(1), &deviceName) );
-	else
-		deviceName = NULL;
-
-	// Doc: alcOpenDevice() open the Device specified. Current options are:
-	//   "Generic Hardware"
-	//   "Generic Software"
-	//   "DirectSound3D" (for legacy)
-	//   "DirectSound"
-	//   "MMSYSTEM"
-	// If no device name is specified, we will attempt to use DS3D.
-	ALCdevice *device = alcOpenDevice (deviceName);
-	if (device == NULL)
-		J_REPORT_ERROR("ALUT_ERROR_OPEN_DEVICE");
-
-//	ALint attribs[4] = { 0 };
-//	attribs[0] = ALC_MAX_AUXILIARY_SENDS;
-//	attribs[1] = 4;
-
-	ALCcontext *context = alcCreateContext (device, NULL);
-	if (context == NULL) {
-		alcCloseDevice (device);
-		J_REPORT_ERROR("ALUT_ERROR_CREATE_CONTEXT");
-	}
-	if (!alcMakeContextCurrent(context)) {
-
-		alcDestroyContext (context);
-		alcCloseDevice (device);
-		J_REPORT_ERROR("ALUT_ERROR_MAKE_CONTEXT_CURRENT");
-	}
-
-	InitEfxApi();
-
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME()
-  Close the current audio device.
-  $H OpenAL API
-   alcGetCurrentContext, alcMakeContextCurrent, alcGetContextsDevice, alcDestroyContext, alcCloseDevice
-**/
-DEFINE_FUNCTION_FAST( Close ) {
-
-	ResetEfxApi();
-	// cf. alutExit
-	ALCcontext *context = alcGetCurrentContext();
-	J_S_ASSERT( context != NULL, "OpenAL already closed." );
-	ALCdevice *device;
-	if (!alcMakeContextCurrent (NULL))
-		J_REPORT_ERROR("ALUT_ERROR_MAKE_CONTEXT_CURRENT");
-	device = alcGetContextsDevice (context);
-	if (alcGetError (device) != ALC_NO_ERROR )
-		J_REPORT_ERROR("ALUT_ERROR_ALC_ERROR_ON_ENTRY");
-	alcDestroyContext (context);
-	if (alcGetError (device) != ALC_NO_ERROR)
-		J_REPORT_ERROR("ALUT_ERROR_DESTROY_CONTEXT");
-	if (!alcMakeContextCurrent(NULL))
-		J_REPORT_ERROR("ALUT_ERROR_MAKE_CONTEXT_CURRENT");
-	if (!alcCloseDevice (device))
-		J_REPORT_ERROR("ALUT_ERROR_CLOSE_DEVICE");
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-/**doc
- * $BOOL $INAME $READONLY
-  is true if EFX extension is available.
-**/
-DEFINE_PROPERTY( hasEfx ) {
-
-	ALCcontext *pContext = alcGetCurrentContext();
-	ALCdevice *pDevice = alcGetContextsDevice(pContext);
-	*vp = alcIsExtensionPresent(pDevice, (ALCchar*)ALC_EXT_EFX_NAME) ? JSVAL_TRUE : JSVAL_FALSE;
-	return JS_TRUE;
-}
-
-
-/**doc
- * $BOOL $INAME $READONLY
-  is the number of aux sends per source.
-**/
-DEFINE_PROPERTY( maxAuxiliarySends ) {
-
-	ALCcontext *pContext = alcGetCurrentContext();
-	ALCdevice *pDevice = alcGetContextsDevice(pContext);
-	ALCint numSends;
-	alcGetIntegerv(pDevice, ALC_MAX_AUXILIARY_SENDS, 1, &numSends);
-	J_CHK( IntToJsval(cx, numSends, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( value )
-  Selects the OpenAL Doppler factor value. The default Doppler factor value is 1.0 .
-  $H arguments
-   $ARG Number value
-  $H OpenAL API
-   alDopplerFactor
-**/
-DEFINE_FUNCTION_FAST( DopplerFactor ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-	float value;
-	J_CHK( JsvalToFloat(cx, J_FARG(1), &value) );
-	alDopplerFactor( value );
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( value )
-  Selects the OpenAL Doppler velocity value. The default Doppler velocity value is 343.3 .
-  $H arguments
-   $ARG Number value
-  $H OpenAL API
-   alDopplerVelocity
-**/
-DEFINE_FUNCTION_FAST( DopplerVelocity ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-	float value;
-	J_CHK( JsvalToFloat(cx, J_FARG(1), &value) );
-	alDopplerVelocity( value );
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( value )
-  Selects the OpenAL Speed of Sound value.
-  $H arguments
-   $ARG Number value
-  $H OpenAL API
-   alSpeedOfSound
-**/
-DEFINE_FUNCTION_FAST( SpeedOfSound ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-	float value;
-	J_CHK( JsvalToFloat(cx, J_FARG(1), &value) );
-	alSpeedOfSound( value );
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( distanceModel )
-  $H arguments
-   $ARG Integer value
-  $H OpenAL API
-   alDistanceModel
-**/
-DEFINE_FUNCTION_FAST( DistanceModel ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-	unsigned int distanceModel;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &distanceModel) );
-	alDistanceModel( distanceModel );
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( cap )
-  $H arguments
-   $ARG GLenum cap
-  $H OpenAL API
-   alEnable
-**/
-DEFINE_FUNCTION_FAST( Enable ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-	alEnable( JSVAL_TO_INT(J_FARG(1)) );
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( cap )
-  $H arguments
-   $ARG GLenum cap
-  $H OpenAL API
-   alDisable
-**/
-DEFINE_FUNCTION_FAST( Disable ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-	alDisable( JSVAL_TO_INT(J_FARG(1)) );
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( cap )
-  $H arguments
-   $ARG GLenum cap
-  $H OpenAL API
-   alIsEnabled
-**/
-DEFINE_FUNCTION_FAST( IsEnabled ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-	*J_FRVAL = BOOLEAN_TO_JSVAL( alIsEnabled( JSVAL_TO_INT(J_FARG(1)) ) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $BOOL $INAME( pname )
-  $H arguments
-   $ARG GLenum pname
-  $H return value
-   value of a selected parameter.
-  $H OpenAL API
-   alGetString
-**/
-DEFINE_FUNCTION_FAST( GetString ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-	const ALchar* str = alGetString(JSVAL_TO_INT(J_FARG(1)));
-	if ( str == NULL ) {
-
-		*J_FRVAL = JSVAL_VOID;
-		return JS_TRUE;
-	}
-	JSString *jsstr = JS_NewStringCopyZ(cx, str);
-	J_S_ASSERT_ALLOC( jsstr );
-	*J_FRVAL = STRING_TO_JSVAL( jsstr );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $BOOL $INAME( pname )
-  $H arguments
-   $ARG ALenum pname
-  $H return value
-   value of a selected parameter.
-  $H OpenAL API
-   alGetBooleanv
-**/
-DEFINE_FUNCTION_FAST( GetBoolean ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-	ALboolean params;
-	alGetBooleanv(JSVAL_TO_INT(J_FARG(1)), &params);
-	*J_FRVAL = BOOLEAN_TO_JSVAL(params);
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-/**doc
- * $INT | $ARRAY $INAME( pname [, count] )
-  $H arguments
-   $ARG ALenum pname
-   $ARG integer count: is the number of expected values. If _count_ is defined, the function will returns an array of values, else it returns a single value.
-  $H return value
-   value or values of a selected parameter.
-  $H OpenAL API
-   alGetIntegerv
-**/
-DEFINE_FUNCTION_FAST( GetInteger ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-
-	ALint params[16];
-	alGetIntegerv(JSVAL_TO_INT( J_FARG(1) ), params);
-
-	if ( J_FARG_ISDEF(2) ) {
-
-		J_S_ASSERT_INT( J_FARG(2) );
-		int count = JSVAL_TO_INT( J_FARG(2) );
-		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
-		J_S_ASSERT_ALLOC(arrayObj);
-		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
-		jsval tmpValue;
-		while (count--) {
-
-			tmpValue = INT_TO_JSVAL( params[count] );
-			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
-		}
-	} else {
-
-		*J_FRVAL = INT_TO_JSVAL( params[0] );
-	}
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $REAL | $ARRAY $INAME( pname [, count] )
-  $H arguments
-   $ARG ALenum pname
-   $ARG integer count: is the number of expected values. If _count_ is defined, the function will returns an array of values, else a single value.
-  $H return value
-   single value or Array of values of the selected parameter.
-  $H OpenAL API
-   alGetDoublev
-**/
-DEFINE_FUNCTION_FAST( GetDouble ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-
-	ALdouble params[16];
-	alGetDoublev(JSVAL_TO_INT(J_FARG(1)), params);
-
-	if ( J_FARG_ISDEF(2) ) {
-
-		J_S_ASSERT_INT( J_FARG(2) );
-		int count = JSVAL_TO_INT( J_FARG(2) );
-		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
-		J_S_ASSERT_ALLOC(arrayObj);
-		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
-		jsval tmpValue;
-		while (count--) {
-
-			J_CHK( JS_NewDoubleValue(cx, params[count], &tmpValue) );
-			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
-		}
-	} else {
-
-		J_CHK( JS_NewDoubleValue(cx, params[0], J_FRVAL) );
-	}
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( pname, params )
-  $H arguments
-   $ARG ALenum pname:
-   $ARG Array params:
-  $H OpenAL API
-   alListeneri, alListenerf, alListenerfv
-**/
-DEFINE_FUNCTION_FAST( Listener ) {
-
-	J_S_ASSERT_ARG_MIN(2);
-	J_S_ASSERT_INT(J_FARG(1));
-
-	*J_FRVAL = JSVAL_VOID;
-	if ( JSVAL_IS_INT(J_FARG(2)) ) {
-
-		alListeneri( JSVAL_TO_INT( J_FARG(1) ), JSVAL_TO_INT( J_FARG(2) ) );
-		return JS_TRUE;
-	}
-	if ( JSVAL_IS_DOUBLE(J_FARG(2)) ) {
-
-		jsdouble param;
-		J_CHK( JS_ValueToNumber(cx, J_FARG(2), &param) );
-		alListenerf( JSVAL_TO_INT( J_FARG(1) ), param );
-		return JS_TRUE;
-	}
-	if ( JsvalIsArray(cx, J_FARG(2)) ) {
-
-		ALfloat params[16];
-		size_t length;
-//		J_JSVAL_TO_REAL_VECTOR( J_FARG(2), params, length );
-		J_CHK( JsvalToFloatVector(cx, J_FARG(2), params, 16, &length) );
-		alListenerfv( JSVAL_TO_INT(J_FARG(1)), params );
-		return JS_TRUE;
-	}
-
-	J_REPORT_ERROR("Invalid argument.");
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $REAL | $ARRAY $INAME( source, pname [, count] )
-  $H arguments
-   $ARG integer source:
-   $ARG ALenum pname:
-   $ARG integer count: is the number of expected values. If _count_ is defined, the function will returns an array of values, else a single value.
-  $H return value
-   single value or Array of values of the selected parameter.
-  $H OpenAL API
-   alGetListenerfv
-**/
-DEFINE_FUNCTION_FAST( GetListenerReal ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-
-	ALfloat params[16];
-	alGetListenerfv(JSVAL_TO_INT(J_FARG(1)), params);
-
-	if ( J_FARG_ISDEF(2) ) {
-
-		J_S_ASSERT_INT( J_FARG(2) );
-		int count = JSVAL_TO_INT( J_FARG(2) );
-		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
-		J_S_ASSERT_ALLOC(arrayObj);
-		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
-		jsval tmpValue;
-		while (count--) {
-
-			J_CHK( JS_NewDoubleValue(cx, params[count], &tmpValue) );
-			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
-		}
-	} else {
-
-		J_CHK( JS_NewDoubleValue(cx, params[0], J_FRVAL) );
-	}
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-/**doc
- * $INT $INAME()
-  $H OpenAL API
-   alSourcei, alSourcef, alSourcefv
-**/
-DEFINE_FUNCTION_FAST( GenSource ) {
-
-	ALuint sourceID; // The OpenAL sound source
-	alGenSources(1, &sourceID);
-	J_CHK( UIntToJsval(cx, sourceID, J_FRVAL) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( source, pname, params )
-  $H arguments
-   $ARG integer source:
-   $ARG ALenum pname:
-   $ARG Array params:
-  $H OpenAL API
-   alSourcei, alSourcef, alSourcefv
-**/
-DEFINE_FUNCTION_FAST( Source ) {
-
-	J_S_ASSERT_ARG_MIN(3);
-	J_S_ASSERT_NUMBER(J_FARG(1));
-	J_S_ASSERT_INT(J_FARG(2));
-
-	ALuint sid;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
-
-	*J_FRVAL = JSVAL_VOID;
-	if ( JSVAL_IS_INT(J_FARG(3)) ) {
-
-		alSourcei( sid, JSVAL_TO_INT( J_FARG(2) ), JSVAL_TO_INT( J_FARG(3) ) );
-		return JS_TRUE;
-	}
-	if ( JSVAL_IS_DOUBLE(J_FARG(3)) ) {
-
-		jsdouble param;
-		J_CHK( JS_ValueToNumber(cx, J_FARG(3), &param) );
-		alSourcef( sid, JSVAL_TO_INT( J_FARG(2) ), param );
-		return JS_TRUE;
-	}
-	if ( JsvalIsArray(cx, J_FARG(3)) ) {
-
-		ALfloat params[16];
-		size_t length;
-		J_CHK( JsvalToFloatVector(cx, J_FARG(3), params, COUNTOF(params), &length ) );
-		alSourcefv( sid, JSVAL_TO_INT(J_FARG(2)), params );
-		return JS_TRUE;
-	}
-	J_REPORT_ERROR("Invalid argument.");
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $REAL | $ARRAY $INAME( source, pname [, count] )
-  $H arguments
-   $ARG integer source:
-   $ARG ALenum pname:
-   $ARG integer count: is the number of expected values. If _count_ is defined, the function will returns an array of values, else a single value.
-  $H return value
-   single value or Array of values of the selected parameter.
-  $H OpenAL API
-   alGetSourcef
-**/
-DEFINE_FUNCTION_FAST( GetSourceReal ) {
-
-	J_S_ASSERT_ARG_MIN(2);
-	J_S_ASSERT_NUMBER(J_FARG(1));
-	J_S_ASSERT_INT(J_FARG(2));
-
-	ALuint sid;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
-
-	ALfloat params[16];
-
-	ALenum pname = JSVAL_TO_INT(J_FARG(2));
-	alGetSourcef(sid, pname, params);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	if ( J_FARG_ISDEF(3) ) {
-
-		J_S_ASSERT_INT( J_FARG(3) );
-		int count = JSVAL_TO_INT( J_FARG(3) );
-		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
-		J_S_ASSERT_ALLOC(arrayObj);
-		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
-		jsval tmpValue;
-		while (count--) {
-
-			J_CHK( JS_NewDoubleValue(cx, params[count], &tmpValue) );
-			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
-		}
-	} else {
-
-		J_CHK( JS_NewDoubleValue(cx, params[0], J_FRVAL) );
-	}
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $REAL | $ARRAY $INAME( source, pname [, count] )
-**/
-DEFINE_FUNCTION_FAST( GetSourceInteger ) {
-
-	J_S_ASSERT_ARG_MIN(2);
-	J_S_ASSERT_NUMBER(J_FARG(1));
-	J_S_ASSERT_INT(J_FARG(2));
-
-	ALuint sid;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
-
-	ALint params[16];
-
-	ALenum pname = JSVAL_TO_INT(J_FARG(2));
-	alGetSourcei(sid, pname, params);
-
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	if ( J_FARG_ISDEF(3) ) {
-
-		J_S_ASSERT_INT( J_FARG(3) );
-		int count = JSVAL_TO_INT( J_FARG(3) );
-		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
-		J_S_ASSERT_ALLOC(arrayObj);
-		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
-		jsval tmpValue;
-		while (count--) {
-
-			J_CHK( IntToJsval(cx, params[count], &tmpValue) );
-			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
-		}
-	} else {
-
-		J_CHK( JS_NewDoubleValue(cx, params[0], J_FRVAL) );
-	}
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-/**doc
- * $VOID $INAME( source )
-  $H arguments
-   $ARG integer source: the source id.
-  $H OpenAL API
-   alDeleteBuffers
-**/
-DEFINE_FUNCTION_FAST( DeleteSource ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_NUMBER(J_FARG(1));
-	ALuint sid;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
-	alDeleteSources(1, &sid);
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( source, buffer | bufferArray )
-  $H arguments
-   $ARG integer source: the source id.
-   $ARG integer buffer: the buffer id.
-   $ARG Array bufferArray: an Array of buffer id.
-  $H OpenAL API
-   alDeleteBuffers
-**/
-DEFINE_FUNCTION_FAST( SourceQueueBuffers ) {
-
-	J_S_ASSERT_ARG_MIN(2);
-	J_S_ASSERT_NUMBER(J_FARG(1));
-	ALuint sid;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
-
-	if ( JSVAL_IS_INT(J_FARG(2)) ) {
-
-		ALuint buffer;
-		J_CHK( JsvalToUInt(cx, J_FARG(2), &buffer) );
-		alSourceQueueBuffers( sid, 1, &buffer );
-		J_CHK( CheckThrowCurrentOalError(cx) );
-		return JS_TRUE;
-	}
-
-	if ( JsvalIsArray(cx, J_FARG(2)) ) {
-
-		ALuint params[1024];
- 		unsigned int length = sizeof(params)/sizeof(*params);
-//		J_JSVAL_TO_INT_VECTOR( J_FARG(2), params, length );
-		J_CHK( JsvalToUIntVector(cx, J_FARG(2), params, sizeof(params)/sizeof(*params), &length) );
-		alSourceQueueBuffers( sid, length, params );
-		J_CHK( CheckThrowCurrentOalError(cx) );
-		return JS_TRUE;
-	}
-
-	J_REPORT_ERROR("Invalid argument.");
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-/**doc
- * $VOID $INAME( source, buffer | bufferArray )
-  $H arguments
-   $ARG integer buffer: the buffer id.
-   $ARG Array bufferArray: an Array of buffer id.
-  $H OpenAL API
-   alDeleteBuffers
-**/
-DEFINE_FUNCTION_FAST( SourceUnqueueBuffers ) {
-
-	J_S_ASSERT_ARG_MIN(2);
-	J_S_ASSERT_NUMBER(J_FARG(1));
-	ALuint sid;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
-
-	if ( JSVAL_IS_INT(J_FARG(2)) ) {
-
-		ALuint buffer;
-		J_CHK( JsvalToUInt(cx, J_FARG(2), &buffer) );
-		alSourceUnqueueBuffers( sid, 1, &buffer );
-		return JS_TRUE;
-	}
-
-	if ( JsvalIsArray(cx, J_FARG(2)) ) {
-
-		ALuint params[1024];
-		unsigned int length;
-
-//		J_JSVAL_TO_INT_VECTOR( J_FARG(2), params, length );
-		J_CHK( JsvalToUIntVector(cx, J_FARG(2), params, sizeof(params)/sizeof(*params), &length) );
-
-		alSourceUnqueueBuffers( sid, length, params );
-		return JS_TRUE;
-	}
-
-	J_REPORT_ERROR("Invalid argument.");
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-/**doc
- * $INT $INAME( soundObject )
-  Creates a new buffer and attach a sound data to it. The data comming from the soundObject is copied into the OpenAL system.
-  $note
-   Buffers containing audio data with more than one channel will be played without 3D spatialization features  these formats are normally used for background music.
-  $H arguments
-   $ARG soundObject sound: a sound object that contains PCM audio data and the following properties: rate, channels and bits.
-**/
-DEFINE_FUNCTION_FAST( Buffer ) {
-
-	J_S_ASSERT_ARG_MIN( 1 );
-	J_S_ASSERT_OBJECT( J_FARG(1) );
-
-	JSObject *blobObj = JSVAL_TO_OBJECT(J_FARG(1));
-
-	int rate, channels, bits;
-	J_CHK( GetPropertyInt(cx, blobObj, "rate", &rate) );
-	J_CHK( GetPropertyInt(cx, blobObj, "channels", &channels) );
-	J_CHK( GetPropertyInt(cx, blobObj, "bits", &bits) );
-
-	const char *buffer;
-	size_t bufferLength;
-	jsval tmp = OBJECT_TO_JSVAL(blobObj);
-	JsvalToStringAndLength(cx, &tmp, &buffer, &bufferLength); // warning: GC on the returned buffer !
-
-	ALuint bufferID; // The OpenAL sound buffer ID
-	alGenBuffers(1, &bufferID);
-
-	ALenum format; // The sound data format
-
-	switch (channels) {
-		case 1:
-			format = bits == 16 ? AL_FORMAT_MONO16 : AL_FORMAT_MONO8;
-			break;
-		case 2:
-			format = bits == 16 ? AL_FORMAT_STEREO16 : AL_FORMAT_STEREO8;
-			break;
-		default:
-			J_REPORT_ERROR("Too may channels");
-	}
-
-	// Upload sound data to buffer
-	alBufferData(bufferID, format, buffer, bufferLength, rate);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( UIntToJsval(cx, bufferID, J_FRVAL) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-/**doc
- * $REAL | $ARRAY $INAME( source, pname [, count] )
-  $H arguments
-   $ARG integer source:
-   $ARG ALenum pname:
-   $ARG integer count: is the number of expected values. If _count_ is defined, the function will returns an array of values, else a single value.
-  $H return value
-   single value or Array of values of the selected parameter.
-  $H OpenAL API
-   alGetBufferfv
-**/
-DEFINE_FUNCTION_FAST( GetBufferReal ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-
-	ALfloat params[16];
-	alGetBufferfv(JSVAL_TO_INT(J_FARG(1)), JSVAL_TO_INT(J_FARG(2)), params);
-
-	if ( J_FARG_ISDEF(2) ) {
-
-		J_S_ASSERT_INT( J_FARG(2) );
-		int count = JSVAL_TO_INT( J_FARG(2) );
-		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
-		J_S_ASSERT_ALLOC(arrayObj);
-		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
-		jsval tmpValue;
-		while (count--) {
-
-			J_CHK( JS_NewDoubleValue(cx, params[count], &tmpValue) );
-			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
-		}
-	} else {
-
-		J_CHK( JS_NewDoubleValue(cx, params[0], J_FRVAL) );
-	}
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $INT | $ARRAY $INAME( source, pname [, count] )
-  $H arguments
-   $ARG integer source:
-   $ARG ALenum pname:
-   $ARG integer count: is the number of expected values. If _count_ is defined, the function will returns an array of values, else a single value.
-  $H return value
-   single value or Array of values of the selected parameter.
-  $H OpenAL API
-   alGetBufferiv
-**/
-DEFINE_FUNCTION_FAST( GetBufferInteger ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-
-	ALint params[16];
-	alGetBufferiv(JSVAL_TO_INT(J_FARG(1)), JSVAL_TO_INT(J_FARG(2)), params);
-
-	if ( J_FARG_ISDEF(2) ) {
-
-		J_S_ASSERT_INT( J_FARG(2) );
-		int count = JSVAL_TO_INT( J_FARG(2) );
-		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
-		J_S_ASSERT_ALLOC(arrayObj);
-		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
-		jsval tmpValue;
-		while (count--) {
-
-			J_CHK( JS_NewDoubleValue(cx, params[count], &tmpValue) );
-			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
-		}
-	} else {
-
-		J_CHK( JS_NewDoubleValue(cx, params[0], J_FRVAL) );
-	}
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-
-
-/**doc
- * $VOID $INAME( buffer )
-  $H arguments
-   $ARG integer buffer: the buffer id.
-  $H note
-   Buffers that have been unqueued from all sources are UNUSED. Buffers that are UNUSED can be deleted, or changed by alBufferData commands.
-  $H OpenAL API
-   alDeleteBuffers
-**/
-DEFINE_FUNCTION_FAST( DeleteBuffer ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_NUMBER(J_FARG(1));
-	ALuint bufferId;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &bufferId ) );
-//	alBufferData(bufferId, 0, NULL, 0, 0);
-	alDeleteBuffers(1, &bufferId);
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( source )
-  Plays the given source.
-  $H arguments
-   $ARG integer source: the ID of the source to play.
-**/
-DEFINE_FUNCTION_FAST( PlaySource ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_NUMBER(J_FARG(1));
-	ALuint sid;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
-	alSourcePlay(sid);
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( source )
-  Stop the given source.
-  $H arguments
-   $ARG integer source: the ID of the source to play.
-**/
-DEFINE_FUNCTION_FAST( StopSource ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_NUMBER(J_FARG(1));
-	ALuint sid;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
-	alSourceStop(sid);
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( source )
-  Pause the given source.
-  $H arguments
-   $ARG integer source: the ID of the source to play.
-**/
-DEFINE_FUNCTION_FAST( PauseSource ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_NUMBER(J_FARG(1));
-	ALuint sid;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
-	alSourcePause(sid);
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( source )
-  Rewind the given source. set playback postiton to beginning.
-  $H arguments
-   $ARG integer source: the ID of the source to play.
-**/
-DEFINE_FUNCTION_FAST( RewindSource ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_NUMBER(J_FARG(1));
-	ALuint sid;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
-	alSourceRewind(sid);
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME()
-  $H OpenaL API
-   alGenEffects
-**/
-DEFINE_FUNCTION_FAST( GenEffect ) {
-
-	ALuint eid;
-	alGenEffects(1, &eid);
-	J_CHK( UIntToJsval(cx, eid, J_FRVAL) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-/**doc
- * $VOID $INAME()
-  $H OpenaL API
-   alGenEffects
-**/
-DEFINE_FUNCTION_FAST( DeleteEffect ) {
-
-	ALuint eid;
-	alDeleteEffects(1, &eid);
-	J_CHK( UIntToJsval(cx, eid, J_FRVAL) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-
-/**doc
- * $VOID $INAME( sound ) $DEPRECATED
-  Plays a sound on the default playback device.
-  $H arguments
-   $ARG soundObject sound: sound object to play.
-**/
-DEFINE_FUNCTION_FAST( PlaySound ) {
-
-	J_S_ASSERT_ARG_MIN( 1 );
-	J_S_ASSERT_OBJECT( J_FARG(1) );
-
-	JSObject *blobObj = JSVAL_TO_OBJECT(J_FARG(1));
-
-	int rate, channels, bits;
-	J_CHK( GetPropertyInt(cx, blobObj, "rate", &rate) );
-	J_CHK( GetPropertyInt(cx, blobObj, "channels", &channels) );
-	J_CHK( GetPropertyInt(cx, blobObj, "bits", &bits) );
-
-	const char *buffer;
-	size_t bufferLength;
-	jsval tmp = OBJECT_TO_JSVAL(blobObj);
-	JsvalToStringAndLength(cx, &tmp, &buffer, &bufferLength); // warning: GC on the returned buffer !
-
-	ALint state;                // The state of the sound source
-	ALuint bufferID;            // The OpenAL sound buffer ID
-	ALuint sourceID;            // The OpenAL sound source
-	ALenum format;              // The sound data format
-
-	if (channels == 1)
-		format = bits == 16 ? AL_FORMAT_MONO16 : AL_FORMAT_MONO8;
-	else
-		format = bits == 16 ? AL_FORMAT_STEREO16 : AL_FORMAT_STEREO8;
-
-	// Create sound buffer and source
-	alGenBuffers(1, &bufferID);
-
-  alGenSources(1, &sourceID);
-
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-  // Set the source and listener to the same location
-  alListener3i(AL_POSITION, 0,0,0 );
-
-  alSource3i(sourceID, AL_POSITION, 0,0,0 );
-
-  // Upload sound data to buffer
-  alBufferData(bufferID, format, buffer, bufferLength, rate);
-
-
-  // Attach sound buffer to source
-  alSourcei(sourceID, AL_BUFFER, bufferID);
-
-
-  // This is a busy wait loop but should be good enough for example purpose
-
-  {
-  // get the remaining time to play
-  ALint offset;
-  alGetSourcei(sourceID, AL_SAMPLE_OFFSET, &offset);
-
-  ALint freq, bits, channels, size;
-  alGetBufferi(bufferID, AL_FREQUENCY, &freq);
-  alGetBufferi(bufferID, AL_BITS, &bits);
-  alGetBufferi(bufferID, AL_CHANNELS, &channels);
-  alGetBufferi(bufferID, AL_SIZE, &size);
-
-	size_t totalTime = size / (channels * (bits/8) * freq) * 1000;
-
-	// Finally, play the sound!!!
-	alSourcePlay(sourceID);
-
-	Sleep(totalTime);
-
-	// Query the state of the souce
-	alGetSourcei(sourceID, AL_SOURCE_STATE, &state); // do { } while (state != AL_STOPPED);
-  }
-
-  // Clean up sound buffer and source
-  alDeleteBuffers(1, &bufferID);
-  alDeleteSources(1, &sourceID);
-
-//  *J_FRVAL = JSVAL_VOID;
-
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-CONFIGURE_CLASS
-
-	REVISION(SvnRevToInt("$Revision: 2212 $"))
-	BEGIN_CONST_INTEGER_SPEC
-		CONST_INTEGER( NONE                      ,AL_NONE                       )
-		CONST_INTEGER( FALSE                     ,AL_FALSE                      )
-		CONST_INTEGER( TRUE                      ,AL_TRUE                       )
-		CONST_INTEGER( SOURCE_RELATIVE           ,AL_SOURCE_RELATIVE            )
-		CONST_INTEGER(	CONE_INNER_ANGLE	  		  ,AL_CONE_INNER_ANGLE				)
-		CONST_INTEGER(	CONE_OUTER_ANGLE	  		  ,AL_CONE_OUTER_ANGLE				)
-		CONST_INTEGER(	PITCH					  		  ,AL_PITCH								)
-		CONST_INTEGER(	POSITION				  		  ,AL_POSITION							)
-		CONST_INTEGER(	DIRECTION			  		  ,AL_DIRECTION						)
-		CONST_INTEGER(	VELOCITY				  		  ,AL_VELOCITY							)
-		CONST_INTEGER(	LOOPING				  		  ,AL_LOOPING							)
-		CONST_INTEGER(	BUFFER				  		  ,AL_BUFFER							)
-		CONST_INTEGER(	GAIN					  		  ,AL_GAIN								)
-		CONST_INTEGER(	MIN_GAIN				  		  ,AL_MIN_GAIN							)
-		CONST_INTEGER(	MAX_GAIN				  		  ,AL_MAX_GAIN							)
-		CONST_INTEGER(	ORIENTATION			  		  ,AL_ORIENTATION						)
-		CONST_INTEGER(	SOURCE_STATE		  		  ,AL_SOURCE_STATE					)
-		CONST_INTEGER(	INITIAL				  		  ,AL_INITIAL							)
-		CONST_INTEGER(	PLAYING				  		  ,AL_PLAYING							)
-		CONST_INTEGER(	PAUSED				  		  ,AL_PAUSED							)
-		CONST_INTEGER(	STOPPED				  		  ,AL_STOPPED							)
-		CONST_INTEGER(	BUFFERS_QUEUED		  		  ,AL_BUFFERS_QUEUED					)
-		CONST_INTEGER(	BUFFERS_PROCESSED	  		  ,AL_BUFFERS_PROCESSED				)
-		CONST_INTEGER(	SEC_OFFSET			  		  ,AL_SEC_OFFSET						)
-		CONST_INTEGER(	SAMPLE_OFFSET		  		  ,AL_SAMPLE_OFFSET					)
-		CONST_INTEGER(	BYTE_OFFSET			  		  ,AL_BYTE_OFFSET						)
-		CONST_INTEGER(	SOURCE_TYPE			  		  ,AL_SOURCE_TYPE						)
-		CONST_INTEGER(	STATIC				  		  ,AL_STATIC							)
-		CONST_INTEGER(	STREAMING			  		  ,AL_STREAMING						)
-		CONST_INTEGER(	UNDETERMINED		  		  ,AL_UNDETERMINED					)
-		CONST_INTEGER(	FORMAT_MONO8		  		  ,AL_FORMAT_MONO8					)
-		CONST_INTEGER(	FORMAT_MONO16		  		  ,AL_FORMAT_MONO16					)
-		CONST_INTEGER(	FORMAT_STEREO8		  		  ,AL_FORMAT_STEREO8					)
-		CONST_INTEGER(	FORMAT_STEREO16	  		  ,AL_FORMAT_STEREO16				)
-		CONST_INTEGER(	REFERENCE_DISTANCE  		  ,AL_REFERENCE_DISTANCE			)
-		CONST_INTEGER( ROLLOFF_FACTOR            ,AL_ROLLOFF_FACTOR					)
-		CONST_INTEGER(	CONE_OUTER_GAIN			  ,AL_CONE_OUTER_GAIN				)
-		CONST_INTEGER(	MAX_DISTANCE				  ,AL_MAX_DISTANCE					)
-		CONST_INTEGER(	FREQUENCY					  ,AL_FREQUENCY						)
-		CONST_INTEGER(	BITS							  ,AL_BITS								)
-		CONST_INTEGER(	CHANNELS						  ,AL_CHANNELS							)
-		CONST_INTEGER(	SIZE							  ,AL_SIZE								)
-		CONST_INTEGER(	UNUSED						  ,AL_UNUSED							)
-		CONST_INTEGER(	PENDING						  ,AL_PENDING							)
-		CONST_INTEGER(	PROCESSED					  ,AL_PROCESSED						)
-		CONST_INTEGER(	NO_ERROR						  ,AL_NO_ERROR							)
-		CONST_INTEGER(	INVALID_NAME				  ,AL_INVALID_NAME					)
-		CONST_INTEGER(	INVALID_ENUM				  ,AL_INVALID_ENUM					)
-		CONST_INTEGER(	INVALID_VALUE				  ,AL_INVALID_VALUE					)
-		CONST_INTEGER(	INVALID_OPERATION			  ,AL_INVALID_OPERATION				)
-		CONST_INTEGER(	OUT_OF_MEMORY				  ,AL_OUT_OF_MEMORY					)
-		CONST_INTEGER(	VENDOR						  ,AL_VENDOR							)
-		CONST_INTEGER(	VERSION						  ,AL_VERSION							)
-		CONST_INTEGER(	RENDERER						  ,AL_RENDERER							)
-		CONST_INTEGER(	EXTENSIONS					  ,AL_EXTENSIONS						)
-		CONST_INTEGER(	DOPPLER_FACTOR				  ,AL_DOPPLER_FACTOR             )
-		CONST_INTEGER(	DOPPLER_VELOCITY			  ,AL_DOPPLER_VELOCITY				)
-		CONST_INTEGER(	SPEED_OF_SOUND				  ,AL_SPEED_OF_SOUND					)
-		CONST_INTEGER(	DISTANCE_MODEL				  ,AL_DISTANCE_MODEL					)
-		CONST_INTEGER(	INVERSE_DISTANCE			  ,AL_INVERSE_DISTANCE				)
-		CONST_INTEGER(	INVERSE_DISTANCE_CLAMPED  ,AL_INVERSE_DISTANCE_CLAMPED	)
-		CONST_INTEGER(	LINEAR_DISTANCE			  ,AL_LINEAR_DISTANCE				)
-		CONST_INTEGER(	LINEAR_DISTANCE_CLAMPED	  ,AL_LINEAR_DISTANCE_CLAMPED		)
-		CONST_INTEGER(	EXPONENT_DISTANCE			  ,AL_EXPONENT_DISTANCE				)
-		CONST_INTEGER(	EXPONENT_DISTANCE_CLAMPED ,AL_EXPONENT_DISTANCE_CLAMPED	)
-
-
-		CONST_INTEGER(METERS_PER_UNIT                                , AL_METERS_PER_UNIT                                )
-		CONST_INTEGER(DIRECT_FILTER                                  , AL_DIRECT_FILTER                                  )
-		CONST_INTEGER(AUXILIARY_SEND_FILTER                          , AL_AUXILIARY_SEND_FILTER                          )
-		CONST_INTEGER(AIR_ABSORPTION_FACTOR                          , AL_AIR_ABSORPTION_FACTOR                          )
-		CONST_INTEGER(ROOM_ROLLOFF_FACTOR                            , AL_ROOM_ROLLOFF_FACTOR                            )
-		CONST_INTEGER(CONE_OUTER_GAINHF                              , AL_CONE_OUTER_GAINHF                              )
-		CONST_INTEGER(DIRECT_FILTER_GAINHF_AUTO                      , AL_DIRECT_FILTER_GAINHF_AUTO                      )
-		CONST_INTEGER(AUXILIARY_SEND_FILTER_GAIN_AUTO                , AL_AUXILIARY_SEND_FILTER_GAIN_AUTO                )
-		CONST_INTEGER(AUXILIARY_SEND_FILTER_GAINHF_AUTO              , AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO              )
-		CONST_INTEGER(REVERB_DENSITY                                 , AL_REVERB_DENSITY                                 )
-		CONST_INTEGER(REVERB_DIFFUSION                               , AL_REVERB_DIFFUSION                               )
-		CONST_INTEGER(REVERB_GAIN                                    , AL_REVERB_GAIN                                    )
-		CONST_INTEGER(REVERB_GAINHF                                  , AL_REVERB_GAINHF                                  )
-		CONST_INTEGER(REVERB_DECAY_TIME                              , AL_REVERB_DECAY_TIME                              )
-		CONST_INTEGER(REVERB_DECAY_HFRATIO                           , AL_REVERB_DECAY_HFRATIO                           )
-		CONST_INTEGER(REVERB_REFLECTIONS_GAIN                        , AL_REVERB_REFLECTIONS_GAIN                        )
-		CONST_INTEGER(REVERB_REFLECTIONS_DELAY                       , AL_REVERB_REFLECTIONS_DELAY                       )
-		CONST_INTEGER(REVERB_LATE_REVERB_GAIN                        , AL_REVERB_LATE_REVERB_GAIN                        )
-		CONST_INTEGER(REVERB_LATE_REVERB_DELAY                       , AL_REVERB_LATE_REVERB_DELAY                       )
-		CONST_INTEGER(REVERB_AIR_ABSORPTION_GAINHF                   , AL_REVERB_AIR_ABSORPTION_GAINHF                   )
-		CONST_INTEGER(REVERB_ROOM_ROLLOFF_FACTOR                     , AL_REVERB_ROOM_ROLLOFF_FACTOR                     )
-		CONST_INTEGER(REVERB_DECAY_HFLIMIT                           , AL_REVERB_DECAY_HFLIMIT                           )
-		CONST_INTEGER(CHORUS_WAVEFORM                                , AL_CHORUS_WAVEFORM                                )
-		CONST_INTEGER(CHORUS_PHASE                                   , AL_CHORUS_PHASE                                   )
-		CONST_INTEGER(CHORUS_RATE                                    , AL_CHORUS_RATE                                    )
-		CONST_INTEGER(CHORUS_DEPTH                                   , AL_CHORUS_DEPTH                                   )
-		CONST_INTEGER(CHORUS_FEEDBACK                                , AL_CHORUS_FEEDBACK                                )
-		CONST_INTEGER(CHORUS_DELAY                                   , AL_CHORUS_DELAY                                   )
-		CONST_INTEGER(DISTORTION_EDGE                                , AL_DISTORTION_EDGE                                )
-		CONST_INTEGER(DISTORTION_GAIN                                , AL_DISTORTION_GAIN                                )
-		CONST_INTEGER(DISTORTION_LOWPASS_CUTOFF                      , AL_DISTORTION_LOWPASS_CUTOFF                      )
-		CONST_INTEGER(DISTORTION_EQCENTER                            , AL_DISTORTION_EQCENTER                            )
-		CONST_INTEGER(DISTORTION_EQBANDWIDTH                         , AL_DISTORTION_EQBANDWIDTH                         )
-		CONST_INTEGER(ECHO_DELAY                                     , AL_ECHO_DELAY                                     )
-		CONST_INTEGER(ECHO_LRDELAY                                   , AL_ECHO_LRDELAY                                   )
-		CONST_INTEGER(ECHO_DAMPING                                   , AL_ECHO_DAMPING                                   )
-		CONST_INTEGER(ECHO_FEEDBACK                                  , AL_ECHO_FEEDBACK                                  )
-		CONST_INTEGER(ECHO_SPREAD                                    , AL_ECHO_SPREAD                                    )
-		CONST_INTEGER(FLANGER_WAVEFORM                               , AL_FLANGER_WAVEFORM                               )
-		CONST_INTEGER(FLANGER_PHASE                                  , AL_FLANGER_PHASE                                  )
-		CONST_INTEGER(FLANGER_RATE                                   , AL_FLANGER_RATE                                   )
-		CONST_INTEGER(FLANGER_DEPTH                                  , AL_FLANGER_DEPTH                                  )
-		CONST_INTEGER(FLANGER_FEEDBACK                               , AL_FLANGER_FEEDBACK                               )
-		CONST_INTEGER(FLANGER_DELAY                                  , AL_FLANGER_DELAY                                  )
-		CONST_INTEGER(FREQUENCY_SHIFTER_FREQUENCY                    , AL_FREQUENCY_SHIFTER_FREQUENCY                    )
-		CONST_INTEGER(FREQUENCY_SHIFTER_LEFT_DIRECTION               , AL_FREQUENCY_SHIFTER_LEFT_DIRECTION               )
-		CONST_INTEGER(FREQUENCY_SHIFTER_RIGHT_DIRECTION              , AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION              )
-		CONST_INTEGER(VOCAL_MORPHER_PHONEMEA                         , AL_VOCAL_MORPHER_PHONEMEA                         )
-		CONST_INTEGER(VOCAL_MORPHER_PHONEMEA_COARSE_TUNING           , AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING           )
-		CONST_INTEGER(VOCAL_MORPHER_PHONEMEB                         , AL_VOCAL_MORPHER_PHONEMEB                         )
-		CONST_INTEGER(VOCAL_MORPHER_PHONEMEB_COARSE_TUNING           , AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING           )
-		CONST_INTEGER(VOCAL_MORPHER_WAVEFORM                         , AL_VOCAL_MORPHER_WAVEFORM                         )
-		CONST_INTEGER(VOCAL_MORPHER_RATE                             , AL_VOCAL_MORPHER_RATE                             )
-		CONST_INTEGER(PITCH_SHIFTER_COARSE_TUNE                      , AL_PITCH_SHIFTER_COARSE_TUNE                      )
-		CONST_INTEGER(PITCH_SHIFTER_FINE_TUNE                        , AL_PITCH_SHIFTER_FINE_TUNE                        )
-		CONST_INTEGER(RING_MODULATOR_FREQUENCY                       , AL_RING_MODULATOR_FREQUENCY                       )
-		CONST_INTEGER(RING_MODULATOR_HIGHPASS_CUTOFF                 , AL_RING_MODULATOR_HIGHPASS_CUTOFF                 )
-		CONST_INTEGER(RING_MODULATOR_WAVEFORM                        , AL_RING_MODULATOR_WAVEFORM                        )
-		CONST_INTEGER(AUTOWAH_ATTACK_TIME                            , AL_AUTOWAH_ATTACK_TIME                            )
-		CONST_INTEGER(AUTOWAH_RELEASE_TIME                           , AL_AUTOWAH_RELEASE_TIME                           )
-		CONST_INTEGER(AUTOWAH_RESONANCE                              , AL_AUTOWAH_RESONANCE                              )
-		CONST_INTEGER(AUTOWAH_PEAK_GAIN                              , AL_AUTOWAH_PEAK_GAIN                              )
-		CONST_INTEGER(COMPRESSOR_ONOFF                               , AL_COMPRESSOR_ONOFF                               )
-		CONST_INTEGER(EQUALIZER_LOW_GAIN                             , AL_EQUALIZER_LOW_GAIN                             )
-		CONST_INTEGER(EQUALIZER_LOW_CUTOFF                           , AL_EQUALIZER_LOW_CUTOFF                           )
-		CONST_INTEGER(EQUALIZER_MID1_GAIN                            , AL_EQUALIZER_MID1_GAIN                            )
-		CONST_INTEGER(EQUALIZER_MID1_CENTER                          , AL_EQUALIZER_MID1_CENTER                          )
-		CONST_INTEGER(EQUALIZER_MID1_WIDTH                           , AL_EQUALIZER_MID1_WIDTH                           )
-		CONST_INTEGER(EQUALIZER_MID2_GAIN                            , AL_EQUALIZER_MID2_GAIN                            )
-		CONST_INTEGER(EQUALIZER_MID2_CENTER                          , AL_EQUALIZER_MID2_CENTER                          )
-		CONST_INTEGER(EQUALIZER_MID2_WIDTH                           , AL_EQUALIZER_MID2_WIDTH                           )
-		CONST_INTEGER(EQUALIZER_HIGH_GAIN                            , AL_EQUALIZER_HIGH_GAIN                            )
-		CONST_INTEGER(EQUALIZER_HIGH_CUTOFF                          , AL_EQUALIZER_HIGH_CUTOFF                          )
-		CONST_INTEGER(EFFECT_FIRST_PARAMETER                         , AL_EFFECT_FIRST_PARAMETER                         )
-		CONST_INTEGER(EFFECT_LAST_PARAMETER                          , AL_EFFECT_LAST_PARAMETER                          )
-		CONST_INTEGER(EFFECT_TYPE                                    , AL_EFFECT_TYPE                                    )
-		CONST_INTEGER(EFFECT_NULL                                    , AL_EFFECT_NULL                                    )
-		CONST_INTEGER(EFFECT_REVERB                                  , AL_EFFECT_REVERB                                  )
-		CONST_INTEGER(EFFECT_CHORUS                                  , AL_EFFECT_CHORUS                                  )
-		CONST_INTEGER(EFFECT_DISTORTION                              , AL_EFFECT_DISTORTION                              )
-		CONST_INTEGER(EFFECT_ECHO                                    , AL_EFFECT_ECHO                                    )
-		CONST_INTEGER(EFFECT_FLANGER                                 , AL_EFFECT_FLANGER                                 )
-		CONST_INTEGER(EFFECT_FREQUENCY_SHIFTER                       , AL_EFFECT_FREQUENCY_SHIFTER                       )
-		CONST_INTEGER(EFFECT_VOCAL_MORPHER                           , AL_EFFECT_VOCAL_MORPHER                           )
-		CONST_INTEGER(EFFECT_PITCH_SHIFTER                           , AL_EFFECT_PITCH_SHIFTER                           )
-		CONST_INTEGER(EFFECT_RING_MODULATOR                          , AL_EFFECT_RING_MODULATOR                          )
-		CONST_INTEGER(EFFECT_AUTOWAH                                 , AL_EFFECT_AUTOWAH                                 )
-		CONST_INTEGER(EFFECT_COMPRESSOR                              , AL_EFFECT_COMPRESSOR                              )
-		CONST_INTEGER(EFFECT_EQUALIZER                               , AL_EFFECT_EQUALIZER                               )
-		CONST_INTEGER(EFFECTSLOT_EFFECT                              , AL_EFFECTSLOT_EFFECT                              )
-		CONST_INTEGER(EFFECTSLOT_GAIN                                , AL_EFFECTSLOT_GAIN                                )
-		CONST_INTEGER(EFFECTSLOT_AUXILIARY_SEND_AUTO                 , AL_EFFECTSLOT_AUXILIARY_SEND_AUTO                 )
-		CONST_INTEGER(EFFECTSLOT_NULL                                , AL_EFFECTSLOT_NULL                                )
-		CONST_INTEGER(LOWPASS_GAIN                                   , AL_LOWPASS_GAIN                                   )
-		CONST_INTEGER(LOWPASS_GAINHF                                 , AL_LOWPASS_GAINHF                                 )
-		CONST_INTEGER(HIGHPASS_GAIN                                  , AL_HIGHPASS_GAIN                                  )
-		CONST_INTEGER(HIGHPASS_GAINLF                                , AL_HIGHPASS_GAINLF                                )
-		CONST_INTEGER(BANDPASS_GAIN                                  , AL_BANDPASS_GAIN                                  )
-		CONST_INTEGER(BANDPASS_GAINLF                                , AL_BANDPASS_GAINLF                                )
-		CONST_INTEGER(BANDPASS_GAINHF                                , AL_BANDPASS_GAINHF                                )
-		CONST_INTEGER(FILTER_FIRST_PARAMETER                         , AL_FILTER_FIRST_PARAMETER                         )
-		CONST_INTEGER(FILTER_LAST_PARAMETER                          , AL_FILTER_LAST_PARAMETER                          )
-		CONST_INTEGER(FILTER_TYPE                                    , AL_FILTER_TYPE                                    )
-		CONST_INTEGER(FILTER_NULL                                    , AL_FILTER_NULL                                    )
-		CONST_INTEGER(FILTER_LOWPASS                                 , AL_FILTER_LOWPASS                                 )
-		CONST_INTEGER(FILTER_HIGHPASS                                , AL_FILTER_HIGHPASS                                )
-		CONST_INTEGER(FILTER_BANDPASS                                , AL_FILTER_BANDPASS                                )
-
-// EFX
-		CONST_INTEGER(CHORUS_WAVEFORM_SINUSOID                       , AL_CHORUS_WAVEFORM_SINUSOID                   )
-		CONST_INTEGER(CHORUS_WAVEFORM_TRIANGLE                       , AL_CHORUS_WAVEFORM_TRIANGLE                   )
-
-	END_CONST_INTEGER_SPEC
-
-	BEGIN_STATIC_FUNCTION_SPEC
-
-		FUNCTION_FAST_ARGC( Open, 1 )
-		FUNCTION_FAST_ARGC( Close, 0 )
-
-		FUNCTION_FAST_ARGC( DopplerFactor, 1 )
-		FUNCTION_FAST_ARGC( DopplerVelocity, 1 )
-		FUNCTION_FAST_ARGC( SpeedOfSound, 1 )
-		FUNCTION_FAST_ARGC( DistanceModel, 1 )
-
-		FUNCTION_FAST_ARGC( Enable, 1 )
-		FUNCTION_FAST_ARGC( Disable, 1 )
-		FUNCTION_FAST_ARGC( IsEnabled, 1 )
-		FUNCTION_FAST_ARGC( GetString, 1 )
-		FUNCTION_FAST_ARGC( GetBoolean, 1 )
-		FUNCTION_FAST_ARGC( GetInteger, 2 )
-		FUNCTION_FAST_ARGC( GetDouble, 2 )
-
-		FUNCTION_FAST_ARGC( Listener, 2 )
-		FUNCTION_FAST_ARGC( GetListenerReal, 3 )
-		FUNCTION_FAST_ARGC( GenSource, 0 )
-		FUNCTION_FAST_ARGC( Source, 3 )
-		FUNCTION_FAST_ARGC( GetSourceInteger, 3 )
-		FUNCTION_FAST_ARGC( GetSourceReal, 3 )
-		FUNCTION_FAST_ARGC( DeleteSource, 1 )
-		FUNCTION_FAST_ARGC( SourceQueueBuffers, 2 )
-		FUNCTION_FAST_ARGC( SourceUnqueueBuffers, 2 )
-		FUNCTION_FAST_ARGC( Buffer, 1 )
-		FUNCTION_FAST_ARGC( GetBufferReal, 3 )
-		FUNCTION_FAST_ARGC( GetBufferInteger, 3 )
-		FUNCTION_FAST_ARGC( DeleteBuffer, 1 )
-		FUNCTION_FAST_ARGC( PlaySource, 1 )
-		FUNCTION_FAST_ARGC( StopSource, 1 )
-		FUNCTION_FAST_ARGC( PauseSource, 1 )
-		FUNCTION_FAST_ARGC( RewindSource, 1 )
-
-		FUNCTION_FAST_ARGC( PlaySound, 1 ) // non-openal API
-
-		// OpenAL extensions
-		FUNCTION_FAST_ARGC( GenEffect, 0 )
-
-
-	END_STATIC_FUNCTION_SPEC
-
-	BEGIN_STATIC_PROPERTY_SPEC
-		PROPERTY_READ(hasEfx)
-		PROPERTY_READ(maxAuxiliarySends)
-	END_STATIC_PROPERTY_SPEC
-
-END_CLASS
-
-/**doc
-=== Examples ===
-$H example 1
- A simple ogg player
- {{{
- LoadModule('jsio');
- LoadModule('jsstd');
- LoadModule('jssound');
- LoadModule('jsaudio');
-
- var decoder = new OggVorbisDecoder(new File('41_30secOgg-q0.ogg').Open(File.RDONLY));
- var sourceId = Oal.GenSource();
-
- var pcm;
- while ( pcm = decoder.Read(10000) ) {
-
-  var bufferId = Oal.Buffer(pcm);
-  Oal.SourceQueueBuffers(sourceId, bufferId);
-  if ( Oal.GetSourceInteger(sourceId, Oal.SOURCE_STATE) == Oal.INITIAL )
-   Oal.PlaySource(sourceId);
- };
-
- var totalTime = decoder.frames/decoder.rate;
- var currentTimeOffset = Oal.GetSourceReal(sourceId, Oal.SEC_OFFSET);
- Sleep( 1000 * (totalTime - currentTimeOffset) );
- }}}
-**/
-
-
-/* ogg test files:
-	http://xiph.org/vorbis/listen.html
-*/
-
-/* Introduction to EFX
-	http://connect.creativelabs.com/developer/Wiki/Introduction%20to%20EFX.aspx
-*/
-
-
-/* full List of EFX functions
-
-	alGenEffects = (LPALGENEFFECTS)alGetProcAddress("alGenEffects");
-	alDeleteEffects = (LPALDELETEEFFECTS )alGetProcAddress("alDeleteEffects");
-	alIsEffect = (LPALISEFFECT )alGetProcAddress("alIsEffect");
-	alEffecti = (LPALEFFECTI)alGetProcAddress("alEffecti");
-	alEffectiv = (LPALEFFECTIV)alGetProcAddress("alEffectiv");
-	alEffectf = (LPALEFFECTF)alGetProcAddress("alEffectf");
-	alEffectfv = (LPALEFFECTFV)alGetProcAddress("alEffectfv");
-	alGetEffecti = (LPALGETEFFECTI)alGetProcAddress("alGetEffecti");
-	alGetEffectiv = (LPALGETEFFECTIV)alGetProcAddress("alGetEffectiv");
-	alGetEffectf = (LPALGETEFFECTF)alGetProcAddress("alGetEffectf");
-	alGetEffectfv = (LPALGETEFFECTFV)alGetProcAddress("alGetEffectfv");
-	alGenFilters = (LPALGENFILTERS)alGetProcAddress("alGenFilters");
-	alDeleteFilters = (LPALDELETEFILTERS)alGetProcAddress("alDeleteFilters");
-	alIsFilter = (LPALISFILTER)alGetProcAddress("alIsFilter");
-	alFilteri = (LPALFILTERI)alGetProcAddress("alFilteri");
-	alFilteriv = (LPALFILTERIV)alGetProcAddress("alFilteriv");
-	alFilterf = (LPALFILTERF)alGetProcAddress("alFilterf");
-	alFilterfv = (LPALFILTERFV)alGetProcAddress("alFilterfv");
-	alGetFilteri = (LPALGETFILTERI )alGetProcAddress("alGetFilteri");
-	alGetFilteriv = (LPALGETFILTERIV )alGetProcAddress("alGetFilteriv");
-	alGetFilterf = (LPALGETFILTERF )alGetProcAddress("alGetFilterf");
-	alGetFilterfv = (LPALGETFILTERFV )alGetProcAddress("alGetFilterfv");
-	alGenAuxiliaryEffectSlots = (LPALGENAUXILIARYEFFECTSLOTS)alGetProcAddress("alGenAuxiliaryEffectSlots");
-	alDeleteAuxiliaryEffectSlots = (LPALDELETEAUXILIARYEFFECTSLOTS)alGetProcAddress("alDeleteAuxiliaryEffectSlots");
-	alIsAuxiliaryEffectSlot = (LPALISAUXILIARYEFFECTSLOT)alGetProcAddress("alIsAuxiliaryEffectSlot");
-	alAuxiliaryEffectSloti = (LPALAUXILIARYEFFECTSLOTI)alGetProcAddress("alAuxiliaryEffectSloti");
-	alAuxiliaryEffectSlotiv = (LPALAUXILIARYEFFECTSLOTIV)alGetProcAddress("alAuxiliaryEffectSlotiv");
-	alAuxiliaryEffectSlotf = (LPALAUXILIARYEFFECTSLOTF)alGetProcAddress("alAuxiliaryEffectSlotf");
-	alAuxiliaryEffectSlotfv = (LPALAUXILIARYEFFECTSLOTFV)alGetProcAddress("alAuxiliaryEffectSlotfv");
-	alGetAuxiliaryEffectSloti = (LPALGETAUXILIARYEFFECTSLOTI)alGetProcAddress("alGetAuxiliaryEffectSloti");
-	alGetAuxiliaryEffectSlotiv = (LPALGETAUXILIARYEFFECTSLOTIV)alGetProcAddress("alGetAuxiliaryEffectSlotiv");
-	alGetAuxiliaryEffectSlotf = (LPALGETAUXILIARYEFFECTSLOTF)alGetProcAddress("alGetAuxiliaryEffectSlotf");
-	alGetAuxiliaryEffectSlotfv = (LPALGETAUXILIARYEFFECTSLOTFV)alGetProcAddress("alGetAuxiliaryEffectSlotfv");
-
-*/
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+#include "stdafx.h"
+#include "error.h"
+#include "oalefxapi.h"
+
+
+/**doc
+$CLASS_HEADER
+ $SVN_REVISION $Revision: 2212 $
+**/
+BEGIN_CLASS( Oal )
+
+/**doc
+=== Static functions ===
+**/
+
+
+/**doc
+ * $VOID $INAME( [ deviceName ] )
+  Open an audio device.
+  $H arguments
+   $ARG string deviceName:  "Generic Hardware", "Generic Software", "DirectSound3D" (for legacy), "DirectSound", "MMSYSTEM"
+    If no device name is specified, we will attempt to use DS3D.
+  $H OpenAL API
+   alcOpenDevice, alcCreateContext, alcMakeContextCurrent
+**/
+DEFINE_FUNCTION_FAST( Open ) {
+  ALCcontext *context;
+  ALCdevice *device;
+	// Initialize the OpenAL library (cf. alutInit)
+
+	J_S_ASSERT( alcGetCurrentContext() == NULL, "OpenAL already open." );
+
+	const char *deviceName;
+	if ( J_FARG_ISDEF(1) )
+		J_CHK( JsvalToString(cx, &J_FARG(1), &deviceName) );
+	else
+		deviceName = NULL;
+
+	// Doc: alcOpenDevice() open the Device specified. Current options are:
+	//   "Generic Hardware"
+	//   "Generic Software"
+	//   "DirectSound3D" (for legacy)
+	//   "DirectSound"
+	//   "MMSYSTEM"
+	// If no device name is specified, we will attempt to use DS3D.
+	device = alcOpenDevice (deviceName);
+	if (device == NULL)
+		J_REPORT_ERROR("ALUT_ERROR_OPEN_DEVICE");
+//	ALint attribs[4] = { 0 };
+//	attribs[0] = ALC_MAX_AUXILIARY_SENDS;
+//	attribs[1] = 4;
+
+	context = alcCreateContext (device, NULL);
+	if (context == NULL) {
+		alcCloseDevice (device);
+		J_REPORT_ERROR("ALUT_ERROR_CREATE_CONTEXT");
+	}
+	if (!alcMakeContextCurrent(context)) {
+
+		alcDestroyContext (context);
+		alcCloseDevice (device);
+		J_REPORT_ERROR("ALUT_ERROR_MAKE_CONTEXT_CURRENT");
+	}
+#ifdef _WIN32
+	InitEfxApi();
+#endif
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME()
+  Close the current audio device.
+  $H OpenAL API
+   alcGetCurrentContext, alcMakeContextCurrent, alcGetContextsDevice, alcDestroyContext, alcCloseDevice
+**/
+DEFINE_FUNCTION_FAST( Close ) {
+#ifdef _WIN32
+	ResetEfxApi();
+#endif
+	// cf. alutExit
+	ALCcontext *context = alcGetCurrentContext();
+	J_S_ASSERT( context != NULL, "OpenAL already closed." );
+	ALCdevice *device;
+	if (!alcMakeContextCurrent (NULL))
+		J_REPORT_ERROR("ALUT_ERROR_MAKE_CONTEXT_CURRENT");
+	device = alcGetContextsDevice (context);
+	if (alcGetError (device) != ALC_NO_ERROR )
+		J_REPORT_ERROR("ALUT_ERROR_ALC_ERROR_ON_ENTRY");
+	alcDestroyContext (context);
+	if (alcGetError (device) != ALC_NO_ERROR)
+		J_REPORT_ERROR("ALUT_ERROR_DESTROY_CONTEXT");
+	if (!alcMakeContextCurrent(NULL))
+		J_REPORT_ERROR("ALUT_ERROR_MAKE_CONTEXT_CURRENT");
+	if (!alcCloseDevice (device))
+		J_REPORT_ERROR("ALUT_ERROR_CLOSE_DEVICE");
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+/**doc
+ * $BOOL $INAME $READONLY
+  is true if EFX extension is available.
+**/
+#ifdef _WIN32
+DEFINE_PROPERTY( hasEfx ) {
+
+	ALCcontext *pContext = alcGetCurrentContext();
+	ALCdevice *pDevice = alcGetContextsDevice(pContext);
+	*vp = alcIsExtensionPresent(pDevice, (ALCchar*)ALC_EXT_EFX_NAME) ? JSVAL_TRUE : JSVAL_FALSE;
+	return JS_TRUE;
+}
+#endif
+
+/**doc
+ * $BOOL $INAME $READONLY
+  is the number of aux sends per source.
+**/
+#ifdef _WIN32
+DEFINE_PROPERTY( maxAuxiliarySends ) {
+
+	ALCcontext *pContext = alcGetCurrentContext();
+	ALCdevice *pDevice = alcGetContextsDevice(pContext);
+	ALCint numSends;
+	alcGetIntegerv(pDevice, ALC_MAX_AUXILIARY_SENDS, 1, &numSends);
+	J_CHK( IntToJsval(cx, numSends, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+#endif
+
+/**doc
+ * $VOID $INAME( value )
+  Selects the OpenAL Doppler factor value. The default Doppler factor value is 1.0 .
+  $H arguments
+   $ARG Number value
+  $H OpenAL API
+   alDopplerFactor
+**/
+DEFINE_FUNCTION_FAST( DopplerFactor ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+	float value;
+	J_CHK( JsvalToFloat(cx, J_FARG(1), &value) );
+	alDopplerFactor( value );
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( value )
+  Selects the OpenAL Doppler velocity value. The default Doppler velocity value is 343.3 .
+  $H arguments
+   $ARG Number value
+  $H OpenAL API
+   alDopplerVelocity
+**/
+DEFINE_FUNCTION_FAST( DopplerVelocity ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+	float value;
+	J_CHK( JsvalToFloat(cx, J_FARG(1), &value) );
+	alDopplerVelocity( value );
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( value )
+  Selects the OpenAL Speed of Sound value.
+  $H arguments
+   $ARG Number value
+  $H OpenAL API
+   alSpeedOfSound
+**/
+DEFINE_FUNCTION_FAST( SpeedOfSound ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+	float value;
+	J_CHK( JsvalToFloat(cx, J_FARG(1), &value) );
+	alSpeedOfSound( value );
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( distanceModel )
+  $H arguments
+   $ARG Integer value
+  $H OpenAL API
+   alDistanceModel
+**/
+DEFINE_FUNCTION_FAST( DistanceModel ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+	unsigned int distanceModel;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &distanceModel) );
+	alDistanceModel( distanceModel );
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( cap )
+  $H arguments
+   $ARG GLenum cap
+  $H OpenAL API
+   alEnable
+**/
+DEFINE_FUNCTION_FAST( Enable ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+	alEnable( JSVAL_TO_INT(J_FARG(1)) );
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( cap )
+  $H arguments
+   $ARG GLenum cap
+  $H OpenAL API
+   alDisable
+**/
+DEFINE_FUNCTION_FAST( Disable ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+	alDisable( JSVAL_TO_INT(J_FARG(1)) );
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( cap )
+  $H arguments
+   $ARG GLenum cap
+  $H OpenAL API
+   alIsEnabled
+**/
+DEFINE_FUNCTION_FAST( IsEnabled ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+	*J_FRVAL = BOOLEAN_TO_JSVAL( alIsEnabled( JSVAL_TO_INT(J_FARG(1)) ) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $BOOL $INAME( pname )
+  $H arguments
+   $ARG GLenum pname
+  $H return value
+   value of a selected parameter.
+  $H OpenAL API
+   alGetString
+**/
+DEFINE_FUNCTION_FAST( GetString ) {
+  JSString *jsstr;
+  const ALchar* str;
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+  str = alGetString(JSVAL_TO_INT(J_FARG(1)));
+	if ( str == NULL ) {
+		*J_FRVAL = JSVAL_VOID;
+		return JS_TRUE;
+	}
+	jsstr = JS_NewStringCopyZ(cx, str);
+	J_S_ASSERT_ALLOC( jsstr );
+	*J_FRVAL = STRING_TO_JSVAL( jsstr );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $BOOL $INAME( pname )
+  $H arguments
+   $ARG ALenum pname
+  $H return value
+   value of a selected parameter.
+  $H OpenAL API
+   alGetBooleanv
+**/
+DEFINE_FUNCTION_FAST( GetBoolean ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+	ALboolean params;
+	alGetBooleanv(JSVAL_TO_INT(J_FARG(1)), &params);
+	*J_FRVAL = BOOLEAN_TO_JSVAL(params);
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+/**doc
+ * $INT | $ARRAY $INAME( pname [, count] )
+  $H arguments
+   $ARG ALenum pname
+   $ARG integer count: is the number of expected values. If _count_ is defined, the function will returns an array of values, else it returns a single value.
+  $H return value
+   value or values of a selected parameter.
+  $H OpenAL API
+   alGetIntegerv
+**/
+DEFINE_FUNCTION_FAST( GetInteger ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+
+	ALint params[16];
+	alGetIntegerv(JSVAL_TO_INT( J_FARG(1) ), params);
+
+	if ( J_FARG_ISDEF(2) ) {
+
+		J_S_ASSERT_INT( J_FARG(2) );
+		int count = JSVAL_TO_INT( J_FARG(2) );
+		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
+		J_S_ASSERT_ALLOC(arrayObj);
+		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
+		jsval tmpValue;
+		while (count--) {
+
+			tmpValue = INT_TO_JSVAL( params[count] );
+			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
+		}
+	} else {
+
+		*J_FRVAL = INT_TO_JSVAL( params[0] );
+	}
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $REAL | $ARRAY $INAME( pname [, count] )
+  $H arguments
+   $ARG ALenum pname
+   $ARG integer count: is the number of expected values. If _count_ is defined, the function will returns an array of values, else a single value.
+  $H return value
+   single value or Array of values of the selected parameter.
+  $H OpenAL API
+   alGetDoublev
+**/
+DEFINE_FUNCTION_FAST( GetDouble ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+
+	ALdouble params[16];
+	alGetDoublev(JSVAL_TO_INT(J_FARG(1)), params);
+
+	if ( J_FARG_ISDEF(2) ) {
+
+		J_S_ASSERT_INT( J_FARG(2) );
+		int count = JSVAL_TO_INT( J_FARG(2) );
+		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
+		J_S_ASSERT_ALLOC(arrayObj);
+		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
+		jsval tmpValue;
+		while (count--) {
+
+			J_CHK( JS_NewDoubleValue(cx, params[count], &tmpValue) );
+			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
+		}
+	} else {
+
+		J_CHK( JS_NewDoubleValue(cx, params[0], J_FRVAL) );
+	}
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( pname, params )
+  $H arguments
+   $ARG ALenum pname:
+   $ARG Array params:
+  $H OpenAL API
+   alListeneri, alListenerf, alListenerfv
+**/
+DEFINE_FUNCTION_FAST( Listener ) {
+
+	J_S_ASSERT_ARG_MIN(2);
+	J_S_ASSERT_INT(J_FARG(1));
+
+	*J_FRVAL = JSVAL_VOID;
+	if ( JSVAL_IS_INT(J_FARG(2)) ) {
+
+		alListeneri( JSVAL_TO_INT( J_FARG(1) ), JSVAL_TO_INT( J_FARG(2) ) );
+		return JS_TRUE;
+	}
+	if ( JSVAL_IS_DOUBLE(J_FARG(2)) ) {
+
+		jsdouble param;
+		J_CHK( JS_ValueToNumber(cx, J_FARG(2), &param) );
+		alListenerf( JSVAL_TO_INT( J_FARG(1) ), param );
+		return JS_TRUE;
+	}
+	if ( JsvalIsArray(cx, J_FARG(2)) ) {
+
+		ALfloat params[16];
+		size_t length;
+//		J_JSVAL_TO_REAL_VECTOR( J_FARG(2), params, length );
+		J_CHK( JsvalToFloatVector(cx, J_FARG(2), params, 16, &length) );
+		alListenerfv( JSVAL_TO_INT(J_FARG(1)), params );
+		return JS_TRUE;
+	}
+
+	J_REPORT_ERROR("Invalid argument.");
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $REAL | $ARRAY $INAME( source, pname [, count] )
+  $H arguments
+   $ARG integer source:
+   $ARG ALenum pname:
+   $ARG integer count: is the number of expected values. If _count_ is defined, the function will returns an array of values, else a single value.
+  $H return value
+   single value or Array of values of the selected parameter.
+  $H OpenAL API
+   alGetListenerfv
+**/
+DEFINE_FUNCTION_FAST( GetListenerReal ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+
+	ALfloat params[16];
+	alGetListenerfv(JSVAL_TO_INT(J_FARG(1)), params);
+
+	if ( J_FARG_ISDEF(2) ) {
+
+		J_S_ASSERT_INT( J_FARG(2) );
+		int count = JSVAL_TO_INT( J_FARG(2) );
+		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
+		J_S_ASSERT_ALLOC(arrayObj);
+		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
+		jsval tmpValue;
+		while (count--) {
+
+			J_CHK( JS_NewDoubleValue(cx, params[count], &tmpValue) );
+			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
+		}
+	} else {
+
+		J_CHK( JS_NewDoubleValue(cx, params[0], J_FRVAL) );
+	}
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+/**doc
+ * $INT $INAME()
+  $H OpenAL API
+   alSourcei, alSourcef, alSourcefv
+**/
+DEFINE_FUNCTION_FAST( GenSource ) {
+
+	ALuint sourceID; // The OpenAL sound source
+	alGenSources(1, &sourceID);
+	J_CHK( UIntToJsval(cx, sourceID, J_FRVAL) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( source, pname, params )
+  $H arguments
+   $ARG integer source:
+   $ARG ALenum pname:
+   $ARG Array params:
+  $H OpenAL API
+   alSourcei, alSourcef, alSourcefv
+**/
+DEFINE_FUNCTION_FAST( Source ) {
+
+	J_S_ASSERT_ARG_MIN(3);
+	J_S_ASSERT_NUMBER(J_FARG(1));
+	J_S_ASSERT_INT(J_FARG(2));
+
+	ALuint sid;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
+
+	*J_FRVAL = JSVAL_VOID;
+	if ( JSVAL_IS_INT(J_FARG(3)) ) {
+
+		alSourcei( sid, JSVAL_TO_INT( J_FARG(2) ), JSVAL_TO_INT( J_FARG(3) ) );
+		return JS_TRUE;
+	}
+	if ( JSVAL_IS_DOUBLE(J_FARG(3)) ) {
+
+		jsdouble param;
+		J_CHK( JS_ValueToNumber(cx, J_FARG(3), &param) );
+		alSourcef( sid, JSVAL_TO_INT( J_FARG(2) ), param );
+		return JS_TRUE;
+	}
+	if ( JsvalIsArray(cx, J_FARG(3)) ) {
+
+		ALfloat params[16];
+		size_t length;
+		J_CHK( JsvalToFloatVector(cx, J_FARG(3), params, COUNTOF(params), &length ) );
+		alSourcefv( sid, JSVAL_TO_INT(J_FARG(2)), params );
+		return JS_TRUE;
+	}
+	J_REPORT_ERROR("Invalid argument.");
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $REAL | $ARRAY $INAME( source, pname [, count] )
+  $H arguments
+   $ARG integer source:
+   $ARG ALenum pname:
+   $ARG integer count: is the number of expected values. If _count_ is defined, the function will returns an array of values, else a single value.
+  $H return value
+   single value or Array of values of the selected parameter.
+  $H OpenAL API
+   alGetSourcef
+**/
+DEFINE_FUNCTION_FAST( GetSourceReal ) {
+  ALenum pname;
+	J_S_ASSERT_ARG_MIN(2);
+	J_S_ASSERT_NUMBER(J_FARG(1));
+	J_S_ASSERT_INT(J_FARG(2));
+
+	ALuint sid;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
+
+	ALfloat params[16];
+
+	pname = JSVAL_TO_INT(J_FARG(2));
+	alGetSourcef(sid, pname, params);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	if ( J_FARG_ISDEF(3) ) {
+
+		J_S_ASSERT_INT( J_FARG(3) );
+		int count = JSVAL_TO_INT( J_FARG(3) );
+		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
+		J_S_ASSERT_ALLOC(arrayObj);
+		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
+		jsval tmpValue;
+		while (count--) {
+
+			J_CHK( JS_NewDoubleValue(cx, params[count], &tmpValue) );
+			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
+		}
+	} else {
+
+		J_CHK( JS_NewDoubleValue(cx, params[0], J_FRVAL) );
+	}
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $REAL | $ARRAY $INAME( source, pname [, count] )
+**/
+DEFINE_FUNCTION_FAST( GetSourceInteger ) {
+  ALenum pname;
+	J_S_ASSERT_ARG_MIN(2);
+	J_S_ASSERT_NUMBER(J_FARG(1));
+	J_S_ASSERT_INT(J_FARG(2));
+
+	ALuint sid;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
+
+	ALint params[16];
+
+	pname = JSVAL_TO_INT(J_FARG(2));
+	alGetSourcei(sid, pname, params);
+
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	if ( J_FARG_ISDEF(3) ) {
+
+		J_S_ASSERT_INT( J_FARG(3) );
+		int count = JSVAL_TO_INT( J_FARG(3) );
+		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
+		J_S_ASSERT_ALLOC(arrayObj);
+		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
+		jsval tmpValue;
+		while (count--) {
+
+			J_CHK( IntToJsval(cx, params[count], &tmpValue) );
+			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
+		}
+	} else {
+
+		J_CHK( JS_NewDoubleValue(cx, params[0], J_FRVAL) );
+	}
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+/**doc
+ * $VOID $INAME( source )
+  $H arguments
+   $ARG integer source: the source id.
+  $H OpenAL API
+   alDeleteBuffers
+**/
+DEFINE_FUNCTION_FAST( DeleteSource ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_NUMBER(J_FARG(1));
+	ALuint sid;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
+	alDeleteSources(1, &sid);
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( source, buffer | bufferArray )
+  $H arguments
+   $ARG integer source: the source id.
+   $ARG integer buffer: the buffer id.
+   $ARG Array bufferArray: an Array of buffer id.
+  $H OpenAL API
+   alDeleteBuffers
+**/
+DEFINE_FUNCTION_FAST( SourceQueueBuffers ) {
+
+	J_S_ASSERT_ARG_MIN(2);
+	J_S_ASSERT_NUMBER(J_FARG(1));
+	ALuint sid;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
+
+	if ( JSVAL_IS_INT(J_FARG(2)) ) {
+
+		ALuint buffer;
+		J_CHK( JsvalToUInt(cx, J_FARG(2), &buffer) );
+		alSourceQueueBuffers( sid, 1, &buffer );
+		J_CHK( CheckThrowCurrentOalError(cx) );
+		return JS_TRUE;
+	}
+
+	if ( JsvalIsArray(cx, J_FARG(2)) ) {
+
+		ALuint params[1024];
+ 		unsigned int length = sizeof(params)/sizeof(*params);
+//		J_JSVAL_TO_INT_VECTOR( J_FARG(2), params, length );
+		J_CHK( JsvalToUIntVector(cx, J_FARG(2), params, sizeof(params)/sizeof(*params), &length) );
+		alSourceQueueBuffers( sid, length, params );
+		J_CHK( CheckThrowCurrentOalError(cx) );
+		return JS_TRUE;
+	}
+
+	J_REPORT_ERROR("Invalid argument.");
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+/**doc
+ * $VOID $INAME( source, buffer | bufferArray )
+  $H arguments
+   $ARG integer buffer: the buffer id.
+   $ARG Array bufferArray: an Array of buffer id.
+  $H OpenAL API
+   alDeleteBuffers
+**/
+DEFINE_FUNCTION_FAST( SourceUnqueueBuffers ) {
+
+	J_S_ASSERT_ARG_MIN(2);
+	J_S_ASSERT_NUMBER(J_FARG(1));
+	ALuint sid;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
+
+	if ( JSVAL_IS_INT(J_FARG(2)) ) {
+
+		ALuint buffer;
+		J_CHK( JsvalToUInt(cx, J_FARG(2), &buffer) );
+		alSourceUnqueueBuffers( sid, 1, &buffer );
+		return JS_TRUE;
+	}
+
+	if ( JsvalIsArray(cx, J_FARG(2)) ) {
+
+		ALuint params[1024];
+		unsigned int length;
+
+//		J_JSVAL_TO_INT_VECTOR( J_FARG(2), params, length );
+		J_CHK( JsvalToUIntVector(cx, J_FARG(2), params, sizeof(params)/sizeof(*params), &length) );
+
+		alSourceUnqueueBuffers( sid, length, params );
+		return JS_TRUE;
+	}
+
+	J_REPORT_ERROR("Invalid argument.");
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+/**doc
+ * $INT $INAME( soundObject )
+  Creates a new buffer and attach a sound data to it. The data comming from the soundObject is copied into the OpenAL system.
+  $note
+   Buffers containing audio data with more than one channel will be played without 3D spatialization features  these formats are normally used for background music.
+  $H arguments
+   $ARG soundObject sound: a sound object that contains PCM audio data and the following properties: rate, channels and bits.
+**/
+DEFINE_FUNCTION_FAST( Buffer ) {
+  jsval tmp;
+  JSObject *blobObj;
+	J_S_ASSERT_ARG_MIN( 1 );
+	J_S_ASSERT_OBJECT( J_FARG(1) );
+	blobObj = JSVAL_TO_OBJECT(J_FARG(1));
+
+	int rate, channels, bits;
+	J_CHK( GetPropertyInt(cx, blobObj, "rate", &rate) );
+	J_CHK( GetPropertyInt(cx, blobObj, "channels", &channels) );
+	J_CHK( GetPropertyInt(cx, blobObj, "bits", &bits) );
+
+	const char *buffer;
+	size_t bufferLength;
+	tmp = OBJECT_TO_JSVAL(blobObj);
+	JsvalToStringAndLength(cx, &tmp, &buffer, &bufferLength); // warning: GC on the returned buffer !
+
+	ALuint bufferID; // The OpenAL sound buffer ID
+	alGenBuffers(1, &bufferID);
+
+	ALenum format; // The sound data format
+
+	switch (channels) {
+		case 1:
+			format = bits == 16 ? AL_FORMAT_MONO16 : AL_FORMAT_MONO8;
+			break;
+		case 2:
+			format = bits == 16 ? AL_FORMAT_STEREO16 : AL_FORMAT_STEREO8;
+			break;
+		default:
+			J_REPORT_ERROR("Too may channels");
+	}
+
+	// Upload sound data to buffer
+	alBufferData(bufferID, format, buffer, bufferLength, rate);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( UIntToJsval(cx, bufferID, J_FRVAL) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+/**doc
+ * $REAL | $ARRAY $INAME( source, pname [, count] )
+  $H arguments
+   $ARG integer source:
+   $ARG ALenum pname:
+   $ARG integer count: is the number of expected values. If _count_ is defined, the function will returns an array of values, else a single value.
+  $H return value
+   single value or Array of values of the selected parameter.
+  $H OpenAL API
+   alGetBufferfv
+**/
+DEFINE_FUNCTION_FAST( GetBufferReal ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+
+	ALfloat params[16];
+	alGetBufferfv(JSVAL_TO_INT(J_FARG(1)), JSVAL_TO_INT(J_FARG(2)), params);
+
+	if ( J_FARG_ISDEF(2) ) {
+
+		J_S_ASSERT_INT( J_FARG(2) );
+		int count = JSVAL_TO_INT( J_FARG(2) );
+		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
+		J_S_ASSERT_ALLOC(arrayObj);
+		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
+		jsval tmpValue;
+		while (count--) {
+
+			J_CHK( JS_NewDoubleValue(cx, params[count], &tmpValue) );
+			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
+		}
+	} else {
+
+		J_CHK( JS_NewDoubleValue(cx, params[0], J_FRVAL) );
+	}
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $INT | $ARRAY $INAME( source, pname [, count] )
+  $H arguments
+   $ARG integer source:
+   $ARG ALenum pname:
+   $ARG integer count: is the number of expected values. If _count_ is defined, the function will returns an array of values, else a single value.
+  $H return value
+   single value or Array of values of the selected parameter.
+  $H OpenAL API
+   alGetBufferiv
+**/
+DEFINE_FUNCTION_FAST( GetBufferInteger ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+
+	ALint params[16];
+	alGetBufferiv(JSVAL_TO_INT(J_FARG(1)), JSVAL_TO_INT(J_FARG(2)), params);
+
+	if ( J_FARG_ISDEF(2) ) {
+
+		J_S_ASSERT_INT( J_FARG(2) );
+		int count = JSVAL_TO_INT( J_FARG(2) );
+		JSObject *arrayObj = JS_NewArrayObject(cx, 0, NULL);
+		J_S_ASSERT_ALLOC(arrayObj);
+		*J_FRVAL = OBJECT_TO_JSVAL(arrayObj);
+		jsval tmpValue;
+		while (count--) {
+
+			J_CHK( JS_NewDoubleValue(cx, params[count], &tmpValue) );
+			J_CHK( JS_SetElement(cx, arrayObj, count, &tmpValue) );
+		}
+	} else {
+
+		J_CHK( JS_NewDoubleValue(cx, params[0], J_FRVAL) );
+	}
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+
+
+/**doc
+ * $VOID $INAME( buffer )
+  $H arguments
+   $ARG integer buffer: the buffer id.
+  $H note
+   Buffers that have been unqueued from all sources are UNUSED. Buffers that are UNUSED can be deleted, or changed by alBufferData commands.
+  $H OpenAL API
+   alDeleteBuffers
+**/
+DEFINE_FUNCTION_FAST( DeleteBuffer ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_NUMBER(J_FARG(1));
+	ALuint bufferId;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &bufferId ) );
+//	alBufferData(bufferId, 0, NULL, 0, 0);
+	alDeleteBuffers(1, &bufferId);
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( source )
+  Plays the given source.
+  $H arguments
+   $ARG integer source: the ID of the source to play.
+**/
+DEFINE_FUNCTION_FAST( PlaySource ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_NUMBER(J_FARG(1));
+	ALuint sid;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
+	alSourcePlay(sid);
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( source )
+  Stop the given source.
+  $H arguments
+   $ARG integer source: the ID of the source to play.
+**/
+DEFINE_FUNCTION_FAST( StopSource ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_NUMBER(J_FARG(1));
+	ALuint sid;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
+	alSourceStop(sid);
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( source )
+  Pause the given source.
+  $H arguments
+   $ARG integer source: the ID of the source to play.
+**/
+DEFINE_FUNCTION_FAST( PauseSource ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_NUMBER(J_FARG(1));
+	ALuint sid;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
+	alSourcePause(sid);
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( source )
+  Rewind the given source. set playback postiton to beginning.
+  $H arguments
+   $ARG integer source: the ID of the source to play.
+**/
+DEFINE_FUNCTION_FAST( RewindSource ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_NUMBER(J_FARG(1));
+	ALuint sid;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &sid ) );
+	alSourceRewind(sid);
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME()
+  $H OpenaL API
+   alGenEffects
+**/
+#ifdef _WIN32
+DEFINE_FUNCTION_FAST( GenEffect ) {
+
+	ALuint eid;
+	alGenEffects(1, &eid);
+	J_CHK( UIntToJsval(cx, eid, J_FRVAL) );
+	return JS_TRUE;
+	JL_BAD;
+}
+#endif
+
+/**doc
+ * $VOID $INAME()
+  $H OpenaL API
+   alGenEffects
+**/
+#ifdef _WIN32
+DEFINE_FUNCTION_FAST( DeleteEffect ) {
+
+	ALuint eid;
+	alDeleteEffects(1, &eid);
+	J_CHK( UIntToJsval(cx, eid, J_FRVAL) );
+	return JS_TRUE;
+	JL_BAD;
+}
+#endif
+
+
+
+/**doc
+ * $VOID $INAME( sound ) $DEPRECATED
+  Plays a sound on the default playback device.
+  $H arguments
+   $ARG soundObject sound: sound object to play.
+**/
+DEFINE_FUNCTION_FAST( PlaySound ) {
+  jsval tmp;
+  JSObject *blobObj;
+	J_S_ASSERT_ARG_MIN( 1 );
+	J_S_ASSERT_OBJECT( J_FARG(1) );
+	blobObj = JSVAL_TO_OBJECT(J_FARG(1));
+
+	int rate, channels, bits;
+	J_CHK( GetPropertyInt(cx, blobObj, "rate", &rate) );
+	J_CHK( GetPropertyInt(cx, blobObj, "channels", &channels) );
+	J_CHK( GetPropertyInt(cx, blobObj, "bits", &bits) );
+
+	const char *buffer;
+	size_t bufferLength;
+	tmp = OBJECT_TO_JSVAL(blobObj);
+	JsvalToStringAndLength(cx, &tmp, &buffer, &bufferLength); // warning: GC on the returned buffer !
+
+	ALint state;                // The state of the sound source
+	ALuint bufferID;            // The OpenAL sound buffer ID
+	ALuint sourceID;            // The OpenAL sound source
+	ALenum format;              // The sound data format
+
+	if (channels == 1)
+		format = bits == 16 ? AL_FORMAT_MONO16 : AL_FORMAT_MONO8;
+	else
+		format = bits == 16 ? AL_FORMAT_STEREO16 : AL_FORMAT_STEREO8;
+
+	// Create sound buffer and source
+	alGenBuffers(1, &bufferID);
+
+  alGenSources(1, &sourceID);
+
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+  // Set the source and listener to the same location
+  alListener3i(AL_POSITION, 0,0,0 );
+
+  alSource3i(sourceID, AL_POSITION, 0,0,0 );
+
+  // Upload sound data to buffer
+  alBufferData(bufferID, format, buffer, bufferLength, rate);
+
+
+  // Attach sound buffer to source
+  alSourcei(sourceID, AL_BUFFER, bufferID);
+
+
+  // This is a busy wait loop but should be good enough for example purpose
+
+  {
+  // get the remaining time to play
+  ALint offset;
+  alGetSourcei(sourceID, AL_SAMPLE_OFFSET, &offset);
+
+  ALint freq, bits, channels, size;
+  alGetBufferi(bufferID, AL_FREQUENCY, &freq);
+  alGetBufferi(bufferID, AL_BITS, &bits);
+  alGetBufferi(bufferID, AL_CHANNELS, &channels);
+  alGetBufferi(bufferID, AL_SIZE, &size);
+
+	size_t totalTime = size / (channels * (bits/8) * freq) * 1000;
+
+	// Finally, play the sound!!!
+	alSourcePlay(sourceID);
+#ifdef _WIN32
+	Sleep(totalTime);
+#else
+  usleep(totalTime * 1000);
+#endif
+
+	// Query the state of the souce
+	alGetSourcei(sourceID, AL_SOURCE_STATE, &state); // do { } while (state != AL_STOPPED);
+  }
+
+  // Clean up sound buffer and source
+  alDeleteBuffers(1, &bufferID);
+  alDeleteSources(1, &sourceID);
+
+//  *J_FRVAL = JSVAL_VOID;
+
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+CONFIGURE_CLASS
+
+	REVISION(SvnRevToInt("$Revision: 2212 $"))
+	BEGIN_CONST_INTEGER_SPEC
+		CONST_INTEGER( NONE                      ,AL_NONE                       )
+		CONST_INTEGER( FALSE                     ,AL_FALSE                      )
+		CONST_INTEGER( TRUE                      ,AL_TRUE                       )
+		CONST_INTEGER( SOURCE_RELATIVE           ,AL_SOURCE_RELATIVE            )
+		CONST_INTEGER(	CONE_INNER_ANGLE	  		  ,AL_CONE_INNER_ANGLE				)
+		CONST_INTEGER(	CONE_OUTER_ANGLE	  		  ,AL_CONE_OUTER_ANGLE				)
+		CONST_INTEGER(	PITCH					  		  ,AL_PITCH								)
+		CONST_INTEGER(	POSITION				  		  ,AL_POSITION							)
+		CONST_INTEGER(	DIRECTION			  		  ,AL_DIRECTION						)
+		CONST_INTEGER(	VELOCITY				  		  ,AL_VELOCITY							)
+		CONST_INTEGER(	LOOPING				  		  ,AL_LOOPING							)
+		CONST_INTEGER(	BUFFER				  		  ,AL_BUFFER							)
+		CONST_INTEGER(	GAIN					  		  ,AL_GAIN								)
+		CONST_INTEGER(	MIN_GAIN				  		  ,AL_MIN_GAIN							)
+		CONST_INTEGER(	MAX_GAIN				  		  ,AL_MAX_GAIN							)
+		CONST_INTEGER(	ORIENTATION			  		  ,AL_ORIENTATION						)
+		CONST_INTEGER(	SOURCE_STATE		  		  ,AL_SOURCE_STATE					)
+		CONST_INTEGER(	INITIAL				  		  ,AL_INITIAL							)
+		CONST_INTEGER(	PLAYING				  		  ,AL_PLAYING							)
+		CONST_INTEGER(	PAUSED				  		  ,AL_PAUSED							)
+		CONST_INTEGER(	STOPPED				  		  ,AL_STOPPED							)
+		CONST_INTEGER(	BUFFERS_QUEUED		  		  ,AL_BUFFERS_QUEUED					)
+		CONST_INTEGER(	BUFFERS_PROCESSED	  		  ,AL_BUFFERS_PROCESSED				)
+		CONST_INTEGER(	SEC_OFFSET			  		  ,AL_SEC_OFFSET						)
+		CONST_INTEGER(	SAMPLE_OFFSET		  		  ,AL_SAMPLE_OFFSET					)
+		CONST_INTEGER(	BYTE_OFFSET			  		  ,AL_BYTE_OFFSET						)
+		CONST_INTEGER(	SOURCE_TYPE			  		  ,AL_SOURCE_TYPE						)
+		CONST_INTEGER(	STATIC				  		  ,AL_STATIC							)
+		CONST_INTEGER(	STREAMING			  		  ,AL_STREAMING						)
+		CONST_INTEGER(	UNDETERMINED		  		  ,AL_UNDETERMINED					)
+		CONST_INTEGER(	FORMAT_MONO8		  		  ,AL_FORMAT_MONO8					)
+		CONST_INTEGER(	FORMAT_MONO16		  		  ,AL_FORMAT_MONO16					)
+		CONST_INTEGER(	FORMAT_STEREO8		  		  ,AL_FORMAT_STEREO8					)
+		CONST_INTEGER(	FORMAT_STEREO16	  		  ,AL_FORMAT_STEREO16				)
+		CONST_INTEGER(	REFERENCE_DISTANCE  		  ,AL_REFERENCE_DISTANCE			)
+		CONST_INTEGER( ROLLOFF_FACTOR            ,AL_ROLLOFF_FACTOR					)
+		CONST_INTEGER(	CONE_OUTER_GAIN			  ,AL_CONE_OUTER_GAIN				)
+		CONST_INTEGER(	MAX_DISTANCE				  ,AL_MAX_DISTANCE					)
+		CONST_INTEGER(	FREQUENCY					  ,AL_FREQUENCY						)
+		CONST_INTEGER(	BITS							  ,AL_BITS								)
+		CONST_INTEGER(	CHANNELS						  ,AL_CHANNELS							)
+		CONST_INTEGER(	SIZE							  ,AL_SIZE								)
+		CONST_INTEGER(	UNUSED						  ,AL_UNUSED							)
+		CONST_INTEGER(	PENDING						  ,AL_PENDING							)
+		CONST_INTEGER(	PROCESSED					  ,AL_PROCESSED						)
+		CONST_INTEGER(	NO_ERROR						  ,AL_NO_ERROR							)
+		CONST_INTEGER(	INVALID_NAME				  ,AL_INVALID_NAME					)
+		CONST_INTEGER(	INVALID_ENUM				  ,AL_INVALID_ENUM					)
+		CONST_INTEGER(	INVALID_VALUE				  ,AL_INVALID_VALUE					)
+		CONST_INTEGER(	INVALID_OPERATION			  ,AL_INVALID_OPERATION				)
+		CONST_INTEGER(	OUT_OF_MEMORY				  ,AL_OUT_OF_MEMORY					)
+		CONST_INTEGER(	VENDOR						  ,AL_VENDOR							)
+		CONST_INTEGER(	VERSION						  ,AL_VERSION							)
+		CONST_INTEGER(	RENDERER						  ,AL_RENDERER							)
+		CONST_INTEGER(	EXTENSIONS					  ,AL_EXTENSIONS						)
+		CONST_INTEGER(	DOPPLER_FACTOR				  ,AL_DOPPLER_FACTOR             )
+		CONST_INTEGER(	DOPPLER_VELOCITY			  ,AL_DOPPLER_VELOCITY				)
+		CONST_INTEGER(	SPEED_OF_SOUND				  ,AL_SPEED_OF_SOUND					)
+		CONST_INTEGER(	DISTANCE_MODEL				  ,AL_DISTANCE_MODEL					)
+		CONST_INTEGER(	INVERSE_DISTANCE			  ,AL_INVERSE_DISTANCE				)
+		CONST_INTEGER(	INVERSE_DISTANCE_CLAMPED  ,AL_INVERSE_DISTANCE_CLAMPED	)
+		CONST_INTEGER(	LINEAR_DISTANCE			  ,AL_LINEAR_DISTANCE				)
+		CONST_INTEGER(	LINEAR_DISTANCE_CLAMPED	  ,AL_LINEAR_DISTANCE_CLAMPED		)
+		CONST_INTEGER(	EXPONENT_DISTANCE			  ,AL_EXPONENT_DISTANCE				)
+		CONST_INTEGER(	EXPONENT_DISTANCE_CLAMPED ,AL_EXPONENT_DISTANCE_CLAMPED	)
+
+
+		CONST_INTEGER(METERS_PER_UNIT                                , AL_METERS_PER_UNIT                                )
+#ifdef AL_DIRECT_FILTER
+		CONST_INTEGER(DIRECT_FILTER                                  , AL_DIRECT_FILTER                               )
+#endif // AL_DIRECT_FILTER
+#ifdef AL_AUXILIARY_SEND_FILTER
+		CONST_INTEGER(AUXILIARY_SEND_FILTER                          , AL_AUXILIARY_SEND_FILTER                       )
+#endif // AL_AUXILIARY_SEND_FILTER
+#ifdef AL_AIR_ABSORPTION_FACTOR
+		CONST_INTEGER(AIR_ABSORPTION_FACTOR                          , AL_AIR_ABSORPTION_FACTOR                       )
+#endif // AL_AIR_ABSORPTION_FACTOR
+#ifdef AL_ROOM_ROLLOFF_FACTOR
+		CONST_INTEGER(ROOM_ROLLOFF_FACTOR                            , AL_ROOM_ROLLOFF_FACTOR                         )
+#endif // AL_ROOM_ROLLOFF_FACTOR
+#ifdef AL_CONE_OUTER_GAINHF
+		CONST_INTEGER(CONE_OUTER_GAINHF                              , AL_CONE_OUTER_GAINHF                           )
+#endif // AL_CONE_OUTER_GAINHF
+#ifdef AL_DIRECT_FILTER_GAINHF_AUTO
+		CONST_INTEGER(DIRECT_FILTER_GAINHF_AUTO                      , AL_DIRECT_FILTER_GAINHF_AUTO                   )
+#endif // AL_DIRECT_FILTER_GAINHF_AUTO
+#ifdef AL_AUXILIARY_SEND_FILTER_GAIN_AUTO
+		CONST_INTEGER(AUXILIARY_SEND_FILTER_GAIN_AUTO                , AL_AUXILIARY_SEND_FILTER_GAIN_AUTO             )
+#endif // AL_AUXILIARY_SEND_FILTER_GAIN_AUTO
+#ifdef AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO
+		CONST_INTEGER(AUXILIARY_SEND_FILTER_GAINHF_AUTO              , AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO           )
+#endif // AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO
+#ifdef AL_REVERB_DENSITY
+		CONST_INTEGER(REVERB_DENSITY                                 , AL_REVERB_DENSITY                              )
+#endif // AL_REVERB_DENSITY
+#ifdef AL_REVERB_DIFFUSION
+		CONST_INTEGER(REVERB_DIFFUSION                               , AL_REVERB_DIFFUSION                            )
+#endif // AL_REVERB_DIFFUSION
+#ifdef AL_REVERB_GAIN
+		CONST_INTEGER(REVERB_GAIN                                    , AL_REVERB_GAIN                                 )
+#endif // AL_REVERB_GAIN
+#ifdef AL_REVERB_GAINHF
+		CONST_INTEGER(REVERB_GAINHF                                  , AL_REVERB_GAINHF                               )
+#endif // AL_REVERB_GAINHF
+#ifdef AL_REVERB_DECAY_TIME
+		CONST_INTEGER(REVERB_DECAY_TIME                              , AL_REVERB_DECAY_TIME                           )
+#endif // AL_REVERB_DECAY_TIME
+#ifdef AL_REVERB_DECAY_HFRATIO
+		CONST_INTEGER(REVERB_DECAY_HFRATIO                           , AL_REVERB_DECAY_HFRATIO                        )
+#endif // AL_REVERB_DECAY_HFRATIO
+#ifdef AL_REVERB_REFLECTIONS_GAIN
+		CONST_INTEGER(REVERB_REFLECTIONS_GAIN                        , AL_REVERB_REFLECTIONS_GAIN                     )
+#endif // AL_REVERB_REFLECTIONS_GAIN
+#ifdef AL_REVERB_REFLECTIONS_DELAY
+		CONST_INTEGER(REVERB_REFLECTIONS_DELAY                       , AL_REVERB_REFLECTIONS_DELAY                    )
+#endif // AL_REVERB_REFLECTIONS_DELAY
+#ifdef AL_REVERB_LATE_REVERB_GAIN
+		CONST_INTEGER(REVERB_LATE_REVERB_GAIN                        , AL_REVERB_LATE_REVERB_GAIN                     )
+#endif // AL_REVERB_LATE_REVERB_GAIN
+#ifdef AL_REVERB_LATE_REVERB_DELAY
+		CONST_INTEGER(REVERB_LATE_REVERB_DELAY                       , AL_REVERB_LATE_REVERB_DELAY                    )
+#endif // AL_REVERB_LATE_REVERB_DELAY
+#ifdef AL_REVERB_AIR_ABSORPTION_GAINHF
+		CONST_INTEGER(REVERB_AIR_ABSORPTION_GAINHF                   , AL_REVERB_AIR_ABSORPTION_GAINHF                )
+#endif // AL_REVERB_AIR_ABSORPTION_GAINHF
+#ifdef AL_REVERB_ROOM_ROLLOFF_FACTOR
+		CONST_INTEGER(REVERB_ROOM_ROLLOFF_FACTOR                     , AL_REVERB_ROOM_ROLLOFF_FACTOR                  )
+#endif // AL_REVERB_ROOM_ROLLOFF_FACTOR
+#ifdef AL_REVERB_DECAY_HFLIMIT
+		CONST_INTEGER(REVERB_DECAY_HFLIMIT                           , AL_REVERB_DECAY_HFLIMIT                        )
+#endif // AL_REVERB_DECAY_HFLIMIT
+#ifdef AL_CHORUS_WAVEFORM
+		CONST_INTEGER(CHORUS_WAVEFORM                                , AL_CHORUS_WAVEFORM                             )
+#endif // AL_CHORUS_WAVEFORM
+#ifdef AL_CHORUS_PHASE
+		CONST_INTEGER(CHORUS_PHASE                                   , AL_CHORUS_PHASE                                )
+#endif // AL_CHORUS_PHASE
+#ifdef AL_CHORUS_RATE
+		CONST_INTEGER(CHORUS_RATE                                    , AL_CHORUS_RATE                                 )
+#endif // AL_CHORUS_RATE
+#ifdef AL_CHORUS_DEPTH
+		CONST_INTEGER(CHORUS_DEPTH                                   , AL_CHORUS_DEPTH                                )
+#endif // AL_CHORUS_DEPTH
+#ifdef AL_CHORUS_FEEDBACK
+		CONST_INTEGER(CHORUS_FEEDBACK                                , AL_CHORUS_FEEDBACK                             )
+#endif // AL_CHORUS_FEEDBACK
+#ifdef AL_CHORUS_DELAY
+		CONST_INTEGER(CHORUS_DELAY                                   , AL_CHORUS_DELAY                                )
+#endif // AL_CHORUS_DELAY
+#ifdef AL_DISTORTION_EDGE
+		CONST_INTEGER(DISTORTION_EDGE                                , AL_DISTORTION_EDGE                             )
+#endif // AL_DISTORTION_EDGE
+#ifdef AL_DISTORTION_GAIN
+		CONST_INTEGER(DISTORTION_GAIN                                , AL_DISTORTION_GAIN                             )
+#endif // AL_DISTORTION_GAIN
+#ifdef AL_DISTORTION_LOWPASS_CUTOFF
+		CONST_INTEGER(DISTORTION_LOWPASS_CUTOFF                      , AL_DISTORTION_LOWPASS_CUTOFF                   )
+#endif // AL_DISTORTION_LOWPASS_CUTOFF
+#ifdef AL_DISTORTION_EQCENTER
+		CONST_INTEGER(DISTORTION_EQCENTER                            , AL_DISTORTION_EQCENTER                         )
+#endif // AL_DISTORTION_EQCENTER
+#ifdef AL_DISTORTION_EQBANDWIDTH
+		CONST_INTEGER(DISTORTION_EQBANDWIDTH                         , AL_DISTORTION_EQBANDWIDTH                      )
+#endif // AL_DISTORTION_EQBANDWIDTH
+#ifdef AL_ECHO_DELAY
+		CONST_INTEGER(ECHO_DELAY                                     , AL_ECHO_DELAY                                  )
+#endif // AL_ECHO_DELAY
+#ifdef AL_ECHO_LRDELAY
+		CONST_INTEGER(ECHO_LRDELAY                                   , AL_ECHO_LRDELAY                                )
+#endif // AL_ECHO_LRDELAY
+#ifdef AL_ECHO_DAMPING
+		CONST_INTEGER(ECHO_DAMPING                                   , AL_ECHO_DAMPING                                )
+#endif // AL_ECHO_DAMPING
+#ifdef AL_ECHO_FEEDBACK
+		CONST_INTEGER(ECHO_FEEDBACK                                  , AL_ECHO_FEEDBACK                               )
+#endif // AL_ECHO_FEEDBACK
+#ifdef AL_ECHO_SPREAD
+		CONST_INTEGER(ECHO_SPREAD                                    , AL_ECHO_SPREAD                                 )
+#endif // AL_ECHO_SPREAD
+#ifdef AL_FLANGER_WAVEFORM
+		CONST_INTEGER(FLANGER_WAVEFORM                               , AL_FLANGER_WAVEFORM                            )
+#endif // AL_FLANGER_WAVEFORM
+#ifdef AL_FLANGER_PHASE
+		CONST_INTEGER(FLANGER_PHASE                                  , AL_FLANGER_PHASE                               )
+#endif // AL_FLANGER_PHASE
+#ifdef AL_FLANGER_RATE
+		CONST_INTEGER(FLANGER_RATE                                   , AL_FLANGER_RATE                                )
+#endif // AL_FLANGER_RATE
+#ifdef AL_FLANGER_DEPTH
+		CONST_INTEGER(FLANGER_DEPTH                                  , AL_FLANGER_DEPTH                               )
+#endif // AL_FLANGER_DEPTH
+#ifdef AL_FLANGER_FEEDBACK
+		CONST_INTEGER(FLANGER_FEEDBACK                               , AL_FLANGER_FEEDBACK                            )
+#endif // AL_FLANGER_FEEDBACK
+#ifdef AL_FLANGER_DELAY
+		CONST_INTEGER(FLANGER_DELAY                                  , AL_FLANGER_DELAY                               )
+#endif // AL_FLANGER_DELAY
+#ifdef AL_FREQUENCY_SHIFTER_FREQUENCY
+		CONST_INTEGER(FREQUENCY_SHIFTER_FREQUENCY                    , AL_FREQUENCY_SHIFTER_FREQUENCY                 )
+#endif // AL_FREQUENCY_SHIFTER_FREQUENCY
+#ifdef AL_FREQUENCY_SHIFTER_LEFT_DIRECTION
+		CONST_INTEGER(FREQUENCY_SHIFTER_LEFT_DIRECTION               , AL_FREQUENCY_SHIFTER_LEFT_DIRECTION            )
+#endif // AL_FREQUENCY_SHIFTER_LEFT_DIRECTION
+#ifdef AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION
+		CONST_INTEGER(FREQUENCY_SHIFTER_RIGHT_DIRECTION              , AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION           )
+#endif // AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION
+#ifdef AL_VOCAL_MORPHER_PHONEMEA
+		CONST_INTEGER(VOCAL_MORPHER_PHONEMEA                         , AL_VOCAL_MORPHER_PHONEMEA                      )
+#endif // AL_VOCAL_MORPHER_PHONEMEA
+#ifdef AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING
+		CONST_INTEGER(VOCAL_MORPHER_PHONEMEA_COARSE_TUNING           , AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING        )
+#endif // AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING
+#ifdef AL_VOCAL_MORPHER_PHONEMEB
+		CONST_INTEGER(VOCAL_MORPHER_PHONEMEB                         , AL_VOCAL_MORPHER_PHONEMEB                      )
+#endif // AL_VOCAL_MORPHER_PHONEMEB
+#ifdef AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING
+		CONST_INTEGER(VOCAL_MORPHER_PHONEMEB_COARSE_TUNING           , AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING        )
+#endif // AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING
+#ifdef AL_VOCAL_MORPHER_WAVEFORM
+		CONST_INTEGER(VOCAL_MORPHER_WAVEFORM                         , AL_VOCAL_MORPHER_WAVEFORM                      )
+#endif // AL_VOCAL_MORPHER_WAVEFORM
+#ifdef AL_VOCAL_MORPHER_RATE
+		CONST_INTEGER(VOCAL_MORPHER_RATE                             , AL_VOCAL_MORPHER_RATE                          )
+#endif // AL_VOCAL_MORPHER_RATE
+#ifdef AL_PITCH_SHIFTER_COARSE_TUNE
+		CONST_INTEGER(PITCH_SHIFTER_COARSE_TUNE                      , AL_PITCH_SHIFTER_COARSE_TUNE                   )
+#endif // AL_PITCH_SHIFTER_COARSE_TUNE
+#ifdef AL_PITCH_SHIFTER_FINE_TUNE
+		CONST_INTEGER(PITCH_SHIFTER_FINE_TUNE                        , AL_PITCH_SHIFTER_FINE_TUNE                     )
+#endif // AL_PITCH_SHIFTER_FINE_TUNE
+#ifdef AL_RING_MODULATOR_FREQUENCY
+		CONST_INTEGER(RING_MODULATOR_FREQUENCY                       , AL_RING_MODULATOR_FREQUENCY                    )
+#endif // AL_RING_MODULATOR_FREQUENCY
+#ifdef AL_RING_MODULATOR_HIGHPASS_CUTOFF
+		CONST_INTEGER(RING_MODULATOR_HIGHPASS_CUTOFF                 , AL_RING_MODULATOR_HIGHPASS_CUTOFF              )
+#endif // AL_RING_MODULATOR_HIGHPASS_CUTOFF
+#ifdef AL_RING_MODULATOR_WAVEFORM
+		CONST_INTEGER(RING_MODULATOR_WAVEFORM                        , AL_RING_MODULATOR_WAVEFORM                     )
+#endif // AL_RING_MODULATOR_WAVEFORM
+#ifdef AL_AUTOWAH_ATTACK_TIME
+		CONST_INTEGER(AUTOWAH_ATTACK_TIME                            , AL_AUTOWAH_ATTACK_TIME                         )
+#endif // AL_AUTOWAH_ATTACK_TIME
+#ifdef AL_AUTOWAH_RELEASE_TIME
+		CONST_INTEGER(AUTOWAH_RELEASE_TIME                           , AL_AUTOWAH_RELEASE_TIME                        )
+#endif // AL_AUTOWAH_RELEASE_TIME
+#ifdef AL_AUTOWAH_RESONANCE
+		CONST_INTEGER(AUTOWAH_RESONANCE                              , AL_AUTOWAH_RESONANCE                           )
+#endif // AL_AUTOWAH_RESONANCE
+#ifdef AL_AUTOWAH_PEAK_GAIN
+		CONST_INTEGER(AUTOWAH_PEAK_GAIN                              , AL_AUTOWAH_PEAK_GAIN                           )
+#endif // AL_AUTOWAH_PEAK_GAIN
+#ifdef AL_COMPRESSOR_ONOFF
+		CONST_INTEGER(COMPRESSOR_ONOFF                               , AL_COMPRESSOR_ONOFF                            )
+#endif // AL_COMPRESSOR_ONOFF
+#ifdef AL_EQUALIZER_LOW_GAIN
+		CONST_INTEGER(EQUALIZER_LOW_GAIN                             , AL_EQUALIZER_LOW_GAIN                          )
+#endif // AL_EQUALIZER_LOW_GAIN
+#ifdef AL_EQUALIZER_LOW_CUTOFF
+		CONST_INTEGER(EQUALIZER_LOW_CUTOFF                           , AL_EQUALIZER_LOW_CUTOFF                        )
+#endif // AL_EQUALIZER_LOW_CUTOFF
+#ifdef AL_EQUALIZER_MID1_GAIN
+		CONST_INTEGER(EQUALIZER_MID1_GAIN                            , AL_EQUALIZER_MID1_GAIN                         )
+#endif // AL_EQUALIZER_MID1_GAIN
+#ifdef AL_EQUALIZER_MID1_CENTER
+		CONST_INTEGER(EQUALIZER_MID1_CENTER                          , AL_EQUALIZER_MID1_CENTER                       )
+#endif // AL_EQUALIZER_MID1_CENTER
+#ifdef AL_EQUALIZER_MID1_WIDTH
+		CONST_INTEGER(EQUALIZER_MID1_WIDTH                           , AL_EQUALIZER_MID1_WIDTH                        )
+#endif // AL_EQUALIZER_MID1_WIDTH
+#ifdef AL_EQUALIZER_MID2_GAIN
+		CONST_INTEGER(EQUALIZER_MID2_GAIN                            , AL_EQUALIZER_MID2_GAIN                         )
+#endif // AL_EQUALIZER_MID2_GAIN
+#ifdef AL_EQUALIZER_MID2_CENTER
+		CONST_INTEGER(EQUALIZER_MID2_CENTER                          , AL_EQUALIZER_MID2_CENTER                       )
+#endif // AL_EQUALIZER_MID2_CENTER
+#ifdef AL_EQUALIZER_MID2_WIDTH
+		CONST_INTEGER(EQUALIZER_MID2_WIDTH                           , AL_EQUALIZER_MID2_WIDTH                        )
+#endif // AL_EQUALIZER_MID2_WIDTH
+#ifdef AL_EQUALIZER_HIGH_GAIN
+		CONST_INTEGER(EQUALIZER_HIGH_GAIN                            , AL_EQUALIZER_HIGH_GAIN                         )
+#endif // AL_EQUALIZER_HIGH_GAIN
+#ifdef AL_EQUALIZER_HIGH_CUTOFF
+		CONST_INTEGER(EQUALIZER_HIGH_CUTOFF                          , AL_EQUALIZER_HIGH_CUTOFF                       )
+#endif // AL_EQUALIZER_HIGH_CUTOFF
+#ifdef AL_EFFECT_FIRST_PARAMETER
+		CONST_INTEGER(EFFECT_FIRST_PARAMETER                         , AL_EFFECT_FIRST_PARAMETER                      )
+#endif // AL_EFFECT_FIRST_PARAMETER
+#ifdef AL_EFFECT_LAST_PARAMETER
+		CONST_INTEGER(EFFECT_LAST_PARAMETER                          , AL_EFFECT_LAST_PARAMETER                       )
+#endif // AL_EFFECT_LAST_PARAMETER
+#ifdef AL_EFFECT_TYPE
+		CONST_INTEGER(EFFECT_TYPE                                    , AL_EFFECT_TYPE                                 )
+#endif // AL_EFFECT_TYPE
+#ifdef AL_EFFECT_NULL
+		CONST_INTEGER(EFFECT_NULL                                    , AL_EFFECT_NULL                                 )
+#endif // AL_EFFECT_NULL
+#ifdef AL_EFFECT_REVERB
+		CONST_INTEGER(EFFECT_REVERB                                  , AL_EFFECT_REVERB                               )
+#endif // AL_EFFECT_REVERB
+#ifdef AL_EFFECT_CHORUS
+		CONST_INTEGER(EFFECT_CHORUS                                  , AL_EFFECT_CHORUS                               )
+#endif // AL_EFFECT_CHORUS
+#ifdef AL_EFFECT_DISTORTION
+		CONST_INTEGER(EFFECT_DISTORTION                              , AL_EFFECT_DISTORTION                           )
+#endif // AL_EFFECT_DISTORTION
+#ifdef AL_EFFECT_ECHO
+		CONST_INTEGER(EFFECT_ECHO                                    , AL_EFFECT_ECHO                                 )
+#endif // AL_EFFECT_ECHO
+#ifdef AL_EFFECT_FLANGER
+		CONST_INTEGER(EFFECT_FLANGER                                 , AL_EFFECT_FLANGER                              )
+#endif // AL_EFFECT_FLANGER
+#ifdef AL_EFFECT_FREQUENCY_SHIFTER
+		CONST_INTEGER(EFFECT_FREQUENCY_SHIFTER                       , AL_EFFECT_FREQUENCY_SHIFTER                    )
+#endif // AL_EFFECT_FREQUENCY_SHIFTER
+#ifdef AL_EFFECT_VOCAL_MORPHER
+		CONST_INTEGER(EFFECT_VOCAL_MORPHER                           , AL_EFFECT_VOCAL_MORPHER                        )
+#endif // AL_EFFECT_VOCAL_MORPHER
+#ifdef AL_EFFECT_PITCH_SHIFTER
+		CONST_INTEGER(EFFECT_PITCH_SHIFTER                           , AL_EFFECT_PITCH_SHIFTER                        )
+#endif // AL_EFFECT_PITCH_SHIFTER
+#ifdef AL_EFFECT_RING_MODULATOR
+		CONST_INTEGER(EFFECT_RING_MODULATOR                          , AL_EFFECT_RING_MODULATOR                       )
+#endif // AL_EFFECT_RING_MODULATOR
+#ifdef AL_EFFECT_AUTOWAH
+		CONST_INTEGER(EFFECT_AUTOWAH                                 , AL_EFFECT_AUTOWAH                              )
+#endif // AL_EFFECT_AUTOWAH
+#ifdef AL_EFFECT_COMPRESSOR
+		CONST_INTEGER(EFFECT_COMPRESSOR                              , AL_EFFECT_COMPRESSOR                           )
+#endif // AL_EFFECT_COMPRESSOR
+#ifdef AL_EFFECT_EQUALIZER
+		CONST_INTEGER(EFFECT_EQUALIZER                               , AL_EFFECT_EQUALIZER                            )
+#endif // AL_EFFECT_EQUALIZER
+#ifdef AL_EFFECTSLOT_EFFECT
+		CONST_INTEGER(EFFECTSLOT_EFFECT                              , AL_EFFECTSLOT_EFFECT                           )
+#endif // AL_EFFECTSLOT_EFFECT
+#ifdef AL_EFFECTSLOT_GAIN
+		CONST_INTEGER(EFFECTSLOT_GAIN                                , AL_EFFECTSLOT_GAIN                             )
+#endif // AL_EFFECTSLOT_GAIN
+#ifdef AL_EFFECTSLOT_AUXILIARY_SEND_AUTO
+		CONST_INTEGER(EFFECTSLOT_AUXILIARY_SEND_AUTO                 , AL_EFFECTSLOT_AUXILIARY_SEND_AUTO              )
+#endif // AL_EFFECTSLOT_AUXILIARY_SEND_AUTO
+#ifdef AL_EFFECTSLOT_NULL
+		CONST_INTEGER(EFFECTSLOT_NULL                                , AL_EFFECTSLOT_NULL                             )
+#endif // AL_EFFECTSLOT_NULL
+#ifdef AL_LOWPASS_GAIN
+		CONST_INTEGER(LOWPASS_GAIN                                   , AL_LOWPASS_GAIN                                )
+#endif // AL_LOWPASS_GAIN
+#ifdef AL_LOWPASS_GAINHF
+		CONST_INTEGER(LOWPASS_GAINHF                                 , AL_LOWPASS_GAINHF                              )
+#endif // AL_LOWPASS_GAINHF
+#ifdef AL_HIGHPASS_GAIN
+		CONST_INTEGER(HIGHPASS_GAIN                                  , AL_HIGHPASS_GAIN                               )
+#endif // AL_HIGHPASS_GAIN
+#ifdef AL_HIGHPASS_GAINLF
+		CONST_INTEGER(HIGHPASS_GAINLF                                , AL_HIGHPASS_GAINLF                             )
+#endif // AL_HIGHPASS_GAINLF
+#ifdef AL_BANDPASS_GAIN
+		CONST_INTEGER(BANDPASS_GAIN                                  , AL_BANDPASS_GAIN                               )
+#endif // AL_BANDPASS_GAIN
+#ifdef AL_BANDPASS_GAINLF
+		CONST_INTEGER(BANDPASS_GAINLF                                , AL_BANDPASS_GAINLF                             )
+#endif // AL_BANDPASS_GAINLF
+#ifdef AL_BANDPASS_GAINHF
+		CONST_INTEGER(BANDPASS_GAINHF                                , AL_BANDPASS_GAINHF                             )
+#endif // AL_BANDPASS_GAINHF
+#ifdef AL_FILTER_FIRST_PARAMETER
+		CONST_INTEGER(FILTER_FIRST_PARAMETER                         , AL_FILTER_FIRST_PARAMETER                      )
+#endif // AL_FILTER_FIRST_PARAMETER
+#ifdef AL_FILTER_LAST_PARAMETER
+		CONST_INTEGER(FILTER_LAST_PARAMETER                          , AL_FILTER_LAST_PARAMETER                       )
+#endif // AL_FILTER_LAST_PARAMETER
+#ifdef AL_FILTER_TYPE
+		CONST_INTEGER(FILTER_TYPE                                    , AL_FILTER_TYPE                                 )
+#endif // AL_FILTER_TYPE
+#ifdef AL_FILTER_NULL
+		CONST_INTEGER(FILTER_NULL                                    , AL_FILTER_NULL                                 )
+#endif // AL_FILTER_NULL
+#ifdef AL_FILTER_LOWPASS
+		CONST_INTEGER(FILTER_LOWPASS                                 , AL_FILTER_LOWPASS                              )
+#endif // AL_FILTER_LOWPASS
+#ifdef AL_FILTER_HIGHPASS
+		CONST_INTEGER(FILTER_HIGHPASS                                , AL_FILTER_HIGHPASS                             )
+#endif // AL_FILTER_HIGHPASS
+#ifdef AL_FILTER_BANDPASS
+		CONST_INTEGER(FILTER_BANDPASS                                , AL_FILTER_BANDPASS                             )
+#endif // AL_FILTER_BANDPASS
+#ifdef AL_CHORUS_WAVEFORM_SINUSOID
+		CONST_INTEGER(CHORUS_WAVEFORM_SINUSOID                       , AL_CHORUS_WAVEFORM_SINUSOID                    )
+#endif // AL_CHORUS_WAVEFORM_SINUSOID
+#ifdef AL_CHORUS_WAVEFORM_TRIANGLE
+		CONST_INTEGER(CHORUS_WAVEFORM_TRIANGLE                       , AL_CHORUS_WAVEFORM_TRIANGLE                    )
+#endif // AL_CHORUS_WAVEFORM_TRIANGLE
+
+	END_CONST_INTEGER_SPEC
+
+	BEGIN_STATIC_FUNCTION_SPEC
+
+		FUNCTION_FAST_ARGC( Open, 1 )
+		FUNCTION_FAST_ARGC( Close, 0 )
+
+		FUNCTION_FAST_ARGC( DopplerFactor, 1 )
+		FUNCTION_FAST_ARGC( DopplerVelocity, 1 )
+		FUNCTION_FAST_ARGC( SpeedOfSound, 1 )
+		FUNCTION_FAST_ARGC( DistanceModel, 1 )
+
+		FUNCTION_FAST_ARGC( Enable, 1 )
+		FUNCTION_FAST_ARGC( Disable, 1 )
+		FUNCTION_FAST_ARGC( IsEnabled, 1 )
+		FUNCTION_FAST_ARGC( GetString, 1 )
+		FUNCTION_FAST_ARGC( GetBoolean, 1 )
+		FUNCTION_FAST_ARGC( GetInteger, 2 )
+		FUNCTION_FAST_ARGC( GetDouble, 2 )
+
+		FUNCTION_FAST_ARGC( Listener, 2 )
+		FUNCTION_FAST_ARGC( GetListenerReal, 3 )
+		FUNCTION_FAST_ARGC( GenSource, 0 )
+		FUNCTION_FAST_ARGC( Source, 3 )
+		FUNCTION_FAST_ARGC( GetSourceInteger, 3 )
+		FUNCTION_FAST_ARGC( GetSourceReal, 3 )
+		FUNCTION_FAST_ARGC( DeleteSource, 1 )
+		FUNCTION_FAST_ARGC( SourceQueueBuffers, 2 )
+		FUNCTION_FAST_ARGC( SourceUnqueueBuffers, 2 )
+		FUNCTION_FAST_ARGC( Buffer, 1 )
+		FUNCTION_FAST_ARGC( GetBufferReal, 3 )
+		FUNCTION_FAST_ARGC( GetBufferInteger, 3 )
+		FUNCTION_FAST_ARGC( DeleteBuffer, 1 )
+		FUNCTION_FAST_ARGC( PlaySource, 1 )
+		FUNCTION_FAST_ARGC( StopSource, 1 )
+		FUNCTION_FAST_ARGC( PauseSource, 1 )
+		FUNCTION_FAST_ARGC( RewindSource, 1 )
+
+		FUNCTION_FAST_ARGC( PlaySound, 1 ) // non-openal API
+
+		// OpenAL extensions
+#ifdef _WIN32
+		FUNCTION_FAST_ARGC( GenEffect, 0 )
+#endif
+
+	END_STATIC_FUNCTION_SPEC
+
+#ifdef _WIN32
+	BEGIN_STATIC_PROPERTY_SPEC
+		PROPERTY_READ(hasEfx)
+		PROPERTY_READ(maxAuxiliarySends)
+	END_STATIC_PROPERTY_SPEC
+#endif
+
+END_CLASS
+
+/**doc
+=== Examples ===
+$H example 1
+ A simple ogg player
+ {{{
+ LoadModule('jsio');
+ LoadModule('jsstd');
+ LoadModule('jssound');
+ LoadModule('jsaudio');
+
+ var decoder = new OggVorbisDecoder(new File('41_30secOgg-q0.ogg').Open(File.RDONLY));
+ var sourceId = Oal.GenSource();
+
+ var pcm;
+ while ( pcm = decoder.Read(10000) ) {
+
+  var bufferId = Oal.Buffer(pcm);
+  Oal.SourceQueueBuffers(sourceId, bufferId);
+  if ( Oal.GetSourceInteger(sourceId, Oal.SOURCE_STATE) == Oal.INITIAL )
+   Oal.PlaySource(sourceId);
+ };
+
+ var totalTime = decoder.frames/decoder.rate;
+ var currentTimeOffset = Oal.GetSourceReal(sourceId, Oal.SEC_OFFSET);
+ Sleep( 1000 * (totalTime - currentTimeOffset) );
+ }}}
+**/
+
+
+/* ogg test files:
+	http://xiph.org/vorbis/listen.html
+*/
+
+/* Introduction to EFX
+	http://connect.creativelabs.com/developer/Wiki/Introduction%20to%20EFX.aspx
+*/
+
+
+/* full List of EFX functions
+
+	alGenEffects = (LPALGENEFFECTS)alGetProcAddress("alGenEffects");
+	alDeleteEffects = (LPALDELETEEFFECTS )alGetProcAddress("alDeleteEffects");
+	alIsEffect = (LPALISEFFECT )alGetProcAddress("alIsEffect");
+	alEffecti = (LPALEFFECTI)alGetProcAddress("alEffecti");
+	alEffectiv = (LPALEFFECTIV)alGetProcAddress("alEffectiv");
+	alEffectf = (LPALEFFECTF)alGetProcAddress("alEffectf");
+	alEffectfv = (LPALEFFECTFV)alGetProcAddress("alEffectfv");
+	alGetEffecti = (LPALGETEFFECTI)alGetProcAddress("alGetEffecti");
+	alGetEffectiv = (LPALGETEFFECTIV)alGetProcAddress("alGetEffectiv");
+	alGetEffectf = (LPALGETEFFECTF)alGetProcAddress("alGetEffectf");
+	alGetEffectfv = (LPALGETEFFECTFV)alGetProcAddress("alGetEffectfv");
+	alGenFilters = (LPALGENFILTERS)alGetProcAddress("alGenFilters");
+	alDeleteFilters = (LPALDELETEFILTERS)alGetProcAddress("alDeleteFilters");
+	alIsFilter = (LPALISFILTER)alGetProcAddress("alIsFilter");
+	alFilteri = (LPALFILTERI)alGetProcAddress("alFilteri");
+	alFilteriv = (LPALFILTERIV)alGetProcAddress("alFilteriv");
+	alFilterf = (LPALFILTERF)alGetProcAddress("alFilterf");
+	alFilterfv = (LPALFILTERFV)alGetProcAddress("alFilterfv");
+	alGetFilteri = (LPALGETFILTERI )alGetProcAddress("alGetFilteri");
+	alGetFilteriv = (LPALGETFILTERIV )alGetProcAddress("alGetFilteriv");
+	alGetFilterf = (LPALGETFILTERF )alGetProcAddress("alGetFilterf");
+	alGetFilterfv = (LPALGETFILTERFV )alGetProcAddress("alGetFilterfv");
+	alGenAuxiliaryEffectSlots = (LPALGENAUXILIARYEFFECTSLOTS)alGetProcAddress("alGenAuxiliaryEffectSlots");
+	alDeleteAuxiliaryEffectSlots = (LPALDELETEAUXILIARYEFFECTSLOTS)alGetProcAddress("alDeleteAuxiliaryEffectSlots");
+	alIsAuxiliaryEffectSlot = (LPALISAUXILIARYEFFECTSLOT)alGetProcAddress("alIsAuxiliaryEffectSlot");
+	alAuxiliaryEffectSloti = (LPALAUXILIARYEFFECTSLOTI)alGetProcAddress("alAuxiliaryEffectSloti");
+	alAuxiliaryEffectSlotiv = (LPALAUXILIARYEFFECTSLOTIV)alGetProcAddress("alAuxiliaryEffectSlotiv");
+	alAuxiliaryEffectSlotf = (LPALAUXILIARYEFFECTSLOTF)alGetProcAddress("alAuxiliaryEffectSlotf");
+	alAuxiliaryEffectSlotfv = (LPALAUXILIARYEFFECTSLOTFV)alGetProcAddress("alAuxiliaryEffectSlotfv");
+	alGetAuxiliaryEffectSloti = (LPALGETAUXILIARYEFFECTSLOTI)alGetProcAddress("alGetAuxiliaryEffectSloti");
+	alGetAuxiliaryEffectSlotiv = (LPALGETAUXILIARYEFFECTSLOTIV)alGetProcAddress("alGetAuxiliaryEffectSlotiv");
+	alGetAuxiliaryEffectSlotf = (LPALGETAUXILIARYEFFECTSLOTF)alGetProcAddress("alGetAuxiliaryEffectSlotf");
+	alGetAuxiliaryEffectSlotfv = (LPALGETAUXILIARYEFFECTSLOTFV)alGetProcAddress("alGetAuxiliaryEffectSlotfv");
+
+*/
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/oalefxapi.cpp jslibs-0.9-r1881/src/jsaudio/oalefxapi.cpp
--- jslibs-0.9-r1881_orig/src/jsaudio/oalefxapi.cpp	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/oalefxapi.cpp	2009-02-06 04:51:41.000000000 +0100
@@ -1,149 +1,153 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-#include "stdafx.h"
-
-#include "oalefxapi.h"
-
-// Imported EFX functions
-
-// Effect objects
-LPALGENEFFECTS alGenEffects = NULL;
-LPALDELETEEFFECTS alDeleteEffects = NULL;
-LPALISEFFECT alIsEffect = NULL;
-LPALEFFECTI alEffecti = NULL;
-LPALEFFECTIV alEffectiv = NULL;
-LPALEFFECTF alEffectf = NULL;
-LPALEFFECTFV alEffectfv = NULL;
-LPALGETEFFECTI alGetEffecti = NULL;
-LPALGETEFFECTIV alGetEffectiv = NULL;
-LPALGETEFFECTF alGetEffectf = NULL;
-LPALGETEFFECTFV alGetEffectfv = NULL;
-
-//Filter objects
-LPALGENFILTERS alGenFilters = NULL;
-LPALDELETEFILTERS alDeleteFilters = NULL;
-LPALISFILTER alIsFilter = NULL;
-LPALFILTERI alFilteri = NULL;
-LPALFILTERIV alFilteriv = NULL;
-LPALFILTERF alFilterf = NULL;
-LPALFILTERFV alFilterfv = NULL;
-LPALGETFILTERI alGetFilteri = NULL;
-LPALGETFILTERIV alGetFilteriv = NULL;
-LPALGETFILTERF alGetFilterf = NULL;
-LPALGETFILTERFV alGetFilterfv = NULL;
-
-// Auxiliary slot object
-LPALGENAUXILIARYEFFECTSLOTS alGenAuxiliaryEffectSlots = NULL;
-LPALDELETEAUXILIARYEFFECTSLOTS alDeleteAuxiliaryEffectSlots = NULL;
-LPALISAUXILIARYEFFECTSLOT alIsAuxiliaryEffectSlot = NULL;
-LPALAUXILIARYEFFECTSLOTI alAuxiliaryEffectSloti = NULL;
-LPALAUXILIARYEFFECTSLOTIV alAuxiliaryEffectSlotiv = NULL;
-LPALAUXILIARYEFFECTSLOTF alAuxiliaryEffectSlotf = NULL;
-LPALAUXILIARYEFFECTSLOTFV alAuxiliaryEffectSlotfv = NULL;
-LPALGETAUXILIARYEFFECTSLOTI alGetAuxiliaryEffectSloti = NULL;
-LPALGETAUXILIARYEFFECTSLOTIV alGetAuxiliaryEffectSlotiv = NULL;
-LPALGETAUXILIARYEFFECTSLOTF alGetAuxiliaryEffectSlotf = NULL;
-LPALGETAUXILIARYEFFECTSLOTFV alGetAuxiliaryEffectSlotfv = NULL;
-
-
-bool InitEfxApi() {
-
-	ALCcontext *pContext = alcGetCurrentContext();
-	ALCdevice *pDevice = alcGetContextsDevice(pContext);
-	if ( !alcIsExtensionPresent(pDevice, (ALCchar*)ALC_EXT_EFX_NAME) )
-		return false;
-
-	// Get function pointers
-	alGenEffects = (LPALGENEFFECTS)alGetProcAddress("alGenEffects");
-	alDeleteEffects = (LPALDELETEEFFECTS )alGetProcAddress("alDeleteEffects");
-	alIsEffect = (LPALISEFFECT )alGetProcAddress("alIsEffect");
-	alEffecti = (LPALEFFECTI)alGetProcAddress("alEffecti");
-	alEffectiv = (LPALEFFECTIV)alGetProcAddress("alEffectiv");
-	alEffectf = (LPALEFFECTF)alGetProcAddress("alEffectf");
-	alEffectfv = (LPALEFFECTFV)alGetProcAddress("alEffectfv");
-	alGetEffecti = (LPALGETEFFECTI)alGetProcAddress("alGetEffecti");
-	alGetEffectiv = (LPALGETEFFECTIV)alGetProcAddress("alGetEffectiv");
-	alGetEffectf = (LPALGETEFFECTF)alGetProcAddress("alGetEffectf");
-	alGetEffectfv = (LPALGETEFFECTFV)alGetProcAddress("alGetEffectfv");
-	alGenFilters = (LPALGENFILTERS)alGetProcAddress("alGenFilters");
-	alDeleteFilters = (LPALDELETEFILTERS)alGetProcAddress("alDeleteFilters");
-	alIsFilter = (LPALISFILTER)alGetProcAddress("alIsFilter");
-	alFilteri = (LPALFILTERI)alGetProcAddress("alFilteri");
-	alFilteriv = (LPALFILTERIV)alGetProcAddress("alFilteriv");
-	alFilterf = (LPALFILTERF)alGetProcAddress("alFilterf");
-	alFilterfv = (LPALFILTERFV)alGetProcAddress("alFilterfv");
-	alGetFilteri = (LPALGETFILTERI )alGetProcAddress("alGetFilteri");
-	alGetFilteriv= (LPALGETFILTERIV )alGetProcAddress("alGetFilteriv");
-	alGetFilterf = (LPALGETFILTERF )alGetProcAddress("alGetFilterf");
-	alGetFilterfv= (LPALGETFILTERFV )alGetProcAddress("alGetFilterfv");
-	alGenAuxiliaryEffectSlots = (LPALGENAUXILIARYEFFECTSLOTS)alGetProcAddress("alGenAuxiliaryEffectSlots");
-	alDeleteAuxiliaryEffectSlots = (LPALDELETEAUXILIARYEFFECTSLOTS)alGetProcAddress("alDeleteAuxiliaryEffectSlots");
-	alIsAuxiliaryEffectSlot = (LPALISAUXILIARYEFFECTSLOT)alGetProcAddress("alIsAuxiliaryEffectSlot");
-	alAuxiliaryEffectSloti = (LPALAUXILIARYEFFECTSLOTI)alGetProcAddress("alAuxiliaryEffectSloti");
-	alAuxiliaryEffectSlotiv = (LPALAUXILIARYEFFECTSLOTIV)alGetProcAddress("alAuxiliaryEffectSlotiv");
-	alAuxiliaryEffectSlotf = (LPALAUXILIARYEFFECTSLOTF)alGetProcAddress("alAuxiliaryEffectSlotf");
-	alAuxiliaryEffectSlotfv = (LPALAUXILIARYEFFECTSLOTFV)alGetProcAddress("alAuxiliaryEffectSlotfv");
-	alGetAuxiliaryEffectSloti = (LPALGETAUXILIARYEFFECTSLOTI)alGetProcAddress("alGetAuxiliaryEffectSloti");
-	alGetAuxiliaryEffectSlotiv = (LPALGETAUXILIARYEFFECTSLOTIV)alGetProcAddress("alGetAuxiliaryEffectSlotiv");
-	alGetAuxiliaryEffectSlotf = (LPALGETAUXILIARYEFFECTSLOTF)alGetProcAddress("alGetAuxiliaryEffectSlotf");
-	alGetAuxiliaryEffectSlotfv = (LPALGETAUXILIARYEFFECTSLOTFV)alGetProcAddress("alGetAuxiliaryEffectSlotfv");
-
-	return alGenEffects &&	alDeleteEffects && alIsEffect && alEffecti && alEffectiv &&	alEffectf &&
-		alEffectfv && alGetEffecti && alGetEffectiv && alGetEffectf && alGetEffectfv &&	alGenFilters &&
-		alDeleteFilters && alIsFilter && alFilteri && alFilteriv &&	alFilterf && alFilterfv &&
-		alGetFilteri &&	alGetFilteriv && alGetFilterf && alGetFilterfv && alGenAuxiliaryEffectSlots &&
-		alDeleteAuxiliaryEffectSlots &&	alIsAuxiliaryEffectSlot && alAuxiliaryEffectSloti &&
-		alAuxiliaryEffectSlotiv && alAuxiliaryEffectSlotf && alAuxiliaryEffectSlotfv &&
-		alGetAuxiliaryEffectSloti && alGetAuxiliaryEffectSlotiv && alGetAuxiliaryEffectSlotf &&
-		alGetAuxiliaryEffectSlotfv; 
-}
-
-
-void ResetEfxApi() {
-
-	alGenEffects = NULL;
-	alDeleteEffects = NULL;
-	alIsEffect = NULL;
-	alEffecti = NULL;
-	alEffectiv = NULL;
-	alEffectf = NULL;
-	alEffectfv = NULL;
-	alGetEffecti = NULL;
-	alGetEffectiv = NULL;
-	alGetEffectf = NULL;
-	alGetEffectfv = NULL;
-	alGenFilters = NULL;
-	alDeleteFilters = NULL;
-	alIsFilter = NULL;
-	alFilteri = NULL;
-	alFilteriv = NULL;
-	alFilterf = NULL;
-	alFilterfv = NULL;
-	alGetFilteri = NULL;
-	alGetFilteriv= NULL;
-	alGetFilterf = NULL;
-	alGetFilterfv= NULL;
-	alGenAuxiliaryEffectSlots = NULL;
-	alDeleteAuxiliaryEffectSlots = NULL;
-	alIsAuxiliaryEffectSlot = NULL;
-	alAuxiliaryEffectSloti = NULL;
-	alAuxiliaryEffectSlotiv = NULL;
-	alAuxiliaryEffectSlotf = NULL;
-	alAuxiliaryEffectSlotfv = NULL;
-	alGetAuxiliaryEffectSloti = NULL;
-	alGetAuxiliaryEffectSlotiv = NULL;
-	alGetAuxiliaryEffectSlotf = NULL;
-	alGetAuxiliaryEffectSlotfv = NULL;
-}
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+#include "stdafx.h"
+
+#include "oalefxapi.h"
+
+#ifdef _WIN32
+
+// Imported EFX functions
+
+// Effect objects
+LPALGENEFFECTS alGenEffects = NULL;
+LPALDELETEEFFECTS alDeleteEffects = NULL;
+LPALISEFFECT alIsEffect = NULL;
+LPALEFFECTI alEffecti = NULL;
+LPALEFFECTIV alEffectiv = NULL;
+LPALEFFECTF alEffectf = NULL;
+LPALEFFECTFV alEffectfv = NULL;
+LPALGETEFFECTI alGetEffecti = NULL;
+LPALGETEFFECTIV alGetEffectiv = NULL;
+LPALGETEFFECTF alGetEffectf = NULL;
+LPALGETEFFECTFV alGetEffectfv = NULL;
+
+//Filter objects
+LPALGENFILTERS alGenFilters = NULL;
+LPALDELETEFILTERS alDeleteFilters = NULL;
+LPALISFILTER alIsFilter = NULL;
+LPALFILTERI alFilteri = NULL;
+LPALFILTERIV alFilteriv = NULL;
+LPALFILTERF alFilterf = NULL;
+LPALFILTERFV alFilterfv = NULL;
+LPALGETFILTERI alGetFilteri = NULL;
+LPALGETFILTERIV alGetFilteriv = NULL;
+LPALGETFILTERF alGetFilterf = NULL;
+LPALGETFILTERFV alGetFilterfv = NULL;
+
+// Auxiliary slot object
+LPALGENAUXILIARYEFFECTSLOTS alGenAuxiliaryEffectSlots = NULL;
+LPALDELETEAUXILIARYEFFECTSLOTS alDeleteAuxiliaryEffectSlots = NULL;
+LPALISAUXILIARYEFFECTSLOT alIsAuxiliaryEffectSlot = NULL;
+LPALAUXILIARYEFFECTSLOTI alAuxiliaryEffectSloti = NULL;
+LPALAUXILIARYEFFECTSLOTIV alAuxiliaryEffectSlotiv = NULL;
+LPALAUXILIARYEFFECTSLOTF alAuxiliaryEffectSlotf = NULL;
+LPALAUXILIARYEFFECTSLOTFV alAuxiliaryEffectSlotfv = NULL;
+LPALGETAUXILIARYEFFECTSLOTI alGetAuxiliaryEffectSloti = NULL;
+LPALGETAUXILIARYEFFECTSLOTIV alGetAuxiliaryEffectSlotiv = NULL;
+LPALGETAUXILIARYEFFECTSLOTF alGetAuxiliaryEffectSlotf = NULL;
+LPALGETAUXILIARYEFFECTSLOTFV alGetAuxiliaryEffectSlotfv = NULL;
+
+
+bool InitEfxApi() {
+
+	ALCcontext *pContext = alcGetCurrentContext();
+	ALCdevice *pDevice = alcGetContextsDevice(pContext);
+	if ( !alcIsExtensionPresent(pDevice, (ALCchar*)ALC_EXT_EFX_NAME) )
+		return false;
+
+	// Get function pointers
+	alGenEffects = (LPALGENEFFECTS)alGetProcAddress("alGenEffects");
+	alDeleteEffects = (LPALDELETEEFFECTS )alGetProcAddress("alDeleteEffects");
+	alIsEffect = (LPALISEFFECT )alGetProcAddress("alIsEffect");
+	alEffecti = (LPALEFFECTI)alGetProcAddress("alEffecti");
+	alEffectiv = (LPALEFFECTIV)alGetProcAddress("alEffectiv");
+	alEffectf = (LPALEFFECTF)alGetProcAddress("alEffectf");
+	alEffectfv = (LPALEFFECTFV)alGetProcAddress("alEffectfv");
+	alGetEffecti = (LPALGETEFFECTI)alGetProcAddress("alGetEffecti");
+	alGetEffectiv = (LPALGETEFFECTIV)alGetProcAddress("alGetEffectiv");
+	alGetEffectf = (LPALGETEFFECTF)alGetProcAddress("alGetEffectf");
+	alGetEffectfv = (LPALGETEFFECTFV)alGetProcAddress("alGetEffectfv");
+	alGenFilters = (LPALGENFILTERS)alGetProcAddress("alGenFilters");
+	alDeleteFilters = (LPALDELETEFILTERS)alGetProcAddress("alDeleteFilters");
+	alIsFilter = (LPALISFILTER)alGetProcAddress("alIsFilter");
+	alFilteri = (LPALFILTERI)alGetProcAddress("alFilteri");
+	alFilteriv = (LPALFILTERIV)alGetProcAddress("alFilteriv");
+	alFilterf = (LPALFILTERF)alGetProcAddress("alFilterf");
+	alFilterfv = (LPALFILTERFV)alGetProcAddress("alFilterfv");
+	alGetFilteri = (LPALGETFILTERI )alGetProcAddress("alGetFilteri");
+	alGetFilteriv= (LPALGETFILTERIV )alGetProcAddress("alGetFilteriv");
+	alGetFilterf = (LPALGETFILTERF )alGetProcAddress("alGetFilterf");
+	alGetFilterfv= (LPALGETFILTERFV )alGetProcAddress("alGetFilterfv");
+	alGenAuxiliaryEffectSlots = (LPALGENAUXILIARYEFFECTSLOTS)alGetProcAddress("alGenAuxiliaryEffectSlots");
+	alDeleteAuxiliaryEffectSlots = (LPALDELETEAUXILIARYEFFECTSLOTS)alGetProcAddress("alDeleteAuxiliaryEffectSlots");
+	alIsAuxiliaryEffectSlot = (LPALISAUXILIARYEFFECTSLOT)alGetProcAddress("alIsAuxiliaryEffectSlot");
+	alAuxiliaryEffectSloti = (LPALAUXILIARYEFFECTSLOTI)alGetProcAddress("alAuxiliaryEffectSloti");
+	alAuxiliaryEffectSlotiv = (LPALAUXILIARYEFFECTSLOTIV)alGetProcAddress("alAuxiliaryEffectSlotiv");
+	alAuxiliaryEffectSlotf = (LPALAUXILIARYEFFECTSLOTF)alGetProcAddress("alAuxiliaryEffectSlotf");
+	alAuxiliaryEffectSlotfv = (LPALAUXILIARYEFFECTSLOTFV)alGetProcAddress("alAuxiliaryEffectSlotfv");
+	alGetAuxiliaryEffectSloti = (LPALGETAUXILIARYEFFECTSLOTI)alGetProcAddress("alGetAuxiliaryEffectSloti");
+	alGetAuxiliaryEffectSlotiv = (LPALGETAUXILIARYEFFECTSLOTIV)alGetProcAddress("alGetAuxiliaryEffectSlotiv");
+	alGetAuxiliaryEffectSlotf = (LPALGETAUXILIARYEFFECTSLOTF)alGetProcAddress("alGetAuxiliaryEffectSlotf");
+	alGetAuxiliaryEffectSlotfv = (LPALGETAUXILIARYEFFECTSLOTFV)alGetProcAddress("alGetAuxiliaryEffectSlotfv");
+
+	return alGenEffects &&	alDeleteEffects && alIsEffect && alEffecti && alEffectiv &&	alEffectf &&
+		alEffectfv && alGetEffecti && alGetEffectiv && alGetEffectf && alGetEffectfv &&	alGenFilters &&
+		alDeleteFilters && alIsFilter && alFilteri && alFilteriv &&	alFilterf && alFilterfv &&
+		alGetFilteri &&	alGetFilteriv && alGetFilterf && alGetFilterfv && alGenAuxiliaryEffectSlots &&
+		alDeleteAuxiliaryEffectSlots &&	alIsAuxiliaryEffectSlot && alAuxiliaryEffectSloti &&
+		alAuxiliaryEffectSlotiv && alAuxiliaryEffectSlotf && alAuxiliaryEffectSlotfv &&
+		alGetAuxiliaryEffectSloti && alGetAuxiliaryEffectSlotiv && alGetAuxiliaryEffectSlotf &&
+		alGetAuxiliaryEffectSlotfv;
+}
+
+
+void ResetEfxApi() {
+
+	alGenEffects = NULL;
+	alDeleteEffects = NULL;
+	alIsEffect = NULL;
+	alEffecti = NULL;
+	alEffectiv = NULL;
+	alEffectf = NULL;
+	alEffectfv = NULL;
+	alGetEffecti = NULL;
+	alGetEffectiv = NULL;
+	alGetEffectf = NULL;
+	alGetEffectfv = NULL;
+	alGenFilters = NULL;
+	alDeleteFilters = NULL;
+	alIsFilter = NULL;
+	alFilteri = NULL;
+	alFilteriv = NULL;
+	alFilterf = NULL;
+	alFilterfv = NULL;
+	alGetFilteri = NULL;
+	alGetFilteriv= NULL;
+	alGetFilterf = NULL;
+	alGetFilterfv= NULL;
+	alGenAuxiliaryEffectSlots = NULL;
+	alDeleteAuxiliaryEffectSlots = NULL;
+	alIsAuxiliaryEffectSlot = NULL;
+	alAuxiliaryEffectSloti = NULL;
+	alAuxiliaryEffectSlotiv = NULL;
+	alAuxiliaryEffectSlotf = NULL;
+	alAuxiliaryEffectSlotfv = NULL;
+	alGetAuxiliaryEffectSloti = NULL;
+	alGetAuxiliaryEffectSlotiv = NULL;
+	alGetAuxiliaryEffectSlotf = NULL;
+	alGetAuxiliaryEffectSlotfv = NULL;
+}
+
+#endif // _WIN32
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/oalefxapi.h jslibs-0.9-r1881/src/jsaudio/oalefxapi.h
--- jslibs-0.9-r1881_orig/src/jsaudio/oalefxapi.h	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/oalefxapi.h	2009-02-06 04:51:41.000000000 +0100
@@ -1,58 +1,61 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-
-// EFX Extension function pointer variables
-
-// Effect objects
-extern LPALGENEFFECTS alGenEffects;
-extern LPALDELETEEFFECTS alDeleteEffects;
-extern LPALISEFFECT alIsEffect;
-extern LPALEFFECTI alEffecti;
-extern LPALEFFECTIV alEffectiv;
-extern LPALEFFECTF alEffectf;
-extern LPALEFFECTFV alEffectfv;
-extern LPALGETEFFECTI alGetEffecti;
-extern LPALGETEFFECTIV alGetEffectiv;
-extern LPALGETEFFECTF alGetEffectf;
-extern LPALGETEFFECTFV alGetEffectfv;
-
-// Filter objects
-extern LPALGENFILTERS alGenFilters;
-extern LPALDELETEFILTERS alDeleteFilters;
-extern LPALISFILTER alIsFilter;
-extern LPALFILTERI alFilteri;
-extern LPALFILTERIV alFilteriv;
-extern LPALFILTERF alFilterf;
-extern LPALFILTERFV alFilterfv;
-extern LPALGETFILTERI alGetFilteri;
-extern LPALGETFILTERIV alGetFilteriv;
-extern LPALGETFILTERF alGetFilterf;
-extern LPALGETFILTERFV alGetFilterfv;
-
-// Auxiliary slot object
-extern LPALGENAUXILIARYEFFECTSLOTS alGenAuxiliaryEffectSlots;
-extern LPALDELETEAUXILIARYEFFECTSLOTS alDeleteAuxiliaryEffectSlots;
-extern LPALISAUXILIARYEFFECTSLOT alIsAuxiliaryEffectSlot;
-extern LPALAUXILIARYEFFECTSLOTI alAuxiliaryEffectSloti;
-extern LPALAUXILIARYEFFECTSLOTIV alAuxiliaryEffectSlotiv;
-extern LPALAUXILIARYEFFECTSLOTF alAuxiliaryEffectSlotf;
-extern LPALAUXILIARYEFFECTSLOTFV alAuxiliaryEffectSlotfv;
-extern LPALGETAUXILIARYEFFECTSLOTI alGetAuxiliaryEffectSloti;
-extern LPALGETAUXILIARYEFFECTSLOTIV alGetAuxiliaryEffectSlotiv;
-extern LPALGETAUXILIARYEFFECTSLOTF alGetAuxiliaryEffectSlotf;
-extern LPALGETAUXILIARYEFFECTSLOTFV alGetAuxiliaryEffectSlotfv;
-
-bool InitEfxApi();
-void ResetEfxApi();
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+#ifdef _WIN32
+
+// EFX Extension function pointer variables
+
+// Effect objects
+extern LPALGENEFFECTS alGenEffects;
+extern LPALDELETEEFFECTS alDeleteEffects;
+extern LPALISEFFECT alIsEffect;
+extern LPALEFFECTI alEffecti;
+extern LPALEFFECTIV alEffectiv;
+extern LPALEFFECTF alEffectf;
+extern LPALEFFECTFV alEffectfv;
+extern LPALGETEFFECTI alGetEffecti;
+extern LPALGETEFFECTIV alGetEffectiv;
+extern LPALGETEFFECTF alGetEffectf;
+extern LPALGETEFFECTFV alGetEffectfv;
+
+// Filter objects
+extern LPALGENFILTERS alGenFilters;
+extern LPALDELETEFILTERS alDeleteFilters;
+extern LPALISFILTER alIsFilter;
+extern LPALFILTERI alFilteri;
+extern LPALFILTERIV alFilteriv;
+extern LPALFILTERF alFilterf;
+extern LPALFILTERFV alFilterfv;
+extern LPALGETFILTERI alGetFilteri;
+extern LPALGETFILTERIV alGetFilteriv;
+extern LPALGETFILTERF alGetFilterf;
+extern LPALGETFILTERFV alGetFilterfv;
+
+// Auxiliary slot object
+extern LPALGENAUXILIARYEFFECTSLOTS alGenAuxiliaryEffectSlots;
+extern LPALDELETEAUXILIARYEFFECTSLOTS alDeleteAuxiliaryEffectSlots;
+extern LPALISAUXILIARYEFFECTSLOT alIsAuxiliaryEffectSlot;
+extern LPALAUXILIARYEFFECTSLOTI alAuxiliaryEffectSloti;
+extern LPALAUXILIARYEFFECTSLOTIV alAuxiliaryEffectSlotiv;
+extern LPALAUXILIARYEFFECTSLOTF alAuxiliaryEffectSlotf;
+extern LPALAUXILIARYEFFECTSLOTFV alAuxiliaryEffectSlotfv;
+extern LPALGETAUXILIARYEFFECTSLOTI alGetAuxiliaryEffectSloti;
+extern LPALGETAUXILIARYEFFECTSLOTIV alGetAuxiliaryEffectSlotiv;
+extern LPALGETAUXILIARYEFFECTSLOTF alGetAuxiliaryEffectSlotf;
+extern LPALGETAUXILIARYEFFECTSLOTFV alGetAuxiliaryEffectSlotfv;
+
+bool InitEfxApi();
+void ResetEfxApi();
+
+#endif // _WIN32
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/source.cpp jslibs-0.9-r1881/src/jsaudio/source.cpp
--- jslibs-0.9-r1881_orig/src/jsaudio/source.cpp	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/source.cpp	2009-02-06 04:54:02.000000000 +0100
@@ -1,784 +1,791 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-#include "stdafx.h"
-
-#include "../common/queue.h"
-
-#include "error.h"
-
-#include "oalefxapi.h"
-
-
-struct Private {
-	ALuint sid;
-	jl::Queue *queue;
-	ALuint effectSlot;
-	float totalTime;
-};
-
-
-inline float BufferSecTime( ALint bid ) {
-
-	ALint freq, size, bits, channels;
-	alGetBufferi(bid, AL_FREQUENCY, &freq);
-	alGetBufferi(bid, AL_SIZE, &size);
-	alGetBufferi(bid, AL_BITS, &bits);
-	alGetBufferi(bid, AL_CHANNELS, &channels);
-	return (float)size / (float)( (bits/8) * channels * freq );
-}
-
-
-
-
-/*
-	jsval *pItem = (jsval*)malloc(sizeof(jsval));
-	J_S_ASSERT_ALLOC( pItem );
-	*pItem = value;
-	QueuePush( queue, pItem ); // no need to JS_AddRoot *pItem, see Tracer callback
-	return JS_TRUE;
-	JL_BAD;
-}
-
-inline JSBool UnshiftJsval( JSContext *cx, jl::Queue *queue, jsval value ) {
-
-	jsval *pItem = (jsval*)malloc(sizeof(jsval));
-	J_S_ASSERT_ALLOC( pItem );
-	*pItem = value;
-	QueueUnshift( queue, pItem ); // no need to JS_AddRoot *pItem, see Tracer callback
-	return JS_TRUE;
-	JL_BAD;
-}
-*/
-
-
-JSBool QueueBuffersJsval( JSContext *cx, jl::Queue *queue, jsval value ) {
-
-	jsval *pItem = (jsval*)JS_malloc(cx, sizeof(jsval));
-	J_S_ASSERT_ALLOC( pItem );
-	*pItem = value;
-	QueuePush(queue, pItem); // no need to JS_AddRoot *pItem, see Tracer callback !
-	return JS_TRUE;
-	JL_BAD;
-}
-
-/*
-JSBool UnqueueBuffersJsval( JSContext *cx, jl::Queue *queue, jsval value ) {
-
-	for ( jl::QueueCell *it = jl::QueueBegin(queue); it; it = jl::QueueNext(it) ) {
-
-		if ( *(jsval*)QueueGetData(it) == value ) {
-
-			jsval *pItem = (jsval*)QueueRemoveCell(queue, it);
-			JS_free(cx, pItem);
-			return JS_TRUE;
-		}
-	}
-	return JS_FALSE; // not found
-}
-*/
-
-jsval UnqueueBuffersJsval( JSContext *cx, jl::Queue *queue, jsval *rval ) {
-
-	jsval *pval = (jsval*)QueueShift(queue);
-	*rval = *pval;
-	JS_free(cx, pval);
-	return JS_TRUE;
-}
-
-
-BEGIN_CLASS( OalSource )
-
-DEFINE_TRACER() {
-
-	Private *pv = (Private*)JS_GetPrivate(trc->context, obj);
-	if ( pv )
-		for ( jl::QueueCell *it = jl::QueueBegin(pv->queue); it; it = jl::QueueNext(it) ) {
-
-			jsval *val = (jsval*)QueueGetData(it);
-			if ( !JSVAL_IS_PRIMITIVE(*val) )
-				JS_CALL_VALUE_TRACER(trc, *val, "jsstd/Buffer:bufferQueueItem");
-		}
-}
-
-
-DEFINE_FINALIZE() {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	if ( pv ) {
-
-		while ( !QueueIsEmpty(pv->queue) ) {
-
-			jsval *pItem = (jsval*)QueuePop(pv->queue);
-			JS_free(cx, pItem);
-		}
-		QueueDestruct(pv->queue);
-
-		if ( alcGetCurrentContext() ) {
-
-//			alAuxiliaryEffectSloti(pv->effectSlot, AL_EFFECTSLOT_EFFECT, AL_EFFECT_NULL);
-			alDeleteAuxiliaryEffectSlots(1, &pv->effectSlot);
-			alDeleteSources(1, &pv->sid);
-		}
-	}
-}
-
-/**doc
- * $INAME()
-  Creates a new source object.
-**/
-DEFINE_CONSTRUCTOR() {
-
-	Private *pv = (Private*)JS_malloc(cx, sizeof(Private));
-	pv->queue = jl::QueueConstruct();
-
-	alGenSources(1, &pv->sid);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	alGenAuxiliaryEffectSlots(1, &pv->effectSlot);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( JS_SetPrivate(cx, obj, pv) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $VOID $INAME( buffer )
-  $H arguments
-   $ARG OalBuffer | BufferId: a Buffer Object or a buffer Id.
-  $H OpenAL API
-   alDeleteBuffers
-**/
-DEFINE_FUNCTION_FAST( QueueBuffers ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-	*J_FRVAL = JSVAL_VOID;
-	ALuint bid;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &bid) );
-	J_S_ASSERT( alIsBuffer(bid), "Invalid buffer." );
-
-	alSourceQueueBuffers(pv->sid, 1, &bid);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	J_CHK( QueueBuffersJsval(cx, pv->queue, J_FARG(1)) );
-
-	ALint queueSize;
-	alGetSourcei(pv->sid, AL_BUFFERS_QUEUED, &queueSize);
-	if ( queueSize == 1 )
-		pv->totalTime = 0;
-	pv->totalTime += BufferSecTime(bid);
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/**doc
- * $Buffer $INAME()
-  $H OpenAL API
-   alDeleteBuffers
-**/
-DEFINE_FUNCTION_FAST( UnqueueBuffers ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-	ALuint bid;
-	alSourceUnqueueBuffers(pv->sid, 1, &bid);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	J_CHK( UnqueueBuffersJsval(cx, pv->queue, J_FRVAL ) );
-	J_SAFE(
-		ALuint tmp;
-		J_CHK( JsvalToUInt(cx, *J_FRVAL, &tmp) );
-		J_S_ASSERT( bid == tmp, "Internal error in UnqueueBuffers()." );
-	);
-	pv->totalTime -= BufferSecTime(bid);
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-DEFINE_FUNCTION_FAST( Play ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-
-	alSourcePlay(pv->sid);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_FUNCTION_FAST( Pause ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-
-	alSourcePause(pv->sid);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_FUNCTION_FAST( Stop ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-
-	alSourceStop(pv->sid);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_FUNCTION_FAST( Rewind ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-
-	alSourceRewind(pv->sid);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/*
-DEFINE_FUNCTION_FAST( Effect ) {
-
-	J_S_ASSERT_ARG_MIN(1);
-	J_S_ASSERT_INT(J_FARG(1));
-
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-	ALuint send;
-	J_CHK( JsvalToUInt(cx, J_FARG(1), &send) );
-
-	ALuint effectSlot = AL_EFFECTSLOT_NULL;
-	ALuint filter = AL_FILTER_NULL;
-	if ( J_FARG_ISDEF(2) )
-		J_CHK( JsvalToUInt(cx, J_FARG(2), &effectSlot) );
-//	if ( J_FARG_ISDEF(3) )
-//		J_CHK( JsvalToUInt(cx, J_FARG(3), &filter) );
-
-//	ALCdevice *device = alcGetContextsDevice(alcGetCurrentContext());
-//	ALCint numSends;
-//	alcGetIntegerv(device, ALC_MAX_AUXILIARY_SENDS, 1, &numSends);
-
-	J_CHK( JS_DefineProperty(cx, J_FOBJ, "effect", J_FARG(2), NULL, NULL, JSPROP_READONLY | JSPROP_PERMANENT) );
-
-	alSource3i(pv->sid, AL_AUXILIARY_SEND_FILTER, effectSlot, send, filter);
-	return JS_TRUE;
-	JL_BAD;
-}
-*/
-
-
-DEFINE_FUNCTION_FAST( valueOf ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-	J_CHK( UIntToJsval(cx, pv->sid, J_FRVAL) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-/**doc
-=== Properties ===
-**/
-
-DEFINE_PROPERTY( effect ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-
-	ALuint effect;
-	if ( !JSVAL_IS_VOID(*vp) )
-		J_CHK( JsvalToUInt(cx, *vp, &effect) );
-	else
-		effect = AL_EFFECT_NULL;
-
-	alAuxiliaryEffectSloti( pv->effectSlot, AL_EFFECTSLOT_EFFECT, effect );
-	J_CHK( CheckThrowCurrentOalError(cx) );
-//		effectSlot = AL_EFFECTSLOT_NULL;
-
-//	int tmp[10];
-//	alGetSource3i(pv->sid, AL_AUXILIARY_SEND_FILTER, tmp);
-//	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	alSource3i(pv->sid, AL_AUXILIARY_SEND_FILTER, pv->effectSlot, 0, AL_FILTER_NULL);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-DEFINE_PROPERTY_SETTER( effectGain ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	float gain;
-	J_CHK( JsvalToFloat(cx, *vp, &gain) );
-	alAuxiliaryEffectSlotf( pv->effectSlot, AL_EFFECTSLOT_GAIN, gain );
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( effectGain ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	float gain;
-	alGetAuxiliaryEffectSlotf( pv->effectSlot, AL_EFFECTSLOT_GAIN, &gain );
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	J_CHK( FloatToJsval(cx, gain, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-DEFINE_PROPERTY_SETTER( effectSendAuto ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	bool sendAuto;
-	J_CHK( JsvalToBool(cx, *vp, &sendAuto) );
-	alAuxiliaryEffectSloti( pv->effectSlot, AL_EFFECTSLOT_AUXILIARY_SEND_AUTO, sendAuto ? AL_TRUE : AL_FALSE );
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( effectSendAuto ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	int sendAuto;
-	alGetAuxiliaryEffectSloti( pv->effectSlot, AL_EFFECTSLOT_AUXILIARY_SEND_AUTO, &sendAuto );
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	J_CHK( BoolToJsval(cx, sendAuto == AL_TRUE ? true : false, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-
-DEFINE_PROPERTY( directFilter ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-
-	ALuint filter;
-	if ( !JSVAL_IS_VOID(*vp) )
-		J_CHK( JsvalToUInt(cx, *vp, &filter) );
-	else
-		filter = AL_FILTER_NULL;
-
-	alSourcei(pv->sid, AL_DIRECT_FILTER, filter);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-DEFINE_PROPERTY_SETTER( buffer ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALint bid;
-	if ( JSVAL_IS_VOID( *vp ) || *vp == JSVAL_ZERO )
-		bid = AL_NONE;
-	else
-		J_CHK( JsvalToInt(cx, *vp, &bid) ); // calls OalBuffer valueOf function
-	J_S_ASSERT( alIsBuffer(bid), "Invalid buffer." );
-
-	alSourcei(pv->sid, AL_BUFFER, bid);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	pv->totalTime = BufferSecTime(bid);
-
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( buffer ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALint bid;
-	alGetSourcei(pv->sid, AL_BUFFER, &bid);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	// look if the current value hold tby the property (_STORE) is the current buffer)
-	if ( !JSVAL_IS_VOID( *vp ) ) {
-
-		ALint tmp;
-		J_CHK( JsvalToInt(cx, *vp, &tmp) ); // calls OalBuffer valueOf function
-		J_S_ASSERT( alIsBuffer(tmp), "Invalid buffer." );
-		if ( tmp == bid )
-			return JS_TRUE;
-	}
-
-	// find the buffer object in the list of jsval
-	for ( jl::QueueCell *it = jl::QueueBegin(pv->queue); it; it = jl::QueueNext(it) ) {
-
-		jsval *val = (jsval*)QueueGetData(it);
-		ALint tmp;
-		J_CHK( JsvalToInt(cx, *val, &tmp) ); // calls OalBuffer valueOf function
-		J_S_ASSERT( alIsBuffer(tmp), "Invalid buffer." );
-		if ( tmp == bid ) {
-
-			*vp = *val;
-			return JS_TRUE;
-		}
-	}
-
-	J_S_ASSERT( alIsBuffer(bid), "Invalid buffer." );
-	J_CHK( IntToJsval(cx, bid, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-/*
-DEFINE_PROPERTY_SETTER( position ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	float pos[3];
-	size_t len;
-	J_CHK( JsvalToFloatVector(cx, *vp, pos, 3, &len) );
-	alSource3f(pv->sid, AL_POSITION, pos[0], pos[1], pos[2]);
-	return JS_TRUE;
-	JL_BAD;
-}
-*/
-
-
-DEFINE_FUNCTION_FAST( Position ) {
-
-	J_S_ASSERT_ARG_MIN(3);
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-	float pos[3];
-	J_CHK( JsvalToFloat(cx, J_FARG(1), &pos[0]) );
-	J_CHK( JsvalToFloat(cx, J_FARG(2), &pos[1]) );
-	J_CHK( JsvalToFloat(cx, J_FARG(3), &pos[2]) );
-
-	alSource3f(pv->sid, AL_POSITION, pos[0], pos[1], pos[2]);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-DEFINE_PROPERTY( position ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	float pos[3];
-
-	alGetSource3f(pv->sid, AL_POSITION, &pos[0], &pos[1], &pos[2]);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( FloatVectorToJsval(cx, pos, 3, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-/*
-DEFINE_PROPERTY_SETTER( velocity ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	float pos[3];
-	size_t len;
-	J_CHK( JsvalToFloatVector(cx, *vp, pos, 3, &len) );
-	alSource3f(pv->sid, AL_VELOCITY, pos[0], pos[1], pos[2]);
-	return JS_TRUE;
-	JL_BAD;
-}
-*/
-DEFINE_FUNCTION_FAST( Velocity ) {
-
-	J_S_ASSERT_ARG_MIN(3);
-	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
-	J_S_ASSERT_RESOURCE( pv );
-	float pos[3];
-	J_CHK( JsvalToFloat(cx, J_FARG(1), &pos[0]) );
-	J_CHK( JsvalToFloat(cx, J_FARG(2), &pos[1]) );
-	J_CHK( JsvalToFloat(cx, J_FARG(3), &pos[2]) );
-
-	alSource3f(pv->sid, AL_VELOCITY, pos[0], pos[1], pos[2]);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	*J_FRVAL = JSVAL_VOID;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY( velocity ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	float pos[3];
-
-	alGetSource3f(pv->sid, AL_VELOCITY, &pos[0], &pos[1], &pos[2]);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-
-	J_CHK( FloatVectorToJsval(cx, pos, 3, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-
-DEFINE_PROPERTY( remainingTime ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-
-	ALint loop;
-	alGetSourcei(pv->sid, AL_LOOPING, &loop);
-	if ( loop == AL_TRUE ) {
-
-		*vp = JS_GetPositiveInfinityValue(cx);
-		return JS_TRUE;
-	}
-
-	ALint state;
-	alGetSourcei(pv->sid, AL_SOURCE_STATE, &state);
-	if ( state != AL_PLAYING && state != AL_PAUSED ) {
-
-		*vp = JSVAL_VOID;
-		return JS_TRUE;
-	}
-
-	ALfloat secOffset;
-	alGetSourcef(pv->sid, AL_SEC_OFFSET, &secOffset);
-	J_CHK( FloatToJsval(cx, pv->totalTime - secOffset, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-static const int enumToConst[] = {
-	AL_SOURCE_STATE,
-	AL_SOURCE_RELATIVE,
-	AL_LOOPING,
-	AL_SEC_OFFSET,
-	AL_GAIN,
-	AL_MIN_GAIN,
-	AL_MAX_GAIN,
-	AL_AIR_ABSORPTION_FACTOR,
-	AL_ROOM_ROLLOFF_FACTOR,
-	AL_CONE_OUTER_GAINHF,
-	AL_DIRECT_FILTER_GAINHF_AUTO,
-	AL_AUXILIARY_SEND_FILTER_GAIN_AUTO,
-	AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO,
-	AL_REFERENCE_DISTANCE,
-	AL_MAX_DISTANCE,
-	AL_BUFFERS_QUEUED,
-	AL_BUFFERS_PROCESSED
-};
-
-
-enum {
-	state = 0,
-	sourceRelative,
-	looping,
-	secOffset,
-	gain,
-	minGain,
-	maxGain,
-	airAbsorptionFactor,
-	roomRolloffFactor,
-	coneOuterGainhf,
-	directFilterGainhfAuto,
-	auxiliarySendFilterGainAuto,
-	auxiliarySendFilterGainhfAuto,
-	referenceDistance,
-	maxDistance,
-	buffersQueued,
-	buffersProcessed
-};
-
-
-
-// 'ind' suffix mean that an indirection is needed because tinyid (8bit) cannot store any OpenAL constant.
-DEFINE_PROPERTY_SETTER( sourceFloatInd ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = enumToConst[JSVAL_TO_INT(id)];
-	float f;
-	J_CHK( JsvalToFloat(cx, *vp, &f) );
-	alSourcef(pv->sid, param, f);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( sourceFloatInd ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = enumToConst[JSVAL_TO_INT(id)]; // see sourceFloatInd comment.
-	float f;
-	alGetSourcef(pv->sid, param, &f);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	J_CHK( FloatToJsval(cx, f, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_SETTER( sourceIntInd ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = JSVAL_TO_INT(id);
-	int i;
-	J_CHK( JsvalToInt(cx, *vp, &i) );
-	alSourcei(pv->sid, param, i);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( sourceIntInd ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = JSVAL_TO_INT(id);
-	int i;
-	alGetSourcei(pv->sid, param, &i);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	J_CHK( IntToJsval(cx, i, vp) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_SETTER( sourceBoolInd ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = enumToConst[JSVAL_TO_INT(id)]; // see sourceFloatInd comment.
-	bool b;
-	J_CHK( JsvalToBool(cx, *vp, &b) );
-	alSourcei(pv->sid, param, b ? AL_TRUE : AL_FALSE);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	return JS_TRUE;
-	JL_BAD;
-}
-
-DEFINE_PROPERTY_GETTER( sourceBoolInd ) {
-
-	Private *pv = (Private*)JS_GetPrivate(cx, obj);
-	J_S_ASSERT_RESOURCE( pv );
-	ALenum param = enumToConst[JSVAL_TO_INT(id)]; // see sourceFloatInd comment.
-	int i;
-	alGetSourcei(pv->sid, param, &i);
-	J_CHK( CheckThrowCurrentOalError(cx) );
-	*vp = i == AL_TRUE ? JSVAL_TRUE : JSVAL_FALSE;
-	return JS_TRUE;
-	JL_BAD;
-}
-
-
-
-CONFIGURE_CLASS
-
-	REVISION(SvnRevToInt("$Revision: 2210 $"))
-	HAS_PRIVATE
-	HAS_RESERVED_SLOTS(1)
-	HAS_CONSTRUCTOR
-	HAS_FINALIZE
-	HAS_TRACER
-
-	BEGIN_FUNCTION_SPEC
-		FUNCTION_FAST_ARGC( Position, 3 )
-		FUNCTION_FAST_ARGC( Velocity, 3 )
-
-		FUNCTION_FAST( Play )
-		FUNCTION_FAST( Pause )
-		FUNCTION_FAST( Stop )
-		FUNCTION_FAST( Rewind )
-
-		FUNCTION_FAST( QueueBuffers )
-		FUNCTION_FAST( UnqueueBuffers )
-
-		FUNCTION_FAST( valueOf )
-	END_FUNCTION_SPEC
-
-	BEGIN_PROPERTY_SPEC
-
-		PROPERTY_READ( position )
-		PROPERTY_READ( velocity )
-
-//		PROPERTY_WRITE_STORE( buffer )
-		PROPERTY_STORE( buffer )
-
-		PROPERTY_WRITE_STORE( effect )
-		PROPERTY_WRITE_STORE( directFilter )
-
-		PROPERTY( effectGain )
-		PROPERTY( effectSendAuto )
-
-		PROPERTY_READ( remainingTime )
-
-		PROPERTY_SWITCH_READ( buffersQueued, sourceIntIndGetter )
-		PROPERTY_SWITCH_READ( buffersProcessed, sourceIntIndGetter )
-		PROPERTY_SWITCH_READ( state, sourceIntIndGetter )
-		PROPERTY_SWITCH( looping, sourceBoolInd )
-		PROPERTY_SWITCH( sourceRelative, sourceBoolInd )
-		PROPERTY_SWITCH( gain, sourceFloatInd )
-		PROPERTY_SWITCH( minGain, sourceFloatInd )
-		PROPERTY_SWITCH( maxGain, sourceFloatInd )
-		PROPERTY_SWITCH( secOffset, sourceFloatInd )
-		PROPERTY_SWITCH( airAbsorptionFactor, sourceFloatInd )
-		PROPERTY_SWITCH( roomRolloffFactor, sourceFloatInd )
-		PROPERTY_SWITCH( coneOuterGainhf, sourceFloatInd )
-		PROPERTY_SWITCH( directFilterGainhfAuto, sourceBoolInd )
-		PROPERTY_SWITCH( auxiliarySendFilterGainAuto, sourceBoolInd )
-		PROPERTY_SWITCH( auxiliarySendFilterGainhfAuto, sourceBoolInd )
-		PROPERTY_SWITCH( referenceDistance, sourceFloatInd )
-		PROPERTY_SWITCH( maxDistance, sourceFloatInd )
-
-	END_PROPERTY_SPEC
-
-END_CLASS
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+#include "stdafx.h"
+
+#include "../common/queue.h"
+
+#include "error.h"
+
+#include "oalefxapi.h"
+
+
+struct Private {
+	ALuint sid;
+	jl::Queue *queue;
+	ALuint effectSlot;
+	float totalTime;
+};
+
+
+inline float BufferSecTime( ALint bid ) {
+
+	ALint freq, size, bits, channels;
+	alGetBufferi(bid, AL_FREQUENCY, &freq);
+	alGetBufferi(bid, AL_SIZE, &size);
+	alGetBufferi(bid, AL_BITS, &bits);
+	alGetBufferi(bid, AL_CHANNELS, &channels);
+	return (float)size / (float)( (bits/8) * channels * freq );
+}
+
+
+
+
+/*
+	jsval *pItem = (jsval*)malloc(sizeof(jsval));
+	J_S_ASSERT_ALLOC( pItem );
+	*pItem = value;
+	QueuePush( queue, pItem ); // no need to JS_AddRoot *pItem, see Tracer callback
+	return JS_TRUE;
+	JL_BAD;
+}
+
+inline JSBool UnshiftJsval( JSContext *cx, jl::Queue *queue, jsval value ) {
+
+	jsval *pItem = (jsval*)malloc(sizeof(jsval));
+	J_S_ASSERT_ALLOC( pItem );
+	*pItem = value;
+	QueueUnshift( queue, pItem ); // no need to JS_AddRoot *pItem, see Tracer callback
+	return JS_TRUE;
+	JL_BAD;
+}
+*/
+
+
+JSBool QueueBuffersJsval( JSContext *cx, jl::Queue *queue, jsval value ) {
+
+	jsval *pItem = (jsval*)JS_malloc(cx, sizeof(jsval));
+	J_S_ASSERT_ALLOC( pItem );
+	*pItem = value;
+	QueuePush(queue, pItem); // no need to JS_AddRoot *pItem, see Tracer callback !
+	return JS_TRUE;
+}
+
+/*
+JSBool UnqueueBuffersJsval( JSContext *cx, jl::Queue *queue, jsval value ) {
+
+	for ( jl::QueueCell *it = jl::QueueBegin(queue); it; it = jl::QueueNext(it) ) {
+
+		if ( *(jsval*)QueueGetData(it) == value ) {
+
+			jsval *pItem = (jsval*)QueueRemoveCell(queue, it);
+			JS_free(cx, pItem);
+			return JS_TRUE;
+		}
+	}
+	return JS_FALSE; // not found
+}
+*/
+
+jsval UnqueueBuffersJsval( JSContext *cx, jl::Queue *queue, jsval *rval ) {
+
+	jsval *pval = (jsval*)QueueShift(queue);
+	*rval = *pval;
+	JS_free(cx, pval);
+	return JS_TRUE;
+}
+
+
+BEGIN_CLASS( OalSource )
+
+DEFINE_TRACER() {
+
+	Private *pv = (Private*)JS_GetPrivate(trc->context, obj);
+	if ( pv )
+		for ( jl::QueueCell *it = jl::QueueBegin(pv->queue); it; it = jl::QueueNext(it) ) {
+
+			jsval *val = (jsval*)QueueGetData(it);
+			if ( !JSVAL_IS_PRIMITIVE(*val) )
+				JS_CALL_VALUE_TRACER(trc, *val, "jsstd/Buffer:bufferQueueItem");
+		}
+}
+
+
+DEFINE_FINALIZE() {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	if ( pv ) {
+
+		while ( !QueueIsEmpty(pv->queue) ) {
+
+			jsval *pItem = (jsval*)QueuePop(pv->queue);
+			JS_free(cx, pItem);
+		}
+		QueueDestruct(pv->queue);
+
+		if ( alcGetCurrentContext() ) {
+
+//			alAuxiliaryEffectSloti(pv->effectSlot, AL_EFFECTSLOT_EFFECT, AL_EFFECT_NULL);
+#ifdef _WIN32
+			alDeleteAuxiliaryEffectSlots(1, &pv->effectSlot);
+#endif
+			alDeleteSources(1, &pv->sid);
+		}
+	}
+}
+
+/**doc
+ * $INAME()
+  Creates a new source object.
+**/
+DEFINE_CONSTRUCTOR() {
+
+	Private *pv = (Private*)JS_malloc(cx, sizeof(Private));
+	pv->queue = jl::QueueConstruct();
+
+	alGenSources(1, &pv->sid);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+#ifdef _WIN32
+	alGenAuxiliaryEffectSlots(1, &pv->effectSlot);
+#endif
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( JS_SetPrivate(cx, obj, pv) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $VOID $INAME( buffer )
+  $H arguments
+   $ARG OalBuffer | BufferId: a Buffer Object or a buffer Id.
+  $H OpenAL API
+   alDeleteBuffers
+**/
+DEFINE_FUNCTION_FAST( QueueBuffers ) {
+  Private *pv;
+	J_S_ASSERT_ARG_MIN(1);
+	pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+	*J_FRVAL = JSVAL_VOID;
+	ALuint bid;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &bid) );
+	J_S_ASSERT( alIsBuffer(bid), "Invalid buffer." );
+
+	alSourceQueueBuffers(pv->sid, 1, &bid);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	J_CHK( QueueBuffersJsval(cx, pv->queue, J_FARG(1)) );
+
+	ALint queueSize;
+	alGetSourcei(pv->sid, AL_BUFFERS_QUEUED, &queueSize);
+	if ( queueSize == 1 )
+		pv->totalTime = 0;
+	pv->totalTime += BufferSecTime(bid);
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/**doc
+ * $Buffer $INAME()
+  $H OpenAL API
+   alDeleteBuffers
+**/
+DEFINE_FUNCTION_FAST( UnqueueBuffers ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+	ALuint bid;
+	alSourceUnqueueBuffers(pv->sid, 1, &bid);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	J_CHK( UnqueueBuffersJsval(cx, pv->queue, J_FRVAL ) );
+	J_SAFE(
+		ALuint tmp;
+		J_CHK( JsvalToUInt(cx, *J_FRVAL, &tmp) );
+		J_S_ASSERT( bid == tmp, "Internal error in UnqueueBuffers()." );
+	);
+	pv->totalTime -= BufferSecTime(bid);
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+DEFINE_FUNCTION_FAST( Play ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+
+	alSourcePlay(pv->sid);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_FUNCTION_FAST( Pause ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+
+	alSourcePause(pv->sid);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_FUNCTION_FAST( Stop ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+
+	alSourceStop(pv->sid);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_FUNCTION_FAST( Rewind ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+
+	alSourceRewind(pv->sid);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/*
+DEFINE_FUNCTION_FAST( Effect ) {
+
+	J_S_ASSERT_ARG_MIN(1);
+	J_S_ASSERT_INT(J_FARG(1));
+
+	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+	ALuint send;
+	J_CHK( JsvalToUInt(cx, J_FARG(1), &send) );
+
+	ALuint effectSlot = AL_EFFECTSLOT_NULL;
+	ALuint filter = AL_FILTER_NULL;
+	if ( J_FARG_ISDEF(2) )
+		J_CHK( JsvalToUInt(cx, J_FARG(2), &effectSlot) );
+//	if ( J_FARG_ISDEF(3) )
+//		J_CHK( JsvalToUInt(cx, J_FARG(3), &filter) );
+
+//	ALCdevice *device = alcGetContextsDevice(alcGetCurrentContext());
+//	ALCint numSends;
+//	alcGetIntegerv(device, ALC_MAX_AUXILIARY_SENDS, 1, &numSends);
+
+	J_CHK( JS_DefineProperty(cx, J_FOBJ, "effect", J_FARG(2), NULL, NULL, JSPROP_READONLY | JSPROP_PERMANENT) );
+
+	alSource3i(pv->sid, AL_AUXILIARY_SEND_FILTER, effectSlot, send, filter);
+	return JS_TRUE;
+	JL_BAD;
+}
+*/
+
+
+DEFINE_FUNCTION_FAST( valueOf ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+	J_CHK( UIntToJsval(cx, pv->sid, J_FRVAL) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+/**doc
+=== Properties ===
+**/
+#ifdef _WIN32
+DEFINE_PROPERTY( effect ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+
+	ALuint effect;
+	if ( !JSVAL_IS_VOID(*vp) )
+		J_CHK( JsvalToUInt(cx, *vp, &effect) );
+	else
+		effect = AL_EFFECT_NULL;
+
+	alAuxiliaryEffectSloti( pv->effectSlot, AL_EFFECTSLOT_EFFECT, effect );
+	J_CHK( CheckThrowCurrentOalError(cx) );
+//		effectSlot = AL_EFFECTSLOT_NULL;
+
+//	int tmp[10];
+//	alGetSource3i(pv->sid, AL_AUXILIARY_SEND_FILTER, tmp);
+//	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	alSource3i(pv->sid, AL_AUXILIARY_SEND_FILTER, pv->effectSlot, 0, AL_FILTER_NULL);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+DEFINE_PROPERTY_SETTER( effectGain ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	float gain;
+	J_CHK( JsvalToFloat(cx, *vp, &gain) );
+	alAuxiliaryEffectSlotf( pv->effectSlot, AL_EFFECTSLOT_GAIN, gain );
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( effectGain ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	float gain;
+	alGetAuxiliaryEffectSlotf( pv->effectSlot, AL_EFFECTSLOT_GAIN, &gain );
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	J_CHK( FloatToJsval(cx, gain, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+DEFINE_PROPERTY_SETTER( effectSendAuto ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	bool sendAuto;
+	J_CHK( JsvalToBool(cx, *vp, &sendAuto) );
+	alAuxiliaryEffectSloti( pv->effectSlot, AL_EFFECTSLOT_AUXILIARY_SEND_AUTO, sendAuto ? AL_TRUE : AL_FALSE );
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( effectSendAuto ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	int sendAuto;
+	alGetAuxiliaryEffectSloti( pv->effectSlot, AL_EFFECTSLOT_AUXILIARY_SEND_AUTO, &sendAuto );
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	J_CHK( BoolToJsval(cx, sendAuto == AL_TRUE ? true : false, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+#endif
+
+
+
+
+DEFINE_PROPERTY( directFilter ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+
+	ALuint filter;
+	if ( !JSVAL_IS_VOID(*vp) )
+		J_CHK( JsvalToUInt(cx, *vp, &filter) );
+	else
+		filter = AL_FILTER_NULL;
+
+	alSourcei(pv->sid, AL_DIRECT_FILTER, filter);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+DEFINE_PROPERTY_SETTER( buffer ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	ALint bid;
+	if ( JSVAL_IS_VOID( *vp ) || *vp == JSVAL_ZERO )
+		bid = AL_NONE;
+	else
+		J_CHK( JsvalToInt(cx, *vp, &bid) ); // calls OalBuffer valueOf function
+	J_S_ASSERT( alIsBuffer(bid), "Invalid buffer." );
+
+	alSourcei(pv->sid, AL_BUFFER, bid);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	pv->totalTime = BufferSecTime(bid);
+
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( buffer ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	ALint bid;
+	alGetSourcei(pv->sid, AL_BUFFER, &bid);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	// look if the current value hold tby the property (_STORE) is the current buffer)
+	if ( !JSVAL_IS_VOID( *vp ) ) {
+
+		ALint tmp;
+		J_CHK( JsvalToInt(cx, *vp, &tmp) ); // calls OalBuffer valueOf function
+		J_S_ASSERT( alIsBuffer(tmp), "Invalid buffer." );
+		if ( tmp == bid )
+			return JS_TRUE;
+	}
+
+	// find the buffer object in the list of jsval
+	for ( jl::QueueCell *it = jl::QueueBegin(pv->queue); it; it = jl::QueueNext(it) ) {
+
+		jsval *val = (jsval*)QueueGetData(it);
+		ALint tmp;
+		J_CHK( JsvalToInt(cx, *val, &tmp) ); // calls OalBuffer valueOf function
+		J_S_ASSERT( alIsBuffer(tmp), "Invalid buffer." );
+		if ( tmp == bid ) {
+
+			*vp = *val;
+			return JS_TRUE;
+		}
+	}
+
+	J_S_ASSERT( alIsBuffer(bid), "Invalid buffer." );
+	J_CHK( IntToJsval(cx, bid, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+/*
+DEFINE_PROPERTY_SETTER( position ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	float pos[3];
+	size_t len;
+	J_CHK( JsvalToFloatVector(cx, *vp, pos, 3, &len) );
+	alSource3f(pv->sid, AL_POSITION, pos[0], pos[1], pos[2]);
+	return JS_TRUE;
+	JL_BAD;
+}
+*/
+
+
+DEFINE_FUNCTION_FAST( Position ) {
+  Private *pv;
+	J_S_ASSERT_ARG_MIN(3);
+	pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+	float pos[3];
+	J_CHK( JsvalToFloat(cx, J_FARG(1), &pos[0]) );
+	J_CHK( JsvalToFloat(cx, J_FARG(2), &pos[1]) );
+	J_CHK( JsvalToFloat(cx, J_FARG(3), &pos[2]) );
+
+	alSource3f(pv->sid, AL_POSITION, pos[0], pos[1], pos[2]);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+DEFINE_PROPERTY( position ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	float pos[3];
+
+	alGetSource3f(pv->sid, AL_POSITION, &pos[0], &pos[1], &pos[2]);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( FloatVectorToJsval(cx, pos, 3, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+/*
+DEFINE_PROPERTY_SETTER( velocity ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	float pos[3];
+	size_t len;
+	J_CHK( JsvalToFloatVector(cx, *vp, pos, 3, &len) );
+	alSource3f(pv->sid, AL_VELOCITY, pos[0], pos[1], pos[2]);
+	return JS_TRUE;
+	JL_BAD;
+}
+*/
+DEFINE_FUNCTION_FAST( Velocity ) {
+  Private *pv;
+	J_S_ASSERT_ARG_MIN(3);
+	pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
+	J_S_ASSERT_RESOURCE( pv );
+	float pos[3];
+	J_CHK( JsvalToFloat(cx, J_FARG(1), &pos[0]) );
+	J_CHK( JsvalToFloat(cx, J_FARG(2), &pos[1]) );
+	J_CHK( JsvalToFloat(cx, J_FARG(3), &pos[2]) );
+
+	alSource3f(pv->sid, AL_VELOCITY, pos[0], pos[1], pos[2]);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	*J_FRVAL = JSVAL_VOID;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY( velocity ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	float pos[3];
+
+	alGetSource3f(pv->sid, AL_VELOCITY, &pos[0], &pos[1], &pos[2]);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+
+	J_CHK( FloatVectorToJsval(cx, pos, 3, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+
+DEFINE_PROPERTY( remainingTime ) {
+
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+
+	ALint loop;
+	alGetSourcei(pv->sid, AL_LOOPING, &loop);
+	if ( loop == AL_TRUE ) {
+
+		*vp = JS_GetPositiveInfinityValue(cx);
+		return JS_TRUE;
+	}
+
+	ALint state;
+	alGetSourcei(pv->sid, AL_SOURCE_STATE, &state);
+	if ( state != AL_PLAYING && state != AL_PAUSED ) {
+
+		*vp = JSVAL_VOID;
+		return JS_TRUE;
+	}
+
+	ALfloat secOffset;
+	alGetSourcef(pv->sid, AL_SEC_OFFSET, &secOffset);
+	J_CHK( FloatToJsval(cx, pv->totalTime - secOffset, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+static const int enumToConst[] = {
+	AL_SOURCE_STATE,
+	AL_SOURCE_RELATIVE,
+	AL_LOOPING,
+	AL_SEC_OFFSET,
+	AL_GAIN,
+	AL_MIN_GAIN,
+	AL_MAX_GAIN,
+	AL_AIR_ABSORPTION_FACTOR,
+	AL_ROOM_ROLLOFF_FACTOR,
+	AL_CONE_OUTER_GAINHF,
+	AL_DIRECT_FILTER_GAINHF_AUTO,
+	AL_AUXILIARY_SEND_FILTER_GAIN_AUTO,
+	AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO,
+	AL_REFERENCE_DISTANCE,
+	AL_MAX_DISTANCE,
+	AL_BUFFERS_QUEUED,
+	AL_BUFFERS_PROCESSED
+};
+
+
+enum {
+	state = 0,
+	sourceRelative,
+	looping,
+	secOffset,
+	gain,
+	minGain,
+	maxGain,
+	airAbsorptionFactor,
+	roomRolloffFactor,
+	coneOuterGainhf,
+	directFilterGainhfAuto,
+	auxiliarySendFilterGainAuto,
+	auxiliarySendFilterGainhfAuto,
+	referenceDistance,
+	maxDistance,
+	buffersQueued,
+	buffersProcessed
+};
+
+
+
+// 'ind' suffix mean that an indirection is needed because tinyid (8bit) cannot store any OpenAL constant.
+DEFINE_PROPERTY_SETTER( sourceFloatInd ) {
+  ALenum param;
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	param = enumToConst[JSVAL_TO_INT(id)];
+	float f;
+	J_CHK( JsvalToFloat(cx, *vp, &f) );
+	alSourcef(pv->sid, param, f);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( sourceFloatInd ) {
+  ALenum param;
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	param = enumToConst[JSVAL_TO_INT(id)]; // see sourceFloatInd comment.
+	float f;
+	alGetSourcef(pv->sid, param, &f);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	J_CHK( FloatToJsval(cx, f, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+/*DEFINE_PROPERTY_SETTER( sourceIntInd ) {
+  ALenum param;
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	param = JSVAL_TO_INT(id);
+	int i;
+	J_CHK( JsvalToInt(cx, *vp, &i) );
+	alSourcei(pv->sid, param, i);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	return JS_TRUE;
+	JL_BAD;
+}*/
+
+DEFINE_PROPERTY_GETTER( sourceIntInd ) {
+  ALenum param;
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	param = JSVAL_TO_INT(id);
+	int i;
+	alGetSourcei(pv->sid, param, &i);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	J_CHK( IntToJsval(cx, i, vp) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_SETTER( sourceBoolInd ) {
+  ALenum param;
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	param = enumToConst[JSVAL_TO_INT(id)]; // see sourceFloatInd comment.
+	bool b;
+	J_CHK( JsvalToBool(cx, *vp, &b) );
+	alSourcei(pv->sid, param, b ? AL_TRUE : AL_FALSE);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	return JS_TRUE;
+	JL_BAD;
+}
+
+DEFINE_PROPERTY_GETTER( sourceBoolInd ) {
+  ALenum param;
+	Private *pv = (Private*)JS_GetPrivate(cx, obj);
+	J_S_ASSERT_RESOURCE( pv );
+	param = enumToConst[JSVAL_TO_INT(id)]; // see sourceFloatInd comment.
+	int i;
+	alGetSourcei(pv->sid, param, &i);
+	J_CHK( CheckThrowCurrentOalError(cx) );
+	*vp = i == AL_TRUE ? JSVAL_TRUE : JSVAL_FALSE;
+	return JS_TRUE;
+	JL_BAD;
+}
+
+
+
+CONFIGURE_CLASS
+
+	REVISION(SvnRevToInt("$Revision: 2210 $"))
+	HAS_PRIVATE
+	HAS_RESERVED_SLOTS(1)
+	HAS_CONSTRUCTOR
+	HAS_FINALIZE
+	HAS_TRACER
+
+	BEGIN_FUNCTION_SPEC
+		FUNCTION_FAST_ARGC( Position, 3 )
+		FUNCTION_FAST_ARGC( Velocity, 3 )
+
+		FUNCTION_FAST( Play )
+		FUNCTION_FAST( Pause )
+		FUNCTION_FAST( Stop )
+		FUNCTION_FAST( Rewind )
+
+		FUNCTION_FAST( QueueBuffers )
+		FUNCTION_FAST( UnqueueBuffers )
+
+		FUNCTION_FAST( valueOf )
+	END_FUNCTION_SPEC
+
+	BEGIN_PROPERTY_SPEC
+
+		PROPERTY_READ( position )
+		PROPERTY_READ( velocity )
+
+//		PROPERTY_WRITE_STORE( buffer )
+		PROPERTY_STORE( buffer )
+
+#ifdef _WIN32
+		PROPERTY_WRITE_STORE( effect )
+#endif
+		PROPERTY_WRITE_STORE( directFilter )
+
+#ifdef _WIN32
+		PROPERTY( effectGain )
+		PROPERTY( effectSendAuto )
+#endif
+
+		PROPERTY_READ( remainingTime )
+
+		PROPERTY_SWITCH_READ( buffersQueued, sourceIntIndGetter )
+		PROPERTY_SWITCH_READ( buffersProcessed, sourceIntIndGetter )
+		PROPERTY_SWITCH_READ( state, sourceIntIndGetter )
+		PROPERTY_SWITCH( looping, sourceBoolInd )
+		PROPERTY_SWITCH( sourceRelative, sourceBoolInd )
+		PROPERTY_SWITCH( gain, sourceFloatInd )
+		PROPERTY_SWITCH( minGain, sourceFloatInd )
+		PROPERTY_SWITCH( maxGain, sourceFloatInd )
+		PROPERTY_SWITCH( secOffset, sourceFloatInd )
+		PROPERTY_SWITCH( airAbsorptionFactor, sourceFloatInd )
+		PROPERTY_SWITCH( roomRolloffFactor, sourceFloatInd )
+		PROPERTY_SWITCH( coneOuterGainhf, sourceFloatInd )
+		PROPERTY_SWITCH( directFilterGainhfAuto, sourceBoolInd )
+		PROPERTY_SWITCH( auxiliarySendFilterGainAuto, sourceBoolInd )
+		PROPERTY_SWITCH( auxiliarySendFilterGainhfAuto, sourceBoolInd )
+		PROPERTY_SWITCH( referenceDistance, sourceFloatInd )
+		PROPERTY_SWITCH( maxDistance, sourceFloatInd )
+
+	END_PROPERTY_SPEC
+
+END_CLASS
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/stdafx.cpp jslibs-0.9-r1881/src/jsaudio/stdafx.cpp
--- jslibs-0.9-r1881_orig/src/jsaudio/stdafx.cpp	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/stdafx.cpp	2009-02-06 04:51:41.000000000 +0100
@@ -1,8 +1,8 @@
-// stdafx.cpp : source file that includes just the standard includes
-// jstemplate.pch will be the pre-compiled header
-// stdafx.obj will contain the pre-compiled type information
-
-#include "stdafx.h"
-
-// TODO: reference any additional headers you need in STDAFX.H
-// and not in this file
+// stdafx.cpp : source file that includes just the standard includes
+// jstemplate.pch will be the pre-compiled header
+// stdafx.obj will contain the pre-compiled type information
+
+#include "stdafx.h"
+
+// TODO: reference any additional headers you need in STDAFX.H
+// and not in this file
diff -ru jslibs-0.9-r1881_orig/src/jsaudio/stdafx.h jslibs-0.9-r1881/src/jsaudio/stdafx.h
--- jslibs-0.9-r1881_orig/src/jsaudio/stdafx.h	2009-02-06 04:29:33.000000000 +0100
+++ jslibs-0.9-r1881/src/jsaudio/stdafx.h	2009-02-06 04:52:24.000000000 +0100
@@ -1,46 +1,60 @@
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: GNU GPL 2.0
- *
- * The contents of this file are subject to the
- * GNU General Public License Version 2.0; you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- * http://www.gnu.org/licenses/gpl.html
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- * ***** END LICENSE BLOCK ***** */
-
-#pragma once
-
-#include "../common/platform.h"
-
-#include "stdlib.h"
-
-#include <jsapi.h>
-
-#include "../common/jsHelper.h"
-#include "../common/jsClass.h"
-#include "../common/jsConversionHelper.h"
-#include "../common/jsConfiguration.h"
-
-
-// OpenAL from src
-//#include <AL/al.h>
-//#include <AL/alc.h>
-
-
-// OpenAL from sdk
-#include <al.h>
-#include <alc.h>
-#include <efx.h>
-//#include <EFX-Util.h>
-
-// once ?
-#pragma comment(lib, "../../libs/openal/sdk/libs/Win32/OpenAL32.lib")
-#pragma comment(lib, "../../libs/openal/sdk/libs/Win32/EFX-Util.lib")
-
-
-//#define LOAD_OPENAL_EXTENSION( name, proto ) \
-//	static proto name = (proto) alGetProcAddress( #name );
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: GNU GPL 2.0
+ *
+ * The contents of this file are subject to the
+ * GNU General Public License Version 2.0; you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ * http://www.gnu.org/licenses/gpl.html
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ * ***** END LICENSE BLOCK ***** */
+
+#ifdef _MSC_VER
+#pragma once
+#endif // _MSC_VER
+
+#include "../common/platform.h"
+
+#include "stdlib.h"
+
+#include <jsapi.h>
+
+#include "../common/jsHelper.h"
+#include "../common/jsClass.h"
+#include "../common/jsConversionHelper.h"
+#include "../common/jsConfiguration.h"
+
+
+#include <AL/al.h>
+#include <AL/alc.h>
+
+#define AL_METERS_PER_UNIT                                 0x20004
+#define AL_DIRECT_FILTER                                   0x20005                                                                          
+#define AL_AUXILIARY_SEND_FILTER                           0x20006                                                                          
+#define AL_AIR_ABSORPTION_FACTOR                           0x20007                                                                          
+#define AL_ROOM_ROLLOFF_FACTOR                             0x20008                                                                          
+#define AL_CONE_OUTER_GAINHF                               0x20009                                                                          
+#define AL_DIRECT_FILTER_GAINHF_AUTO                       0x2000A                                                                          
+#define AL_AUXILIARY_SEND_FILTER_GAIN_AUTO                 0x2000B                                                                          
+#define AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO               0x2000C                                                                          
+
+#define AL_FILTER_TYPE                                     0x8001
+#define AL_FILTER_NULL                                     0x0000
+#define AL_FILTER_LOWPASS                                  0x0001
+#define AL_FILTER_HIGHPASS                                 0x0002
+#define AL_FILTER_BANDPASS                                 0x0003
+#define AL_LOWPASS_GAIN                                    0x0001
+#define AL_LOWPASS_GAINHF                                  0x0002
+
+#ifdef _MSC_VER
+// once ?
+#pragma comment(lib, "../../libs/openal/sdk/libs/Win32/OpenAL32.lib")
+#pragma comment(lib, "../../libs/openal/sdk/libs/Win32/EFX-Util.lib")
+#endif // _MSC_VER
+
+
+/*#define LOAD_OPENAL_EXTENSION( name, proto ) \
+	static proto name = (proto) alGetProcAddress( #name );*/
