diff -wru jslibs-0.9-r1881_orig/src/jssound/Makefile jslibs-0.9-r1881/src/jssound/Makefile
--- jslibs-0.9-r1881_orig/src/jssound/Makefile	2009-02-06 08:00:24.000000000 +0100
+++ jslibs-0.9-r1881/src/jssound/Makefile	2009-02-06 08:02:37.000000000 +0100
@@ -1,7 +1,7 @@
-TARGET     = jstemplate.so
+TARGET     = jssound.so
 SRC        = $(wildcard *.cpp)
-INCLUDES   =
+INCLUDES   = `pkg-config js sndfile --cflags`
 STATICLIBS =
-SHAREDLIBS =
+SHAREDLIBS = `pkg-config js sndfile --libs`
 
 include ../rules.mk
diff -wru jslibs-0.9-r1881_orig/src/jssound/oggvorbisdecoder.cpp jslibs-0.9-r1881/src/jssound/oggvorbisdecoder.cpp
--- jslibs-0.9-r1881_orig/src/jssound/oggvorbisdecoder.cpp	2009-02-06 08:00:24.000000000 +0100
+++ jslibs-0.9-r1881/src/jssound/oggvorbisdecoder.cpp	2009-02-06 08:10:55.000000000 +0100
@@ -111,7 +111,7 @@
 	Private *pv = (Private*)datasource;
 	jsval tmpVal;
 
-	int position;
+	int position = 0;
 	JS_GetProperty(pv->cx, pv->streamObject, "position", &tmpVal);
 	if ( JSVAL_IS_VOID( tmpVal ) )
 		return -1;
@@ -157,13 +157,14 @@
    }}}
 **/
 DEFINE_CONSTRUCTOR() {
-
+  int result;
+  Private *pv;
 	J_S_ASSERT_CONSTRUCTING();
 	J_S_ASSERT_THIS_CLASS();
 	J_S_ASSERT_ARG_MIN(1);
 	J_S_ASSERT_OBJECT( J_ARG(1) );
 
-	Private *pv = (Private*)malloc(sizeof(Private));
+	pv = (Private*)malloc(sizeof(Private));
 	J_S_ASSERT_ALLOC(pv);
 	J_CHK( JS_SetPrivate(cx, obj, pv) );
 
@@ -171,7 +172,7 @@
 	pv->streamObject = JSVAL_TO_OBJECT(J_ARG(1));
 
 	pv->cx = cx;
-	int result = ov_open_callbacks(pv, &pv->ofDescriptor, NULL, 0, ovCallbacks);
+	result = ov_open_callbacks(pv, &pv->ofDescriptor, NULL, 0, ovCallbacks);
 	J_S_ASSERT(result == 0, "Invalid ogg vorbis descriptor.");
 
 	pv->ofInfo = ov_info(&pv->ofDescriptor, -1);
@@ -220,7 +221,7 @@
   }}}
 **/
 DEFINE_FUNCTION_FAST( Read ) {
-
+  size_t totalSize;
 	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
 	J_S_ASSERT_RESOURCE(pv);
 
@@ -228,7 +229,7 @@
 	J_S_ASSERT( pv->ofInfo->channels == 1 || pv->ofInfo->channels == 2, "Unsupported channel count." );
 
 	char *buf;
-	size_t totalSize = 0;
+	totalSize = 0;
 
 	pv->cx = cx;
 	if ( J_FARG_ISDEF(1) ) {
@@ -421,10 +422,10 @@
   To compute the duration of the sound, use (frames/rate)
 **/
 DEFINE_PROPERTY( frames ) {
-
+  ogg_int64_t pcmTotal;
 	Private *pv = (Private*)JS_GetPrivate(cx, obj);
 	J_S_ASSERT_RESOURCE(pv);
-	ogg_int64_t pcmTotal = ov_pcm_total(&pv->ofDescriptor, -1);
+	pcmTotal = ov_pcm_total(&pv->ofDescriptor, -1);
 	if ( pcmTotal == OV_EINVAL ) { // if the stream is not seekable (we can't know the length) or only partially open.
 
 		*vp = JSVAL_VOID;
diff -wru jslibs-0.9-r1881_orig/src/jssound/soundfiledecoder.cpp jslibs-0.9-r1881/src/jssound/soundfiledecoder.cpp
--- jslibs-0.9-r1881_orig/src/jssound/soundfiledecoder.cpp	2009-02-06 08:00:24.000000000 +0100
+++ jslibs-0.9-r1881/src/jssound/soundfiledecoder.cpp	2009-02-06 08:11:12.000000000 +0100
@@ -112,7 +112,7 @@
 	Private *pv = (Private*)user_data;
 	jsval tmpVal;
 
-	int position;
+	int position = 0;
 	JS_GetProperty(pv->cx, pv->streamObject, "position", &tmpVal);
 	if ( JSVAL_IS_VOID( tmpVal ) )
 		return -1;
@@ -169,13 +169,14 @@
    }}}
 **/
 DEFINE_CONSTRUCTOR() {
-
+  int subFormat;
+  Private *pv;
 	J_S_ASSERT_CONSTRUCTING();
 	J_S_ASSERT_THIS_CLASS();
 	J_S_ASSERT_ARG_MIN(1);
 	J_S_ASSERT_OBJECT( J_ARG(1) );
 
-	Private *pv = (Private*)malloc(sizeof(Private));
+	pv = (Private*)malloc(sizeof(Private));
 	J_S_ASSERT_ALLOC(pv);
 	J_CHK( JS_SetPrivate(cx, obj, pv) );
 
@@ -198,11 +199,11 @@
 	J_S_ASSERT_1( sf_error(pv->sfDescriptor) == SF_ERR_NO_ERROR, "sndfile error: %d", sf_error(pv->sfDescriptor) );
 	J_S_ASSERT( pv->sfDescriptor != NULL, "Invalid stream." ); // (TBD) needed ?
 
-	int subFormat = pv->sfInfo.format & SF_FORMAT_SUBMASK;
+	subFormat = pv->sfInfo.format & SF_FORMAT_SUBMASK;
 	if ( subFormat == SF_FORMAT_FLOAT || subFormat == SF_FORMAT_DOUBLE ) {
 
 		// require the whole file to be read
-		int result = sf_command(pv->sfDescriptor, SFC_SET_SCALE_FLOAT_INT_READ, NULL, SF_TRUE); // Doc. Set/clear the scale factor when integer (short/int) data is read from a file containing floating point data. (http://www.mega-nerd.com/libsndfile/api.html#note2)
+		sf_command(pv->sfDescriptor, SFC_SET_SCALE_FLOAT_INT_READ, NULL, SF_TRUE); // Doc. Set/clear the scale factor when integer (short/int) data is read from a file containing floating point data. (http://www.mega-nerd.com/libsndfile/api.html#note2)
 	}
 
 	pv->cx = NULL; // see definition
@@ -244,14 +245,14 @@
   Print( 'time: '+(block.frames/block.rate)+' seconds', '\n' );
   }}}
 **/DEFINE_FUNCTION_FAST( Read ) {
-
+  long totalSize;
 	Private *pv = (Private*)JS_GetPrivate(cx, J_FOBJ);
 	J_S_ASSERT_RESOURCE(pv);
 
 	J_S_ASSERT( pv->sfInfo.channels == 1 || pv->sfInfo.channels == 2, "Unsupported channel count." );
 
 	char *buf;
-	long totalSize = 0;
+	totalSize = 0;
 
 	pv->cx = cx;
 	if ( J_FARG_ISDEF(1) ) {
diff -wru jslibs-0.9-r1881_orig/src/jssound/static.cpp jslibs-0.9-r1881/src/jssound/static.cpp
--- jslibs-0.9-r1881_orig/src/jssound/static.cpp	2009-02-06 08:00:24.000000000 +0100
+++ jslibs-0.9-r1881/src/jssound/static.cpp	2009-02-06 08:10:43.000000000 +0100
@@ -77,10 +77,14 @@
 **/
 
 DEFINE_FUNCTION_FAST( DecodeOggVorbis ) {
-
+  char *buf;
+  long totalSize;
+  int bufferSize, bits;
+  vorbis_info *info;
+  JSObject *streamObj;
 	J_S_ASSERT_ARG_MIN( 1 );
 	J_S_ASSERT_OBJECT( J_FARG(1) );
-	JSObject *streamObj = JSVAL_TO_OBJECT( J_FARG(1) );
+	streamObj = JSVAL_TO_OBJECT( J_FARG(1) );
 
 //	NIStreamRead streamReader;
 //	J_CHK( GetStreamReadInterface(cx, StreamObj, &streamReader) );
@@ -95,8 +99,8 @@
 
 	// (TBD) manage errors
 
-	vorbis_info *info = ov_info(&descriptor, -1);
-	int bits = 16;
+	info = ov_info(&descriptor, -1);
+	bits = 16;
 
 	J_S_ASSERT( bits != 8 || bits == 16, "Unsupported bits count." );
 	J_S_ASSERT( info->channels == 1 || info->channels == 2, "Unsupported channel count." );
@@ -105,9 +109,9 @@
 	void *stack;
 	jl::StackInit(&stack);
 
-	int bufferSize = 4096 - 16; // try to alloc less than one page
+	bufferSize = 4096 - 16; // try to alloc less than one page
 
-	long totalSize = 0;
+	totalSize = 0;
 	long bytes;
 	do {
 
@@ -139,7 +143,7 @@
 	} while (bytes > 0);
 
 	// convert data chunks into a single memory buffer.
-	char *buf = (char*)JS_malloc(cx, totalSize);
+	buf = (char*)JS_malloc(cx, totalSize);
 	J_S_ASSERT_ALLOC(buf);
 
 	jsval bstr;
@@ -280,11 +284,15 @@
    returns a sound object in a 16-bit per sample format.
 **/
 DEFINE_FUNCTION_FAST( DecodeSound ) {
-
+  char *buf;
+  long totalSize;
+  int bufferSize;
+  SNDFILE *descriptor;
+  JSObject *streamObj;
 	J_S_ASSERT_ARG_MIN( 1 );
 
 	J_S_ASSERT_OBJECT( J_FARG(1) );
-	JSObject *streamObj = JSVAL_TO_OBJECT( J_FARG(1) );
+	streamObj = JSVAL_TO_OBJECT( J_FARG(1) );
 
 //	NIStreamRead streamReader;
 //	J_CHK( GetStreamReadInterface(cx, StreamObj, &streamReader) );
@@ -296,7 +304,7 @@
 	SF_INFO info;// = {0};
 	memset(&info, 0, sizeof(SF_INFO));
 
-	SNDFILE *descriptor = sf_open_virtual(&sfCallbacks, SFM_READ, &info, &pv);
+	descriptor = sf_open_virtual(&sfCallbacks, SFM_READ, &info, &pv);
 
 	J_S_ASSERT_1( sf_error(descriptor) == SF_ERR_NO_ERROR, "sndfile error: %d", sf_error(descriptor) );
 	J_S_ASSERT( descriptor != NULL, "Invalid stream." );
@@ -311,9 +319,9 @@
 	void *stack;
 	jl::StackInit(&stack);
 
-	int bufferSize = 16384 - 16; // try to alloc less than one page
+	bufferSize = 16384 - 16; // try to alloc less than one page
 
-	long totalSize = 0;
+	totalSize = 0;
 	sf_count_t items;
 	do {
 
@@ -343,7 +351,7 @@
 
 
 	// convert data chunks into a single memory buffer.
-	char *buf = (char*)JS_malloc(cx, totalSize);
+	buf = (char*)JS_malloc(cx, totalSize);
 	J_S_ASSERT_ALLOC(buf);
 
 //	JSObject *bstrObj = J_NewBlob(cx, buf, totalSize);
@@ -388,12 +396,12 @@
    returns an array that contains each individual channel of the sound.
 **/
 DEFINE_FUNCTION_FAST( SplitChannels ) {
-
+  JSObject *destArray, *srcBlobObj;
 	J_S_ASSERT_ARG_MIN( 1 );
 	J_S_ASSERT_OBJECT( J_FARG(1) );
 
 	unsigned int rate, channelCount, bits, frames;
-	JSObject *srcBlobObj = JSVAL_TO_OBJECT(J_FARG(1));
+	srcBlobObj = JSVAL_TO_OBJECT(J_FARG(1));
 	J_CHK( GetPropertyUInt(cx, srcBlobObj, "rate", &rate) );
 	J_CHK( GetPropertyUInt(cx, srcBlobObj, "channels", &channelCount) );
 	J_CHK( GetPropertyUInt(cx, srcBlobObj, "bits", &bits) );
@@ -405,7 +413,7 @@
 	size_t srcBufLength;
 	JsvalToStringAndLength(cx, &J_FARG(1), &srcBuf, &srcBufLength);
 
-	JSObject *destArray = JS_NewArrayObject(cx, 0, NULL); 
+	destArray = JS_NewArrayObject(cx, 0, NULL); 
 	*J_FRVAL = OBJECT_TO_JSVAL(destArray);
 
 	for ( size_t c = 0; c < channelCount; c++ ) {
