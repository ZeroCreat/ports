diff -ruN jslibs-20070508_orig/build.mk jslibs-20070508/build.mk
--- jslibs-20070508_orig/build.mk	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/build.mk	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,755 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+# ---------------------------------------------------------------------------
+
+# Package name and version.
+PACKAGE ?= pkg$(warning no package name specified!)
+# VERSION ?= 0.0$(warning no package version specified!)
+
+# Build behaviour.
+DEPMODE ?= 1
+SYMBOLS ?= 0
+OPTIMIZE ?= 2
+#MACHINE ?= arch=pentium4m sse sse2
+WARNINGS ?= error
+CMDECHO ?= full
+
+export DEPMODE SYMBOLS OPTIMIZE MACHINE WARNINGS CMDECHO
+
+# Common directories.
+prefix ?= /usr
+exec_prefix ?= $(prefix)
+bindir ?= $(exec_prefix)/bin
+libdir ?= $(exec_prefix)/lib
+pkgconfigdir ?= $(libdir)/pkgconfig
+slibdir ?= $(libdir)
+datadir ?= $(prefix)/share
+includedir ?= $(prefix)/include
+cxxincludedir = $(includedir)/c++
+
+# Package specific directories.
+pkglibdir = $(libdir)$(PACKAGE)
+pkgdatadir = $(datadir)/$(PACKAGE)
+pkgincludedir = $(includedir)/$(PACKAGE)
+
+# Machine configuration.
+#arch ?= $(shell uname -m)
+#tune ?= 
+
+# Compiler commandline flags.
+CFLAGS :=
+CXXFLAGS = $(CFLAGS)
+ARFLAGS = rcs
+
+# DO NOT CHANGE ANYTHING BELOW THIS LINE UNLESS REALLY NOW WHAT YOU'RE DOING!
+# ---------------------------------------------------------------------------
+
+# Make configuration
+# ---------------------------------------------------------------------------
+
+Q-full =
+Q-short = @
+Q-long = @
+C = -c
+
+pad-short = $(tabstop)$(space)
+
+ifeq ($(DEPMODE),1)
+postdep = && $(SED) -i 's,^\(.*\)\.o:,\1.o \1.d:,' $*.d
+endif
+
+# Default target.
+.DEFAULT_GOAL: all
+
+#.SILENT:
+
+# System configuration
+# ---------------------------------------------------------------------------
+
+# Host-triplet and architecture specification.
+host = $(shell $(CC) -dumpmachine)
+#host = i686-pc-mingw32
+#arch ?= $(shell arch || uname -m || echo '$(host:%-*=%)')
+
+export host arch
+
+arch = $(word 1,$(subst -, ,$(host)))
+
+# Kernel and user-level systems info.
+#kernel ?= $(shell uname -s || echo '$(host:*-%-*=%)')
+kernel = $(word 2,$(subst -, ,$(host)))
+
+#system ?= $(shell uname -o || echo '$(host:*-%=%)')
+system = $(word 3,$(subst -, ,$(host)))
+
+export kernel system
+
+# Shell utilities
+LN ?= ln
+CP ?= cp
+RM ?= rm -f
+RM_R ?= $(RM) -r
+MKDIR ?= mkdir -p
+SED ?= sed
+SORT ?= sort
+INSTALL ?= install
+TAR ?= tar
+
+# Development toolchain.
+CC = $(cross)gcc
+CXX = $(cross)g++
+AR = $(cross)ar
+NM = $(cross)nm
+RANLIB = $(cross)ranlib
+WINDRES = $(cross)windres
+DLLTOOL = $(cross)dlltool
+DLLWRAP = $(cross)dllwrap
+LIBTOOL = $(cross)libtool
+
+LTCTAG = --tag=CC
+LTCXXTAG = --tag=CXX
+LTINSTALL = $(LIBTOOL) --mode=install $(INSTALL)
+
+# Default driver for dllwrap
+DLLDRIVER = $(CC)
+
+
+# Defaults for release tarball creation.
+DISTDIR = $(PACKAGE)$(if $(VERSION),-$(VERSION))/
+DISTPKG = $(outdir)$(PACKAGE)-$(VERSION).tar.gz
+DISTLST = $(PACKAGE)-$(VERSION).tar.lst
+
+export DISTDIR
+
+# Specialized forms of programs
+LN_S = $(LN) -s
+RM_F = $(RM) -f
+RM_R = $(RM) -r
+INSTALL_DIR = $(INSTALL) -d
+INSTALL_DATA = $(INSTALL) -m 644
+INSTALL_EXEC = $(INSTALL) -m 755
+LTINSTALL_DIR = $(INSTALL) -d
+LTINSTALL_DATA = $(LTINSTALL) -m 644
+LTINSTALL_EXEC = $(LTINSTALL) -m 755
+
+# Target dependant configuration.
+# ---------------------------------------------------------------------------
+
+# Set up things for GNU/Linux based systems.
+ifeq ($(system), linux)
+host = i686-pc-linux-gnu
+prefix = /nexbyte/server
+
+ilibext = so
+slibext = so.$(VERSION)
+slibprefix = lib
+modext = so
+
+CFLAGS += -fPIC
+CPPFLAGS += -DPIC
+LDFLAGS += -Wl,-rpath,$(libdir) -static-libgcc
+
+endif
+
+ifeq ($(system), mingw32)
+
+# A win32 system.
+host = i686-pc-mingw32
+prefix = /usr/$(host)
+cross = $(host)-
+
+slibdir = $(bindir)
+
+binext = .exe
+slibext = dll
+ilibext = $(slibext).a
+
+endif
+
+ifeq ($(system), cygwin)
+
+# A win32 system.
+host = i686-pc-cygwin
+prefix = /usr
+cross = $(host)-
+
+slibdir = $(bindir)
+
+binext = .exe
+slibext = dll
+ilibext = $(slibext).a
+
+endif
+
+slibext ?= dll
+
+slibmask = $(outdir)$(addlibprefix)%.$(slibext)
+ilibmask = lib%.$(ilibext)
+modmask = %.$(modext)
+
+# Build dependencies.
+# ---------------------------------------------------------------------------
+
+# Debugging symbols for gdb
+ifeq ($(SYMBOLS),1)
+CFLAGS += -g -ggdb
+endif
+
+# Dependency tracking into %.d files.
+ifeq ($(DEPMODE),1)
+CFLAGS += -MMD
+endif
+
+# Warning level.
+ifneq ($(WARNINGS),)
+CFLAGS += $(addprefix -W,$(WARNINGS))
+endif
+
+# Optimization?
+ifneq ($(OPTIMIZE),)
+CFLAGS += -O$(OPTIMIZE)
+endif
+
+# Machine flags.
+ifneq ($(OPTIMIZE),0)
+ifneq ($(MACHINE),)
+CFLAGS += $(addprefix -m,$(MACHINE))
+endif
+endif
+
+# Compilation and link commands
+# ---------------------------------------------------------------------------
+COMPILE = $(call exec-var,CC$(tabstop)$(space),$(call var-strip,DEFS INCLUDES CPPFLAGS CFLAGS),$(reldir)$@)
+CXXCOMPILE = $(call exec-var,CXX$(tabstop)$(space),$(call var-strip,DEFS INCLUDES CPPFLAGS CXXFLAGS),$(reldir)$@)
+LINK = $(call exec-var,CC$(tabstop)$(space),$(if $(LDFLAGS), $(LDFLAGS)),$(reldir)$@)
+CXXLINK = $(call exec-var,CXX$(tabstop)$(space),$(if $(LDFLAGS), $(LDFLAGS)),$(reldir)$@)
+
+# The same using GNU libtool
+LTCOMPILE = $(LIBTOOL) $(LTCTAG) --mode=compile $(CC) $(call var-strip,DEFS INCLUDES CPPFLAGS CFLAGS)
+LTCXXCOMPILE = $(LIBTOOL) $(LTCXXTAG) --mode=compile $(CXX) $(call var-strip,DEFS INCLUDES CPPFLAGS CFLAGS CXXFLAGS)
+LTLINK = $(LIBTOOL) $(LTCTAG) --mode=link $(LINK)
+LTCXXLINK = $(LIBTOOL) $(LTCXXTAG) --mode=link $(CXXLINK)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+#DEPFILES = $(subst .o,.d,$(OBJECTS))
+CLEANFILES ?= $(OBJECTS) $(DEPFILES) $(LIBRARIES) $(PROGRAMS)
+#TARGETS = $(LIBRARIES) $(PROGRAMS)
+
+# ===========================================================================
+# Functions section.
+# ===========================================================================
+
+# Auxilary variables used in several functions.
+# ----------------------------------------------------------------------------
+
+# Comma, for use inside function arguments.
+comma := ,
+
+# Used for $(space).
+empty :=
+
+# A single space character.
+space := $(empty) $(empty)
+
+# A tabstop character.
+tabstop := $(empty)	$(empty)
+
+# A newline character.
+define newline
+\
+
+
+endef
+
+# Functions concerning variables.
+# ----------------------------------------------------------------------------
+
+# var-if NAME,NON-EMPTY,EMPTY
+# Expands NONEMPTY when $(NAME) not empty, otherwise EMPTY.
+var-if = \
+	$(if $($1),$2,$3)
+
+# var-ifeq,A,B,EQUAL,NON-EQUAL
+# Expands to EQUAL when $(A) == $(B), otherwise to NON-EQUAL.
+var-ifeq = \
+	$(if $(subst $2,,$1),$4,$3)
+
+# var-ifneq,A,B,NON-EQUAL,EQUAL
+# Expands to EQUAL when $(A) == $(B), otherwise to NON-EQUAL.
+var-ifneq = \
+	$(if $(subst $2,,$1),$3,$4)
+
+# var-default,NAME,DEFAULT
+# Expands variable $(NAME) when not empty, otherwise DEFAULT.
+var-default = \
+	$(if $($1),$($1),$2)
+
+var-strip = $(strip $(foreach name,$1, $(if $(strip $($(name))), $(strip $($(name))) ) ))
+
+# Symbol extraction functions.
+# ----------------------------------------------------------------------------
+
+# nm-execute FILE
+# Runs binutils nm(1) on FILE, output in posix format. File names will be 
+# stripped.
+nm-execute = \
+	$(filter-out $1%,\
+	$(shell $(NM) -P $(1))
+
+# nm-extract OUTPUT,TYPE
+# Extracts symbols with the given type character from output of nm-execute.
+nm-extract = \
+	$(patsubst %:$2,%,\
+	$(filter %:$2,\
+	$(subst $(space)$2$(space),:$2$(space),$1$(space))))
+
+# nm-symbols FILE,TYPE
+# Both of the above combined.
+nm-symbols = \
+	$(call nm-extract,\
+	$(call nm-execute,$1),$2)
+
+# Echoing commands.
+# ----------------------------------------------------------------------------
+
+# echo-mode
+echo-mode = $(if $(CMDECHO),$(CMDECHO),short)
+
+# echo-short
+echo-short = echo '  $1$(space)$(if $3,$3,$@)' &&
+
+# echo-long
+echo-long = echo '  $1$(space)$(if $3,$3,$@) $^' &&
+
+# echo-full
+echo-full = $(info $(Q-full)help)
+
+echo-q = $(echo-$(echo-mode))
+
+# internally used echo macro
+echo-cmd = $(Q-$(echo-mode))$(echo-$(echo-mode))
+
+echo-qcmd = $(echo-$(echo-mode))
+
+# Executing commands.
+# ----------------------------------------------------------------------------
+
+# exec-shell NAME,CMDS
+exec-q = $(echo-q) $2
+
+# exec-cmd NAME,CMDS
+exec-cmd = $(echo-cmd) $2
+
+# exec-var VAR,ARGS
+exec-var = $(echo-cmd) $($(strip $1)) $2
+exec-qvar = $(echo-qcmd) $($(strip $1)) $2
+
+# Special commands.
+# ----------------------------------------------------------------------------
+
+mkdef-script = '0,/^/ { s/^/EXPORTS\n/; P }; /$(PATTERN) [A-Z] [0-9a-f]\{8\}/ s/^_\([_a-z0-9]\+\) .*/\t\1/ip'
+
+mkdef-nm = $(call exec-cmd,MKDEF$(tabstop)$(space),$(NM) --defined-only --format=posix $1 |\
+	$(SED) -n $(mkdef-script) >$@,$(reldir)$@)
+
+# Transform stem into library names (import or shared library).
+# ----------------------------------------------------------------------------
+name-ilib = $(patsubst %,$(ilibmask),$1)
+name-slib = $(patsubst %,$(slibmask),$1)
+
+# Expands to both, the import and the shared libraries.
+name-libs = $(name-slib) $(name-ilib)
+
+# Filtering and substitution of lists.
+# ---------------------------------------------------------------------------
+list-objs = $(patsubst %.cpp,%.o,$(patsubst %.c,%.o,$1))
+
+# File masking using wildcards.
+# ---------------------------------------------------------------------------
+mask-makefiles = *akefile*
+
+# File collection using wildcards.
+# ---------------------------------------------------------------------------
+mask-sources = *.c *.h *.cpp *.cc *.cxx *.hpp *.hxx *.S *.s *.asm *.inc
+mask-auxfiles = *.rc *.r SConstruct
+mask-texts = \
+	ABOUT* README* COPYING* COPYRIGHT HOWTO* RELEASE*  VERSION INSTALL* NEWS INDEX MANIFEST AUTHORS TODO ChangeLog* \
+	ANNOUNCE CHANGES KNOWNBUG LICENSE THANKS Y2KINFO DESIGN NOTES PORTS Licensing* \
+	*.txt *.TXT *.doc *.html *.htm FAQ *.3 *.texi *.info* *.tex *.pdf *.rtf *.sty \
+  *.manifest
+mask-scripts = *.sh *.com *.py *.tcl *.tk *.cmd *.sed *.pl *.applescript
+mask-makefiles = *akefile* *.mk *.icc *.mms
+mask-nls = *.po *.gmo *.sin *.pot POTFILES.in *.header *.mo
+mask-man = *.1 *.2 *.3 *.4 *.5 *.6 *.7 *.8
+mask-autoconf = *.m4 autogen.sh configure.in configure.ac config.h.in Makefile.in configure install-sh mkinstalldirs config.h.in *config*.in *.h.in
+mask-automake = Makefile.am config.sub config.guess ltmain.sh depcomp missing
+mask-libtool = ltmain.sh ltconfig
+mask-images = *.png *.jpg *.jpeg *.gif *.tif *.tiff *.bmp *.xpm *.eps *.xbm *.wmf *.pnm *.pcx *.ani
+mask-win32 = *.chm *.bat *.obj *.pas *.mak *.vcproj *.dsp *.dsw *.sln *.cs *.csproj *.raw *.gpr *.ico *.vc *.mdp *.rc *.vcp *.vcw *.pro *.cur *.ini
+mask-various = *.clp *.build *.pk *.mms *.qpg bndsrc
+mask-mac = *.note *.make *.mpw *.mm
+mask-borland = *.bpf *.bpr *.pbxproj
+
+mask-default = \
+	$(mask-sources) $(mask-textfiles) $(mask-makefiles) $(mask-auxfiles)
+
+mask-everything = $(foreach t,sources auxfiles texts scripts makefiles \
+	autoconf automake libtool win32 various,$(mask-$t))
+
+collectfn-recursive = $1 $(foreach auxdir,$(patsubst %/,%,$(AUXDIRS)),$(addprefix $(auxdir)/,$1) )
+collectfn-arbitrary = $(call collectfn-recursive,$(if $(mask-$1),$(mask-$1),$1))
+collectfn-list = $(foreach list,$1,$(call collectfn-arbitrary,$(list)) )
+
+collect = $(patsubst %/,%,$(sort $(wildcard $(call collectfn-list,$(if $1,$1,default)))))
+#collect= $(call collect-recursive,$1)
+
+# Shell utilities.
+# ---------------------------------------------------------------------------
+
+# shell-foreach,SHVARNAME,LIST,COMMANDS
+shell-foreach = for $1 in $2; do $3; done
+
+# Extraction macros.
+# ---------------------------------------------------------------------------
+
+# extract-dirs,PATHS[,STRIP]
+extract-dirs = $(patsubst %/,%,$(sort $(dir $(patsubst $2/%,%,$1))))
+
+# extract-files,FILES,DIR[,STRIP]
+extract-rfiles = \
+	$(addprefix $(if $3,$3/,),\
+		$(filter $(patsubst .,,$2)/%,\
+			$(filter-out $(addsuffix /,$(filter-out $2,$(call extract-dirs,$1,$3))),\
+				$(patsubst $3/%,%,$1)\
+			)\
+		)\
+	)
+
+extract-files = \
+	$(addprefix $(if $3,$3/,),\
+		$(filter $(patsubst .,,$2)%,\
+			$(filter-out $(addsuffix /,$(filter-out $2,$(call extract-dirs,$1,$3))),\
+				$(patsubst $3/%,%,$1)\
+			)\
+		)\
+	)
+
+#echo 1: $1, 2: $2, 3: $3 
+#$(filter-out %/%,$(filter $(if $3,$3/,)$2%,$(patsubst ./%,%,$1)))
+
+# Installation.
+# ---------------------------------------------------------------------------
+
+# install-rdata,FILES,DIR[,STRIP]
+install-rdata = \
+	$(foreach dir,$(call extract-dirs,$1,$3),\
+		$(call exec-var,INSTALL,-d $2/$(patsubst ./%,%,$(dir)))$(newline)\
+		$(call exec-var,INSTALL_DATA,$(call extract-rfiles,$1,$(dir),$3) $2/$(dir))$(newline)\
+	)
+  
+# install-rexec,FILES,DIR[,STRIP]
+install-rexec = \
+	$(foreach dir,$(call extract-dirs,$1,$3),\
+		$(call exec-var,INSTALL,-d $2/$(patsubst ./%,%,$(dir)))$(newline)\
+		$(call exec-var,INSTALL_EXEC,$(call extract-rfiles,$1,$(dir),$3) $2/$(dir))$(newline)\
+	)
+  
+# install-data,FILES,DIR
+install-data = \
+	$(call exec-var,INSTALL,-d $2)$(newline)\
+	$(call exec-var,INSTALL_DATA,$1 $2)$(newline)
+
+# install-exec,FILES,DIR
+install-exec = \
+	$(call exec-var,INSTALL,-d $2)$(newline)\
+	$(call exec-var,INSTALL_EXEC,$1 $2)$(newline)
+
+# ===========================================================================
+# Rules section.
+# ===========================================================================
+
+# Default commands when target is undefined. Will execute for every 
+# prerequisite.
+# ---------------------------------------------------------------------------
+.DEFAULT: %
+	@echo "  ERROR   no such target '$@'"
+
+# Compilation targets.
+# ---------------------------------------------------------------------------
+
+# Preprocess, compile and assemble C source.
+%.o: %.c
+	$(COMPILE) $(C) -o $@ $< $(postdep)
+
+# Preprocess, compile and assemble C source using GNU libtool.
+%.lo: %.c
+	$(LTCOMPILE) $(C) -o $@ $< $(postdep)
+
+# Preprocess, compile but not assemble C source.
+%.s: %.c
+	$(COMPILE) -S -o $@ $< $(postdep)
+
+# Preprocess, compile and assemble C++ source.
+%.o: %.cpp
+	$(CXXCOMPILE) $(C) -o $@ $< $(postdep)
+
+%.o: %.cxx
+	$(CXXCOMPILE) $(C) -o $@ $< $(postdep)
+
+# Preprocess, compile and assemble C++ source using GNU libtool
+%.lo: %.cpp
+	$(LTCXXCOMPILE) $(C) -o $@ $< $(postdep)
+
+%.lo: %.cxx
+	$(LTCXXCOMPILE) $(C) -o $@ $< $(postdep)
+
+%.ii: %.cpp
+	$(CXXCOMPILE) -E -o $@ $< $(postdep)
+
+# Compile ressources using windres.
+%.o: %.rc
+	$(WINDRES)$(if $(CPPFLAGS), $(CPPFLAGS),) -o $@ $<
+
+# Preprocess, compile but not assemble C++ source.
+%.s: %.cpp;
+	$(CXXCOMPILE) -S -o $@ $< $(postdep)
+
+# Dependency stub
+%.d: 
+	@touch $@
+
+# Linking targets.
+# ---------------------------------------------------------------------------
+
+# Library search patterns.
+.LIBPATTERNS := lib%.$(ilibext) lib%.a
+VPATH := $(subst $(space),:,$(addprefix $(topdir),$(subst :,$(space),$(LIBPATH))))
+vpath := $(addprefix $(topdir),$(subst :,$(space),$(LIBPATH)))
+#VPATH := $(if $(LIBPATH),$(subst $(space),:,$(addprefix $(thisdir),$(subst :,$(space),$(LIBPATH))))):$(topdir):$(topdir)../
+#vpath := $(if $(LIBPATH),$(addprefix $(thisdir),$(subst :,$(space),$(LIBPATH)))) $(topdir) $(topdir)../
+#$(slibprefix)%.$(slibext)
+
+#fuck:
+#	echo $(arch) $(kernel) $(system)
+
+# Wildcard target for shared libraries. $(LDADD)#lib%.def
+$(outdir)%.dll lib%.dll.a:
+	@echo 'target: $@'
+	$(call exec-var,DLLWRAP,$(call var-strip,LDFLAGS)$(if $(DRIVER), --driver-name=$(DRIVER))$(if $(filter %.def,$^ $|), --def=$(filter %.def,$^ $|),$(if $(wildcard lib$(notdir $*).def), --def=lib$(notdir $*).def, --export-all-symbols)) \
+		$(if $(filter %.$(ilibext),$@),--output-lib=$@) -o $(outdir)$*.$(slibext) $(filter-out %.def,$^) $(LDADD) $(LIBS),$(if $(outdir),,$(outdir))$*.$(slibext),$@)
+
+$(outdir)lib%.so lib%.so.$(VERSION):
+	@echo 'target: $@'
+	$(call exec-var,CC,$(call var-strip,LDFLAGS)$(if $(DRIVER), --driver-name=$(DRIVER))$(if $(filter %.def,$^ $|), --def=$(filter %.def,$^ $|),$(if $(wildcard lib$(notdir lib$*).def), --def=lib$(notdir lib$*).def, --shared)) \
+		$(if $(filter %.$(ilibext),$@),--output-lib=$@) -o $(outdir)lib$*.$(slibext) $(filter-out %.def,$^) $(LDADD) $(LIBS),$(if $(outdir),,$(outdir))lib$*.$(slibext),$@)
+
+%.def:
+	$(call mkdef-nm,$^)
+
+#lib%.$(ilibext): $(addlibprefix)$*.$(slibext)
+
+#lib%.dll.a:
+#	$(call exec-var,DLLWRAP,\
+#	$(if $(DRIVER), --driver-name=$(DRIVER)) --def=lib$*.def --output-lib=$@ -o $(outdir)$*.$(slibext) $^ $(LDADD) $(LIBS),$(if $(outdir),,$(outdir))$*.$(slibext)
+
+# $($(notdir $*)_OBJECTS)
+%.a:
+	$(call exec-var,AR$(tabstop)$(space),$(ARFLAGS) $@ $(filter %.o,$^),$(reldir)$@)
+
+# Generic linking target
+%$(binext):
+	$(LINK) -o $@ $^ $(LIBS) $(postdep)
+
+# Generic linking target
+%.la:
+	$(LTLINK) -o $@ $^ $(LIBS) $(postdep)
+
+# Wildcard target for simple binaries.
+%$(binext): #%.cpp
+	$(if $(CCLD),$(CCLD),$(LINK)) $(CPPFLAGS) -o $@ $^ $(filter %.a,$|)$(if $(strip $(LDADD)), $(LDADD))$(if $(strip $(LIBS)), $(LIBS)) $(postdep)
+
+ifeq ($(system),Linux)
+%$(modext):
+	$(call exec-var,LINK,-shared -o $@ $^ $(LDADD))
+endif
+
+#%$(binext): %.c
+#	$(LINK) $(CPPFLAGS) $(CFLAGS) -o $@ $*.c $(LDADD) $(LIBS)
+
+#lib%.$(ilibext): %.$(slibext)
+
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+ifneq ($(TARGETS),)
+.PHONY: all
+# Builds all $(TARGETS)
+#debug:
+#	echo vpath = $(vpath)
+#	echo VPATH = $(VPATH)
+all: $(TARGETS)
+endif
+
+.PHONY: audium.mk GNUmakefile
+
+GNUmakefile:;
+audium.mk:;
+
+# Cleanup targets.
+# ---------------------------------------------------------------------------
+
+.PHONY: clean
+clean:
+ifneq ($(CLEANFILES),)
+# Cleans all $(CLEANFILES) in the build tree.
+ifeq ($(Q-$(echo-mode)),)
+	$(call exec-var,RM$(pad-short),$(CLEANFILES))
+else
+	@list='$(CLEANFILES)'; \
+	for file in $$list; do \
+		test -f "$$file" && \
+		{ echo "  RM$(pad-short) $(reldir)$${file#$(outdir)}"; \
+			$(RM) "$$file" || exit 1; } \
+	done; \
+	true  
+endif
+endif
+
+# ---------------------------------------------------------------------------
+# Recursive targets.
+# ---------------------------------------------------------------------------
+.PHONY: %-recursive
+
+
+
+#cd-short = "  MAKE -C$(space)[31;1m$(reldir)[0m"
+cd-short = '  MAKE -C$(space)\0033[0;31m$(reldir)\0033[0m'
+cd-full = $$cmds
+
+.PHONY: %-recursive
+%-recursive:
+	@for dir in $(SUBDIRS); do \
+    cmds="$(MAKE)$(if $(Q-$(echo-mode)), --no-print-directory -s) -C $$dir reldir='$(reldir)$$dir/' outdir='../$(outdir)' topdir='../$(topdir)' DISTDIR='$(DISTDIR)$$dir/' Q-full='$(space)$(Q-full)' $*"; \
+    /bin/echo -e $(cd-$(echo-mode))$(if $(Q-$(echo-mode)),$$dir,); eval $$cmds || exit 1; \
+  done
+
+# VPATH='../$(VPATH)$(if $(VPATH),:$(VPATH))
+.PHONY: $(addsuffix /%,$(SUBDIRS))
+$(addsuffix /%,$(SUBDIRS)):
+ifeq ($(Q-$(echo-mode)),)
+	$(MAKE) -C $(dir $@) reldir='$(reldir)$(dir $@)' outdir='' DISTDIR='$(DISTDIR)$(dir $@)/' Q-full='$(space)$(Q-full)' $*
+else
+	@cmd="$(MAKE)$(if $(Q-$(echo-mode)), --no-print-directory -s) -C $(dir $@) reldir='$(reldir)$(dir $@)' outdir='' topdir='../$(topdir)' DISTDIR='$(DISTDIR)$(dir $@)/' Q-full='$(space)$(Q-full)' $*"; \
+  $(info $(cd-$(echo-mode)))echo -e $(cd-$(echo-mode))$(patsubst %/$*,%,$@); eval $$cmd || exit 1
+endif
+
+# Package management targets.
+# ---------------------------------------------------------------------------
+
+ifneq ($(DISTFILES),)
+.PHONY: $(DISTDIR) $(DISTPKG) $(SUBDIRS)
+
+distfiles:
+	@for file in $(DISTFILES); do \
+		echo $$file; \
+	done
+
+mkdir-short = '  MKDIR$(pad-short)'
+dist-short = '  DIST$(pad-short)'
+
+.PHONY: distdir $(outdir)$(DISTDIR)
+distdir: $(outdir)$(DISTDIR) $(if $(SUBDIRS),distdir-recursive)
+$(outdir)$(DISTDIR): $(DISTFILES)
+	$(call exec-var,RM_R$(pad-short),$(outdir)$(DISTDIR),$(DISTDIR))
+ifeq ($(SUBDIRS)$(AUXDIRS),)
+	$(call exec-var,MKDIR$(pad-short),$(outdir)$(DISTDIR),$(DISTDIR))
+else
+ifeq ($(Q-$(echo-mode)),)
+	$(call exec-var,MKDIR$(pad-short),$(addprefix $(outdir)$(DISTDIR),. $(AUXDIRS)))
+else
+	@for dir in . $(AUXDIRS); do \
+	  echo $(mkdir-$(echo-mode)) $(DISTDIR)$${dir%/} 1>&2; \
+	  $(MKDIR) "$$dir" "$(outdir)$(DISTDIR)$${dir%/}" || exit 1; \
+	done
+endif
+endif
+#ifeq ($(Q-$(echo-mode)),)
+#	$(call exec-var,CP$(pad-short),$(DISTFILES) $(outdir)$(DISTDIR))
+#else
+	@for file in $(filter-out $(AUXDIRS),$(DISTFILES)); do \
+	  echo $(dist-$(echo-mode)) "$(DISTDIR)$${file#$(outdir)}" 1>&2; \
+	  $(CP) "$$file" "$(outdir)$(DISTDIR)$${file#$(outdir)}" || exit 1; \
+	done
+#endif
+
+#$(DISTLST): $(DISTPKG)
+#	$(TAR) -tf $^ $|
+
+cmd-tarlist = $(shell $(TAR) -tf $1)
+TARFILES = $(patsubst $(DISTDIR)%,%,$(call cmd-tarlist,$(DISTPKG)))
+GETDIRS = $(wildcard $(addsuffix /,$(patsubst %/,%,$(AUXDIRS))))
+DISTERR = $(filter-out $(TARFILES),$(strip $(addprefix $(DISTDIR),$(DISTFILES) $(GETDIRS))))
+NOTDIST = $(filter-out $(patsubst %/,%,$(wildcard $(DISTFILES) $(GETDIRS))),$(patsubst %/,%,$(wildcard $(call collectfn-recursive,*))))
+
+
+tarlist:
+	@$(call shell-foreach,file,$(TARFILES),echo $$file)
+
+distcmp:
+	@echo DISTFILES: $(patsubst %/,%,$(wildcard $(DISTFILES) $(GETDIRS)))
+	@echo ALL: $(patsubst %/,%,$(wildcard $(call collectfn-recursive,*)))
+
+distsync:
+	@$(call shell-foreach,file,$(NOTDIST),echo $(reldir)$$file)
+#	echo $(GETDIRS)
+#	echo $(filter-out $(patsubst $(DISTDIR)/%,%,$(TARFILES)),$(GETDIRS))
+#	@for file in $(DISTERR); do(echo "! $$file"$$( if test -d "$$file"; then echo '/'; elif test -x "$$file"; then echo '*'; fi ) )done; \
+#	for file in $(NOTDIST); do(echo "+ $$file"$$( if test -d "$$file"; then echo '/'; elif test -x "$$file"; then echo '*'; fi ) )done
+
+dirlist:
+	@$(call shell-foreach,dir,$(GETDIRS),echo $$dir)
+distlist:
+	@for file in $(DISTFILES); do \
+		test -f "$$file" && echo "$$file" || exit 1; \
+	done
+
+ifeq ($(outdir),)
+$(DISTPKG): distdir
+	set +e; \
+	$(call exec-var,TAR$(pad-short),-czf $(DISTPKG) $(DISTDIR)); ret=$?; \
+	$(call exec-qvar,RM_R$(pad-short),$(DISTDIR),$(DISTDIR)); exit $ret
+
+.PHONY: dist
+
+dist:
+	@set +e; trap "$(call exec-qvar,RM_R$(pad-short),$(DISTDIR),$(DISTDIR))" HUP INT TERM QUIT CHLD; \
+	$(MAKE) -s '$(DISTPKG)' && echo '$(DISTPKG) ready' || false
+endif
+
+endif
+
+distcheck-child: distdir
+	set +e; \
+	$(MAKE) -C $(DISTDIR) outdir=../$(outdir) thisdir=../$(thisdir) topdir=../$(topdir) reldir=$(DISTDIR); ret=$?; \
+	$(call exec-qvar,RM_R$(pad-short),$(DISTDIR),$(DISTDIR)); exit $ret
+
+distcheck:
+	@set +e; trap "$(call exec-qvar,RM_R$(pad-short),$(DISTDIR),$(DISTDIR))" HUP INT TERM QUIT CHLD; \
+	$(MAKE) -s distcheck-child && echo '$(DISTDIR) builds fine!' || false
+
+# If we have dependencies, then include them now.
+# ---------------------------------------------------------------------------
+ifeq ($(DEPMODE),1)
+ifneq ($(DEPFILES),)
+.PHONY: $(DEPFILES)
+
+-include $(DEPFILES)
+
+$(DEPFILES):;
+endif
+endif
+
+-L%: ;
+-I%: ;
+-D%: ;
diff -ruN jslibs-20070508_orig/common/jsClass.h jslibs-20070508/common/jsClass.h
--- jslibs-20070508_orig/common/jsClass.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/common/jsClass.h	2008-11-09 14:40:03.000000000 +0100
@@ -18,7 +18,7 @@
 #define BEGIN_STATIC_FUNCTION_SPEC JSFunctionSpec _tmp_sfs[] = {
 #define END_STATIC_FUNCTION_SPEC {0}}; _staticFunctionSpec = _tmp_sfs;
 
-#define DEFINE_FUNCTION(name) static JSBool name##(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
+#define DEFINE_FUNCTION(name) static JSBool name(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
 #define DEFINE_CONSTRUCTOR() static JSBool Constructor(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
 #define DEFINE_OBJECT_CONSTRUCTOR() static JSBool ObjectConstructor(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
 #define DEFINE_FINALIZE() static void Finalize(JSContext *cx, JSObject *obj)
@@ -35,7 +35,7 @@
 #define BEGIN_STATIC_PROPERTY_SPEC JSPropertySpec _tmp_sps[] = {
 #define END_STATIC_PROPERTY_SPEC {0}}; _staticPropertySpec = _tmp_sps;
 
-#define DEFINE_PROPERTY(name) static JSBool name##(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
+#define DEFINE_PROPERTY(name) static JSBool name(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
 #define DEFINE_PROPERTY_NULL(name) static JSPropertyOp name = NULL;
 
 #define PROPERTY(name)       { #name, 0, JSPROP_PERMANENT|JSPROP_SHARED, name##Getter, name##Setter },
diff -ruN jslibs-20070508_orig/common/jsConversionHelper.h jslibs-20070508/common/jsConversionHelper.h
--- jslibs-20070508_orig/common/jsConversionHelper.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/common/jsConversionHelper.h	2008-11-09 14:40:03.000000000 +0100
@@ -17,7 +17,7 @@
 	for (int i=0; i<count; ++i) {
 
 		RT_ASSERT( JSVAL_IS_INT(argv[i]), "Must be an integer." );
-		RT_SAFE( jsdouble d; JS_ValueToNumber(cx, argv[i], &d); vector[i] = d; );
+		RT_SAFE( jsdouble d; JS_ValueToNumber(cx, argv[i], &d); vector[i] = (int)d; );
 		RT_UNSAFE( vector[i] = JSVAL_TO_INT(argv[i]) );
 	}
 	return JS_TRUE;
@@ -33,7 +33,7 @@
 	for (int i=0; i<count; ++i) {
 
 		JS_GetElement(cx, jsArray, i, &value );
-		RT_SAFE( jsdouble d; JS_ValueToNumber(cx, value, &d); vector[i] = d; );
+		RT_SAFE( jsdouble d; JS_ValueToNumber(cx, value, &d); vector[i] = (int)d; );
 		RT_UNSAFE( vector[i] = JSVAL_TO_INT(value) );
 	}
 	return JS_TRUE;
diff -ruN jslibs-20070508_orig/common/jsHelper.h jslibs-20070508/common/jsHelper.h
--- jslibs-20070508_orig/common/jsHelper.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/common/jsHelper.h	2008-11-09 14:40:03.000000000 +0100
@@ -19,11 +19,15 @@
 #include <windows.h>
 #endif // WIN32
 
+#include <stdarg.h>
+
 #ifdef _MSC_VER
 #pragma warning(disable:4244 4305)  // for VC++, no precision loss complaints
 #endif
 
+#ifndef __GNUC__
 #include <varargs.h>
+#endif
 
 #ifdef USE_UNSAFE_MODE
 	extern bool _unsafeMode;
@@ -141,7 +145,7 @@
 	RT_ASSERT( (resourcePointer) != NULL, RT_ERROR_INVALID_RESOURCE );
 
 #define RT_ASSERT_CLASS(jsObject, jsClass) \
-	RT_ASSERT( jsObject != NULL && JS_GetClass(jsObject) == (jsClass), RT_ERROR_INVALID_CLASS );
+	RT_ASSERT( jsObject != NULL && JS_GET_CLASS(cx, jsObject) == (jsClass), RT_ERROR_INVALID_CLASS)
 
 #define RT_ASSERT_CLASS_NAME(jsObject, className) \
 	RT_ASSERT( strcmp(JS_GetClass(jsObject)->name, (className)) == 0,  RT_ERROR_INVALID_CLASS " Expecting " className "." );
@@ -157,7 +161,6 @@
 		RT_ASSERT_CLASS( obj, (jsClass) ); \
 	}
 
-
 ////////////////////
 // conversion macros
 
@@ -254,7 +257,7 @@
 	while( obj != NULL ) {
 
 		obj = JS_GetPrototype(cx, obj);
-		if ( JS_GetClass(obj) == clasp )
+		if ( JS_GET_CLASS(cx, obj) == clasp )
 			return true;
 	}
 	return false;
diff -ruN jslibs-20070508_orig/configuration/configuration.cpp jslibs-20070508/configuration/configuration.cpp
--- jslibs-20070508_orig/configuration/configuration.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/configuration/configuration.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -12,7 +12,12 @@
  * License.
  * ***** END LICENSE BLOCK ***** */
 
+#ifdef WIN32
 #include "stdafx.h"
+#endif
+
+#include <js/jsapi.h>
+#include "../common/jsHelper.h"
 #include "configuration.h"
 
 //JSClass configuration_class = { "Configuration", JSCLASS_HAS_PRIVATE,
@@ -105,4 +110,4 @@
 
 	return (Configuration *)pv;
 }
-*/
\ No newline at end of file
+*/
diff -ruN jslibs-20070508_orig/configuration/configuration.h jslibs-20070508/configuration/configuration.h
--- jslibs-20070508_orig/configuration/configuration.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/configuration/configuration.h	2008-11-09 14:40:03.000000000 +0100
@@ -12,17 +12,28 @@
  * License.
  * ***** END LICENSE BLOCK ***** */
 
+#ifdef WIN32
 #define XP_WIN
+#else
+#define XP_UNIX
+#endif
+
 #include <jsapi.h>
 
 #include <stdio.h>
 
 #define CONFIGURATION_OBJECT_NAME "configuration"
 
+#ifdef WIN32
+#define EXPORT __declspec(dllexport)
+#else
+#define EXPORT
+#endif
+
 extern JSClass configuration_class;
 
-JSBool GetConfigurationObject(JSContext *cx, JSObject **configurationObject );
-JSBool GetConfigurationValue( JSContext *cx, const char *name, jsval *value );
+JSBool GetConfigurationObject(JSContext *cx, JSObject **configurationObject);
+JSBool GetConfigurationValue(JSContext *cx, const char *name, jsval *value);
 
 
 /*
diff -ruN jslibs-20070508_orig/js.mk jslibs-20070508/js.mk
--- jslibs-20070508_orig/js.mk	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/js.mk	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,2 @@
+JS_CFLAGS = `pkg-config js --cflags`
+JS_LIBS = `pkg-config js --libs`
diff -ruN jslibs-20070508_orig/jscrypt/GNUmakefile jslibs-20070508/jscrypt/GNUmakefile
--- jslibs-20070508_orig/jscrypt/GNUmakefile	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jscrypt/GNUmakefile	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,58 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+
+# Package and system info.
+# ---------------------------------------------------------------------------
+PACKAGE = jscrypt
+DEPMODE = 0
+WARNINGS = undef no-ctor-dtor-privacy no-attributes
+MACHINE = arch=i686
+AUXDIRS = 
+CMDECHO = full
+
+# Library build configuration.
+# ---------------------------------------------------------------------------
+js_LIBRARIES = \
+  crypt
+
+IMPORTLIBS = $(patsubst %,js%.$(ilibext),$(js_LIBRARIES))
+SHAREDLIBS = $(addprefix ,$(patsubst $(ilibmask),$(modmask),$(IMPORTLIBS)))
+LIBRARIES = $(IMPORTLIBS) $(SHAREDLIBS)
+LTLIBRARIES = $(js_LIBRARIES:%=js%.la)
+LTOBJECTS = $(jscrypt_LTOBJECTS)
+
+#hell:
+#	@echo $(SHAREDLIBS)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+DISTFILES = $(call collect,makefiles sources autoconf win32 texts automake crypts nls mac scripts borland auxfiles *.bkl *.xrc *.wxr) version-script.in
+
+# Include global configuration.
+# ---------------------------------------------------------------------------
+TARGETS = $(LTLIBRARIES) $(PROGRAMS)
+CLEANFILES = $(LTLIBRARIES) $(LTOBJECTS)
+
+#$(dir $(wildcard ../audium.mk))
+topdir ?= ../
+include $(topdir)build.mk
+include $(topdir)js.mk
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+# Installation target
+install: all
+	$(INSTALL) -d $(DESTDIR)$(libdir)/js
+	$(LIBTOOL) --mode=install $(INSTALL) -m 755 $(LTLIBRARIES) $(DESTDIR)$(libdir)/js
+# Library link targets.
+# ---------------------------------------------------------------------------
+jscrypt_LTOBJECTS = crypt.lo cryptError.lo hash.lo main.lo misc.lo prng.lo rsa.lo ../configuration/configuration.lo
+  
+CXXFLAGS += -I. $(JS_CFLAGS)
+
+$(jscrypt_LTOBJECTS): %.lo: %.cpp
+
+jscrypt.la: LTLINK = $(LTCXXLINK)
+jscrypt.la: $(jscrypt_LTOBJECTS)
+jscrypt.la: LDFLAGS = -module -rpath $(libdir) -no-undefined -avoid-version
+jscrypt.la: LIBS = -ljs -ltomcrypt -ltommath
diff -ruN jslibs-20070508_orig/jscrypt/crypt.cpp jslibs-20070508/jscrypt/crypt.cpp
--- jslibs-20070508_orig/jscrypt/crypt.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jscrypt/crypt.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -385,4 +385,4 @@
 CTR ( Counter CryptMode )
 	http://en.wikipedia.org/wiki/Counter_mode (fr: http://fr.wikipedia.org/wiki/CryptMode_d%27op%C3%A9ration_%28cryptographie%29 )
 
-*/
\ No newline at end of file
+*/
diff -ruN jslibs-20070508_orig/jscrypt/main.cpp jslibs-20070508/jscrypt/main.cpp
--- jslibs-20070508_orig/jscrypt/main.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jscrypt/main.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -12,6 +12,8 @@
  * License.
  * ***** END LICENSE BLOCK ***** */
 
+#define LTM_DESC
+
 #include "stdafx.h"
 
 #include "misc.h"
@@ -23,14 +25,16 @@
 
 #include "../configuration/configuration.h"
 
-DEFINE_UNSAFE_MODE;
+//DEFINE_UNSAFE_MODE;
 
-extern "C" __declspec(dllexport) JSBool ModuleInit(JSContext *cx, JSObject *obj) {
+extern "C" EXPORT JSBool ModuleInit(JSContext *cx, JSObject *obj) {
 
-	SET_UNSAFE_MODE( JSVAL_TO_BOOLEAN(GetConfigurationValue(cx, "unsafeMode")) == JS_TRUE );
+  jsval v;
+  GetConfigurationValue(cx, "unsafeMode", &v);
+	SET_UNSAFE_MODE( JSVAL_TO_BOOLEAN(v) == JS_TRUE );
 
 	ltc_mp = ltm_desc;
-
+  
 	InitErrorClass( cx, obj );
 	miscInitClass( cx, obj );
 	rsaInitClass( cx, obj );
@@ -41,7 +45,7 @@
 	return JS_TRUE;
 }
 
-
+#ifdef WIN32
 BOOL APIENTRY DllMain( HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved ) {
 
   switch (ul_reason_for_call) {
@@ -55,3 +59,4 @@
   return TRUE;
 }
 
+#endif
diff -ruN jslibs-20070508_orig/jscrypt/rsa.cpp jslibs-20070508/jscrypt/rsa.cpp
--- jslibs-20070508_orig/jscrypt/rsa.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jscrypt/rsa.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -23,7 +23,7 @@
 
 #include "cryptError.h"
 
-#include "../common/jshelper.h"
+#include "../common/jsHelper.h"
 
 
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -313,4 +313,4 @@
     decrypt(855) = 8552753 mod 3233 = 123
 
 
-*/
\ No newline at end of file
+*/
diff -ruN jslibs-20070508_orig/jscrypt/stdafx.h jslibs-20070508/jscrypt/stdafx.h
--- jslibs-20070508_orig/jscrypt/stdafx.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jscrypt/stdafx.h	2008-11-09 14:40:03.000000000 +0100
@@ -5,17 +5,23 @@
 
 #pragma once
 
-
+#ifdef WIN32
 #define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers
 
 // TODO: reference additional headers your program requires here
 #include <windows.h>
 
 #define XP_WIN
+#define EXPORT __declspec(dllexport)
+#else
+#define XP_UNIX
+#define EXPORT
+#define _stricmp strcasecmp
+#endif
 #include <jsapi.h>
 
 #define JSHELPER_UNSAFE_DEFINED
-#include "../common/jshelper.h"
+#include "../common/jsHelper.h"
 
 #include <tomcrypt.h>
 #include "cryptError.h"
diff -ruN jslibs-20070508_orig/jsfastcgi/GNUmakefile jslibs-20070508/jsfastcgi/GNUmakefile
--- jslibs-20070508_orig/jsfastcgi/GNUmakefile	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jsfastcgi/GNUmakefile	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,61 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+
+# Package and system info.
+# ---------------------------------------------------------------------------
+PACKAGE = jsfastcgi
+DEPMODE = 0
+WARNINGS = undef no-ctor-dtor-privacy no-attributes
+MACHINE = arch=i686
+AUXDIRS = 
+CMDECHO = full
+
+# Library build configuration.
+# ---------------------------------------------------------------------------
+js_LIBRARIES = \
+  fastcgi
+
+IMPORTLIBS = $(patsubst %,js%.$(ilibext),$(js_LIBRARIES))
+SHAREDLIBS = $(addprefix ,$(patsubst $(ilibmask),$(modmask),$(IMPORTLIBS)))
+LIBRARIES = $(IMPORTLIBS) $(SHAREDLIBS)
+LTLIBRARIES = $(js_LIBRARIES:%=js%.la)
+LTOBJECTS = $(jsfastcgi_LTOBJECTS)
+
+#hell:
+#	@echo $(SHAREDLIBS)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+DISTFILES = $(call collect,makefiles sources autoconf win32 texts automake images nls mac scripts borland auxfiles *.bkl *.xrc *.wxr) version-script.in
+
+# Include global configuration.
+# ---------------------------------------------------------------------------
+TARGETS = $(LTLIBRARIES) $(PROGRAMS)
+CLEANFILES = $(LTLIBRARIES) $(LTOBJECTS)
+
+#$(dir $(wildcard ../audium.mk))
+topdir ?= ../
+include $(topdir)build.mk
+include $(topdir)js.mk
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+# Installation target
+install: all
+	$(INSTALL) -d $(DESTDIR)$(libdir)/js
+	$(LIBTOOL) --mode=install $(INSTALL) -m 755 $(LTLIBRARIES) $(DESTDIR)$(libdir)/js
+# Library link targets.
+# ---------------------------------------------------------------------------
+jsfastcgi_LTOBJECTS = \
+  fcgi.lo \
+  global.lo \
+  main.lo
+  
+CXXFLAGS += -I. $(JS_CFLAGS) $(FCGI_CFLAGS)
+
+$(jsfastcgi_LTOBJECTS): %.lo: %.cpp
+
+jsfastcgi.la: LTLINK = $(LTCXXLINK)
+jsfastcgi.la: $(jsfastcgi_LTOBJECTS)
+jsfastcgi.la: LDFLAGS = -module -rpath $(libdir) -no-undefined -avoid-version
+jsfastcgi.la: LIBS = $(JS_LIBS) $(FCGI_LIBS)
diff -ruN jslibs-20070508_orig/jsfastcgi/global.cpp jslibs-20070508/jsfastcgi/global.cpp
--- jslibs-20070508_orig/jsfastcgi/global.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsfastcgi/global.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -14,6 +14,7 @@
 
 #include "stdafx.h"
 #include <jsobj.h>
+#include <string.h>
 
 #include "global.h"
 
diff -ruN jslibs-20070508_orig/jsfastcgi/main.cpp jslibs-20070508/jsfastcgi/main.cpp
--- jslibs-20070508_orig/jsfastcgi/main.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsfastcgi/main.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -17,7 +17,7 @@
 #include "fcgi.h"
 #include "global.h"
 
-extern "C" __declspec(dllexport) JSBool ModuleInit(JSContext *cx, JSObject *obj) {
+extern "C" EXPORT JSBool ModuleInit(JSContext *cx, JSObject *obj) {
 
 	INIT_CLASS( FastCGI );
 	INIT_STATIC();
@@ -25,7 +25,7 @@
 	return JS_TRUE;
 }
 
-
+#ifdef WIN32
 BOOL APIENTRY DllMain( HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved ) {
 
   switch (ul_reason_for_call) {
@@ -38,6 +38,7 @@
   }
   return TRUE;
 }
+#endif
 
 /* MS doc:
 
@@ -55,4 +56,4 @@
 	NOTE: If all three modules were linked with CRTDLL.LIB or all three were linked with MSVCRT.LIb, these restrictions would not apply.
 
 	(source: http://support.microsoft.com/kb/94248)
-*/
\ No newline at end of file
+*/
diff -ruN jslibs-20070508_orig/jsfastcgi/stdafx.h jslibs-20070508/jsfastcgi/stdafx.h
--- jslibs-20070508_orig/jsfastcgi/stdafx.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsfastcgi/stdafx.h	2008-11-09 14:40:03.000000000 +0100
@@ -2,7 +2,7 @@
 // or project specific include files that are used frequently, but
 // are changed infrequently
 //
-
+#ifdef WIN32
 #pragma once
 
 #define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers
@@ -11,6 +11,11 @@
 #include <windows.h>
 
 #define XP_WIN
+#define EXPORT __declspec(dllexport)
+#else
+#define XP_UNIX
+#define EXPORT
+#endif
 #include <jsapi.h>
 #include "../common/jsNames.h"
 #include "../common/jsHelper.h"
diff -ruN jslibs-20070508_orig/jsfastcgi/test.txt jslibs-20070508/jsfastcgi/test.txt
--- jslibs-20070508_orig/jsfastcgi/test.txt	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jsfastcgi/test.txt	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1 @@
+bblaaaaaaaah
diff -ruN jslibs-20070508_orig/jsgraphics/GNUmakefile jslibs-20070508/jsgraphics/GNUmakefile
--- jslibs-20070508_orig/jsgraphics/GNUmakefile	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jsgraphics/GNUmakefile	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,58 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+
+# Package and system info.
+# ---------------------------------------------------------------------------
+PACKAGE = jsgraphics
+DEPMODE = 0
+WARNINGS = undef no-ctor-dtor-privacy no-attributes
+MACHINE = arch=i686
+AUXDIRS = 
+CMDECHO = full
+
+# Library build configuration.
+# ---------------------------------------------------------------------------
+js_LIBRARIES = \
+  graphics
+
+IMPORTLIBS = $(patsubst %,js%.$(ilibext),$(js_LIBRARIES))
+SHAREDLIBS = $(addprefix ,$(patsubst $(ilibmask),$(modmask),$(IMPORTLIBS)))
+LIBRARIES = $(IMPORTLIBS) $(SHAREDLIBS)
+LTLIBRARIES = $(js_LIBRARIES:%=js%.la)
+LTOBJECTS = $(jsgraphics_LTOBJECTS)
+
+#hell:
+#	@echo $(SHAREDLIBS)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+DISTFILES = $(call collect,makefiles sources autoconf win32 texts automake images nls mac scripts borland auxfiles *.bkl *.xrc *.wxr) version-script.in
+
+# Include global configuration.
+# ---------------------------------------------------------------------------
+TARGETS = $(LTLIBRARIES) $(PROGRAMS)
+CLEANFILES = $(LTLIBRARIES) $(LTOBJECTS)
+
+#$(dir $(wildcard ../audium.mk))
+topdir ?= ../
+include $(topdir)build.mk
+include $(topdir)js.mk
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+# Installation target
+install: all
+	$(INSTALL) -d $(DESTDIR)$(libdir)/js
+	$(LIBTOOL) --mode=install $(INSTALL) -m 755 $(LTLIBRARIES) $(DESTDIR)$(libdir)/js
+# Library link targets.
+# ---------------------------------------------------------------------------
+jsgraphics_LTOBJECTS = jsgl.lo jstransformation.lo jswindow.lo main.lo
+  
+CXXFLAGS += -I. $(JS_CFLAGS)
+
+$(jsgraphics_LTOBJECTS): %.lo: %.cpp
+
+jsgraphics.la: LTLINK = $(LTCXXLINK)
+jsgraphics.la: $(jsgraphics_LTOBJECTS)
+jsgraphics.la: LDFLAGS = -module -rpath $(libdir) -no-undefined -avoid-version
+jsgraphics.la: LIBS = $(JS_LIBS)
diff -ruN jslibs-20070508_orig/jsgraphics/jsgl.cpp jslibs-20070508/jsgraphics/jsgl.cpp
--- jslibs-20070508_orig/jsgraphics/jsgl.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsgraphics/jsgl.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -33,8 +33,8 @@
 
 #include "matrix44.h"
 
-#include "gl/gl.h"
-#include "gl/glu.h"
+#include <GL/gl.h>
+#include <GL/glu.h>
 
 #define SLOT_WINDOW_OBJECT 0
 
diff -ruN jslibs-20070508_orig/jsgraphics/matrix44.h jslibs-20070508/jsgraphics/matrix44.h
--- jslibs-20070508_orig/jsgraphics/matrix44.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsgraphics/matrix44.h	2008-11-09 14:40:03.000000000 +0100
@@ -36,7 +36,7 @@
 #include <math.h>
 
 //
-#include <fvec.h>
+//#include <fvec.h>
 
 #include "vector3.h"
 
diff -ruN jslibs-20070508_orig/jsgraphics/stdafx.h jslibs-20070508/jsgraphics/stdafx.h
--- jslibs-20070508_orig/jsgraphics/stdafx.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsgraphics/stdafx.h	2008-11-09 14:40:03.000000000 +0100
@@ -3,9 +3,9 @@
 // are changed infrequently
 //
 
+#ifdef WIN32
 #pragma once
 
-
 #define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers
 
 // TODO: reference additional headers your program requires here
@@ -27,11 +27,14 @@
 #include "stdlib.h"
 
 #define XP_WIN
+#else
+#define XP_UNIX
+#endif
 #include <jsapi.h>
 
 #define USE_UNSAFE_MODE
-#include "../common/jshelper.h"
-#include "../common/jsclass.h"
+#include "../common/jsHelper.h"
+#include "../common/jsClass.h"
 #include "../common/jsConversionHelper.h"
 
 
diff -ruN jslibs-20070508_orig/jsgraphics/vector3.h jslibs-20070508/jsgraphics/vector3.h
--- jslibs-20070508_orig/jsgraphics/vector3.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsgraphics/vector3.h	2008-11-09 14:40:03.000000000 +0100
@@ -12,33 +12,44 @@
  * License.
  * ***** END LICENSE BLOCK ***** */
 
-#pragma once
+//#pragma once
 /*
 source: http://nebuladevice.svn.sourceforge.net/viewvc/nebuladevice/trunk/nebula2/code/nebula2/inc/mathlib/_vector3_sse.h?view=markup
 */
 #include <xmmintrin.h>
+#include <malloc.h>
 
-#include <ivec.h>
+//#include <ivec.h>
 
 static const int X = 0;
 static const int Y = 1;
 static const int Z = 2;
 static const int W = 3;
 
-typedef __declspec(align(4)) union {
+typedef
+#ifdef _MSC_VER
+__declspec(align(4))
+#endif
+union {
     __m128 m128;
     struct { float x, y, z, pad; };
 } Vector3;
 
 
 inline void Vector3Free( Vector3 *m ) {
-
+#ifdef _MSC_VER
 	return _aligned_free(m);
+#else
+  free(m);
+#endif
 }
 
 inline Vector3 *Vector3Alloc() {
-
+#ifdef _MSC_VER
 	return (Vector3*)_aligned_malloc(sizeof(Vector3),16);
+#else
+  return (Vector3*)memalign(16, sizeof(Vector3));
+#endif
 }
 
 
@@ -138,4 +149,4 @@
 	__m128 f = _mm_mul_ps(c, d);
 
 	v->m128 = _mm_sub_ps(e, f);
-}
\ No newline at end of file
+}
diff -ruN jslibs-20070508_orig/jshost/GNUmakefile jslibs-20070508/jshost/GNUmakefile
--- jslibs-20070508_orig/jshost/GNUmakefile	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jshost/GNUmakefile	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,66 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+
+# Package and system info.
+# ---------------------------------------------------------------------------
+PACKAGE = jshost
+VERSION = 20070508
+DEPMODE = 0
+WARNINGS = undef no-ctor-dtor-privacy no-attributes
+#MACHINE = arch=i686
+AUXDIRS = 
+CMDECHO = full
+
+# Library build configuration.
+# ---------------------------------------------------------------------------
+bin_PROGRAMS = \
+  jshost
+
+#IMPORTLIBS = $(patsubst %,js%.$(ilibext),$(js_LIBRARIES))
+#3SHAREDLIBS = $(addprefix ,$(patsubst $(ilibmask),$(modmask),$(IMPORTLIBS)))
+#LIBRARIES = $(IMPORTLIBS) $(SHAREDLIBS)
+PROGRAMS = $(bin_PROGRAMS)
+#LTLIBRARIES = $(js_LIBRARIES:%=js%.la)
+LTOBJECTS = $(jshost_LTOBJECTS)
+
+#hell:
+#	@echo $(SHAREDLIBS)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+DISTFILES = $(call collect,makefiles sources autoconf win32 texts automake images nls mac scripts borland auxfiles *.bkl *.xrc *.wxr) 
+
+# Include global configuration.
+# ---------------------------------------------------------------------------
+TARGETS = $(PROGRAMS)
+CLEANFILES = $(LTOBJECTS)
+
+#$(dir $(wildcard ../audium.mk))
+topdir ?= ../
+include $(topdir)build.mk
+include $(topdir)js.mk
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+# Installation target
+install: all
+	$(INSTALL) -d $(DESTDIR)$(bindir)
+	$(LIBTOOL) --mode=install $(INSTALL) -m 755 jshost $(DESTDIR)$(bindir)
+
+# Library link targets.
+# ---------------------------------------------------------------------------
+jshost_LTOBJECTS = \
+  jshost.lo \
+	../moduleManager/moduleManager.lo \
+	../configuration/configuration.lo
+  
+CXXFLAGS += -I. $(JS_CFLAGS)
+
+$(jshost_LTOBJECTS): %.lo: %.cpp
+
+jshost: LTLINK = $(LTCXXLINK)
+jshost: $(jshost_LTOBJECTS)
+	$(LTLINK) -o $@ $^ $(LIBS)
+
+#jshost: LDFLAGS = -module -rpath $(libdir) -no-undefined -avoid-version
+jshost: LIBS = $(JS_LIBS)
diff -ruN jslibs-20070508_orig/jshost/jshost.cpp jslibs-20070508/jshost/jshost.cpp
--- jslibs-20070508_orig/jshost/jshost.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jshost/jshost.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -26,14 +26,16 @@
 #include "jsprf.h"
 #include "jsscript.h"
 
+#include <limits.h>
+
 #include "../common/jsNames.h"
-#include "../common/jshelper.h"
+#include "../common/jsHelper.h"
 #include "../configuration/configuration.h"
 #include "../moduleManager/moduleManager.h"
 
 // to be used in the main() function only
 #define RT_HOST_MAIN_ASSERT( condition, errorMessage ) \
-	if ( !(condition) ) { consoleStdErr( cx, errorMessage, sizeof(errorMessage)-1 ); return -1; }
+	if ( !(condition) ) { consoleStdErr( cx, errorMessage, sizeof(errorMessage)-1 ); consoleStdErr( cx, "\n", 1 ); return -1; }
 
 JSBool unsafeMode = JS_FALSE;
 
@@ -80,7 +82,7 @@
 static void ErrorReporter(JSContext *cx, const char *message, JSErrorReport *report) {
 
     int i, j, k, n;
-    char *prefix, *tmp;
+    char *prefix, *tmp, *msg = 0;
     const char *ctmp;
 
     if (!report) {
@@ -131,7 +133,7 @@
 
     /* report->linebuf usually ends with a newline. */
     n = strlen(report->linebuf);
-    char *msg = JS_smprintf(":\n%s%s%s%s",
+    msg = JS_smprintf(":\n%s%s%s%s",
             prefix,
             report->linebuf,
             (n > 0 && report->linebuf[n-1] == '\n') ? "" : "\n",
@@ -176,11 +178,17 @@
 	RT_ASSERT_ARGC(1);
 	char *fileName;
 	RT_JSVAL_TO_STRING( argv[0], fileName );
-	char libFileName[MAX_PATH];
+	char libFileName[PATH_MAX];
 	strcpy( libFileName, fileName );
 	strcat( libFileName, DLL_EXT );
 	ModuleId id = ModuleLoad(libFileName, cx, obj);
-	RT_ASSERT_2( id != 0, "Unable to load the module %s (error:%d).", libFileName, GetLastError() );
+	RT_ASSERT_2( id != 0, "Unable to load the module %s (error:%d).", libFileName, 
+#ifdef _WIN32
+    GetLastError() 
+#else
+    errno
+#endif
+  );
 	RT_CHECK_CALL( JS_NewNumberValue(cx, id, rval) );
 	return JS_TRUE;
 }
@@ -316,7 +324,7 @@
 	cx = JS_NewContext(rt, stackSize); // A context specifies a stack size for the script, the amount, in bytes, of private memory to allocate to the execution stack for the script.
 	RT_HOST_MAIN_ASSERT( cx != NULL, "unable to create the context." );
 
-	JS_SetVersion( cx, JSVERSION_1_7 );
+	JS_SetVersion( cx, JSVERSION_1_6 );
 	// (TBD) set into configuration file
 
 // error management
@@ -621,4 +629,4 @@
 	Dynamic-Link Library Redirection
 		http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/dynamic_link_library_redirection.asp
 
-*/
\ No newline at end of file
+*/
diff -ruN jslibs-20070508_orig/jshost/stdafx.h jslibs-20070508/jshost/stdafx.h
--- jslibs-20070508_orig/jshost/stdafx.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jshost/stdafx.h	2008-11-09 14:40:03.000000000 +0100
@@ -14,4 +14,7 @@
 #include <string.h>
 #include <time.h>
 #include <errno.h>
+
+#ifdef _WIN32
 #include <windows.h>
+#endif
diff -ruN jslibs-20070508_orig/jsimage/GNUmakefile jslibs-20070508/jsimage/GNUmakefile
--- jslibs-20070508_orig/jsimage/GNUmakefile	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jsimage/GNUmakefile	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,58 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+
+# Package and system info.
+# ---------------------------------------------------------------------------
+PACKAGE = jsimage
+DEPMODE = 0
+WARNINGS = undef no-ctor-dtor-privacy no-attributes
+MACHINE = arch=i686
+AUXDIRS = 
+CMDECHO = full
+
+# Library build configuration.
+# ---------------------------------------------------------------------------
+js_LIBRARIES = \
+  image
+
+IMPORTLIBS = $(patsubst %,js%.$(ilibext),$(js_LIBRARIES))
+SHAREDLIBS = $(addprefix ,$(patsubst $(ilibmask),$(modmask),$(IMPORTLIBS)))
+LIBRARIES = $(IMPORTLIBS) $(SHAREDLIBS)
+LTLIBRARIES = $(js_LIBRARIES:%=js%.la)
+LTOBJECTS = $(jsimage_LTOBJECTS)
+
+#hell:
+#	@echo $(SHAREDLIBS)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+DISTFILES = $(call collect,makefiles sources autoconf win32 texts automake images nls mac scripts borland auxfiles *.bkl *.xrc *.wxr) version-script.in
+
+# Include global configuration.
+# ---------------------------------------------------------------------------
+TARGETS = $(LTLIBRARIES) $(PROGRAMS)
+CLEANFILES = $(LTLIBRARIES) $(LTOBJECTS)
+
+#$(dir $(wildcard ../audium.mk))
+topdir ?= ../
+include $(topdir)build.mk
+include $(topdir)js.mk
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+# Installation target
+install: all
+	$(INSTALL) -d $(DESTDIR)$(libdir)/js
+	$(LIBTOOL) --mode=install $(INSTALL) -m 755 $(LTLIBRARIES) $(DESTDIR)$(libdir)/js
+# Library link targets.
+# ---------------------------------------------------------------------------
+jsimage_LTOBJECTS = jsimage.lo jsjpeg.lo jspng.lo main.lo
+  
+CXXFLAGS += -I. $(JS_CFLAGS) $(JPEG_CFLAGS) $(PNG_CFLAGS) $(ZLIB_CFLAGS)
+
+$(jsimage_LTOBJECTS): %.lo: %.cpp
+
+jsimage.la: LTLINK = $(LTCXXLINK)
+jsimage.la: $(jsimage_LTOBJECTS)
+jsimage.la: LDFLAGS = -module -rpath $(libdir) -no-undefined -avoid-version
+jsimage.la: LIBS = $(JS_LIBS) $(JPEG_LIBS) $(PNG_LIBS) $(ZLIB_LIBS)
diff -ruN jslibs-20070508_orig/jsimage/debug.js jslibs-20070508/jsimage/debug.js
--- jslibs-20070508_orig/jsimage/debug.js	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsimage/debug.js	2008-11-09 14:40:03.000000000 +0100
@@ -11,10 +11,20 @@
 */
 
 
-var texture = new Jpeg(new File('R0010235.JPG').Open( File.RDONLY )).Load().Trim([10,10,20,20]);
+try
+{
+  
+var texture = new Jpeg(new File('ant.jpg').Open( File.RDONLY )).Load().Trim([10,10,20,20]);
 Print( texture.width+'x'+texture.height+'x'+texture.channels, '\n' );
 
 
-var texture = new Png(new File('calendar2.png').Open( File.RDONLY )).Load();
+  
+var texture = new Png(new File('volume-med.png').Open( File.RDONLY )).Load();
 Print( texture.width+'x'+texture.height+'x'+texture.channels, '\n' );
 
+}
+
+catch(e)
+{
+  
+}
diff -ruN jslibs-20070508_orig/jsimage/jsimage.cpp jslibs-20070508/jsimage/jsimage.cpp
--- jslibs-20070508_orig/jsimage/jsimage.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsimage/jsimage.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -12,7 +12,17 @@
  * License.
  * ***** END LICENSE BLOCK ***** */
 
+#ifdef WIN32
 #include "stdafx.h"
+#else
+#define XP_UNIX
+#include <jsapi.h>
+#include <string.h>
+#include "../common/jsHelper.h"
+#include "../common/jsClass.h"
+#include "../common/jsConversionHelper.h"
+#endif
+
 #include "jsimage.h"
 
 #include "../smtools/smtools.h"
diff -ruN jslibs-20070508_orig/jsimage/main.cpp jslibs-20070508/jsimage/main.cpp
--- jslibs-20070508_orig/jsimage/main.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsimage/main.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -18,7 +18,7 @@
 #include "jsjpeg.h"
 
 
-extern "C" __declspec(dllexport) JSBool ModuleInit(JSContext *cx, JSObject *obj) {
+extern "C" EXPORT JSBool ModuleInit(JSContext *cx, JSObject *obj) {
 
 	INIT_CLASS( Image );
 	INIT_CLASS( Png );
@@ -27,12 +27,12 @@
 	return JS_TRUE;
 }
 
-extern "C" __declspec(dllexport) JSBool ModuleRelease(JSContext *cx, JSObject *obj) {
+extern "C" EXPORT JSBool ModuleRelease(JSContext *cx, JSObject *obj) {
 
 	return JS_TRUE;
 }
 
-
+#ifdef WIN32
 BOOL APIENTRY DllMain( HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved ) {
 
   switch (ul_reason_for_call) {
@@ -45,4 +45,4 @@
   }
   return TRUE;
 }
-
+#endif
diff -ruN jslibs-20070508_orig/jsimage/stdafx.h jslibs-20070508/jsimage/stdafx.h
--- jslibs-20070508_orig/jsimage/stdafx.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsimage/stdafx.h	2008-11-09 14:40:03.000000000 +0100
@@ -5,14 +5,21 @@
 
 #pragma once
 
+#ifdef WIN32
 #define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers
 // TODO: reference additional headers your program requires here
 
 #include <windows.h>
 
 #define XP_WIN
+#define EXPORT __declspec(dllexport)
+#else
+#define XP_UNIX
+#define EXPORT
+#endif
+
 #include <jsapi.h>
-#include "../common/jshelper.h"
-#include "../common/jsclass.h"
+#include "../common/jsHelper.h"
+#include "../common/jsClass.h"
 #include "../common/jsConversionHelper.h"
 
diff -ruN jslibs-20070508_orig/jsnspr/GNUmakefile jslibs-20070508/jsnspr/GNUmakefile
--- jslibs-20070508_orig/jsnspr/GNUmakefile	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jsnspr/GNUmakefile	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,58 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+
+# Package and system info.
+# ---------------------------------------------------------------------------
+PACKAGE = jsnspr
+DEPMODE = 0
+WARNINGS = undef no-ctor-dtor-privacy no-attributes
+MACHINE = arch=i686
+AUXDIRS = 
+CMDECHO = full
+
+# Library build configuration.
+# ---------------------------------------------------------------------------
+js_LIBRARIES = \
+  nspr
+
+IMPORTLIBS = $(patsubst %,js%.$(ilibext),$(js_LIBRARIES))
+SHAREDLIBS = $(addprefix ,$(patsubst $(ilibmask),$(modmask),$(IMPORTLIBS)))
+LIBRARIES = $(IMPORTLIBS) $(SHAREDLIBS)
+LTLIBRARIES = $(js_LIBRARIES:%=js%.la)
+LTOBJECTS = $(jsnspr_LTOBJECTS)
+
+#hell:
+#	@echo $(SHAREDLIBS)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+DISTFILES = $(call collect,makefiles sources autoconf win32 texts automake images nls mac scripts borland auxfiles *.bkl *.xrc *.wxr) version-script.in
+
+# Include global configuration.
+# ---------------------------------------------------------------------------
+TARGETS = $(LTLIBRARIES) $(PROGRAMS)
+CLEANFILES = $(LTLIBRARIES) $(LTOBJECTS)
+
+#$(dir $(wildcard ../audium.mk))
+topdir ?= ../
+include $(topdir)build.mk
+include $(topdir)js.mk
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+# Installation target
+install: all
+	$(INSTALL) -d $(DESTDIR)$(libdir)/js
+	$(LIBTOOL) --mode=install $(INSTALL) -m 755 $(LTLIBRARIES) $(DESTDIR)$(libdir)/js
+# Library link targets.
+# ---------------------------------------------------------------------------
+jsnspr_LTOBJECTS = main.lo nsprDirectory.lo nsprError.lo nsprEvent.lo nsprFile.lo nsprGlobal.lo nsprSocket.lo ../configuration/configuration.lo
+
+CXXFLAGS += -I. $(JS_CFLAGS) $(NSPR_CFLAGS)
+
+$(jsnspr_LTOBJECTS): %.lo: %.cpp
+
+jsnspr.la: LTLINK = $(LTCXXLINK)
+jsnspr.la: $(jsnspr_LTOBJECTS)
+jsnspr.la: LDFLAGS = -module -rpath $(libdir) -no-undefined -avoid-version
+jsnspr.la: LIBS = $(JS_LIBS) $(NSPR_LIBS)
diff -ruN jslibs-20070508_orig/jsnspr/GNUmakefile~ jslibs-20070508/jsnspr/GNUmakefile~
--- jslibs-20070508_orig/jsnspr/GNUmakefile~	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jsnspr/GNUmakefile~	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,60 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+
+# Package and system info.
+# ---------------------------------------------------------------------------
+PACKAGE = jsnspr
+#VERSION = 2.8
+MKRULES = build.mk
+DEPMODE = 0
+WARNINGS = undef no-ctor-dtor-privacy no-attributes
+MACHINE = arch=i686
+AUXDIRS = 
+CMDECHO = full
+
+# Library build configuration.
+# ---------------------------------------------------------------------------
+js_LIBRARIES = \
+  nspr
+
+IMPORTLIBS = $(patsubst %,js%.$(ilibext),$(js_LIBRARIES))
+SHAREDLIBS = $(addprefix ,$(patsubst $(ilibmask),$(modmask),$(IMPORTLIBS)))
+LIBRARIES = $(IMPORTLIBS) $(SHAREDLIBS)
+LTLIBRARIES = $(js_LIBRARIES:%=js%.la)
+LTOBJECTS = $(jsnspr_LTOBJECTS)
+
+#hell:
+#	@echo $(SHAREDLIBS)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+DISTFILES = $(call collect,makefiles sources autoconf win32 texts automake images nls mac scripts borland auxfiles *.bkl *.xrc *.wxr) version-script.in
+
+# Include global configuration.
+# ---------------------------------------------------------------------------
+TARGETS = $(LTLIBRARIES) $(PROGRAMS)
+CLEANFILES = $(LTLIBRARIES) $(LTOBJECTS)
+
+#$(dir $(wildcard ../audium.mk))
+topdir ?= ../
+include $(topdir)$(MKRULES)
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+# Installation target
+install: all
+	$(INSTALL) -d $(DESTDIR)$(libdir)/js
+	$(LIBTOOL) --mode=install $(INSTALL) -m 755 $(LTLIBRARIES) $(DESTDIR)$(libdir)/js
+# Library link targets.
+# ---------------------------------------------------------------------------
+jsnspr_LTOBJECTS = main.lo nsprDirectory.lo nsprError.lo nsprEvent.lo nsprFile.lo nsprGlobal.lo nsprSocket.lo ../configuration/configuration.lo
+
+  
+CPPFLAGS += -I$(includedir)/js -I$(includedir)/nspr -I.
+
+$(jsnspr_LTOBJECTS): %.lo: %.cpp
+
+jsnspr.la: LTLINK = $(LTCXXLINK)
+jsnspr.la: $(jsnspr_LTOBJECTS)
+jsnspr.la: LDFLAGS = -module -rpath $(libdir) -no-undefined -avoid-version
+jsnspr.la: LIBS = -ljs -lnspr
diff -ruN jslibs-20070508_orig/jsnspr/build.mk jslibs-20070508/jsnspr/build.mk
--- jslibs-20070508_orig/jsnspr/build.mk	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jsnspr/build.mk	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,745 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+# ---------------------------------------------------------------------------
+
+# Package name and version.
+PACKAGE ?= pkg$(warning no package name specified!)
+# VERSION ?= 0.0$(warning no package version specified!)
+
+# Build behaviour.
+DEPMODE ?= 1
+SYMBOLS ?= 0
+OPTIMIZE ?= 3
+MACHINE ?= arch=pentium4m sse sse2
+WARNINGS ?= all error
+CMDECHO ?= full
+
+export DEPMODE SYMBOLS OPTIMIZE MACHINE WARNINGS CMDECHO
+
+# Common directories.
+prefix ?= C:/Dev-Cpp
+exec_prefix ?= $(prefix)
+bindir ?= $(exec_prefix)/bin
+libdir ?= $(exec_prefix)/lib
+pkgconfigdir ?= $(libdir)/pkgconfig
+slibdir ?= $(libdir)
+datadir ?= $(prefix)/share
+includedir ?= $(prefix)/include
+cxxincludedir = $(includedir)/c++
+
+# Package specific directories.
+pkglibdir = $(libdir)$(PACKAGE)
+pkgdatadir = $(datadir)/$(PACKAGE)
+pkgincludedir = $(includedir)/$(PACKAGE)
+
+# Machine configuration.
+#arch ?= $(shell uname -m)
+#tune ?= 
+
+# Compiler commandline flags.
+CFLAGS :=
+CXXFLAGS = $(CFLAGS)
+ARFLAGS = rcs
+
+# DO NOT CHANGE ANYTHING BELOW THIS LINE UNLESS REALLY NOW WHAT YOU'RE DOING!
+# ---------------------------------------------------------------------------
+
+# Make configuration
+# ---------------------------------------------------------------------------
+
+Q-full =
+Q-short = @
+Q-long = @
+C = -c
+
+pad-short = $(tabstop)$(space)
+
+ifeq ($(DEPMODE),1)
+postdep = && $(SED) -i 's,^\(.*\)\.o:,\1.o \1.d:,' $*.d
+endif
+
+# Default target.
+.DEFAULT_GOAL: all
+
+#.SILENT:
+
+# System configuration
+# ---------------------------------------------------------------------------
+
+# Host-triplet and architecture specification.
+host = $(shell $(CC) -dumpmachine)
+#host = i686-pc-mingw32
+#arch ?= $(shell arch || uname -m || echo '$(host:%-*=%)')
+
+export host arch
+
+arch = $(word 1,$(subst -, ,$(host)))
+
+# Kernel and user-level systems info.
+#kernel ?= $(shell uname -s || echo '$(host:*-%-*=%)')
+kernel = $(word 2,$(subst -, ,$(host)))
+
+#system ?= $(shell uname -o || echo '$(host:*-%=%)')
+system = $(word 3,$(subst -, ,$(host)))
+
+export kernel system
+
+# Shell utilities
+LN ?= ln
+CP ?= cp
+RM ?= rm -f
+RM_R ?= $(RM) -r
+MKDIR ?= mkdir -p
+SED ?= sed
+SORT ?= sort
+INSTALL ?= install
+TAR ?= tar
+
+# Development toolchain.
+CC = $(cross)gcc
+CXX = $(cross)g++
+AR = $(cross)ar
+NM = $(cross)nm
+RANLIB = $(cross)ranlib
+WINDRES = $(cross)windres
+DLLTOOL = $(cross)dlltool
+DLLWRAP = $(cross)dllwrap
+LIBTOOL = $(cross)libtool
+
+LTCTAG = --tag=CC
+LTCXXTAG = --tag=CXX
+LTINSTALL = $(LIBTOOL) --mode=install $(INSTALL)
+
+# Default driver for dllwrap
+DLLDRIVER = $(CC)
+
+
+# Defaults for release tarball creation.
+DISTDIR = $(PACKAGE)$(if $(VERSION),-$(VERSION))/
+DISTPKG = $(outdir)$(PACKAGE)-$(VERSION).tar.gz
+DISTLST = $(PACKAGE)-$(VERSION).tar.lst
+
+export DISTDIR
+
+# Specialized forms of programs
+LN_S = $(LN) -s
+RM_F = $(RM) -f
+RM_R = $(RM) -r
+INSTALL_DIR = $(INSTALL) -d
+INSTALL_DATA = $(INSTALL) -m 644
+INSTALL_EXEC = $(INSTALL) -m 755
+LTINSTALL_DIR = $(INSTALL) -d
+LTINSTALL_DATA = $(LTINSTALL) -m 644
+LTINSTALL_EXEC = $(LTINSTALL) -m 755
+
+# Target dependant configuration.
+# ---------------------------------------------------------------------------
+
+# Set up things for GNU/Linux based systems.
+ifeq ($(system), linux)
+host = i686-pc-linux-gnu
+prefix = /usr/audium
+
+ilibext = so
+slibext = so.$(VERSION)
+slibprefix = lib
+
+CFLAGS += -fPIC
+CPPFLAGS += -DPIC
+LDFLAGS += -Wl,-rpath,$(libdir) -static-libgcc
+
+endif
+
+ifeq ($(system), mingw32)
+
+# A win32 system.
+host = i686-pc-mingw32
+prefix = /usr/$(host)
+cross = $(host)-
+
+slibdir = $(bindir)
+
+binext = .exe
+slibext = dll
+ilibext = $(slibext).a
+
+endif
+
+ifeq ($(system), cygwin)
+
+# A win32 system.
+host = i686-pc-cygwin
+prefix = /usr
+cross = $(host)-
+
+slibdir = $(bindir)
+
+binext = .exe
+slibext = dll
+ilibext = $(slibext).a
+
+endif
+
+slibext ?= dll
+
+slibmask = $(outdir)$(addlibprefix)%.$(slibext)
+ilibmask = lib%.$(ilibext)
+
+# Build dependencies.
+# ---------------------------------------------------------------------------
+
+# Debugging symbols for gdb
+ifeq ($(SYMBOLS),1)
+CFLAGS += -g -ggdb
+endif
+
+# Dependency tracking into %.d files.
+ifeq ($(DEPMODE),1)
+CFLAGS += -MMD
+endif
+
+# Warning level.
+ifneq ($(WARNINGS),)
+CFLAGS += $(addprefix -W,$(WARNINGS))
+endif
+
+# Optimization?
+ifneq ($(OPTIMIZE),)
+CFLAGS += -O$(OPTIMIZE)
+endif
+
+# Machine flags.
+ifneq ($(OPTIMIZE),0)
+ifneq ($(MACHINE),)
+CFLAGS += $(addprefix -m,$(MACHINE))
+endif
+endif
+
+# Compilation and link commands
+# ---------------------------------------------------------------------------
+COMPILE = $(call exec-var,CC$(tabstop)$(space),$(call var-strip,DEFS INCLUDES CPPFLAGS CFLAGS),$(reldir)$@)
+CXXCOMPILE = $(call exec-var,CXX$(tabstop)$(space),$(call var-strip,DEFS INCLUDES CPPFLAGS CXXFLAGS),$(reldir)$@)
+LINK = $(call exec-var,CC$(tabstop)$(space),$(if $(LDFLAGS), $(LDFLAGS)),$(reldir)$@)
+CXXLINK = $(call exec-var,CXX$(tabstop)$(space),$(if $(LDFLAGS), $(LDFLAGS)),$(reldir)$@)
+
+# The same using GNU libtool
+LTCOMPILE = $(LIBTOOL) $(LTCTAG) --mode=compile $(COMPILE)
+LTCXXCOMPILE = $(LIBTOOL) $(LTCXXTAG) --mode=compile $(CXXCOMPILE)
+LTLINK = $(LIBTOOL) $(LTCTAG) --mode=link $(LINK)
+LTCXXLINK = $(LIBTOOL) $(LTCXXTAG) --mode=link $(CXXLINK)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+#DEPFILES = $(subst .o,.d,$(OBJECTS))
+CLEANFILES ?= $(OBJECTS) $(DEPFILES) $(LIBRARIES) $(PROGRAMS)
+#TARGETS = $(LIBRARIES) $(PROGRAMS)
+
+# ===========================================================================
+# Functions section.
+# ===========================================================================
+
+# Auxilary variables used in several functions.
+# ----------------------------------------------------------------------------
+
+# Comma, for use inside function arguments.
+comma := ,
+
+# Used for $(space).
+empty :=
+
+# A single space character.
+space := $(empty) $(empty)
+
+# A tabstop character.
+tabstop := $(empty)	$(empty)
+
+# A newline character.
+define newline
+\
+
+
+endef
+
+# Functions concerning variables.
+# ----------------------------------------------------------------------------
+
+# var-if NAME,NON-EMPTY,EMPTY
+# Expands NONEMPTY when $(NAME) not empty, otherwise EMPTY.
+var-if = \
+	$(if $($1),$2,$3)
+
+# var-ifeq,A,B,EQUAL,NON-EQUAL
+# Expands to EQUAL when $(A) == $(B), otherwise to NON-EQUAL.
+var-ifeq = \
+	$(if $(subst $2,,$1),$4,$3)
+
+# var-ifneq,A,B,NON-EQUAL,EQUAL
+# Expands to EQUAL when $(A) == $(B), otherwise to NON-EQUAL.
+var-ifneq = \
+	$(if $(subst $2,,$1),$3,$4)
+
+# var-default,NAME,DEFAULT
+# Expands variable $(NAME) when not empty, otherwise DEFAULT.
+var-default = \
+	$(if $($1),$($1),$2)
+
+var-strip = $(strip $(foreach name,$1, $(if $(strip $($(name))), $(strip $($(name))) ) ))
+
+# Symbol extraction functions.
+# ----------------------------------------------------------------------------
+
+# nm-execute FILE
+# Runs binutils nm(1) on FILE, output in posix format. File names will be 
+# stripped.
+nm-execute = \
+	$(filter-out $1%,\
+	$(shell $(NM) -P $(1))
+
+# nm-extract OUTPUT,TYPE
+# Extracts symbols with the given type character from output of nm-execute.
+nm-extract = \
+	$(patsubst %:$2,%,\
+	$(filter %:$2,\
+	$(subst $(space)$2$(space),:$2$(space),$1$(space))))
+
+# nm-symbols FILE,TYPE
+# Both of the above combined.
+nm-symbols = \
+	$(call nm-extract,\
+	$(call nm-execute,$1),$2)
+
+# Echoing commands.
+# ----------------------------------------------------------------------------
+
+# echo-mode
+echo-mode = $(if $(CMDECHO),$(CMDECHO),short)
+
+# echo-short
+echo-short = echo '  $1$(space)$(if $3,$3,$@)' &&
+
+# echo-long
+echo-long = echo '  $1$(space)$(if $3,$3,$@) $^' &&
+
+# echo-full
+echo-full = $(info $(Q-full)help)
+
+echo-q = $(echo-$(echo-mode))
+
+# internally used echo macro
+echo-cmd = $(Q-$(echo-mode))$(echo-$(echo-mode))
+
+echo-qcmd = $(echo-$(echo-mode))
+
+# Executing commands.
+# ----------------------------------------------------------------------------
+
+# exec-shell NAME,CMDS
+exec-q = $(echo-q) $2
+
+# exec-cmd NAME,CMDS
+exec-cmd = $(echo-cmd) $2
+
+# exec-var VAR,ARGS
+exec-var = $(echo-cmd) $($(strip $1)) $2
+exec-qvar = $(echo-qcmd) $($(strip $1)) $2
+
+# Special commands.
+# ----------------------------------------------------------------------------
+
+mkdef-script = '0,/^/ { s/^/EXPORTS\n/; P }; /$(PATTERN) [A-Z] [0-9a-f]\{8\}/ s/^_\([_a-z0-9]\+\) .*/\t\1/ip'
+
+mkdef-nm = $(call exec-cmd,MKDEF$(tabstop)$(space),$(NM) --defined-only --format=posix $1 |\
+	$(SED) -n $(mkdef-script) >$@,$(reldir)$@)
+
+# Transform stem into library names (import or shared library).
+# ----------------------------------------------------------------------------
+name-ilib = $(patsubst %,$(ilibmask),$1)
+name-slib = $(patsubst %,$(slibmask),$1)
+
+# Expands to both, the import and the shared libraries.
+name-libs = $(name-slib) $(name-ilib)
+
+# Filtering and substitution of lists.
+# ---------------------------------------------------------------------------
+list-objs = $(patsubst %.cpp,%.o,$(patsubst %.c,%.o,$1))
+
+# File masking using wildcards.
+# ---------------------------------------------------------------------------
+mask-makefiles = *akefile*
+
+# File collection using wildcards.
+# ---------------------------------------------------------------------------
+mask-sources = *.c *.h *.cpp *.cc *.cxx *.hpp *.hxx *.S *.s *.asm *.inc
+mask-auxfiles = *.rc *.r SConstruct
+mask-texts = \
+	ABOUT* README* COPYING* COPYRIGHT HOWTO* RELEASE*  VERSION INSTALL* NEWS INDEX MANIFEST AUTHORS TODO ChangeLog* \
+	ANNOUNCE CHANGES KNOWNBUG LICENSE THANKS Y2KINFO DESIGN NOTES PORTS Licensing* \
+	*.txt *.TXT *.doc *.html *.htm FAQ *.3 *.texi *.info* *.tex *.pdf *.rtf *.sty \
+  *.manifest
+mask-scripts = *.sh *.com *.py *.tcl *.tk *.cmd *.sed *.pl *.applescript
+mask-makefiles = *akefile* *.mk *.icc *.mms
+mask-nls = *.po *.gmo *.sin *.pot POTFILES.in *.header *.mo
+mask-man = *.1 *.2 *.3 *.4 *.5 *.6 *.7 *.8
+mask-autoconf = *.m4 autogen.sh configure.in configure.ac config.h.in Makefile.in configure install-sh mkinstalldirs config.h.in *config*.in *.h.in
+mask-automake = Makefile.am config.sub config.guess ltmain.sh depcomp missing
+mask-libtool = ltmain.sh ltconfig
+mask-images = *.png *.jpg *.jpeg *.gif *.tif *.tiff *.bmp *.xpm *.eps *.xbm *.wmf *.pnm *.pcx *.ani
+mask-win32 = *.chm *.bat *.obj *.pas *.mak *.vcproj *.dsp *.dsw *.sln *.cs *.csproj *.raw *.gpr *.ico *.vc *.mdp *.rc *.vcp *.vcw *.pro *.cur *.ini
+mask-various = *.clp *.build *.pk *.mms *.qpg bndsrc
+mask-mac = *.note *.make *.mpw *.mm
+mask-borland = *.bpf *.bpr *.pbxproj
+
+mask-default = \
+	$(mask-sources) $(mask-textfiles) $(mask-makefiles) $(mask-auxfiles)
+
+mask-everything = $(foreach t,sources auxfiles texts scripts makefiles \
+	autoconf automake libtool win32 various,$(mask-$t))
+
+collectfn-recursive = $1 $(foreach auxdir,$(patsubst %/,%,$(AUXDIRS)),$(addprefix $(auxdir)/,$1) )
+collectfn-arbitrary = $(call collectfn-recursive,$(if $(mask-$1),$(mask-$1),$1))
+collectfn-list = $(foreach list,$1,$(call collectfn-arbitrary,$(list)) )
+
+collect = $(patsubst %/,%,$(sort $(wildcard $(call collectfn-list,$(if $1,$1,default)))))
+#collect= $(call collect-recursive,$1)
+
+# Shell utilities.
+# ---------------------------------------------------------------------------
+
+# shell-foreach,SHVARNAME,LIST,COMMANDS
+shell-foreach = for $1 in $2; do $3; done
+
+# Extraction macros.
+# ---------------------------------------------------------------------------
+
+# extract-dirs,PATHS[,STRIP]
+extract-dirs = $(patsubst %/,%,$(sort $(dir $(patsubst $2/%,%,$1))))
+
+# extract-files,FILES,DIR[,STRIP]
+extract-rfiles = \
+	$(addprefix $(if $3,$3/,),\
+		$(filter $(patsubst .,,$2)/%,\
+			$(filter-out $(addsuffix /,$(filter-out $2,$(call extract-dirs,$1,$3))),\
+				$(patsubst $3/%,%,$1)\
+			)\
+		)\
+	)
+
+extract-files = \
+	$(addprefix $(if $3,$3/,),\
+		$(filter $(patsubst .,,$2)%,\
+			$(filter-out $(addsuffix /,$(filter-out $2,$(call extract-dirs,$1,$3))),\
+				$(patsubst $3/%,%,$1)\
+			)\
+		)\
+	)
+
+#echo 1: $1, 2: $2, 3: $3 
+#$(filter-out %/%,$(filter $(if $3,$3/,)$2%,$(patsubst ./%,%,$1)))
+
+# Installation.
+# ---------------------------------------------------------------------------
+
+# install-rdata,FILES,DIR[,STRIP]
+install-rdata = \
+	$(foreach dir,$(call extract-dirs,$1,$3),\
+		$(call exec-var,INSTALL,-d $2/$(patsubst ./%,%,$(dir)))$(newline)\
+		$(call exec-var,INSTALL_DATA,$(call extract-rfiles,$1,$(dir),$3) $2/$(dir))$(newline)\
+	)
+  
+# install-rexec,FILES,DIR[,STRIP]
+install-rexec = \
+	$(foreach dir,$(call extract-dirs,$1,$3),\
+		$(call exec-var,INSTALL,-d $2/$(patsubst ./%,%,$(dir)))$(newline)\
+		$(call exec-var,INSTALL_EXEC,$(call extract-rfiles,$1,$(dir),$3) $2/$(dir))$(newline)\
+	)
+  
+# install-data,FILES,DIR
+install-data = \
+	$(call exec-var,INSTALL,-d $2)$(newline)\
+	$(call exec-var,INSTALL_DATA,$1 $2)$(newline)
+
+# install-exec,FILES,DIR
+install-exec = \
+	$(call exec-var,INSTALL,-d $2)$(newline)\
+	$(call exec-var,INSTALL_EXEC,$1 $2)$(newline)
+
+# ===========================================================================
+# Rules section.
+# ===========================================================================
+
+# Default commands when target is undefined. Will execute for every 
+# prerequisite.
+# ---------------------------------------------------------------------------
+.DEFAULT: %
+	@echo "  ERROR   no such target '$@'"
+
+# Compilation targets.
+# ---------------------------------------------------------------------------
+
+# Preprocess, compile and assemble C source.
+%.o: %.c
+	$(COMPILE) $(C) -o $@ $< $(postdep)
+
+# Preprocess, compile and assemble C source using GNU libtool.
+%.lo: %.c
+	$(LTCOMPILE) $(C) -o $@ $< $(postdep)
+
+# Preprocess, compile but not assemble C source.
+%.s: %.c
+	$(COMPILE) -S -o $@ $< $(postdep)
+
+# Preprocess, compile and assemble C++ source.
+%.o: %.cpp
+	$(CXXCOMPILE) $(C) -o $@ $< $(postdep)
+
+%.o: %.cxx
+	$(CXXCOMPILE) $(C) -o $@ $< $(postdep)
+
+# Preprocess, compile and assemble C++ source using GNU libtool
+%.lo: %.cpp
+	$(LTCXXCOMPILE) $(C) -o $@ $< $(postdep)
+
+%.lo: %.cxx
+	$(LTCXXCOMPILE) $(C) -o $@ $< $(postdep)
+
+# Compile ressources using windres.
+%.o: %.rc
+	$(WINDRES)$(if $(CPPFLAGS), $(CPPFLAGS),) -o $@ $<
+
+# Preprocess, compile but not assemble C++ source.
+%.s: %.cpp;
+	$(CXXCOMPILE) -S -o $@ $< $(postdep)
+
+# Dependency stub
+%.d: 
+	@touch $@
+
+# Linking targets.
+# ---------------------------------------------------------------------------
+
+# Library search patterns.
+.LIBPATTERNS := lib%.$(ilibext) lib%.a
+VPATH := $(subst $(space),:,$(addprefix $(topdir),$(subst :,$(space),$(LIBPATH))))
+vpath := $(addprefix $(topdir),$(subst :,$(space),$(LIBPATH)))
+#VPATH := $(if $(LIBPATH),$(subst $(space),:,$(addprefix $(thisdir),$(subst :,$(space),$(LIBPATH))))):$(topdir):$(topdir)../
+#vpath := $(if $(LIBPATH),$(addprefix $(thisdir),$(subst :,$(space),$(LIBPATH)))) $(topdir) $(topdir)../
+#$(slibprefix)%.$(slibext)
+
+#fuck:
+#	echo $(arch) $(kernel) $(system)
+
+# Wildcard target for shared libraries. $(LDADD)#lib%.def
+$(outdir)%.dll lib%.dll.a:
+	@echo 'target: $@'
+	$(call exec-var,DLLWRAP,$(call var-strip,LDFLAGS)$(if $(DRIVER), --driver-name=$(DRIVER))$(if $(filter %.def,$^ $|), --def=$(filter %.def,$^ $|),$(if $(wildcard lib$(notdir $*).def), --def=lib$(notdir $*).def, --export-all-symbols)) \
+		$(if $(filter %.$(ilibext),$@),--output-lib=$@) -o $(outdir)$*.$(slibext) $(filter-out %.def,$^) $(LDADD) $(LIBS),$(if $(outdir),,$(outdir))$*.$(slibext),$@)
+
+$(outdir)lib%.so lib%.so.$(VERSION):
+	@echo 'target: $@'
+	$(call exec-var,CC,$(call var-strip,LDFLAGS)$(if $(DRIVER), --driver-name=$(DRIVER))$(if $(filter %.def,$^ $|), --def=$(filter %.def,$^ $|),$(if $(wildcard lib$(notdir lib$*).def), --def=lib$(notdir lib$*).def, --shared)) \
+		$(if $(filter %.$(ilibext),$@),--output-lib=$@) -o $(outdir)lib$*.$(slibext) $(filter-out %.def,$^) $(LDADD) $(LIBS),$(if $(outdir),,$(outdir))lib$*.$(slibext),$@)
+
+%.def:
+	$(call mkdef-nm,$^)
+
+#lib%.$(ilibext): $(addlibprefix)$*.$(slibext)
+
+#lib%.dll.a:
+#	$(call exec-var,DLLWRAP,\
+#	$(if $(DRIVER), --driver-name=$(DRIVER)) --def=lib$*.def --output-lib=$@ -o $(outdir)$*.$(slibext) $^ $(LDADD) $(LIBS),$(if $(outdir),,$(outdir))$*.$(slibext)
+
+# $($(notdir $*)_OBJECTS)
+%.a:
+	$(call exec-var,AR$(tabstop)$(space),$(ARFLAGS) $@ $(filter %.o,$^),$(reldir)$@)
+
+# Generic linking target
+%$(binext):
+	$(LINK) -o $@ $^ $(LIBS) $(postdep)
+
+# Generic linking target
+%.la:
+	$(LTLINK) -o $@ $^ $(LIBS) $(postdep)
+
+# Wildcard target for simple binaries.
+%$(binext): #%.cpp
+	$(if $(CCLD),$(CCLD),$(LINK)) $(CPPFLAGS) -o $@ $^ $(filter %.a,$|)$(if $(strip $(LDADD)), $(LDADD))$(if $(strip $(LIBS)), $(LIBS)) $(postdep)
+
+#%$(binext): %.c
+#	$(LINK) $(CPPFLAGS) $(CFLAGS) -o $@ $*.c $(LDADD) $(LIBS)
+
+#lib%.$(ilibext): %.$(slibext)
+
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+ifneq ($(TARGETS),)
+.PHONY: all
+# Builds all $(TARGETS)
+#debug:
+#	echo vpath = $(vpath)
+#	echo VPATH = $(VPATH)
+all: $(TARGETS)
+endif
+
+.PHONY: audium.mk GNUmakefile
+
+GNUmakefile:;
+audium.mk:;
+
+# Cleanup targets.
+# ---------------------------------------------------------------------------
+
+.PHONY: clean
+clean:
+ifneq ($(CLEANFILES),)
+# Cleans all $(CLEANFILES) in the build tree.
+ifeq ($(Q-$(echo-mode)),)
+	$(call exec-var,RM$(pad-short),$(CLEANFILES))
+else
+	@list='$(CLEANFILES)'; \
+	for file in $$list; do \
+		test -f "$$file" && \
+		{ echo "  RM$(pad-short) $(reldir)$${file#$(outdir)}"; \
+			$(RM) "$$file" || exit 1; } \
+	done; \
+	true  
+endif
+endif
+
+# ---------------------------------------------------------------------------
+# Recursive targets.
+# ---------------------------------------------------------------------------
+.PHONY: %-recursive
+
+
+
+#cd-short = "  MAKE -C$(space)[31;1m$(reldir)[0m"
+cd-short = '  MAKE -C$(space)\0033[0;31m$(reldir)\0033[0m'
+cd-full = $$cmds
+
+.PHONY: %-recursive
+%-recursive:
+	@for dir in $(SUBDIRS); do \
+    cmds="$(MAKE)$(if $(Q-$(echo-mode)), --no-print-directory -s) -C $$dir reldir='$(reldir)$$dir/' outdir='../$(outdir)' topdir='../$(topdir)' DISTDIR='$(DISTDIR)$$dir/' Q-full='$(space)$(Q-full)' $*"; \
+    /bin/echo -e $(cd-$(echo-mode))$(if $(Q-$(echo-mode)),$$dir,); eval $$cmds || exit 1; \
+  done
+
+# VPATH='../$(VPATH)$(if $(VPATH),:$(VPATH))
+.PHONY: $(addsuffix /%,$(SUBDIRS))
+$(addsuffix /%,$(SUBDIRS)):
+ifeq ($(Q-$(echo-mode)),)
+	$(MAKE) -C $(dir $@) reldir='$(reldir)$(dir $@)' outdir='' DISTDIR='$(DISTDIR)$(dir $@)/' Q-full='$(space)$(Q-full)' $*
+else
+	@cmd="$(MAKE)$(if $(Q-$(echo-mode)), --no-print-directory -s) -C $(dir $@) reldir='$(reldir)$(dir $@)' outdir='' topdir='../$(topdir)' DISTDIR='$(DISTDIR)$(dir $@)/' Q-full='$(space)$(Q-full)' $*"; \
+  $(info $(cd-$(echo-mode)))echo -e $(cd-$(echo-mode))$(patsubst %/$*,%,$@); eval $$cmd || exit 1
+endif
+
+# Package management targets.
+# ---------------------------------------------------------------------------
+
+ifneq ($(DISTFILES),)
+.PHONY: $(DISTDIR) $(DISTPKG) $(SUBDIRS)
+
+distfiles:
+	@for file in $(DISTFILES); do \
+		echo $$file; \
+	done
+
+mkdir-short = '  MKDIR$(pad-short)'
+dist-short = '  DIST$(pad-short)'
+
+.PHONY: distdir $(outdir)$(DISTDIR)
+distdir: $(outdir)$(DISTDIR) $(if $(SUBDIRS),distdir-recursive)
+$(outdir)$(DISTDIR): $(DISTFILES)
+	$(call exec-var,RM_R$(pad-short),$(outdir)$(DISTDIR),$(DISTDIR))
+ifeq ($(SUBDIRS)$(AUXDIRS),)
+	$(call exec-var,MKDIR$(pad-short),$(outdir)$(DISTDIR),$(DISTDIR))
+else
+ifeq ($(Q-$(echo-mode)),)
+	$(call exec-var,MKDIR$(pad-short),$(addprefix $(outdir)$(DISTDIR),. $(AUXDIRS)))
+else
+	@for dir in . $(AUXDIRS); do \
+	  echo $(mkdir-$(echo-mode)) $(DISTDIR)$${dir%/} 1>&2; \
+	  $(MKDIR) "$$dir" "$(outdir)$(DISTDIR)$${dir%/}" || exit 1; \
+	done
+endif
+endif
+#ifeq ($(Q-$(echo-mode)),)
+#	$(call exec-var,CP$(pad-short),$(DISTFILES) $(outdir)$(DISTDIR))
+#else
+	@for file in $(filter-out $(AUXDIRS),$(DISTFILES)); do \
+	  echo $(dist-$(echo-mode)) "$(DISTDIR)$${file#$(outdir)}" 1>&2; \
+	  $(CP) "$$file" "$(outdir)$(DISTDIR)$${file#$(outdir)}" || exit 1; \
+	done
+#endif
+
+#$(DISTLST): $(DISTPKG)
+#	$(TAR) -tf $^ $|
+
+cmd-tarlist = $(shell $(TAR) -tf $1)
+TARFILES = $(patsubst $(DISTDIR)%,%,$(call cmd-tarlist,$(DISTPKG)))
+GETDIRS = $(wildcard $(addsuffix /,$(patsubst %/,%,$(AUXDIRS))))
+DISTERR = $(filter-out $(TARFILES),$(strip $(addprefix $(DISTDIR),$(DISTFILES) $(GETDIRS))))
+NOTDIST = $(filter-out $(patsubst %/,%,$(wildcard $(DISTFILES) $(GETDIRS))),$(patsubst %/,%,$(wildcard $(call collectfn-recursive,*))))
+
+
+tarlist:
+	@$(call shell-foreach,file,$(TARFILES),echo $$file)
+
+distcmp:
+	@echo DISTFILES: $(patsubst %/,%,$(wildcard $(DISTFILES) $(GETDIRS)))
+	@echo ALL: $(patsubst %/,%,$(wildcard $(call collectfn-recursive,*)))
+
+distsync:
+	@$(call shell-foreach,file,$(NOTDIST),echo $(reldir)$$file)
+#	echo $(GETDIRS)
+#	echo $(filter-out $(patsubst $(DISTDIR)/%,%,$(TARFILES)),$(GETDIRS))
+#	@for file in $(DISTERR); do(echo "! $$file"$$( if test -d "$$file"; then echo '/'; elif test -x "$$file"; then echo '*'; fi ) )done; \
+#	for file in $(NOTDIST); do(echo "+ $$file"$$( if test -d "$$file"; then echo '/'; elif test -x "$$file"; then echo '*'; fi ) )done
+
+dirlist:
+	@$(call shell-foreach,dir,$(GETDIRS),echo $$dir)
+distlist:
+	@for file in $(DISTFILES); do \
+		test -f "$$file" && echo "$$file" || exit 1; \
+	done
+
+ifeq ($(outdir),)
+$(DISTPKG): distdir
+	set +e; \
+	$(call exec-var,TAR$(pad-short),-czf $(DISTPKG) $(DISTDIR)); ret=$?; \
+	$(call exec-qvar,RM_R$(pad-short),$(DISTDIR),$(DISTDIR)); exit $ret
+
+.PHONY: dist
+
+dist:
+	@set +e; trap "$(call exec-qvar,RM_R$(pad-short),$(DISTDIR),$(DISTDIR))" HUP INT TERM QUIT CHLD; \
+	$(MAKE) -s '$(DISTPKG)' && echo '$(DISTPKG) ready' || false
+endif
+
+endif
+
+distcheck-child: distdir
+	set +e; \
+	$(MAKE) -C $(DISTDIR) outdir=../$(outdir) thisdir=../$(thisdir) topdir=../$(topdir) reldir=$(DISTDIR); ret=$?; \
+	$(call exec-qvar,RM_R$(pad-short),$(DISTDIR),$(DISTDIR)); exit $ret
+
+distcheck:
+	@set +e; trap "$(call exec-qvar,RM_R$(pad-short),$(DISTDIR),$(DISTDIR))" HUP INT TERM QUIT CHLD; \
+	$(MAKE) -s distcheck-child && echo '$(DISTDIR) builds fine!' || false
+
+# If we have dependencies, then include them now.
+# ---------------------------------------------------------------------------
+ifeq ($(DEPMODE),1)
+ifneq ($(DEPFILES),)
+.PHONY: $(DEPFILES)
+
+-include $(DEPFILES)
+
+$(DEPFILES):;
+endif
+endif
+
+-L%: ;
+-I%: ;
+-D%: ;
diff -ruN jslibs-20070508_orig/jsnspr/debug.js jslibs-20070508/jsnspr/debug.js
--- jslibs-20070508_orig/jsnspr/debug.js	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsnspr/debug.js	2008-11-09 14:40:03.000000000 +0100
@@ -15,7 +15,7 @@
 	
 
 
-throw 0;
+//throw 0;
 
 	var dlist = []; //descriptor list
 
@@ -31,7 +31,7 @@
 		soc.readable = function(s) {
 
 			var data = s.Recv();
-			Print(data);
+			Print('received: ', data);
 			if ( !data.length )
 				delete s.readable;
 		}
@@ -43,6 +43,8 @@
 	dlist.push(client);
 	dlist.push(server);
 
+  endSignal = false;
+  
 	while(!endSignal) {
 		
 		Print('.\n');
@@ -55,7 +57,7 @@
 	}
 	
 
-throw 0;
+//throw 0;
 
 
 
@@ -84,17 +86,17 @@
 		}
 	}
 
-throw 0;
+//throw 0;
 
 	Print( File.stdin.ReadAll().length );
 	
-throw 0;
+//throw 0;
 
 //	new File('test.txt').content = undefined;
 
 Socket.stdin.Accept();
 
-throw 0;
+//throw 0;
 
 /*
 	var f = new File('test.txt');
diff -ruN jslibs-20070508_orig/jsnspr/main.cpp jslibs-20070508/jsnspr/main.cpp
--- jslibs-20070508_orig/jsnspr/main.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsnspr/main.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -25,7 +25,11 @@
 
 #include "../configuration/configuration.h"
 
-extern "C" __declspec(dllexport) JSBool ModuleInit(JSContext *cx, JSObject *obj) {
+extern "C"
+#ifdef WIN32
+__declspec(dllexport)
+#endif
+JSBool ModuleInit(JSContext *cx, JSObject *obj) {
 
 	jsval unsafeModeValue;
 	JSBool jsStatus = GetConfigurationValue(cx, "unsafeMode", &unsafeModeValue);
diff -ruN jslibs-20070508_orig/jsnspr/nsprFile.cpp jslibs-20070508/jsnspr/nsprFile.cpp
--- jslibs-20070508_orig/jsnspr/nsprFile.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsnspr/nsprFile.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -17,11 +17,13 @@
 #include "nsprError.h"
 #include "nsprFile.h"
 
-#include "../common/jshelper.h"
+#include "../common/jsHelper.h"
 #include "../common/jsNativeInterface.h"
 
 #include "../common/queue.h"
 
+#include <string.h>
+
 
 static bool NativeInterfaceReadFile( void *pv, unsigned char *buf, unsigned int *amount ) {
 
diff -ruN jslibs-20070508_orig/jsnspr/nsprGlobal.cpp jslibs-20070508/jsnspr/nsprGlobal.cpp
--- jslibs-20070508_orig/jsnspr/nsprGlobal.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsnspr/nsprGlobal.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -21,11 +21,13 @@
 
 DEFINE_FUNCTION( Poll ) {
 
-	// NSPR Poll Method:
+  // NSPR Poll Method:
 	//   http://www.mozilla.org/projects/nspr/tech-notes/poll-method.html
 
 	// http://developer.mozilla.org/en/docs/PR_Poll
 
+  PRInt32 result;
+  uintN i, objCount;
 	PRPollDesc pollDesc[1024];
 
 	RT_ASSERT_ARGC( 1 );
@@ -50,7 +52,7 @@
 		pr_timeout = PR_INTERVAL_NO_TIMEOUT;
 	}
 
-	uintN i, objCount = idArray->length;
+	objCount = idArray->length;
 	for ( i = 0; i < objCount; i++ ) {
 
 		jsval propVal;
@@ -88,7 +90,7 @@
 			pollDesc[i].in_flags |= PR_POLL_EXCEPT;
 	}
 
-	PRInt32 result = PR_Poll( pollDesc, objCount, pr_timeout );
+	result = PR_Poll( pollDesc, objCount, pr_timeout );
 
 	if ( result == -1 ) {  // failed. see PR_GetError()
 
diff -ruN jslibs-20070508_orig/jsnspr/stdafx.h jslibs-20070508/jsnspr/stdafx.h
--- jslibs-20070508_orig/jsnspr/stdafx.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsnspr/stdafx.h	2008-11-09 14:40:03.000000000 +0100
@@ -20,9 +20,9 @@
 
 #define USE_UNSAFE_MODE
 
-#include "../common/jshelper.h"
-#include "../common/jsclass.h"
+#include "../common/jsHelper.h"
+#include "../common/jsClass.h"
 
 #include <nspr.h>
 
-#endif // stdafx_h___
\ No newline at end of file
+#endif // stdafx_h___
diff -ruN jslibs-20070508_orig/jsode/GNUmakefile jslibs-20070508/jsode/GNUmakefile
--- jslibs-20070508_orig/jsode/GNUmakefile	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jsode/GNUmakefile	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,78 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+
+# Package and system info.
+# ---------------------------------------------------------------------------
+PACKAGE = jsode
+DEPMODE = 0
+WARNINGS = undef no-ctor-dtor-privacy no-attributes
+MACHINE = arch=i686
+AUXDIRS = 
+CMDECHO = full
+
+# Library build configuration.
+# ---------------------------------------------------------------------------
+js_LIBRARIES = \
+  ode
+
+IMPORTLIBS = $(patsubst %,js%.$(ilibext),$(js_LIBRARIES))
+SHAREDLIBS = $(addprefix ,$(patsubst $(ilibmask),$(modmask),$(IMPORTLIBS)))
+LIBRARIES = $(IMPORTLIBS) $(SHAREDLIBS)
+LTLIBRARIES = $(js_LIBRARIES:%=js%.la)
+LTOBJECTS = $(jsode_LTOBJECTS)
+
+#hell:
+#	@echo $(SHAREDLIBS)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+DISTFILES = $(call collect,makefiles sources autoconf win32 texts automake images nls mac scripts borland auxfiles *.bkl *.xrc *.wxr) version-script.in
+
+# Include global configuration.
+# ---------------------------------------------------------------------------
+TARGETS = $(LTLIBRARIES) $(PROGRAMS)
+CLEANFILES = $(LTLIBRARIES) $(LTOBJECTS)
+
+#$(dir $(wildcard ../audium.mk))
+topdir ?= ../
+include $(topdir)build.mk
+include $(topdir)js.mk
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+# Installation target
+install: all
+	$(INSTALL) -d $(DESTDIR)$(libdir)/js
+	$(LIBTOOL) --mode=install $(INSTALL) -m 755 $(LTLIBRARIES) $(DESTDIR)$(libdir)/js
+# Library link targets.
+# ---------------------------------------------------------------------------
+jsode_LTOBJECTS = \
+  body.lo \
+  geom.lo \
+  geomBox.lo \
+  geomCapsule.lo \
+  geomPlane.lo \
+  geomRay.lo \
+  geomSphere.lo \
+  joint.lo \
+  jointBall.lo \
+  jointFixed.lo \
+  jointHinge.lo \
+  jointPlane.lo \
+  jointSlider.lo \
+  main.lo \
+  mass.lo \
+  space.lo \
+  stdafx.lo \
+  surfaceParameters.lo \
+  world.lo \
+  ../configuration/configuration.lo
+  
+CXXFLAGS += -I. $(JS_CFLAGS) $(ODE_CFLAGS)
+
+$(jsode_LTOBJECTS): %.lo: %.cpp
+
+jsode.la: LTLINK = $(LTCXXLINK)
+jsode.la: $(jsode_LTOBJECTS)
+jsode.la: LDFLAGS = -module -rpath $(libdir) -no-undefined -avoid-version
+jsode.la: LIBS = $(JS_LIBS) $(ODE_LIBS)
diff -ruN jslibs-20070508_orig/jsode/main.cpp jslibs-20070508/jsode/main.cpp
--- jslibs-20070508_orig/jsode/main.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsode/main.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -26,18 +26,20 @@
 DEFINE_UNSAFE_MODE;
 
 
+#ifdef WIN32
 // the following avoid ODE to be linked with User32.lib ( MessageBox* symbol is used in ../ode/src/ode/src/error.cpp )
 int WINAPI MessageBoxA(__in_opt HWND hWnd, __in_opt LPCSTR lpText, __in_opt LPCSTR lpCaption, __in UINT uType) {
 
 	return IDCANCEL;
 }
+#endif
 
 extern "C" void messageHandler(int errnum, const char *msg, va_list ap) {
 
 //	abort(); // http://msdn2.microsoft.com/en-us/library/k089yyh0(VS.80).aspx
 }
 
-extern "C" __declspec(dllexport) JSBool ModuleInit(JSContext *cx, JSObject *obj) {
+extern "C" EXPORT JSBool ModuleInit(JSContext *cx, JSObject *obj) {
 
 	ode::dSetErrorHandler(messageHandler);
 	ode::dSetDebugHandler(messageHandler);
@@ -72,13 +74,13 @@
 	return JS_TRUE;
 }
 
-extern "C" __declspec(dllexport) JSBool ModuleRelease(JSContext *cx, JSObject *obj) {
+extern "C" EXPORT JSBool ModuleRelease(JSContext *cx, JSObject *obj) {
 
 	ode::dCloseODE();
 	return JS_TRUE;
 }
 
-
+#ifdef WIN32
 BOOL APIENTRY DllMain( HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved ) {
 
 //	configuration = GetConfiguration( cx );
@@ -93,7 +95,7 @@
   }
   return TRUE;
 }
-
+#endif
 /*
 User guide: http://www.ode.org/ode-latest-userguide.html
 
@@ -107,4 +109,4 @@
 new ode.Body(world);
 
 
-*/
\ No newline at end of file
+*/
diff -ruN jslibs-20070508_orig/jsode/stdafx.h jslibs-20070508/jsode/stdafx.h
--- jslibs-20070508_orig/jsode/stdafx.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsode/stdafx.h	2008-11-09 14:40:03.000000000 +0100
@@ -2,7 +2,7 @@
 // or project specific include files that are used frequently, but
 // are changed infrequently
 //
-
+#ifdef WIN32
 #pragma once
 
 #define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers
@@ -10,10 +10,14 @@
 // TODO: reference additional headers your program requires here
 #include <windows.h>
 #define XP_WIN
+#else
+#define XP_UNIX
+#endif
 #include <jsapi.h>
+
 #define USE_UNSAFE_MODE
-#include "../common/jshelper.h"
-#include "../common/jsclass.h"
+#include "../common/jsHelper.h"
+#include "../common/jsClass.h"
 #include "../common/jsConversionHelper.h"
 #include <malloc.h>
 
diff -ruN jslibs-20070508_orig/jssqlite/GNUmakefile jslibs-20070508/jssqlite/GNUmakefile
--- jslibs-20070508_orig/jssqlite/GNUmakefile	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jssqlite/GNUmakefile	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,65 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+
+# Package and system info.
+# ---------------------------------------------------------------------------
+PACKAGE = jssqlite
+DEPMODE = 0
+WARNINGS = undef no-ctor-dtor-privacy no-attributes
+MACHINE = arch=i686
+AUXDIRS = 
+CMDECHO = full
+
+# Library build configuration.
+# ---------------------------------------------------------------------------
+js_LIBRARIES = \
+  sqlite
+
+IMPORTLIBS = $(patsubst %,js%.$(ilibext),$(js_LIBRARIES))
+SHAREDLIBS = $(addprefix ,$(patsubst $(ilibmask),$(modmask),$(IMPORTLIBS)))
+LIBRARIES = $(IMPORTLIBS) $(SHAREDLIBS)
+LTLIBRARIES = $(js_LIBRARIES:%=js%.la)
+LTOBJECTS = $(jssqlite_LTOBJECTS)
+
+#hell:
+#	@echo $(SHAREDLIBS)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+DISTFILES = $(call collect,makefiles sources autoconf win32 texts automake images nls mac scripts borland auxfiles *.bkl *.xrc *.wxr) version-script.in
+
+# Include global configuration.
+# ---------------------------------------------------------------------------
+TARGETS = $(LTLIBRARIES) $(PROGRAMS)
+CLEANFILES = $(LTLIBRARIES) $(LTOBJECTS)
+
+#$(dir $(wildcard ../audium.mk))
+topdir ?= ../
+include $(topdir)build.mk
+include $(topdir)js.mk
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+# Installation target
+install: all
+	$(INSTALL) -d $(DESTDIR)$(libdir)/js
+	$(LIBTOOL) --mode=install $(INSTALL) -m 755 $(LTLIBRARIES) $(DESTDIR)$(libdir)/js
+# Library link targets.
+# ---------------------------------------------------------------------------
+jssqlite_LTOBJECTS = \
+  blob.lo \
+  database.lo \
+  error.lo \
+  main.lo \
+  result.lo \
+  stdafx.lo \
+  ../configuration/configuration.lo
+  
+CXXFLAGS += -I. $(JS_CFLAGS) $(SQLITE_CFLAGS)
+
+$(jssqlite_LTOBJECTS): %.lo: %.cpp
+
+jssqlite.la: LTLINK = $(LTCXXLINK)
+jssqlite.la: $(jssqlite_LTOBJECTS)
+jssqlite.la: LDFLAGS = -module -rpath $(libdir) -no-undefined -avoid-version
+jssqlite.la: LIBS = $(JS_LIBS) $(SQLITE_LIBS)
diff -ruN jslibs-20070508_orig/jssqlite/database.cpp jslibs-20070508/jssqlite/database.cpp
--- jslibs-20070508_orig/jssqlite/database.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jssqlite/database.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -111,7 +111,7 @@
 	stack = JSVAL_TO_PRIVATE(v);
 	StackFreeContent( &stack );
 	// finalize open database statements
-	RT_ASSERT_RETURN( JS_GetReservedSlot(cx, obj, SLOT_SQLITE_DATABASE_STATEMENT_STACK, &v) );
+	RT_ASSERT_RESOURCE( JS_GetReservedSlot(cx, obj, SLOT_SQLITE_DATABASE_STATEMENT_STACK, &v) );
 	stack = JSVAL_TO_PRIVATE(v);
 	while ( !StackIsEnd(&stack) ) {
 
@@ -206,7 +206,7 @@
 			break;
 		case SQLITE_ROW:
 			{
-			RT_ASSERT_RETURN( SqliteColumnToJsval(cx, pStmt, 0, rval) );
+			RT_ASSERT_RESOURCE( SqliteColumnToJsval(cx, pStmt, 0, rval) );
 			status = sqlite3_finalize( pStmt );
 			if ( status != SQLITE_OK )
 				return SqliteThrowError( cx, status, sqlite3_errcode(sqlite3_db_handle(pStmt)), sqlite3_errmsg(sqlite3_db_handle(pStmt)) );
@@ -313,7 +313,7 @@
 				sqlite3_result_null(sCx);
 				break;
 			}
-			if ( JS_GetClass(JSVAL_TO_OBJECT(rval)) == &classBlob ) { // beware: with SQLite, blob != text
+			if ( JS_GET_CLASS(cx, JSVAL_TO_OBJECT(rval)) == &classBlob ) { // beware: with SQLite, blob != text
 
 				jsval blobVal;
 				JS_GetReservedSlot(cx, JSVAL_TO_OBJECT(rval), SLOT_BLOB_DATA, &blobVal);
diff -ruN jslibs-20070508_orig/jssqlite/main.cpp jslibs-20070508/jssqlite/main.cpp
--- jslibs-20070508_orig/jssqlite/main.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jssqlite/main.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -14,7 +14,7 @@
 
 #include "stdafx.h"
 
-#include "../configuration/Configuration.h"
+#include "../configuration/configuration.h"
 
 #include "blob.h"
 #include "error.h"
diff -ruN jslibs-20070508_orig/jssqlite/result.cpp jslibs-20070508/jssqlite/result.cpp
--- jslibs-20070508_orig/jssqlite/result.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jssqlite/result.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -34,10 +34,10 @@
 			if ( INT_FITS_IN_JSVAL(i) )
 				*rval = INT_TO_JSVAL( i );
 			else
-				RT_ASSERT_RETURN( JS_NewNumberValue(cx, i, rval ) );
+				RT_ASSERT_RESOURCE( JS_NewNumberValue(cx, i, rval ) );
 			break;
 		case SQLITE_FLOAT:
-			RT_ASSERT_RETURN( JS_NewNumberValue( cx, sqlite3_value_double(value), rval ) );
+			RT_ASSERT_RESOURCE( JS_NewNumberValue( cx, sqlite3_value_double(value), rval ) );
 			break;
 		case SQLITE_BLOB:
 			*rval = STRING_TO_JSVAL( JS_NewStringCopyN( cx,(const char *)sqlite3_value_blob(value), sqlite3_value_bytes(value) ) );
@@ -109,7 +109,7 @@
 					sqlite3_bind_null(pStmt, param);
 					break;
 				}
-				if ( JS_GetClass(JSVAL_TO_OBJECT(val)) == &classBlob ) { // beware: with SQLite, blob != text
+				if ( JS_GET_CLASS(cx, JSVAL_TO_OBJECT(val)) == &classBlob ) { // beware: with SQLite, blob != text
 
 					jsval blobVal;
 					JS_GetReservedSlot(cx, JSVAL_TO_OBJECT(val), SLOT_BLOB_DATA, &blobVal);
@@ -135,7 +135,7 @@
 
 JSBool SqliteColumnToJsval( JSContext *cx, sqlite3_stmt *pStmt, int iCol, jsval *rval ) {
 
-	RT_ASSERT_RETURN( SqliteToJsval(cx, sqlite3_column_value(pStmt, iCol), rval) );
+	RT_ASSERT_RESOURCE( SqliteToJsval(cx, sqlite3_column_value(pStmt, iCol), rval) );
 	return JS_TRUE;
 }
 
@@ -169,8 +169,8 @@
 	JS_SetPrivate( cx, obj, NULL );
 
 	jsval v;
-	RT_ASSERT_RETURN( JS_GetReservedSlot(cx, obj, SLOT_RESULT_DATABASE, &v) );
-	RT_ASSERT_RETURN( JS_GetReservedSlot(cx, JSVAL_TO_OBJECT(v), SLOT_SQLITE_DATABASE_STATEMENT_STACK, &v) );
+	RT_ASSERT_RESOURCE( JS_GetReservedSlot(cx, obj, SLOT_RESULT_DATABASE, &v) );
+	RT_ASSERT_RESOURCE( JS_GetReservedSlot(cx, JSVAL_TO_OBJECT(v), SLOT_SQLITE_DATABASE_STATEMENT_STACK, &v) );
 	void *stack = JSVAL_TO_PRIVATE(v);
 	StackReplaceData( &stack, pStmt, NULL );
 
@@ -199,7 +199,7 @@
 			argObj = JSVAL_TO_OBJECT(queryArgument);
 
 		JS_SetReservedSlot(cx, obj, SLOT_RESULT_BINDING_UP_TO_DATE, BOOLEAN_TO_JSVAL(JS_TRUE));
-		RT_ASSERT_RETURN( SqliteSetupBindings(cx, pStmt, argObj, obj ) ); // ":" use result object. "@" is the object passed to Query()
+		RT_ASSERT_RESOURCE( SqliteSetupBindings(cx, pStmt, argObj, obj ) ); // ":" use result object. "@" is the object passed to Query()
 		// doc: The sqlite3_bind_*() routines must be called AFTER sqlite3_prepare() or sqlite3_reset() and BEFORE sqlite3_step(). Bindings are not cleared by the sqlite3_reset() routine. Unbound parameters are interpreted as NULL.
 	}
 
@@ -238,7 +238,7 @@
 	sqlite3_stmt *pStmt = (sqlite3_stmt *)JS_GetPrivate( cx, obj );
 	RT_ASSERT_RESOURCE( pStmt );
 
-	RT_ASSERT_RETURN( Step( cx, obj, 0, NULL, rval ) ); // if something goes wrong in Result_step ( error report has already been set )
+	RT_ASSERT_RESOURCE( Step( cx, obj, 0, NULL, rval ) ); // if something goes wrong in Result_step ( error report has already been set )
 
 	if ( *rval == JSVAL_FALSE ) { // the statement has finished executing successfully
 
@@ -258,7 +258,7 @@
 	jsval colJsValue, jsvCol;
 	for ( int col = 0; col < columnCount; ++col ) {
 
-		RT_ASSERT_RETURN( SqliteColumnToJsval(cx, pStmt, col, &colJsValue ) ); // if something goes wrong in SqliteColumnToJsval, error report has already been set.
+		RT_ASSERT_RESOURCE( SqliteColumnToJsval(cx, pStmt, col, &colJsValue ) ); // if something goes wrong in SqliteColumnToJsval, error report has already been set.
 
 		if ( namedRows )
 			JS_SetProperty( cx, row, sqlite3_column_name( pStmt, col ), &colJsValue );
diff -ruN jslibs-20070508_orig/jssqlite/stdafx.h jslibs-20070508/jssqlite/stdafx.h
--- jslibs-20070508_orig/jssqlite/stdafx.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jssqlite/stdafx.h	2008-11-09 14:40:03.000000000 +0100
@@ -32,9 +32,9 @@
 
 #include <jsapi.h>
 
-#include "../common/jshelper.h"
-#include "../common/jsclass.h"
+#include "../common/jsHelper.h"
+#include "../common/jsClass.h"
 
 #include <sqlite3.h>
 
-#endif // stdafx_h___
\ No newline at end of file
+#endif // stdafx_h___
diff -ruN jslibs-20070508_orig/jsstd/GNUmakefile jslibs-20070508/jsstd/GNUmakefile
--- jslibs-20070508_orig/jsstd/GNUmakefile	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jsstd/GNUmakefile	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,58 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+
+# Package and system info.
+# ---------------------------------------------------------------------------
+PACKAGE = jsstd
+DEPMODE = 0
+WARNINGS = undef no-ctor-dtor-privacy no-attributes
+MACHINE = arch=i686
+AUXDIRS = 
+CMDECHO = full
+
+# Library build configuration.
+# ---------------------------------------------------------------------------
+js_LIBRARIES = \
+  std
+
+IMPORTLIBS = $(patsubst %,js%.$(ilibext),$(js_LIBRARIES))
+SHAREDLIBS = $(addprefix ,$(patsubst $(ilibmask),$(modmask),$(IMPORTLIBS)))
+LIBRARIES = $(IMPORTLIBS) $(SHAREDLIBS)
+LTLIBRARIES = $(js_LIBRARIES:%=js%.la)
+LTOBJECTS = $(jsstd_LTOBJECTS)
+
+#hell:
+#	@echo $(SHAREDLIBS)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+DISTFILES = $(call collect,makefiles sources autoconf win32 texts automake images nls mac scripts borland auxfiles *.bkl *.xrc *.wxr) version-script.in
+
+# Include global configuration.
+# ---------------------------------------------------------------------------
+TARGETS = $(LTLIBRARIES) $(PROGRAMS)
+CLEANFILES = $(LTLIBRARIES) $(LTOBJECTS)
+
+#$(dir $(wildcard ../audium.mk))
+topdir ?= ../
+include $(topdir)build.mk
+include $(topdir)js.mk
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+# Installation target
+install: all
+	$(INSTALL) -d $(DESTDIR)$(libdir)/js
+	$(LIBTOOL) --mode=install $(INSTALL) -m 755 $(LTLIBRARIES) $(DESTDIR)$(libdir)/js
+# Library link targets.
+# ---------------------------------------------------------------------------
+jsstd_LTOBJECTS = buffer.lo main.lo static.lo ../configuration/configuration.lo
+  
+CXXFLAGS += -I. $(JS_CFLAGS)
+
+$(jsstd_LTOBJECTS): %.lo: %.cpp
+
+jsstd.la: LTLINK = $(LTCXXLINK)
+jsstd.la: $(jsstd_LTOBJECTS)
+jsstd.la: LDFLAGS = -module -rpath $(libdir) -no-undefined -avoid-version
+jsstd.la: LIBS = $(JS_LIBS)
diff -ruN jslibs-20070508_orig/jsstd/buffer.cpp jslibs-20070508/jsstd/buffer.cpp
--- jslibs-20070508_orig/jsstd/buffer.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsstd/buffer.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -12,13 +12,25 @@
  * License.
  * ***** END LICENSE BLOCK ***** */
 
+#ifdef WIN32
 #include "stdafx.h"
-#include "buffer.h"
+#define XP_WIN
+#else
+#define XP_UNIX
+#endif
+
+#include <js/jsapi.h>
+#include <string.h>
 
+#include "../common/jsHelper.h"
+#include "../common/jsClass.h"
 #include "../common/jsNativeInterface.h"
+
 #include "../common/queue.h"
 
-#include <jscntxt.h>
+#include "buffer.h"
+
+#include <js/jscntxt.h>
 
 
 typedef struct JsCntxt {
diff -ruN jslibs-20070508_orig/jsstd/buffer.h jslibs-20070508/jsstd/buffer.h
--- jslibs-20070508_orig/jsstd/buffer.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsstd/buffer.h	2008-11-09 14:40:03.000000000 +0100
@@ -13,5 +13,5 @@
  * ***** END LICENSE BLOCK ***** */
 
 DECLARE_CLASS( Buffer )
-
-#define SLOT_BUFFER_LENGTH 0
\ No newline at end of file
+    
+#define SLOT_BUFFER_LENGTH 0
diff -ruN jslibs-20070508_orig/jsstd/debug.js jslibs-20070508/jsstd/debug.js
--- jslibs-20070508_orig/jsstd/debug.js	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsstd/debug.js	2008-11-09 14:40:03.000000000 +0100
@@ -1,6 +1,11 @@
 LoadModule('jsstd');
 
 
+  
+Print("test", "\n");
+  
+//print("test");
+
 var buf = new Buffer();
 buf.Write('1');
 buf.Write('2');
@@ -146,4 +151,4 @@
 Print( 'obj.a : ' + obj.a, '\n');
 Print( 'obj.b : ' + obj.b, '\n');
 Print( 'obj.c : ' + obj.c, '\n');
-*/
\ No newline at end of file
+*/
diff -ruN jslibs-20070508_orig/jsstd/main.cpp jslibs-20070508/jsstd/main.cpp
--- jslibs-20070508_orig/jsstd/main.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsstd/main.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -12,19 +12,24 @@
  * License.
  * ***** END LICENSE BLOCK ***** */
 
+#ifdef WIN32
 #include "stdafx.h"
+#endif
 
 #include "../configuration/configuration.h"
-
+#include "../common/jsClass.h"
+#include "../common/jsHelper.h"
 
 #include "static.h"
+
 #include "buffer.h"
 
-DEFINE_UNSAFE_MODE;
+//DEFINE_UNSAFE_MODE;
 
 extern JSFunction *stdoutFunction = NULL;
 
-extern "C" __declspec(dllexport) JSBool ModuleInit(JSContext *cx, JSObject *obj) {
+
+extern "C" EXPORT JSBool ModuleInit(JSContext *cx, JSObject *obj) {
 
 // read configuration
 	jsval stdoutFunctionValue;
@@ -45,17 +50,17 @@
 	return JS_TRUE;
 }
 
-extern "C" __declspec(dllexport) JSBool ModuleRelease(JSContext *cx) {
+extern "C" EXPORT JSBool ModuleRelease(JSContext *cx) {
 
 	return JS_FALSE;
 }
 
 
-extern "C" __declspec(dllexport) void ModuleFree() {
+extern "C" EXPORT void ModuleFree() {
 }
 
 
-
+#ifdef WIN32
 BOOL APIENTRY DllMain( HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserved ) {
 
   switch (ul_reason_for_call) {
@@ -69,3 +74,4 @@
   return TRUE;
 }
 
+#endif
diff -ruN jslibs-20070508_orig/jsstd/static.cpp jslibs-20070508/jsstd/static.cpp
--- jslibs-20070508_orig/jsstd/static.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsstd/static.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -12,10 +12,24 @@
  * License.
  * ***** END LICENSE BLOCK ***** */
 
+#ifdef WIN32
 #include "stdafx.h"
+#define XP_WIN
+#else
+#define XP_UNIX
+#define MAX_PATH PATH_MAX
+#define _stat stat
+#endif
+
+#include <limits.h>
+#include <errno.h>
+#include <js/jsapi.h>
+#include "../common/jsHelper.h"
+#include "../common/jsClass.h"
 #include "static.h"
 
 #include <sys/stat.h>
+#include <string.h>
 #include "jsxdrapi.h"
 #include "jscntxt.h"
 
@@ -273,9 +287,14 @@
 DEFINE_FUNCTION( Print ) {
 
 	if ( stdoutFunction == NULL )
-		return JS_TRUE; // nowhere to write, but don't failed
+  {
+		return JS_TRUE; // nowhere to write, but don't failed    
+  }
+  
+
 	for (uintN i = 0; i<argc; i++)
 		RT_CHECK_CALL( JS_CallFunction(cx, obj, stdoutFunction, 1, &argv[i], rval) );
+
 	return JS_TRUE;
 }
 
diff -ruN jslibs-20070508_orig/jsstd/static.ii jslibs-20070508/jsstd/static.ii
--- jslibs-20070508_orig/jsstd/static.ii	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jsstd/static.ii	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,7409 @@
+# 1 "static.cpp"
+# 1 "<built-in>"
+# 1 "<command line>"
+# 1 "static.cpp"
+# 22 "static.cpp"
+# 1 "static.h" 1
+# 15 "static.h"
+DECLARE_STATIC()
+# 23 "static.cpp" 2
+
+# 1 "/nexbyte/server/include/sys/stat.h" 1 3
+# 26 "/nexbyte/server/include/sys/stat.h" 3
+# 1 "/nexbyte/server/include/features.h" 1 3
+# 308 "/nexbyte/server/include/features.h" 3
+# 1 "/nexbyte/server/include/sys/cdefs.h" 1 3
+# 309 "/nexbyte/server/include/features.h" 2 3
+# 331 "/nexbyte/server/include/features.h" 3
+# 1 "/nexbyte/server/include/gnu/stubs.h" 1 3
+# 332 "/nexbyte/server/include/features.h" 2 3
+# 27 "/nexbyte/server/include/sys/stat.h" 2 3
+
+# 1 "/nexbyte/server/include/bits/types.h" 1 3
+# 28 "/nexbyte/server/include/bits/types.h" 3
+# 1 "/nexbyte/server/include/bits/wordsize.h" 1 3
+# 29 "/nexbyte/server/include/bits/types.h" 2 3
+
+
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 214 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 3 4
+typedef unsigned int size_t;
+# 32 "/nexbyte/server/include/bits/types.h" 2 3
+
+
+typedef unsigned char __u_char;
+typedef unsigned short int __u_short;
+typedef unsigned int __u_int;
+typedef unsigned long int __u_long;
+
+
+typedef signed char __int8_t;
+typedef unsigned char __uint8_t;
+typedef signed short int __int16_t;
+typedef unsigned short int __uint16_t;
+typedef signed int __int32_t;
+typedef unsigned int __uint32_t;
+
+
+
+
+__extension__ typedef signed long long int __int64_t;
+__extension__ typedef unsigned long long int __uint64_t;
+
+
+
+
+
+
+
+__extension__ typedef long long int __quad_t;
+__extension__ typedef unsigned long long int __u_quad_t;
+# 129 "/nexbyte/server/include/bits/types.h" 3
+# 1 "/nexbyte/server/include/bits/typesizes.h" 1 3
+# 130 "/nexbyte/server/include/bits/types.h" 2 3
+
+
+
+
+
+
+__extension__ typedef __u_quad_t __dev_t;
+__extension__ typedef unsigned int __uid_t;
+__extension__ typedef unsigned int __gid_t;
+__extension__ typedef unsigned long int __ino_t;
+__extension__ typedef __u_quad_t __ino64_t;
+__extension__ typedef unsigned int __mode_t;
+__extension__ typedef unsigned int __nlink_t;
+__extension__ typedef long int __off_t;
+__extension__ typedef __quad_t __off64_t;
+__extension__ typedef int __pid_t;
+__extension__ typedef struct { int __val[2]; } __fsid_t;
+__extension__ typedef long int __clock_t;
+__extension__ typedef unsigned long int __rlim_t;
+__extension__ typedef __u_quad_t __rlim64_t;
+__extension__ typedef unsigned int __id_t;
+__extension__ typedef long int __time_t;
+__extension__ typedef unsigned int __useconds_t;
+__extension__ typedef long int __suseconds_t;
+
+__extension__ typedef int __daddr_t;
+__extension__ typedef long int __swblk_t;
+__extension__ typedef int __key_t;
+
+
+__extension__ typedef int __clockid_t;
+
+
+__extension__ typedef void * __timer_t;
+
+
+__extension__ typedef long int __blksize_t;
+
+
+
+
+__extension__ typedef long int __blkcnt_t;
+__extension__ typedef __quad_t __blkcnt64_t;
+
+
+__extension__ typedef unsigned long int __fsblkcnt_t;
+__extension__ typedef __u_quad_t __fsblkcnt64_t;
+
+
+__extension__ typedef unsigned long int __fsfilcnt_t;
+__extension__ typedef __u_quad_t __fsfilcnt64_t;
+
+__extension__ typedef int __ssize_t;
+
+
+
+typedef __off64_t __loff_t;
+typedef __quad_t *__qaddr_t;
+typedef char *__caddr_t;
+
+
+__extension__ typedef int __intptr_t;
+
+
+__extension__ typedef unsigned int __socklen_t;
+# 29 "/nexbyte/server/include/sys/stat.h" 2 3
+# 37 "/nexbyte/server/include/sys/stat.h" 3
+# 1 "/nexbyte/server/include/time.h" 1 3
+# 74 "/nexbyte/server/include/time.h" 3
+
+
+typedef __time_t time_t;
+
+
+
+# 118 "/nexbyte/server/include/time.h" 3
+struct timespec
+  {
+    __time_t tv_sec;
+    long int tv_nsec;
+  };
+# 38 "/nexbyte/server/include/sys/stat.h" 2 3
+
+
+
+
+
+
+typedef __dev_t dev_t;
+
+
+
+
+typedef __gid_t gid_t;
+
+
+
+
+
+typedef __ino_t ino_t;
+
+
+
+
+
+
+
+typedef __mode_t mode_t;
+
+
+
+
+typedef __nlink_t nlink_t;
+
+
+
+
+
+typedef __off_t off_t;
+
+
+
+
+
+
+
+typedef __uid_t uid_t;
+
+
+
+
+
+
+
+typedef __blkcnt_t blkcnt_t;
+
+
+
+
+
+
+
+typedef __blksize_t blksize_t;
+
+
+
+
+extern "C" {
+
+# 1 "/nexbyte/server/include/bits/stat.h" 1 3
+# 36 "/nexbyte/server/include/bits/stat.h" 3
+struct stat
+  {
+    __dev_t st_dev;
+    unsigned short int __pad1;
+
+    __ino_t st_ino;
+
+
+
+    __mode_t st_mode;
+    __nlink_t st_nlink;
+    __uid_t st_uid;
+    __gid_t st_gid;
+    __dev_t st_rdev;
+    unsigned short int __pad2;
+
+    __off_t st_size;
+
+
+
+    __blksize_t st_blksize;
+
+
+    __blkcnt_t st_blocks;
+# 70 "/nexbyte/server/include/bits/stat.h" 3
+    struct timespec st_atim;
+    struct timespec st_mtim;
+    struct timespec st_ctim;
+# 85 "/nexbyte/server/include/bits/stat.h" 3
+    unsigned long int __unused4;
+    unsigned long int __unused5;
+
+
+
+  };
+
+
+struct stat64
+  {
+    __dev_t st_dev;
+    unsigned int __pad1;
+
+    __ino_t __st_ino;
+    __mode_t st_mode;
+    __nlink_t st_nlink;
+    __uid_t st_uid;
+    __gid_t st_gid;
+    __dev_t st_rdev;
+    unsigned int __pad2;
+    __off64_t st_size;
+    __blksize_t st_blksize;
+
+    __blkcnt64_t st_blocks;
+
+
+
+
+
+
+
+    struct timespec st_atim;
+    struct timespec st_mtim;
+    struct timespec st_ctim;
+# 127 "/nexbyte/server/include/bits/stat.h" 3
+    __ino64_t st_ino;
+  };
+# 106 "/nexbyte/server/include/sys/stat.h" 2 3
+# 207 "/nexbyte/server/include/sys/stat.h" 3
+extern int stat (__const char *__restrict __file,
+   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
+
+
+
+extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
+# 226 "/nexbyte/server/include/sys/stat.h" 3
+extern int stat64 (__const char *__restrict __file,
+     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
+extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));
+
+
+
+
+
+
+extern int lstat (__const char *__restrict __file,
+    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
+# 248 "/nexbyte/server/include/sys/stat.h" 3
+extern int lstat64 (__const char *__restrict __file,
+      struct stat64 *__restrict __buf)
+     throw () __attribute__ ((__nonnull__ (1, 2)));
+
+
+
+
+
+extern int chmod (__const char *__file, __mode_t __mode)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+extern int lchmod (__const char *__file, __mode_t __mode)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+extern int fchmod (int __fd, __mode_t __mode) throw ();
+
+
+
+
+
+extern __mode_t umask (__mode_t __mask) throw ();
+
+
+
+
+extern __mode_t getumask (void) throw ();
+
+
+
+extern int mkdir (__const char *__path, __mode_t __mode)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+extern int mknod (__const char *__path, __mode_t __mode, __dev_t __dev)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+extern int mkfifo (__const char *__path, __mode_t __mode)
+     throw () __attribute__ ((__nonnull__ (1)));
+# 324 "/nexbyte/server/include/sys/stat.h" 3
+extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
+     throw () __attribute__ ((__nonnull__ (3)));
+extern int __xstat (int __ver, __const char *__filename,
+      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
+extern int __lxstat (int __ver, __const char *__filename,
+       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
+# 350 "/nexbyte/server/include/sys/stat.h" 3
+extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
+     throw () __attribute__ ((__nonnull__ (3)));
+extern int __xstat64 (int __ver, __const char *__filename,
+        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
+extern int __lxstat64 (int __ver, __const char *__filename,
+         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
+
+extern int __xmknod (int __ver, __const char *__path, __mode_t __mode,
+       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));
+
+
+
+
+extern __inline__ int
+stat (__const char *__path, struct stat *__statbuf) throw ()
+{
+  return __xstat (3, __path, __statbuf);
+}
+
+
+extern __inline__ int
+lstat (__const char *__path, struct stat *__statbuf) throw ()
+{
+  return __lxstat (3, __path, __statbuf);
+}
+
+
+extern __inline__ int
+fstat (int __fd, struct stat *__statbuf) throw ()
+{
+  return __fxstat (3, __fd, __statbuf);
+}
+
+
+extern __inline__ int
+mknod (__const char *__path, __mode_t __mode, __dev_t __dev) throw ()
+{
+  return __xmknod (1, __path, __mode, &__dev);
+}
+
+
+
+
+
+extern __inline__ int
+stat64 (__const char *__path, struct stat64 *__statbuf) throw ()
+{
+  return __xstat64 (3, __path, __statbuf);
+}
+
+
+extern __inline__ int
+lstat64 (__const char *__path, struct stat64 *__statbuf) throw ()
+{
+  return __lxstat64 (3, __path, __statbuf);
+}
+
+
+extern __inline__ int
+fstat64 (int __fd, struct stat64 *__statbuf) throw ()
+{
+  return __fxstat64 (3, __fd, __statbuf);
+}
+
+
+
+
+}
+# 25 "static.cpp" 2
+# 1 "/nexbyte/server/include/js/jsxdrapi.h" 1
+# 63 "/nexbyte/server/include/js/jsxdrapi.h"
+# 1 "/nexbyte/server/include/js/jspubtd.h" 1
+# 45 "/nexbyte/server/include/js/jspubtd.h"
+# 1 "/nexbyte/server/include/js/jstypes.h" 1
+# 57 "/nexbyte/server/include/js/jstypes.h"
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 152 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 3 4
+typedef int ptrdiff_t;
+# 58 "/nexbyte/server/include/js/jstypes.h" 2
+# 231 "/nexbyte/server/include/js/jstypes.h"
+# 1 "/nexbyte/server/include/js/jsautocfg.h" 1
+# 232 "/nexbyte/server/include/js/jstypes.h" 2
+# 1 "/nexbyte/server/include/js/jsosdep.h" 1
+# 233 "/nexbyte/server/include/js/jstypes.h" 2
+
+
+
+
+extern "C" {
+# 247 "/nexbyte/server/include/js/jstypes.h"
+typedef unsigned char JSUint8;
+typedef signed char JSInt8;
+# 260 "/nexbyte/server/include/js/jstypes.h"
+typedef unsigned short JSUint16;
+typedef short JSInt16;
+# 273 "/nexbyte/server/include/js/jstypes.h"
+typedef unsigned int JSUint32;
+typedef int JSInt32;
+# 307 "/nexbyte/server/include/js/jstypes.h"
+typedef long long JSInt64;
+typedef unsigned long long JSUint64;
+# 331 "/nexbyte/server/include/js/jstypes.h"
+typedef int JSIntn;
+typedef unsigned int JSUintn;
+# 342 "/nexbyte/server/include/js/jstypes.h"
+typedef double JSFloat64;
+
+
+
+
+
+
+typedef size_t JSSize;
+
+
+
+
+
+
+
+typedef ptrdiff_t JSPtrdiff;
+
+
+
+
+
+
+
+typedef unsigned long JSUptrdiff;
+# 375 "/nexbyte/server/include/js/jstypes.h"
+typedef JSIntn JSBool;
+# 385 "/nexbyte/server/include/js/jstypes.h"
+typedef JSUint8 JSPackedBool;
+
+
+
+
+typedef long JSWord;
+typedef unsigned long JSUword;
+
+# 1 "/nexbyte/server/include/js/jsotypes.h" 1
+# 71 "/nexbyte/server/include/js/jsotypes.h"
+# 1 "/nexbyte/server/include/sys/types.h" 1 3
+# 29 "/nexbyte/server/include/sys/types.h" 3
+extern "C" {
+
+
+
+
+
+typedef __u_char u_char;
+typedef __u_short u_short;
+typedef __u_int u_int;
+typedef __u_long u_long;
+typedef __quad_t quad_t;
+typedef __u_quad_t u_quad_t;
+typedef __fsid_t fsid_t;
+
+
+
+
+typedef __loff_t loff_t;
+# 57 "/nexbyte/server/include/sys/types.h" 3
+typedef __ino64_t ino64_t;
+# 95 "/nexbyte/server/include/sys/types.h" 3
+typedef __off64_t off64_t;
+
+
+
+
+typedef __pid_t pid_t;
+
+
+
+
+typedef __id_t id_t;
+
+
+
+
+typedef __ssize_t ssize_t;
+
+
+
+
+
+typedef __daddr_t daddr_t;
+typedef __caddr_t caddr_t;
+
+
+
+
+
+typedef __key_t key_t;
+# 133 "/nexbyte/server/include/sys/types.h" 3
+# 1 "/nexbyte/server/include/time.h" 1 3
+# 58 "/nexbyte/server/include/time.h" 3
+
+
+typedef __clock_t clock_t;
+
+
+
+# 92 "/nexbyte/server/include/time.h" 3
+typedef __clockid_t clockid_t;
+# 104 "/nexbyte/server/include/time.h" 3
+typedef __timer_t timer_t;
+# 134 "/nexbyte/server/include/sys/types.h" 2 3
+
+
+
+typedef __useconds_t useconds_t;
+
+
+
+typedef __suseconds_t suseconds_t;
+
+
+
+
+
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 148 "/nexbyte/server/include/sys/types.h" 2 3
+
+
+
+typedef unsigned long int ulong;
+typedef unsigned short int ushort;
+typedef unsigned int uint;
+# 191 "/nexbyte/server/include/sys/types.h" 3
+typedef int int8_t __attribute__ ((__mode__ (__QI__)));
+typedef int int16_t __attribute__ ((__mode__ (__HI__)));
+typedef int int32_t __attribute__ ((__mode__ (__SI__)));
+typedef int int64_t __attribute__ ((__mode__ (__DI__)));
+
+
+typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
+typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
+typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
+typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));
+
+typedef int register_t __attribute__ ((__mode__ (__word__)));
+# 213 "/nexbyte/server/include/sys/types.h" 3
+# 1 "/nexbyte/server/include/endian.h" 1 3
+# 37 "/nexbyte/server/include/endian.h" 3
+# 1 "/nexbyte/server/include/bits/endian.h" 1 3
+# 38 "/nexbyte/server/include/endian.h" 2 3
+# 214 "/nexbyte/server/include/sys/types.h" 2 3
+
+
+# 1 "/nexbyte/server/include/sys/select.h" 1 3
+# 31 "/nexbyte/server/include/sys/select.h" 3
+# 1 "/nexbyte/server/include/bits/select.h" 1 3
+# 32 "/nexbyte/server/include/sys/select.h" 2 3
+
+
+# 1 "/nexbyte/server/include/bits/sigset.h" 1 3
+# 23 "/nexbyte/server/include/bits/sigset.h" 3
+typedef int __sig_atomic_t;
+
+
+
+
+typedef struct
+  {
+    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
+  } __sigset_t;
+# 35 "/nexbyte/server/include/sys/select.h" 2 3
+
+
+
+typedef __sigset_t sigset_t;
+
+
+
+
+
+# 1 "/nexbyte/server/include/time.h" 1 3
+# 45 "/nexbyte/server/include/sys/select.h" 2 3
+
+# 1 "/nexbyte/server/include/bits/time.h" 1 3
+# 69 "/nexbyte/server/include/bits/time.h" 3
+struct timeval
+  {
+    __time_t tv_sec;
+    __suseconds_t tv_usec;
+  };
+# 47 "/nexbyte/server/include/sys/select.h" 2 3
+# 55 "/nexbyte/server/include/sys/select.h" 3
+typedef long int __fd_mask;
+# 67 "/nexbyte/server/include/sys/select.h" 3
+typedef struct
+  {
+
+
+
+    __fd_mask fds_bits[1024 / (8 * sizeof (__fd_mask))];
+
+
+
+
+
+  } fd_set;
+
+
+
+
+
+
+typedef __fd_mask fd_mask;
+# 99 "/nexbyte/server/include/sys/select.h" 3
+extern "C" {
+# 109 "/nexbyte/server/include/sys/select.h" 3
+extern int select (int __nfds, fd_set *__restrict __readfds,
+     fd_set *__restrict __writefds,
+     fd_set *__restrict __exceptfds,
+     struct timeval *__restrict __timeout);
+# 121 "/nexbyte/server/include/sys/select.h" 3
+extern int pselect (int __nfds, fd_set *__restrict __readfds,
+      fd_set *__restrict __writefds,
+      fd_set *__restrict __exceptfds,
+      const struct timespec *__restrict __timeout,
+      const __sigset_t *__restrict __sigmask);
+
+
+}
+# 217 "/nexbyte/server/include/sys/types.h" 2 3
+
+
+# 1 "/nexbyte/server/include/sys/sysmacros.h" 1 3
+# 29 "/nexbyte/server/include/sys/sysmacros.h" 3
+__extension__
+extern __inline unsigned int gnu_dev_major (unsigned long long int __dev)
+     throw ();
+__extension__
+extern __inline unsigned int gnu_dev_minor (unsigned long long int __dev)
+     throw ();
+__extension__
+extern __inline unsigned long long int gnu_dev_makedev (unsigned int __major,
+       unsigned int __minor)
+     throw ();
+
+
+__extension__ extern __inline unsigned int
+gnu_dev_major (unsigned long long int __dev) throw ()
+{
+  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
+}
+
+__extension__ extern __inline unsigned int
+gnu_dev_minor (unsigned long long int __dev) throw ()
+{
+  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
+}
+
+__extension__ extern __inline unsigned long long int
+gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw ()
+{
+  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
+   | (((unsigned long long int) (__minor & ~0xff)) << 12)
+   | (((unsigned long long int) (__major & ~0xfff)) << 32));
+}
+# 220 "/nexbyte/server/include/sys/types.h" 2 3
+# 235 "/nexbyte/server/include/sys/types.h" 3
+typedef __fsblkcnt_t fsblkcnt_t;
+
+
+
+typedef __fsfilcnt_t fsfilcnt_t;
+# 258 "/nexbyte/server/include/sys/types.h" 3
+typedef __blkcnt64_t blkcnt64_t;
+typedef __fsblkcnt64_t fsblkcnt64_t;
+typedef __fsfilcnt64_t fsfilcnt64_t;
+
+
+
+
+
+# 1 "/nexbyte/server/include/bits/pthreadtypes.h" 1 3
+# 36 "/nexbyte/server/include/bits/pthreadtypes.h" 3
+typedef unsigned long int pthread_t;
+
+
+typedef union
+{
+  char __size[36];
+  long int __align;
+} pthread_attr_t;
+
+
+
+
+typedef union
+{
+  struct
+  {
+    int __lock;
+    unsigned int __count;
+    int __owner;
+
+
+    int __kind;
+    unsigned int __nusers;
+    int __spins;
+  } __data;
+  char __size[24];
+  long int __align;
+} pthread_mutex_t;
+
+typedef union
+{
+  char __size[4];
+  long int __align;
+} pthread_mutexattr_t;
+
+
+
+
+typedef union
+{
+  struct
+  {
+    int __lock;
+    unsigned int __futex;
+    __extension__ unsigned long long int __total_seq;
+    __extension__ unsigned long long int __wakeup_seq;
+    __extension__ unsigned long long int __woken_seq;
+    void *__mutex;
+    unsigned int __nwaiters;
+    unsigned int __broadcast_seq;
+  } __data;
+  char __size[48];
+  __extension__ long long int __align;
+} pthread_cond_t;
+
+typedef union
+{
+  char __size[4];
+  long int __align;
+} pthread_condattr_t;
+
+
+
+typedef unsigned int pthread_key_t;
+
+
+
+typedef int pthread_once_t;
+
+
+
+
+
+typedef union
+{
+  struct
+  {
+    int __lock;
+    unsigned int __nr_readers;
+    unsigned int __readers_wakeup;
+    unsigned int __writer_wakeup;
+    unsigned int __nr_readers_queued;
+    unsigned int __nr_writers_queued;
+
+
+    unsigned int __flags;
+    int __writer;
+  } __data;
+  char __size[32];
+  long int __align;
+} pthread_rwlock_t;
+
+typedef union
+{
+  char __size[8];
+  long int __align;
+} pthread_rwlockattr_t;
+
+
+
+
+
+typedef volatile int pthread_spinlock_t;
+
+
+
+
+typedef union
+{
+  char __size[20];
+  long int __align;
+} pthread_barrier_t;
+
+typedef union
+{
+  char __size[4];
+  int __align;
+} pthread_barrierattr_t;
+# 267 "/nexbyte/server/include/sys/types.h" 2 3
+
+
+}
+# 72 "/nexbyte/server/include/js/jsotypes.h" 2
+
+
+
+
+typedef JSUintn uintn;
+typedef JSUint64 uint64;
+
+typedef JSUint32 uint32;
+
+
+
+typedef JSUint16 uint16;
+typedef JSUint8 uint8;
+
+
+typedef JSIntn intn;
+# 99 "/nexbyte/server/include/js/jsotypes.h"
+typedef JSInt64 int64;
+
+
+
+
+
+
+typedef JSInt32 int32;
+
+
+
+typedef JSInt16 int16;
+typedef JSInt8 int8;
+
+
+
+
+
+typedef JSFloat64 float64;
+# 394 "/nexbyte/server/include/js/jstypes.h" 2
+# 419 "/nexbyte/server/include/js/jstypes.h"
+}
+# 46 "/nexbyte/server/include/js/jspubtd.h" 2
+# 1 "/nexbyte/server/include/js/jscompat.h" 1
+# 49 "/nexbyte/server/include/js/jscompat.h"
+# 1 "/nexbyte/server/include/js/jslong.h" 1
+# 52 "/nexbyte/server/include/js/jslong.h"
+extern "C" {
+# 77 "/nexbyte/server/include/js/jslong.h"
+extern JSInt64 JSLL_MaxInt(void);
+extern JSInt64 JSLL_MinInt(void);
+extern JSInt64 JSLL_Zero(void);
+# 442 "/nexbyte/server/include/js/jslong.h"
+}
+# 50 "/nexbyte/server/include/js/jscompat.h" 2
+
+typedef JSIntn intN;
+typedef JSUintn uintN;
+typedef JSUword jsuword;
+typedef JSWord jsword;
+typedef float float32;
+# 47 "/nexbyte/server/include/js/jspubtd.h" 2
+
+extern "C" {
+
+
+typedef uint16 jschar;
+typedef int32 jsint;
+typedef uint32 jsuint;
+typedef float64 jsdouble;
+typedef jsword jsval;
+typedef jsword jsid;
+typedef int32 jsrefcount;
+
+
+
+
+
+
+typedef enum JSVersion {
+    JSVERSION_1_0 = 100,
+    JSVERSION_1_1 = 110,
+    JSVERSION_1_2 = 120,
+    JSVERSION_1_3 = 130,
+    JSVERSION_1_4 = 140,
+    JSVERSION_ECMA_3 = 148,
+    JSVERSION_1_5 = 150,
+    JSVERSION_1_6 = 160,
+    JSVERSION_DEFAULT = 0,
+    JSVERSION_UNKNOWN = -1
+} JSVersion;
+
+
+
+
+
+typedef enum JSType {
+    JSTYPE_VOID,
+    JSTYPE_OBJECT,
+    JSTYPE_FUNCTION,
+    JSTYPE_STRING,
+    JSTYPE_NUMBER,
+    JSTYPE_BOOLEAN,
+    JSTYPE_NULL,
+    JSTYPE_XML,
+    JSTYPE_LIMIT
+} JSType;
+
+
+typedef enum JSAccessMode {
+    JSACC_PROTO = 0,
+    JSACC_PARENT = 1,
+    JSACC_IMPORT = 2,
+    JSACC_WATCH = 3,
+    JSACC_READ = 4,
+    JSACC_WRITE = 8,
+    JSACC_LIMIT
+} JSAccessMode;
+
+
+
+
+
+
+
+typedef enum JSIterateOp {
+    JSENUMERATE_INIT,
+    JSENUMERATE_NEXT,
+    JSENUMERATE_DESTROY
+} JSIterateOp;
+
+
+typedef struct JSClass JSClass;
+typedef struct JSExtendedClass JSExtendedClass;
+typedef struct JSConstDoubleSpec JSConstDoubleSpec;
+typedef struct JSContext JSContext;
+typedef struct JSErrorReport JSErrorReport;
+typedef struct JSFunction JSFunction;
+typedef struct JSFunctionSpec JSFunctionSpec;
+typedef struct JSIdArray JSIdArray;
+typedef struct JSProperty JSProperty;
+typedef struct JSPropertySpec JSPropertySpec;
+typedef struct JSObject JSObject;
+typedef struct JSObjectMap JSObjectMap;
+typedef struct JSObjectOps JSObjectOps;
+typedef struct JSXMLObjectOps JSXMLObjectOps;
+typedef struct JSRuntime JSRuntime;
+typedef struct JSRuntime JSTaskState;
+typedef struct JSScript JSScript;
+typedef struct JSString JSString;
+typedef struct JSXDRState JSXDRState;
+typedef struct JSExceptionState JSExceptionState;
+typedef struct JSLocaleCallbacks JSLocaleCallbacks;
+# 148 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSBool
+(* JSPropertyOp)(JSContext *cx, JSObject *obj, jsval id,
+                                 jsval *vp);
+# 179 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSBool
+(* JSNewEnumerateOp)(JSContext *cx, JSObject *obj,
+                                     JSIterateOp enum_op,
+                                     jsval *statep, jsid *idp);
+
+
+
+
+
+typedef JSBool
+(* JSEnumerateOp)(JSContext *cx, JSObject *obj);
+# 203 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSBool
+(* JSResolveOp)(JSContext *cx, JSObject *obj, jsval id);
+# 235 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSBool
+(* JSNewResolveOp)(JSContext *cx, JSObject *obj, jsval id,
+                                   uintN flags, JSObject **objp);
+
+
+
+
+
+typedef JSBool
+(* JSConvertOp)(JSContext *cx, JSObject *obj, JSType type,
+                                jsval *vp);
+
+
+
+
+
+
+typedef void
+(* JSFinalizeOp)(JSContext *cx, JSObject *obj);
+
+
+
+
+
+typedef void
+(* JSStringFinalizeOp)(JSContext *cx, JSString *str);
+# 286 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSObjectOps *
+(* JSGetObjectOps)(JSContext *cx, JSClass *clasp);
+# 301 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSBool
+(* JSCheckAccessOp)(JSContext *cx, JSObject *obj, jsval id,
+                                    JSAccessMode mode, jsval *vp);
+
+
+
+
+
+typedef JSBool
+(* JSXDRObjectOp)(JSXDRState *xdr, JSObject **objp);
+
+
+
+
+
+
+typedef JSBool
+(* JSHasInstanceOp)(JSContext *cx, JSObject *obj, jsval v,
+                                    JSBool *bp);
+# 339 "/nexbyte/server/include/js/jspubtd.h"
+typedef uint32
+(* JSMarkOp)(JSContext *cx, JSObject *obj, void *arg);
+# 354 "/nexbyte/server/include/js/jspubtd.h"
+typedef uint32
+(* JSReserveSlotsOp)(JSContext *cx, JSObject *obj);
+# 372 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSObjectMap *
+(* JSNewObjectMapOp)(JSContext *cx, jsrefcount nrefs,
+                                     JSObjectOps *ops, JSClass *clasp,
+                                     JSObject *obj);
+
+
+
+
+
+typedef void
+(* JSObjectMapOp)(JSContext *cx, JSObjectMap *map);
+# 401 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSBool
+(* JSLookupPropOp)(JSContext *cx, JSObject *obj, jsid id,
+                                   JSObject **objp, JSProperty **propp);
+# 417 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSBool
+(* JSDefinePropOp)(JSContext *cx, JSObject *obj,
+                                   jsid id, jsval value,
+                                   JSPropertyOp getter, JSPropertyOp setter,
+                                   uintN attrs, JSProperty **propp);
+# 431 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSBool
+(* JSPropertyIdOp)(JSContext *cx, JSObject *obj, jsid id,
+                                   jsval *vp);
+
+
+
+
+
+
+
+typedef JSBool
+(* JSAttributesOp)(JSContext *cx, JSObject *obj, jsid id,
+                                   JSProperty *prop, uintN *attrsp);
+
+
+
+
+
+
+typedef JSBool
+(* JSCheckAccessIdOp)(JSContext *cx, JSObject *obj, jsid id,
+                                      JSAccessMode mode, jsval *vp,
+                                      uintN *attrsp);
+
+
+
+
+
+
+typedef JSObject *
+(* JSObjectOp)(JSContext *cx, JSObject *obj);
+
+
+
+
+
+
+
+typedef void
+(* JSPropertyRefOp)(JSContext *cx, JSObject *obj,
+                                    JSProperty *prop);
+
+
+
+
+
+
+typedef JSBool
+(* JSSetObjectSlotOp)(JSContext *cx, JSObject *obj,
+                                      uint32 slot, JSObject *pobj);
+# 495 "/nexbyte/server/include/js/jspubtd.h"
+typedef jsval
+(* JSGetRequiredSlotOp)(JSContext *cx, JSObject *obj,
+                                        uint32 slot);
+
+typedef JSBool
+(* JSSetRequiredSlotOp)(JSContext *cx, JSObject *obj,
+                                        uint32 slot, jsval v);
+
+typedef JSObject *
+(* JSGetMethodOp)(JSContext *cx, JSObject *obj, jsid id,
+                                  jsval *vp);
+
+typedef JSBool
+(* JSSetMethodOp)(JSContext *cx, JSObject *obj, jsid id,
+                                  jsval *vp);
+
+typedef JSBool
+(* JSEnumerateValuesOp)(JSContext *cx, JSObject *obj,
+                                        JSIterateOp enum_op,
+                                        jsval *statep, jsid *idp, jsval *vp);
+
+typedef JSBool
+(* JSEqualityOp)(JSContext *cx, JSObject *obj, jsval v,
+                                 JSBool *bp);
+
+typedef JSBool
+(* JSConcatenateOp)(JSContext *cx, JSObject *obj, jsval v,
+                                    jsval *vp);
+
+
+
+typedef JSBool
+(* JSNative)(JSContext *cx, JSObject *obj, uintN argc,
+                             jsval *argv, jsval *rval);
+
+
+
+typedef enum JSGCStatus {
+    JSGC_BEGIN,
+    JSGC_END,
+    JSGC_MARK_END,
+    JSGC_FINALIZE_END
+} JSGCStatus;
+
+typedef JSBool
+(* JSGCCallback)(JSContext *cx, JSGCStatus status);
+
+typedef JSBool
+(* JSBranchCallback)(JSContext *cx, JSScript *script);
+
+typedef void
+(* JSErrorReporter)(JSContext *cx, const char *message,
+                                    JSErrorReport *report);
+
+
+
+
+
+
+typedef enum JSExnType {
+    JSEXN_NONE = -1,
+      JSEXN_ERR,
+        JSEXN_INTERNALERR,
+        JSEXN_EVALERR,
+        JSEXN_RANGEERR,
+        JSEXN_REFERENCEERR,
+        JSEXN_SYNTAXERR,
+        JSEXN_TYPEERR,
+        JSEXN_URIERR,
+        JSEXN_LIMIT
+} JSExnType;
+
+typedef struct JSErrorFormatString {
+    const char *format;
+    uint16 argCount;
+    uint16 exnType;
+} JSErrorFormatString;
+
+typedef const JSErrorFormatString *
+(* JSErrorCallback)(void *userRef, const char *locale,
+                                    const uintN errorNumber);
+# 590 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSBool
+(* JSLocaleToUpperCase)(JSContext *cx, JSString *src,
+                                        jsval *rval);
+
+typedef JSBool
+(* JSLocaleToLowerCase)(JSContext *cx, JSString *src,
+                                        jsval *rval);
+
+typedef JSBool
+(* JSLocaleCompare)(JSContext *cx,
+                                    JSString *src1, JSString *src2,
+                                    jsval *rval);
+
+typedef JSBool
+(* JSLocaleToUnicode)(JSContext *cx, char *src, jsval *rval);
+
+
+
+
+typedef struct JSPrincipals JSPrincipals;
+# 618 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSBool
+(* JSPrincipalsTranscoder)(JSXDRState *xdr,
+                                           JSPrincipals **principalsp);
+# 630 "/nexbyte/server/include/js/jspubtd.h"
+typedef JSPrincipals *
+(* JSObjectPrincipalsFinder)(JSContext *cx, JSObject *obj);
+
+}
+# 64 "/nexbyte/server/include/js/jsxdrapi.h" 2
+# 1 "/nexbyte/server/include/js/jsprvtd.h" 1
+# 86 "/nexbyte/server/include/js/jsprvtd.h"
+typedef uint8 jsbytecode;
+typedef uint8 jssrcnote;
+typedef uint32 jsatomid;
+
+
+typedef struct JSArgumentFormatMap JSArgumentFormatMap;
+typedef struct JSCodeGenerator JSCodeGenerator;
+typedef struct JSDependentString JSDependentString;
+typedef struct JSGCLockHashEntry JSGCLockHashEntry;
+typedef struct JSGCRootHashEntry JSGCRootHashEntry;
+typedef struct JSGCThing JSGCThing;
+typedef struct JSParseNode JSParseNode;
+typedef struct JSSharpObjectMap JSSharpObjectMap;
+typedef struct JSToken JSToken;
+typedef struct JSTokenPos JSTokenPos;
+typedef struct JSTokenPtr JSTokenPtr;
+typedef struct JSTokenStream JSTokenStream;
+typedef struct JSTreeContext JSTreeContext;
+typedef struct JSTryNote JSTryNote;
+
+
+typedef struct JSAtom JSAtom;
+typedef struct JSAtomList JSAtomList;
+typedef struct JSAtomListElement JSAtomListElement;
+typedef struct JSAtomMap JSAtomMap;
+typedef struct JSAtomState JSAtomState;
+typedef struct JSCodeSpec JSCodeSpec;
+typedef struct JSPrinter JSPrinter;
+typedef struct JSRegExp JSRegExp;
+typedef struct JSRegExpStatics JSRegExpStatics;
+typedef struct JSScope JSScope;
+typedef struct JSScopeOps JSScopeOps;
+typedef struct JSScopeProperty JSScopeProperty;
+typedef struct JSStackFrame JSStackFrame;
+typedef struct JSStackHeader JSStackHeader;
+typedef struct JSStringBuffer JSStringBuffer;
+typedef struct JSSubString JSSubString;
+typedef struct JSXML JSXML;
+typedef struct JSXMLNamespace JSXMLNamespace;
+typedef struct JSXMLQName JSXMLQName;
+typedef struct JSXMLArray JSXMLArray;
+typedef struct JSXMLArrayCursor JSXMLArrayCursor;
+
+
+typedef enum JSTrapStatus {
+    JSTRAP_ERROR,
+    JSTRAP_CONTINUE,
+    JSTRAP_RETURN,
+    JSTRAP_THROW,
+    JSTRAP_LIMIT
+} JSTrapStatus;
+
+typedef JSTrapStatus
+(* JSTrapHandler)(JSContext *cx, JSScript *script,
+                                  jsbytecode *pc, jsval *rval, void *closure);
+
+typedef JSBool
+(* JSWatchPointHandler)(JSContext *cx, JSObject *obj, jsval id,
+                                        jsval old, jsval *newp, void *closure);
+
+
+typedef void
+(* JSNewScriptHook)(JSContext *cx,
+                                    const char *filename,
+                                    uintN lineno,
+                                    JSScript *script,
+                                    JSFunction *fun,
+                                    void *callerdata);
+
+
+typedef void
+(* JSDestroyScriptHook)(JSContext *cx,
+                                        JSScript *script,
+                                        void *callerdata);
+
+typedef void
+(* JSSourceHandler)(const char *filename, uintN lineno,
+                                    jschar *str, size_t length,
+                                    void **listenerTSData, void *closure);
+# 191 "/nexbyte/server/include/js/jsprvtd.h"
+typedef void *
+(* JSInterpreterHook)(JSContext *cx, JSStackFrame *fp, JSBool before,
+                                      JSBool *ok, void *closure);
+
+typedef void
+(* JSObjectHook)(JSContext *cx, JSObject *obj, JSBool isNew,
+                                 void *closure);
+
+typedef JSBool
+(* JSDebugErrorHook)(JSContext *cx, const char *message,
+                                     JSErrorReport *report, void *closure);
+# 65 "/nexbyte/server/include/js/jsxdrapi.h" 2
+
+extern "C" {
+# 85 "/nexbyte/server/include/js/jsxdrapi.h"
+typedef enum JSXDRMode {
+    JSXDR_ENCODE,
+    JSXDR_DECODE,
+    JSXDR_FREE
+} JSXDRMode;
+
+typedef enum JSXDRWhence {
+    JSXDR_SEEK_SET,
+    JSXDR_SEEK_CUR,
+    JSXDR_SEEK_END
+} JSXDRWhence;
+
+typedef struct JSXDROps {
+    JSBool (*get32)(JSXDRState *, uint32 *);
+    JSBool (*set32)(JSXDRState *, uint32 *);
+    JSBool (*getbytes)(JSXDRState *, char *, uint32);
+    JSBool (*setbytes)(JSXDRState *, char *, uint32);
+    void * (*raw)(JSXDRState *, uint32);
+    JSBool (*seek)(JSXDRState *, int32, JSXDRWhence);
+    uint32 (*tell)(JSXDRState *);
+    void (*finalize)(JSXDRState *);
+} JSXDROps;
+
+struct JSXDRState {
+    JSXDRMode mode;
+    JSXDROps *ops;
+    JSContext *cx;
+    JSClass **registry;
+    uintN numclasses;
+    uintN maxclasses;
+    void *reghash;
+    void *userdata;
+};
+
+extern void
+JS_XDRInitBase(JSXDRState *xdr, JSXDRMode mode, JSContext *cx);
+
+extern JSXDRState *
+JS_XDRNewMem(JSContext *cx, JSXDRMode mode);
+
+extern void *
+JS_XDRMemGetData(JSXDRState *xdr, uint32 *lp);
+
+extern void
+JS_XDRMemSetData(JSXDRState *xdr, void *data, uint32 len);
+
+extern uint32
+JS_XDRMemDataLeft(JSXDRState *xdr);
+
+extern void
+JS_XDRMemResetData(JSXDRState *xdr);
+
+extern void
+JS_XDRDestroy(JSXDRState *xdr);
+
+extern JSBool
+JS_XDRUint8(JSXDRState *xdr, uint8 *b);
+
+extern JSBool
+JS_XDRUint16(JSXDRState *xdr, uint16 *s);
+
+extern JSBool
+JS_XDRUint32(JSXDRState *xdr, uint32 *lp);
+
+extern JSBool
+JS_XDRBytes(JSXDRState *xdr, char *bytes, uint32 len);
+
+extern JSBool
+JS_XDRCString(JSXDRState *xdr, char **sp);
+
+extern JSBool
+JS_XDRCStringOrNull(JSXDRState *xdr, char **sp);
+
+extern JSBool
+JS_XDRString(JSXDRState *xdr, JSString **strp);
+
+extern JSBool
+JS_XDRStringOrNull(JSXDRState *xdr, JSString **strp);
+
+extern JSBool
+JS_XDRDouble(JSXDRState *xdr, jsdouble **dp);
+
+extern JSBool
+JS_XDRValue(JSXDRState *xdr, jsval *vp);
+
+extern JSBool
+JS_XDRScript(JSXDRState *xdr, JSScript **scriptp);
+
+extern JSBool
+JS_XDRRegisterClass(JSXDRState *xdr, JSClass *clasp, uint32 *lp);
+
+extern uint32
+JS_XDRFindClassIdByName(JSXDRState *xdr, const char *name);
+
+extern JSClass *
+JS_XDRFindClassById(JSXDRState *xdr, uint32 id);
+# 191 "/nexbyte/server/include/js/jsxdrapi.h"
+}
+# 26 "static.cpp" 2
+# 1 "/nexbyte/server/include/js/jscntxt.h" 1
+# 45 "/nexbyte/server/include/js/jscntxt.h"
+# 1 "/nexbyte/server/include/js/jsarena.h" 1
+# 49 "/nexbyte/server/include/js/jsarena.h"
+# 1 "/nexbyte/server/include/stdlib.h" 1 3
+# 33 "/nexbyte/server/include/stdlib.h" 3
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 34 "/nexbyte/server/include/stdlib.h" 2 3
+
+extern "C" {
+
+
+
+
+
+
+# 1 "/nexbyte/server/include/bits/waitflags.h" 1 3
+# 43 "/nexbyte/server/include/stdlib.h" 2 3
+# 1 "/nexbyte/server/include/bits/waitstatus.h" 1 3
+# 67 "/nexbyte/server/include/bits/waitstatus.h" 3
+union wait
+  {
+    int w_status;
+    struct
+      {
+
+ unsigned int __w_termsig:7;
+ unsigned int __w_coredump:1;
+ unsigned int __w_retcode:8;
+ unsigned int:16;
+
+
+
+
+
+
+
+      } __wait_terminated;
+    struct
+      {
+
+ unsigned int __w_stopval:8;
+ unsigned int __w_stopsig:8;
+ unsigned int:16;
+
+
+
+
+
+
+      } __wait_stopped;
+  };
+# 44 "/nexbyte/server/include/stdlib.h" 2 3
+# 96 "/nexbyte/server/include/stdlib.h" 3
+
+
+typedef struct
+  {
+    int quot;
+    int rem;
+  } div_t;
+
+
+
+typedef struct
+  {
+    long int quot;
+    long int rem;
+  } ldiv_t;
+
+
+
+
+
+
+
+__extension__ typedef struct
+  {
+    long long int quot;
+    long long int rem;
+  } lldiv_t;
+
+
+# 140 "/nexbyte/server/include/stdlib.h" 3
+extern size_t __ctype_get_mb_cur_max (void) throw ();
+
+
+
+
+extern double atof (__const char *__nptr)
+     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
+
+extern int atoi (__const char *__nptr)
+     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
+
+extern long int atol (__const char *__nptr)
+     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+__extension__ extern long long int atoll (__const char *__nptr)
+     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+extern double strtod (__const char *__restrict __nptr,
+        char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+extern float strtof (__const char *__restrict __nptr,
+       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));
+
+extern long double strtold (__const char *__restrict __nptr,
+       char **__restrict __endptr)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+extern long int strtol (__const char *__restrict __nptr,
+   char **__restrict __endptr, int __base)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+extern unsigned long int strtoul (__const char *__restrict __nptr,
+      char **__restrict __endptr, int __base)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+__extension__
+extern long long int strtoq (__const char *__restrict __nptr,
+        char **__restrict __endptr, int __base)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+__extension__
+extern unsigned long long int strtouq (__const char *__restrict __nptr,
+           char **__restrict __endptr, int __base)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+__extension__
+extern long long int strtoll (__const char *__restrict __nptr,
+         char **__restrict __endptr, int __base)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+__extension__
+extern unsigned long long int strtoull (__const char *__restrict __nptr,
+     char **__restrict __endptr, int __base)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+# 235 "/nexbyte/server/include/stdlib.h" 3
+# 1 "/nexbyte/server/include/xlocale.h" 1 3
+# 28 "/nexbyte/server/include/xlocale.h" 3
+typedef struct __locale_struct
+{
+
+  struct locale_data *__locales[13];
+
+
+  const unsigned short int *__ctype_b;
+  const int *__ctype_tolower;
+  const int *__ctype_toupper;
+
+
+  const char *__names[13];
+} *__locale_t;
+# 236 "/nexbyte/server/include/stdlib.h" 2 3
+
+
+
+extern long int strtol_l (__const char *__restrict __nptr,
+     char **__restrict __endptr, int __base,
+     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));
+
+extern unsigned long int strtoul_l (__const char *__restrict __nptr,
+        char **__restrict __endptr,
+        int __base, __locale_t __loc)
+     throw () __attribute__ ((__nonnull__ (1, 4)));
+
+__extension__
+extern long long int strtoll_l (__const char *__restrict __nptr,
+    char **__restrict __endptr, int __base,
+    __locale_t __loc)
+     throw () __attribute__ ((__nonnull__ (1, 4)));
+
+__extension__
+extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
+       char **__restrict __endptr,
+       int __base, __locale_t __loc)
+     throw () __attribute__ ((__nonnull__ (1, 4)));
+
+extern double strtod_l (__const char *__restrict __nptr,
+   char **__restrict __endptr, __locale_t __loc)
+     throw () __attribute__ ((__nonnull__ (1, 3)));
+
+extern float strtof_l (__const char *__restrict __nptr,
+         char **__restrict __endptr, __locale_t __loc)
+     throw () __attribute__ ((__nonnull__ (1, 3)));
+
+extern long double strtold_l (__const char *__restrict __nptr,
+         char **__restrict __endptr,
+         __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 3)));
+
+
+
+
+
+
+extern double __strtod_internal (__const char *__restrict __nptr,
+     char **__restrict __endptr, int __group)
+     throw () __attribute__ ((__nonnull__ (1)));
+extern float __strtof_internal (__const char *__restrict __nptr,
+    char **__restrict __endptr, int __group)
+     throw () __attribute__ ((__nonnull__ (1)));
+extern long double __strtold_internal (__const char *__restrict __nptr,
+           char **__restrict __endptr,
+           int __group) throw () __attribute__ ((__nonnull__ (1)));
+
+extern long int __strtol_internal (__const char *__restrict __nptr,
+       char **__restrict __endptr,
+       int __base, int __group)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+extern unsigned long int __strtoul_internal (__const char *__restrict __nptr,
+          char **__restrict __endptr,
+          int __base, int __group)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+__extension__
+extern long long int __strtoll_internal (__const char *__restrict __nptr,
+      char **__restrict __endptr,
+      int __base, int __group)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+__extension__
+extern unsigned long long int __strtoull_internal (__const char *
+         __restrict __nptr,
+         char **__restrict __endptr,
+         int __base, int __group)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+
+
+
+extern __inline double
+strtod (__const char *__restrict __nptr, char **__restrict __endptr) throw ()
+{
+  return __strtod_internal (__nptr, __endptr, 0);
+}
+extern __inline long int
+strtol (__const char *__restrict __nptr, char **__restrict __endptr, int __base) throw ()
+
+{
+  return __strtol_internal (__nptr, __endptr, __base, 0);
+}
+extern __inline unsigned long int
+strtoul (__const char *__restrict __nptr, char **__restrict __endptr, int __base) throw ()
+
+{
+  return __strtoul_internal (__nptr, __endptr, __base, 0);
+}
+
+
+
+
+extern __inline float
+strtof (__const char *__restrict __nptr, char **__restrict __endptr) throw ()
+{
+  return __strtof_internal (__nptr, __endptr, 0);
+}
+extern __inline long double
+strtold (__const char *__restrict __nptr, char **__restrict __endptr) throw ()
+{
+  return __strtold_internal (__nptr, __endptr, 0);
+}
+
+
+
+
+__extension__ extern __inline long long int
+strtoq (__const char *__restrict __nptr, char **__restrict __endptr, int __base) throw ()
+
+{
+  return __strtoll_internal (__nptr, __endptr, __base, 0);
+}
+__extension__ extern __inline unsigned long long int
+strtouq (__const char *__restrict __nptr, char **__restrict __endptr, int __base) throw ()
+
+{
+  return __strtoull_internal (__nptr, __endptr, __base, 0);
+}
+
+
+
+
+__extension__ extern __inline long long int
+strtoll (__const char *__restrict __nptr, char **__restrict __endptr, int __base) throw ()
+
+{
+  return __strtoll_internal (__nptr, __endptr, __base, 0);
+}
+__extension__ extern __inline unsigned long long int
+strtoull (__const char * __restrict __nptr, char **__restrict __endptr, int __base) throw ()
+
+{
+  return __strtoull_internal (__nptr, __endptr, __base, 0);
+}
+
+
+
+
+extern __inline double
+atof (__const char *__nptr) throw ()
+{
+  return strtod (__nptr, (char **) __null);
+}
+extern __inline int
+atoi (__const char *__nptr) throw ()
+{
+  return (int) strtol (__nptr, (char **) __null, 10);
+}
+extern __inline long int
+atol (__const char *__nptr) throw ()
+{
+  return strtol (__nptr, (char **) __null, 10);
+}
+
+
+
+
+__extension__ extern __inline long long int
+atoll (__const char *__nptr) throw ()
+{
+  return strtoll (__nptr, (char **) __null, 10);
+}
+
+# 424 "/nexbyte/server/include/stdlib.h" 3
+extern char *l64a (long int __n) throw ();
+
+
+extern long int a64l (__const char *__s)
+     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
+# 440 "/nexbyte/server/include/stdlib.h" 3
+extern long int random (void) throw ();
+
+
+extern void srandom (unsigned int __seed) throw ();
+
+
+
+
+
+extern char *initstate (unsigned int __seed, char *__statebuf,
+   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));
+
+
+
+extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+
+
+struct random_data
+  {
+    int32_t *fptr;
+    int32_t *rptr;
+    int32_t *state;
+    int rand_type;
+    int rand_deg;
+    int rand_sep;
+    int32_t *end_ptr;
+  };
+
+extern int random_r (struct random_data *__restrict __buf,
+       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
+
+extern int srandom_r (unsigned int __seed, struct random_data *__buf)
+     throw () __attribute__ ((__nonnull__ (2)));
+
+extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
+   size_t __statelen,
+   struct random_data *__restrict __buf)
+     throw () __attribute__ ((__nonnull__ (2, 4)));
+
+extern int setstate_r (char *__restrict __statebuf,
+         struct random_data *__restrict __buf)
+     throw () __attribute__ ((__nonnull__ (1, 2)));
+
+
+
+
+
+
+extern int rand (void) throw ();
+
+extern void srand (unsigned int __seed) throw ();
+
+
+
+
+extern int rand_r (unsigned int *__seed) throw ();
+
+
+
+
+
+
+
+extern double drand48 (void) throw ();
+extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));
+
+
+extern long int lrand48 (void) throw ();
+extern long int nrand48 (unsigned short int __xsubi[3])
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+extern long int mrand48 (void) throw ();
+extern long int jrand48 (unsigned short int __xsubi[3])
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+extern void srand48 (long int __seedval) throw ();
+extern unsigned short int *seed48 (unsigned short int __seed16v[3])
+     throw () __attribute__ ((__nonnull__ (1)));
+extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+struct drand48_data
+  {
+    unsigned short int __x[3];
+    unsigned short int __old_x[3];
+    unsigned short int __c;
+    unsigned short int __init;
+    unsigned long long int __a;
+  };
+
+
+extern int drand48_r (struct drand48_data *__restrict __buffer,
+        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
+extern int erand48_r (unsigned short int __xsubi[3],
+        struct drand48_data *__restrict __buffer,
+        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
+
+
+extern int lrand48_r (struct drand48_data *__restrict __buffer,
+        long int *__restrict __result)
+     throw () __attribute__ ((__nonnull__ (1, 2)));
+extern int nrand48_r (unsigned short int __xsubi[3],
+        struct drand48_data *__restrict __buffer,
+        long int *__restrict __result)
+     throw () __attribute__ ((__nonnull__ (1, 2)));
+
+
+extern int mrand48_r (struct drand48_data *__restrict __buffer,
+        long int *__restrict __result)
+     throw () __attribute__ ((__nonnull__ (1, 2)));
+extern int jrand48_r (unsigned short int __xsubi[3],
+        struct drand48_data *__restrict __buffer,
+        long int *__restrict __result)
+     throw () __attribute__ ((__nonnull__ (1, 2)));
+
+
+extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
+     throw () __attribute__ ((__nonnull__ (2)));
+
+extern int seed48_r (unsigned short int __seed16v[3],
+       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));
+
+extern int lcong48_r (unsigned short int __param[7],
+        struct drand48_data *__buffer)
+     throw () __attribute__ ((__nonnull__ (1, 2)));
+
+
+
+
+
+
+
+
+
+extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__));
+
+extern void *calloc (size_t __nmemb, size_t __size)
+     throw () __attribute__ ((__malloc__));
+
+
+
+
+
+
+
+extern void *realloc (void *__ptr, size_t __size) throw () __attribute__ ((__malloc__));
+
+extern void free (void *__ptr) throw ();
+
+
+
+
+extern void cfree (void *__ptr) throw ();
+
+
+
+# 1 "/nexbyte/server/include/alloca.h" 1 3
+# 25 "/nexbyte/server/include/alloca.h" 3
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 26 "/nexbyte/server/include/alloca.h" 2 3
+
+extern "C" {
+
+
+
+
+
+extern void *alloca (size_t __size) throw ();
+
+
+
+
+
+}
+# 607 "/nexbyte/server/include/stdlib.h" 2 3
+
+
+
+
+extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__));
+
+
+
+
+extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+extern void abort (void) throw () __attribute__ ((__noreturn__));
+
+
+
+extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+
+extern void exit (int __status) throw () __attribute__ ((__noreturn__));
+
+
+
+
+
+
+extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));
+
+
+
+
+
+
+extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+extern char *__secure_getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+extern int setenv (__const char *__name, __const char *__value, int __replace)
+     throw () __attribute__ ((__nonnull__ (2)));
+
+
+extern int unsetenv (__const char *__name) throw ();
+
+
+
+
+
+
+extern int clearenv (void) throw ();
+# 691 "/nexbyte/server/include/stdlib.h" 3
+extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
+# 702 "/nexbyte/server/include/stdlib.h" 3
+extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1)));
+# 711 "/nexbyte/server/include/stdlib.h" 3
+extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1)));
+# 721 "/nexbyte/server/include/stdlib.h" 3
+extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+
+
+
+extern int system (__const char *__command);
+
+
+
+
+
+
+
+extern char *canonicalize_file_name (__const char *__name)
+     throw () __attribute__ ((__nonnull__ (1)));
+# 749 "/nexbyte/server/include/stdlib.h" 3
+extern char *realpath (__const char *__restrict __name,
+         char *__restrict __resolved) throw ();
+
+
+
+
+
+
+typedef int (*__compar_fn_t) (__const void *, __const void *);
+
+
+typedef __compar_fn_t comparison_fn_t;
+
+
+
+
+
+
+extern void *bsearch (__const void *__key, __const void *__base,
+        size_t __nmemb, size_t __size, __compar_fn_t __compar)
+     __attribute__ ((__nonnull__ (1, 2, 5)));
+
+
+
+extern void qsort (void *__base, size_t __nmemb, size_t __size,
+     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
+
+
+
+extern int abs (int __x) throw () __attribute__ ((__const__));
+extern long int labs (long int __x) throw () __attribute__ ((__const__));
+
+
+
+__extension__ extern long long int llabs (long long int __x)
+     throw () __attribute__ ((__const__));
+
+
+
+
+
+
+
+extern div_t div (int __numer, int __denom)
+     throw () __attribute__ ((__const__));
+extern ldiv_t ldiv (long int __numer, long int __denom)
+     throw () __attribute__ ((__const__));
+
+
+
+
+__extension__ extern lldiv_t lldiv (long long int __numer,
+        long long int __denom)
+     throw () __attribute__ ((__const__));
+
+# 814 "/nexbyte/server/include/stdlib.h" 3
+extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
+     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4)));
+
+
+
+
+extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
+     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4)));
+
+
+
+
+extern char *gcvt (double __value, int __ndigit, char *__buf)
+     throw () __attribute__ ((__nonnull__ (3)));
+
+
+
+
+extern char *qecvt (long double __value, int __ndigit,
+      int *__restrict __decpt, int *__restrict __sign)
+     throw () __attribute__ ((__nonnull__ (3, 4)));
+extern char *qfcvt (long double __value, int __ndigit,
+      int *__restrict __decpt, int *__restrict __sign)
+     throw () __attribute__ ((__nonnull__ (3, 4)));
+extern char *qgcvt (long double __value, int __ndigit, char *__buf)
+     throw () __attribute__ ((__nonnull__ (3)));
+
+
+
+
+extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
+     int *__restrict __sign, char *__restrict __buf,
+     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
+extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
+     int *__restrict __sign, char *__restrict __buf,
+     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
+
+extern int qecvt_r (long double __value, int __ndigit,
+      int *__restrict __decpt, int *__restrict __sign,
+      char *__restrict __buf, size_t __len)
+     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
+extern int qfcvt_r (long double __value, int __ndigit,
+      int *__restrict __decpt, int *__restrict __sign,
+      char *__restrict __buf, size_t __len)
+     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
+
+
+
+
+
+
+
+extern int mblen (__const char *__s, size_t __n) throw ();
+
+
+extern int mbtowc (wchar_t *__restrict __pwc,
+     __const char *__restrict __s, size_t __n) throw ();
+
+
+extern int wctomb (char *__s, wchar_t __wchar) throw ();
+
+
+
+extern size_t mbstowcs (wchar_t *__restrict __pwcs,
+   __const char *__restrict __s, size_t __n) throw ();
+
+extern size_t wcstombs (char *__restrict __s,
+   __const wchar_t *__restrict __pwcs, size_t __n)
+     throw ();
+
+
+
+
+
+
+
+
+extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1)));
+# 902 "/nexbyte/server/include/stdlib.h" 3
+extern int getsubopt (char **__restrict __optionp,
+        char *__const *__restrict __tokens,
+        char **__restrict __valuep)
+     throw () __attribute__ ((__nonnull__ (1, 2, 3)));
+
+
+
+
+
+extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+
+
+extern int posix_openpt (int __oflag);
+
+
+
+
+
+
+
+extern int grantpt (int __fd) throw ();
+
+
+
+extern int unlockpt (int __fd) throw ();
+
+
+
+
+extern char *ptsname (int __fd) throw ();
+
+
+
+
+
+
+extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
+     throw () __attribute__ ((__nonnull__ (2)));
+
+
+extern int getpt (void);
+
+
+
+
+
+
+extern int getloadavg (double __loadavg[], int __nelem)
+     throw () __attribute__ ((__nonnull__ (1)));
+
+
+
+
+
+}
+# 50 "/nexbyte/server/include/js/jsarena.h" 2
+
+
+
+extern "C" {
+
+typedef struct JSArena JSArena;
+typedef struct JSArenaPool JSArenaPool;
+
+struct JSArena {
+    JSArena *next;
+    jsuword base;
+    jsuword limit;
+    jsuword avail;
+};
+# 87 "/nexbyte/server/include/js/jsarena.h"
+struct JSArenaPool {
+    JSArena first;
+    JSArena *current;
+    size_t arenasize;
+    jsuword mask;
+
+
+
+};
+# 216 "/nexbyte/server/include/js/jsarena.h"
+extern void
+JS_InitArenaPool(JSArenaPool *pool, const char *name, size_t size,
+                 size_t align);
+
+
+
+
+
+
+extern void
+JS_FreeArenaPool(JSArenaPool *pool);
+
+
+
+
+extern void
+JS_FinishArenaPool(JSArenaPool *pool);
+
+
+
+
+
+extern void
+JS_ArenaFinish(void);
+# 252 "/nexbyte/server/include/js/jsarena.h"
+extern void
+JS_ArenaShutDown(void);
+
+
+
+
+extern void *
+JS_ArenaAllocate(JSArenaPool *pool, size_t nb);
+
+extern void *
+JS_ArenaRealloc(JSArenaPool *pool, void *p, size_t size, size_t incr);
+
+extern void *
+JS_ArenaGrow(JSArenaPool *pool, void *p, size_t size, size_t incr);
+
+extern void
+JS_ArenaRelease(JSArenaPool *pool, char *mark);
+
+
+
+
+
+extern void
+JS_ArenaFreeAllocation(JSArenaPool *pool, void *p, size_t size);
+# 309 "/nexbyte/server/include/js/jsarena.h"
+}
+# 46 "/nexbyte/server/include/js/jscntxt.h" 2
+# 1 "/nexbyte/server/include/js/jsclist.h" 1
+# 47 "/nexbyte/server/include/js/jsclist.h"
+typedef struct JSCListStr {
+    struct JSCListStr *next;
+    struct JSCListStr *prev;
+} JSCList;
+# 47 "/nexbyte/server/include/js/jscntxt.h" 2
+
+# 1 "/nexbyte/server/include/js/jsatom.h" 1
+# 45 "/nexbyte/server/include/js/jsatom.h"
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 46 "/nexbyte/server/include/js/jsatom.h" 2
+
+# 1 "/nexbyte/server/include/js/jshash.h" 1
+# 45 "/nexbyte/server/include/js/jshash.h"
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 46 "/nexbyte/server/include/js/jshash.h" 2
+# 1 "/nexbyte/server/include/stdio.h" 1 3
+# 30 "/nexbyte/server/include/stdio.h" 3
+extern "C" {
+
+
+
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 35 "/nexbyte/server/include/stdio.h" 2 3
+# 44 "/nexbyte/server/include/stdio.h" 3
+
+
+typedef struct _IO_FILE FILE;
+
+
+
+
+
+# 62 "/nexbyte/server/include/stdio.h" 3
+typedef struct _IO_FILE __FILE;
+# 72 "/nexbyte/server/include/stdio.h" 3
+# 1 "/nexbyte/server/include/libio.h" 1 3
+# 32 "/nexbyte/server/include/libio.h" 3
+# 1 "/nexbyte/server/include/_G_config.h" 1 3
+# 14 "/nexbyte/server/include/_G_config.h" 3
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 355 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 3 4
+typedef unsigned int wint_t;
+# 15 "/nexbyte/server/include/_G_config.h" 2 3
+# 24 "/nexbyte/server/include/_G_config.h" 3
+# 1 "/nexbyte/server/include/wchar.h" 1 3
+# 48 "/nexbyte/server/include/wchar.h" 3
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 49 "/nexbyte/server/include/wchar.h" 2 3
+
+# 1 "/nexbyte/server/include/bits/wchar.h" 1 3
+# 51 "/nexbyte/server/include/wchar.h" 2 3
+# 76 "/nexbyte/server/include/wchar.h" 3
+typedef struct
+{
+  int __count;
+  union
+  {
+    wint_t __wch;
+    char __wchb[4];
+  } __value;
+} __mbstate_t;
+# 25 "/nexbyte/server/include/_G_config.h" 2 3
+
+typedef struct
+{
+  __off_t __pos;
+  __mbstate_t __state;
+} _G_fpos_t;
+typedef struct
+{
+  __off64_t __pos;
+  __mbstate_t __state;
+} _G_fpos64_t;
+# 44 "/nexbyte/server/include/_G_config.h" 3
+# 1 "/nexbyte/server/include/gconv.h" 1 3
+# 28 "/nexbyte/server/include/gconv.h" 3
+# 1 "/nexbyte/server/include/wchar.h" 1 3
+# 48 "/nexbyte/server/include/wchar.h" 3
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 49 "/nexbyte/server/include/wchar.h" 2 3
+# 29 "/nexbyte/server/include/gconv.h" 2 3
+
+
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 32 "/nexbyte/server/include/gconv.h" 2 3
+
+
+
+
+
+enum
+{
+  __GCONV_OK = 0,
+  __GCONV_NOCONV,
+  __GCONV_NODB,
+  __GCONV_NOMEM,
+
+  __GCONV_EMPTY_INPUT,
+  __GCONV_FULL_OUTPUT,
+  __GCONV_ILLEGAL_INPUT,
+  __GCONV_INCOMPLETE_INPUT,
+
+  __GCONV_ILLEGAL_DESCRIPTOR,
+  __GCONV_INTERNAL_ERROR
+};
+
+
+
+enum
+{
+  __GCONV_IS_LAST = 0x0001,
+  __GCONV_IGNORE_ERRORS = 0x0002
+};
+
+
+
+struct __gconv_step;
+struct __gconv_step_data;
+struct __gconv_loaded_object;
+struct __gconv_trans_data;
+
+
+
+typedef int (*__gconv_fct) (struct __gconv_step *, struct __gconv_step_data *,
+       __const unsigned char **, __const unsigned char *,
+       unsigned char **, size_t *, int, int);
+
+
+typedef wint_t (*__gconv_btowc_fct) (struct __gconv_step *, unsigned char);
+
+
+typedef int (*__gconv_init_fct) (struct __gconv_step *);
+typedef void (*__gconv_end_fct) (struct __gconv_step *);
+
+
+
+typedef int (*__gconv_trans_fct) (struct __gconv_step *,
+      struct __gconv_step_data *, void *,
+      __const unsigned char *,
+      __const unsigned char **,
+      __const unsigned char *, unsigned char **,
+      size_t *);
+
+
+typedef int (*__gconv_trans_context_fct) (void *, __const unsigned char *,
+       __const unsigned char *,
+       unsigned char *, unsigned char *);
+
+
+typedef int (*__gconv_trans_query_fct) (__const char *, __const char ***,
+     size_t *);
+
+
+typedef int (*__gconv_trans_init_fct) (void **, const char *);
+typedef void (*__gconv_trans_end_fct) (void *);
+
+struct __gconv_trans_data
+{
+
+  __gconv_trans_fct __trans_fct;
+  __gconv_trans_context_fct __trans_context_fct;
+  __gconv_trans_end_fct __trans_end_fct;
+  void *__data;
+  struct __gconv_trans_data *__next;
+};
+
+
+
+struct __gconv_step
+{
+  struct __gconv_loaded_object *__shlib_handle;
+  __const char *__modname;
+
+  int __counter;
+
+  char *__from_name;
+  char *__to_name;
+
+  __gconv_fct __fct;
+  __gconv_btowc_fct __btowc_fct;
+  __gconv_init_fct __init_fct;
+  __gconv_end_fct __end_fct;
+
+
+
+  int __min_needed_from;
+  int __max_needed_from;
+  int __min_needed_to;
+  int __max_needed_to;
+
+
+  int __stateful;
+
+  void *__data;
+};
+
+
+
+struct __gconv_step_data
+{
+  unsigned char *__outbuf;
+  unsigned char *__outbufend;
+
+
+
+  int __flags;
+
+
+
+  int __invocation_counter;
+
+
+
+  int __internal_use;
+
+  __mbstate_t *__statep;
+  __mbstate_t __state;
+
+
+
+  struct __gconv_trans_data *__trans;
+};
+
+
+
+typedef struct __gconv_info
+{
+  size_t __nsteps;
+  struct __gconv_step *__steps;
+  __extension__ struct __gconv_step_data __data [];
+} *__gconv_t;
+# 45 "/nexbyte/server/include/_G_config.h" 2 3
+typedef union
+{
+  struct __gconv_info __cd;
+  struct
+  {
+    struct __gconv_info __cd;
+    struct __gconv_step_data __data;
+  } __combined;
+} _G_iconv_t;
+
+typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
+typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
+typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
+typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
+# 33 "/nexbyte/server/include/libio.h" 2 3
+# 53 "/nexbyte/server/include/libio.h" 3
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stdarg.h" 1 3 4
+# 43 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stdarg.h" 3 4
+typedef __builtin_va_list __gnuc_va_list;
+# 54 "/nexbyte/server/include/libio.h" 2 3
+# 166 "/nexbyte/server/include/libio.h" 3
+struct _IO_jump_t; struct _IO_FILE;
+# 176 "/nexbyte/server/include/libio.h" 3
+typedef void _IO_lock_t;
+
+
+
+
+
+struct _IO_marker {
+  struct _IO_marker *_next;
+  struct _IO_FILE *_sbuf;
+
+
+
+  int _pos;
+# 199 "/nexbyte/server/include/libio.h" 3
+};
+
+
+enum __codecvt_result
+{
+  __codecvt_ok,
+  __codecvt_partial,
+  __codecvt_error,
+  __codecvt_noconv
+};
+# 267 "/nexbyte/server/include/libio.h" 3
+struct _IO_FILE {
+  int _flags;
+
+
+
+
+  char* _IO_read_ptr;
+  char* _IO_read_end;
+  char* _IO_read_base;
+  char* _IO_write_base;
+  char* _IO_write_ptr;
+  char* _IO_write_end;
+  char* _IO_buf_base;
+  char* _IO_buf_end;
+
+  char *_IO_save_base;
+  char *_IO_backup_base;
+  char *_IO_save_end;
+
+  struct _IO_marker *_markers;
+
+  struct _IO_FILE *_chain;
+
+  int _fileno;
+
+
+
+  int _flags2;
+
+  __off_t _old_offset;
+
+
+
+  unsigned short _cur_column;
+  signed char _vtable_offset;
+  char _shortbuf[1];
+
+
+
+  _IO_lock_t *_lock;
+# 315 "/nexbyte/server/include/libio.h" 3
+  __off64_t _offset;
+
+
+
+
+
+  void *__pad1;
+  void *__pad2;
+
+  int _mode;
+
+  char _unused2[15 * sizeof (int) - 2 * sizeof (void *)];
+
+};
+
+
+
+
+
+struct _IO_FILE_plus;
+
+extern struct _IO_FILE_plus _IO_2_1_stdin_;
+extern struct _IO_FILE_plus _IO_2_1_stdout_;
+extern struct _IO_FILE_plus _IO_2_1_stderr_;
+# 354 "/nexbyte/server/include/libio.h" 3
+typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);
+
+
+
+
+
+
+
+typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
+     size_t __n);
+
+
+
+
+
+
+
+typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);
+
+
+typedef int __io_close_fn (void *__cookie);
+
+
+
+
+typedef __io_read_fn cookie_read_function_t;
+typedef __io_write_fn cookie_write_function_t;
+typedef __io_seek_fn cookie_seek_function_t;
+typedef __io_close_fn cookie_close_function_t;
+
+
+typedef struct
+{
+  __io_read_fn *read;
+  __io_write_fn *write;
+  __io_seek_fn *seek;
+  __io_close_fn *close;
+} _IO_cookie_io_functions_t;
+typedef _IO_cookie_io_functions_t cookie_io_functions_t;
+
+struct _IO_cookie_file;
+
+
+extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
+        void *__cookie, _IO_cookie_io_functions_t __fns);
+
+
+
+
+extern "C" {
+
+
+extern int __underflow (_IO_FILE *) throw ();
+extern int __uflow (_IO_FILE *) throw ();
+extern int __overflow (_IO_FILE *, int) throw ();
+extern wint_t __wunderflow (_IO_FILE *) throw ();
+extern wint_t __wuflow (_IO_FILE *) throw ();
+extern wint_t __woverflow (_IO_FILE *, wint_t) throw ();
+# 444 "/nexbyte/server/include/libio.h" 3
+extern int _IO_getc (_IO_FILE *__fp) throw ();
+extern int _IO_putc (int __c, _IO_FILE *__fp) throw ();
+extern int _IO_feof (_IO_FILE *__fp) throw ();
+extern int _IO_ferror (_IO_FILE *__fp) throw ();
+
+extern int _IO_peekc_locked (_IO_FILE *__fp) throw ();
+
+
+
+
+
+extern void _IO_flockfile (_IO_FILE *) throw ();
+extern void _IO_funlockfile (_IO_FILE *) throw ();
+extern int _IO_ftrylockfile (_IO_FILE *) throw ();
+# 474 "/nexbyte/server/include/libio.h" 3
+extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
+   __gnuc_va_list, int *__restrict) throw ();
+extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
+    __gnuc_va_list) throw ();
+extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t) throw ();
+extern size_t _IO_sgetn (_IO_FILE *, void *, size_t) throw ();
+
+extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int) throw ();
+extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int) throw ();
+
+extern void _IO_free_backup_area (_IO_FILE *) throw ();
+# 532 "/nexbyte/server/include/libio.h" 3
+}
+# 73 "/nexbyte/server/include/stdio.h" 2 3
+
+
+
+
+typedef __gnuc_va_list va_list;
+# 86 "/nexbyte/server/include/stdio.h" 3
+
+
+typedef _G_fpos_t fpos_t;
+
+
+
+
+
+typedef _G_fpos64_t fpos64_t;
+# 138 "/nexbyte/server/include/stdio.h" 3
+# 1 "/nexbyte/server/include/bits/stdio_lim.h" 1 3
+# 139 "/nexbyte/server/include/stdio.h" 2 3
+
+
+
+extern struct _IO_FILE *stdin;
+extern struct _IO_FILE *stdout;
+extern struct _IO_FILE *stderr;
+
+
+
+
+
+
+
+extern int remove (__const char *__filename) throw ();
+
+extern int rename (__const char *__old, __const char *__new) throw ();
+
+
+
+
+
+
+
+
+
+extern FILE *tmpfile (void);
+# 174 "/nexbyte/server/include/stdio.h" 3
+extern FILE *tmpfile64 (void);
+
+
+
+extern char *tmpnam (char *__s) throw ();
+
+
+
+
+
+extern char *tmpnam_r (char *__s) throw ();
+# 196 "/nexbyte/server/include/stdio.h" 3
+extern char *tempnam (__const char *__dir, __const char *__pfx)
+     throw () __attribute__ ((__malloc__));
+
+
+
+
+
+
+
+
+extern int fclose (FILE *__stream);
+
+
+
+
+extern int fflush (FILE *__stream);
+
+# 221 "/nexbyte/server/include/stdio.h" 3
+extern int fflush_unlocked (FILE *__stream);
+# 231 "/nexbyte/server/include/stdio.h" 3
+extern int fcloseall (void);
+
+
+
+
+
+
+
+
+
+extern FILE *fopen (__const char *__restrict __filename,
+      __const char *__restrict __modes);
+
+
+
+
+extern FILE *freopen (__const char *__restrict __filename,
+        __const char *__restrict __modes,
+        FILE *__restrict __stream);
+# 262 "/nexbyte/server/include/stdio.h" 3
+
+
+extern FILE *fopen64 (__const char *__restrict __filename,
+        __const char *__restrict __modes);
+extern FILE *freopen64 (__const char *__restrict __filename,
+   __const char *__restrict __modes,
+   FILE *__restrict __stream);
+
+
+
+
+extern FILE *fdopen (int __fd, __const char *__modes) throw ();
+
+
+
+
+
+extern FILE *fopencookie (void *__restrict __magic_cookie,
+     __const char *__restrict __modes,
+     _IO_cookie_io_functions_t __io_funcs) throw ();
+
+
+extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes) throw ();
+
+
+
+
+extern FILE *open_memstream (char **__restrict __bufloc,
+        size_t *__restrict __sizeloc) throw ();
+
+
+
+
+
+
+extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();
+
+
+
+extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
+      int __modes, size_t __n) throw ();
+
+
+
+
+
+extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
+         size_t __size) throw ();
+
+
+extern void setlinebuf (FILE *__stream) throw ();
+
+
+
+
+
+
+
+
+extern int fprintf (FILE *__restrict __stream,
+      __const char *__restrict __format, ...);
+
+
+
+
+extern int printf (__const char *__restrict __format, ...);
+
+extern int sprintf (char *__restrict __s,
+      __const char *__restrict __format, ...) throw ();
+
+
+
+
+
+extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
+       __gnuc_va_list __arg);
+
+
+
+
+extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);
+
+extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
+       __gnuc_va_list __arg) throw ();
+
+
+
+
+
+extern int snprintf (char *__restrict __s, size_t __maxlen,
+       __const char *__restrict __format, ...)
+     throw () __attribute__ ((__format__ (__printf__, 3, 4)));
+
+extern int vsnprintf (char *__restrict __s, size_t __maxlen,
+        __const char *__restrict __format, __gnuc_va_list __arg)
+     throw () __attribute__ ((__format__ (__printf__, 3, 0)));
+
+
+
+
+
+
+extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
+        __gnuc_va_list __arg)
+     throw () __attribute__ ((__format__ (__printf__, 2, 0)));
+extern int __asprintf (char **__restrict __ptr,
+         __const char *__restrict __fmt, ...)
+     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
+extern int asprintf (char **__restrict __ptr,
+       __const char *__restrict __fmt, ...)
+     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
+
+
+
+
+
+
+
+extern int vdprintf (int __fd, __const char *__restrict __fmt,
+       __gnuc_va_list __arg)
+     __attribute__ ((__format__ (__printf__, 2, 0)));
+extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
+     __attribute__ ((__format__ (__printf__, 2, 3)));
+
+
+
+
+
+
+
+
+extern int fscanf (FILE *__restrict __stream,
+     __const char *__restrict __format, ...);
+
+
+
+
+extern int scanf (__const char *__restrict __format, ...);
+
+extern int sscanf (__const char *__restrict __s,
+     __const char *__restrict __format, ...) throw ();
+
+
+
+
+
+
+
+
+extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
+      __gnuc_va_list __arg)
+     __attribute__ ((__format__ (__scanf__, 2, 0)));
+
+
+
+
+
+extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
+     __attribute__ ((__format__ (__scanf__, 1, 0)));
+
+
+extern int vsscanf (__const char *__restrict __s,
+      __const char *__restrict __format, __gnuc_va_list __arg)
+     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
+
+
+
+
+
+
+
+
+
+extern int fgetc (FILE *__stream);
+extern int getc (FILE *__stream);
+
+
+
+
+
+extern int getchar (void);
+
+# 454 "/nexbyte/server/include/stdio.h" 3
+extern int getc_unlocked (FILE *__stream);
+extern int getchar_unlocked (void);
+# 465 "/nexbyte/server/include/stdio.h" 3
+extern int fgetc_unlocked (FILE *__stream);
+
+
+
+
+
+
+
+
+
+
+
+extern int fputc (int __c, FILE *__stream);
+extern int putc (int __c, FILE *__stream);
+
+
+
+
+
+extern int putchar (int __c);
+
+# 498 "/nexbyte/server/include/stdio.h" 3
+extern int fputc_unlocked (int __c, FILE *__stream);
+
+
+
+
+
+
+
+extern int putc_unlocked (int __c, FILE *__stream);
+extern int putchar_unlocked (int __c);
+
+
+
+
+
+
+extern int getw (FILE *__stream);
+
+
+extern int putw (int __w, FILE *__stream);
+
+
+
+
+
+
+
+
+extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream);
+
+
+
+
+
+
+extern char *gets (char *__s);
+
+# 543 "/nexbyte/server/include/stdio.h" 3
+extern char *fgets_unlocked (char *__restrict __s, int __n,
+        FILE *__restrict __stream);
+# 559 "/nexbyte/server/include/stdio.h" 3
+extern __ssize_t __getdelim (char **__restrict __lineptr,
+          size_t *__restrict __n, int __delimiter,
+          FILE *__restrict __stream);
+extern __ssize_t getdelim (char **__restrict __lineptr,
+        size_t *__restrict __n, int __delimiter,
+        FILE *__restrict __stream);
+
+
+
+
+
+
+
+extern __ssize_t getline (char **__restrict __lineptr,
+       size_t *__restrict __n,
+       FILE *__restrict __stream);
+
+
+
+
+
+
+
+
+extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);
+
+
+
+
+
+extern int puts (__const char *__s);
+
+
+
+
+
+
+extern int ungetc (int __c, FILE *__stream);
+
+
+
+
+
+
+extern size_t fread (void *__restrict __ptr, size_t __size,
+       size_t __n, FILE *__restrict __stream);
+
+
+
+
+extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
+        size_t __n, FILE *__restrict __s);
+
+# 620 "/nexbyte/server/include/stdio.h" 3
+extern int fputs_unlocked (__const char *__restrict __s,
+      FILE *__restrict __stream);
+# 631 "/nexbyte/server/include/stdio.h" 3
+extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
+         size_t __n, FILE *__restrict __stream);
+extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
+          size_t __n, FILE *__restrict __stream);
+
+
+
+
+
+
+
+
+extern int fseek (FILE *__stream, long int __off, int __whence);
+
+
+
+
+extern long int ftell (FILE *__stream);
+
+
+
+
+extern void rewind (FILE *__stream);
+
+# 667 "/nexbyte/server/include/stdio.h" 3
+extern int fseeko (FILE *__stream, __off_t __off, int __whence);
+
+
+
+
+extern __off_t ftello (FILE *__stream);
+# 686 "/nexbyte/server/include/stdio.h" 3
+
+
+
+
+
+
+extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);
+
+
+
+
+extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
+# 709 "/nexbyte/server/include/stdio.h" 3
+
+
+
+extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
+extern __off64_t ftello64 (FILE *__stream);
+extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
+extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);
+
+
+
+
+extern void clearerr (FILE *__stream) throw ();
+
+extern int feof (FILE *__stream) throw ();
+
+extern int ferror (FILE *__stream) throw ();
+
+
+
+
+extern void clearerr_unlocked (FILE *__stream) throw ();
+extern int feof_unlocked (FILE *__stream) throw ();
+extern int ferror_unlocked (FILE *__stream) throw ();
+
+
+
+
+
+
+
+
+extern void perror (__const char *__s);
+
+
+
+
+
+
+# 1 "/nexbyte/server/include/bits/sys_errlist.h" 1 3
+# 27 "/nexbyte/server/include/bits/sys_errlist.h" 3
+extern int sys_nerr;
+extern __const char *__const sys_errlist[];
+
+
+extern int _sys_nerr;
+extern __const char *__const _sys_errlist[];
+# 748 "/nexbyte/server/include/stdio.h" 2 3
+
+
+
+
+extern int fileno (FILE *__stream) throw ();
+
+
+
+
+extern int fileno_unlocked (FILE *__stream) throw ();
+# 767 "/nexbyte/server/include/stdio.h" 3
+extern FILE *popen (__const char *__command, __const char *__modes);
+
+
+
+
+
+extern int pclose (FILE *__stream);
+
+
+
+
+
+extern char *ctermid (char *__s) throw ();
+
+
+
+
+
+extern char *cuserid (char *__s);
+
+
+
+
+struct obstack;
+
+
+extern int obstack_printf (struct obstack *__restrict __obstack,
+      __const char *__restrict __format, ...)
+     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
+extern int obstack_vprintf (struct obstack *__restrict __obstack,
+       __const char *__restrict __format,
+       __gnuc_va_list __args)
+     throw () __attribute__ ((__format__ (__printf__, 2, 0)));
+
+
+
+
+
+
+
+extern void flockfile (FILE *__stream) throw ();
+
+
+
+extern int ftrylockfile (FILE *__stream) throw ();
+
+
+extern void funlockfile (FILE *__stream) throw ();
+# 828 "/nexbyte/server/include/stdio.h" 3
+# 1 "/nexbyte/server/include/bits/stdio.h" 1 3
+# 33 "/nexbyte/server/include/bits/stdio.h" 3
+inline int
+vprintf (__const char *__restrict __fmt, __gnuc_va_list __arg)
+{
+  return vfprintf (stdout, __fmt, __arg);
+}
+
+
+inline int
+getchar (void)
+{
+  return _IO_getc (stdin);
+}
+
+
+
+
+inline int
+getc_unlocked (FILE *__fp)
+{
+  return (__builtin_expect ((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end, 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
+}
+
+
+inline int
+getchar_unlocked (void)
+{
+  return (__builtin_expect ((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end, 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
+}
+
+
+
+
+inline int
+putchar (int __c)
+{
+  return _IO_putc (__c, stdout);
+}
+
+
+
+
+inline int
+fputc_unlocked (int __c, FILE *__stream)
+{
+  return (__builtin_expect ((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end, 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
+}
+
+
+
+
+
+inline int
+putc_unlocked (int __c, FILE *__stream)
+{
+  return (__builtin_expect ((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end, 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
+}
+
+
+inline int
+putchar_unlocked (int __c)
+{
+  return (__builtin_expect ((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end, 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
+}
+
+
+
+
+
+inline __ssize_t
+getline (char **__lineptr, size_t *__n, FILE *__stream)
+{
+  return __getdelim (__lineptr, __n, '\n', __stream);
+}
+
+
+
+
+
+inline int
+feof_unlocked (FILE *__stream) throw ()
+{
+  return (((__stream)->_flags & 0x10) != 0);
+}
+
+
+inline int
+ferror_unlocked (FILE *__stream) throw ()
+{
+  return (((__stream)->_flags & 0x20) != 0);
+}
+# 829 "/nexbyte/server/include/stdio.h" 2 3
+
+
+
+
+
+}
+# 47 "/nexbyte/server/include/js/jshash.h" 2
+
+
+
+extern "C" {
+
+typedef uint32 JSHashNumber;
+typedef struct JSHashEntry JSHashEntry;
+typedef struct JSHashTable JSHashTable;
+
+
+
+
+typedef JSHashNumber (* JSHashFunction)(const void *key);
+typedef intN (* JSHashComparator)(const void *v1, const void *v2);
+typedef intN (* JSHashEnumerator)(JSHashEntry *he, intN i, void *arg);
+
+
+
+
+
+
+
+typedef struct JSHashAllocOps {
+    void * (*allocTable)(void *pool, size_t size);
+    void (*freeTable)(void *pool, void *item);
+    JSHashEntry * (*allocEntry)(void *pool, const void *key);
+    void (*freeEntry)(void *pool, JSHashEntry *he, uintN flag);
+} JSHashAllocOps;
+
+
+
+
+struct JSHashEntry {
+    JSHashEntry *next;
+    JSHashNumber keyHash;
+    const void *key;
+    void *value;
+};
+
+struct JSHashTable {
+    JSHashEntry **buckets;
+    uint32 nentries;
+    uint32 shift;
+    JSHashFunction keyHash;
+    JSHashComparator keyCompare;
+    JSHashComparator valueCompare;
+    JSHashAllocOps *allocOps;
+    void *allocPool;
+
+
+
+
+
+
+};
+
+
+
+
+
+extern JSHashTable *
+JS_NewHashTable(uint32 n, JSHashFunction keyHash,
+                JSHashComparator keyCompare, JSHashComparator valueCompare,
+                JSHashAllocOps *allocOps, void *allocPool);
+
+extern void
+JS_HashTableDestroy(JSHashTable *ht);
+
+
+extern JSHashEntry **
+JS_HashTableRawLookup(JSHashTable *ht, JSHashNumber keyHash, const void *key);
+
+extern JSHashEntry *
+JS_HashTableRawAdd(JSHashTable *ht, JSHashEntry **hep, JSHashNumber keyHash,
+                   const void *key, void *value);
+
+extern void
+JS_HashTableRawRemove(JSHashTable *ht, JSHashEntry **hep, JSHashEntry *he);
+
+
+extern JSHashEntry *
+JS_HashTableAdd(JSHashTable *ht, const void *key, void *value);
+
+extern JSBool
+JS_HashTableRemove(JSHashTable *ht, const void *key);
+
+extern intN
+JS_HashTableEnumerateEntries(JSHashTable *ht, JSHashEnumerator f, void *arg);
+
+extern void *
+JS_HashTableLookup(JSHashTable *ht, const void *key);
+
+extern intN
+JS_HashTableDump(JSHashTable *ht, JSHashEnumerator dump, FILE *fp);
+
+
+extern JSHashNumber
+JS_HashString(const void *key);
+
+
+extern intN
+JS_CompareValues(const void *v1, const void *v2);
+
+}
+# 48 "/nexbyte/server/include/js/jsatom.h" 2
+# 1 "/nexbyte/server/include/js/jsapi.h" 1
+# 53 "/nexbyte/server/include/js/jsapi.h"
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 54 "/nexbyte/server/include/js/jsapi.h" 2
+
+
+
+extern "C" {
+# 173 "/nexbyte/server/include/js/jsapi.h"
+extern int64
+
+JS_Now(void);
+
+
+
+
+
+extern jsval
+JS_GetNaNValue(JSContext *cx);
+
+extern jsval
+JS_GetNegativeInfinityValue(JSContext *cx);
+
+extern jsval
+JS_GetPositiveInfinityValue(JSContext *cx);
+
+extern jsval
+JS_GetEmptyStringValue(JSContext *cx);
+# 226 "/nexbyte/server/include/js/jsapi.h"
+extern JSBool
+JS_ConvertArguments(JSContext *cx, uintN argc, jsval *argv, const char *format,
+                    ...);
+# 246 "/nexbyte/server/include/js/jsapi.h"
+extern jsval *
+JS_PushArguments(JSContext *cx, void **markp, const char *format, ...);
+
+
+
+
+
+
+extern void
+JS_PopArguments(JSContext *cx, void *mark);
+# 307 "/nexbyte/server/include/js/jsapi.h"
+extern JSBool
+JS_ConvertValue(JSContext *cx, jsval v, JSType type, jsval *vp);
+
+extern JSBool
+JS_ValueToObject(JSContext *cx, jsval v, JSObject **objp);
+
+extern JSFunction *
+JS_ValueToFunction(JSContext *cx, jsval v);
+
+extern JSFunction *
+JS_ValueToConstructor(JSContext *cx, jsval v);
+
+extern JSString *
+JS_ValueToString(JSContext *cx, jsval v);
+
+extern JSBool
+JS_ValueToNumber(JSContext *cx, jsval v, jsdouble *dp);
+
+
+
+
+
+extern JSBool
+JS_ValueToECMAInt32(JSContext *cx, jsval v, int32 *ip);
+
+
+
+
+
+extern JSBool
+JS_ValueToECMAUint32(JSContext *cx, jsval v, uint32 *ip);
+
+
+
+
+
+
+extern JSBool
+JS_ValueToInt32(JSContext *cx, jsval v, int32 *ip);
+
+
+
+
+extern JSBool
+JS_ValueToUint16(JSContext *cx, jsval v, uint16 *ip);
+
+extern JSBool
+JS_ValueToBoolean(JSContext *cx, jsval v, JSBool *bp);
+
+extern JSType
+JS_TypeOfValue(JSContext *cx, jsval v);
+
+extern const char *
+JS_GetTypeName(JSContext *cx, JSType type);
+# 372 "/nexbyte/server/include/js/jsapi.h"
+extern JSRuntime *
+JS_Init(uint32 maxbytes);
+
+extern void
+JS_Finish(JSRuntime *rt);
+
+extern void
+JS_ShutDown(void);
+
+ void *
+JS_GetRuntimePrivate(JSRuntime *rt);
+
+ void
+JS_SetRuntimePrivate(JSRuntime *rt, void *data);
+# 407 "/nexbyte/server/include/js/jsapi.h"
+extern void
+JS_Lock(JSRuntime *rt);
+
+extern void
+JS_Unlock(JSRuntime *rt);
+
+extern JSContext *
+JS_NewContext(JSRuntime *rt, size_t stackChunkSize);
+
+extern void
+JS_DestroyContext(JSContext *cx);
+
+extern void
+JS_DestroyContextNoGC(JSContext *cx);
+
+extern void
+JS_DestroyContextMaybeGC(JSContext *cx);
+
+extern void *
+JS_GetContextPrivate(JSContext *cx);
+
+extern void
+JS_SetContextPrivate(JSContext *cx, void *data);
+
+extern JSRuntime *
+JS_GetRuntime(JSContext *cx);
+
+extern JSContext *
+JS_ContextIterator(JSRuntime *rt, JSContext **iterp);
+
+extern JSVersion
+JS_GetVersion(JSContext *cx);
+
+extern JSVersion
+JS_SetVersion(JSContext *cx, JSVersion version);
+
+extern const char *
+JS_VersionToString(JSVersion version);
+
+extern JSVersion
+JS_StringToVersion(const char *string);
+# 486 "/nexbyte/server/include/js/jsapi.h"
+extern uint32
+JS_GetOptions(JSContext *cx);
+
+extern uint32
+JS_SetOptions(JSContext *cx, uint32 options);
+
+extern uint32
+JS_ToggleOptions(JSContext *cx, uint32 options);
+
+extern const char *
+JS_GetImplementationVersion(void);
+
+extern JSObject *
+JS_GetGlobalObject(JSContext *cx);
+
+extern void
+JS_SetGlobalObject(JSContext *cx, JSObject *obj);
+# 511 "/nexbyte/server/include/js/jsapi.h"
+extern JSBool
+JS_InitStandardClasses(JSContext *cx, JSObject *obj);
+# 527 "/nexbyte/server/include/js/jsapi.h"
+extern JSBool
+JS_ResolveStandardClass(JSContext *cx, JSObject *obj, jsval id,
+                        JSBool *resolved);
+
+extern JSBool
+JS_EnumerateStandardClasses(JSContext *cx, JSObject *obj);
+
+
+
+
+
+
+extern JSIdArray *
+JS_EnumerateResolvedStandardClasses(JSContext *cx, JSObject *obj,
+                                    JSIdArray *ida);
+
+extern JSObject *
+JS_GetScopeChain(JSContext *cx);
+
+extern void *
+JS_malloc(JSContext *cx, size_t nbytes);
+
+extern void *
+JS_realloc(JSContext *cx, void *p, size_t nbytes);
+
+extern void
+JS_free(JSContext *cx, void *p);
+
+extern char *
+JS_strdup(JSContext *cx, const char *s);
+
+extern jsdouble *
+JS_NewDouble(JSContext *cx, jsdouble d);
+
+extern JSBool
+JS_NewDoubleValue(JSContext *cx, jsdouble d, jsval *rval);
+
+extern JSBool
+JS_NewNumberValue(JSContext *cx, jsdouble d, jsval *rval);
+# 583 "/nexbyte/server/include/js/jsapi.h"
+extern JSBool
+JS_AddRoot(JSContext *cx, void *rp);
+
+
+
+
+
+
+
+extern JSBool
+JS_AddNamedRoot(JSContext *cx, void *rp, const char *name);
+
+extern JSBool
+JS_AddNamedRootRT(JSRuntime *rt, void *rp, const char *name);
+
+extern JSBool
+JS_RemoveRoot(JSContext *cx, void *rp);
+
+extern JSBool
+JS_RemoveRootRT(JSRuntime *rt, void *rp);
+# 623 "/nexbyte/server/include/js/jsapi.h"
+extern void
+JS_ClearNewbornRoots(JSContext *cx);
+# 667 "/nexbyte/server/include/js/jsapi.h"
+extern JSBool
+JS_EnterLocalRootScope(JSContext *cx);
+
+extern void
+JS_LeaveLocalRootScope(JSContext *cx);
+
+extern void
+JS_ForgetLocalRoot(JSContext *cx, void *thing);
+# 705 "/nexbyte/server/include/js/jsapi.h"
+typedef intN
+(* JSGCRootMapFun)(void *rp, const char *name, void *data);
+
+extern uint32
+JS_MapGCRoots(JSRuntime *rt, JSGCRootMapFun map, void *data);
+
+extern JSBool
+JS_LockGCThing(JSContext *cx, void *thing);
+
+extern JSBool
+JS_LockGCThingRT(JSRuntime *rt, void *thing);
+
+extern JSBool
+JS_UnlockGCThing(JSContext *cx, void *thing);
+
+extern JSBool
+JS_UnlockGCThingRT(JSRuntime *rt, void *thing);
+# 736 "/nexbyte/server/include/js/jsapi.h"
+extern void
+JS_MarkGCThing(JSContext *cx, void *thing, const char *name, void *arg);
+
+extern void
+JS_GC(JSContext *cx);
+
+extern void
+JS_MaybeGC(JSContext *cx);
+
+extern JSGCCallback
+JS_SetGCCallback(JSContext *cx, JSGCCallback cb);
+
+extern JSGCCallback
+JS_SetGCCallbackRT(JSRuntime *rt, JSGCCallback cb);
+
+extern JSBool
+JS_IsAboutToBeFinalized(JSContext *cx, void *thing);
+# 766 "/nexbyte/server/include/js/jsapi.h"
+extern intN
+JS_AddExternalStringFinalizer(JSStringFinalizeOp finalizer);
+# 782 "/nexbyte/server/include/js/jsapi.h"
+extern intN
+JS_RemoveExternalStringFinalizer(JSStringFinalizeOp finalizer);
+
+
+
+
+
+
+extern JSString *
+JS_NewExternalString(JSContext *cx, jschar *chars, size_t length, intN type);
+
+
+
+
+
+extern intN
+JS_GetExternalStringGCType(JSRuntime *rt, JSString *str);
+
+
+
+
+
+
+extern void
+JS_SetThreadStackLimit(JSContext *cx, jsuword limitAddr);
+# 815 "/nexbyte/server/include/js/jsapi.h"
+struct JSClass {
+    const char *name;
+    uint32 flags;
+
+
+    JSPropertyOp addProperty;
+    JSPropertyOp delProperty;
+    JSPropertyOp getProperty;
+    JSPropertyOp setProperty;
+    JSEnumerateOp enumerate;
+    JSResolveOp resolve;
+    JSConvertOp convert;
+    JSFinalizeOp finalize;
+
+
+    JSGetObjectOps getObjectOps;
+    JSCheckAccessOp checkAccess;
+    JSNative call;
+    JSNative construct;
+    JSXDRObjectOp xdrObject;
+    JSHasInstanceOp hasInstance;
+    JSMarkOp mark;
+    JSReserveSlotsOp reserveSlots;
+};
+
+struct JSExtendedClass {
+    JSClass base;
+    JSEqualityOp equality;
+    JSObjectOp outerObject;
+    JSObjectOp innerObject;
+    jsword reserved0;
+    jsword reserved1;
+    jsword reserved2;
+    jsword reserved3;
+    jsword reserved4;
+};
+# 890 "/nexbyte/server/include/js/jsapi.h"
+struct JSObjectOps {
+
+    JSNewObjectMapOp newObjectMap;
+    JSObjectMapOp destroyObjectMap;
+    JSLookupPropOp lookupProperty;
+    JSDefinePropOp defineProperty;
+    JSPropertyIdOp getProperty;
+    JSPropertyIdOp setProperty;
+    JSAttributesOp getAttributes;
+    JSAttributesOp setAttributes;
+    JSPropertyIdOp deleteProperty;
+    JSConvertOp defaultValue;
+    JSNewEnumerateOp enumerate;
+    JSCheckAccessIdOp checkAccess;
+
+
+    JSObjectOp thisObject;
+    JSPropertyRefOp dropProperty;
+    JSNative call;
+    JSNative construct;
+    JSXDRObjectOp xdrObject;
+    JSHasInstanceOp hasInstance;
+    JSSetObjectSlotOp setProto;
+    JSSetObjectSlotOp setParent;
+    JSMarkOp mark;
+    JSFinalizeOp clear;
+    JSGetRequiredSlotOp getRequiredSlot;
+    JSSetRequiredSlotOp setRequiredSlot;
+};
+
+struct JSXMLObjectOps {
+    JSObjectOps base;
+    JSGetMethodOp getMethod;
+    JSSetMethodOp setMethod;
+    JSEnumerateValuesOp enumerateValues;
+    JSEqualityOp equality;
+    JSConcatenateOp concatenate;
+};
+# 939 "/nexbyte/server/include/js/jsapi.h"
+struct JSProperty {
+    jsid id;
+};
+
+struct JSIdArray {
+    jsint length;
+    jsid vector[1];
+};
+
+extern void
+JS_DestroyIdArray(JSContext *cx, JSIdArray *ida);
+
+extern JSBool
+JS_ValueToId(JSContext *cx, jsval v, jsid *idp);
+
+extern JSBool
+JS_IdToValue(JSContext *cx, jsid id, jsval *vp);
+# 973 "/nexbyte/server/include/js/jsapi.h"
+extern JSBool
+JS_PropertyStub(JSContext *cx, JSObject *obj, jsval id, jsval *vp);
+
+extern JSBool
+JS_EnumerateStub(JSContext *cx, JSObject *obj);
+
+extern JSBool
+JS_ResolveStub(JSContext *cx, JSObject *obj, jsval id);
+
+extern JSBool
+JS_ConvertStub(JSContext *cx, JSObject *obj, JSType type, jsval *vp);
+
+extern void
+JS_FinalizeStub(JSContext *cx, JSObject *obj);
+
+struct JSConstDoubleSpec {
+    jsdouble dval;
+    const char *name;
+    uint8 flags;
+    uint8 spare[3];
+};
+
+
+
+
+
+
+struct JSPropertySpec {
+    const char *name;
+    int8 tinyid;
+    uint8 flags;
+    JSPropertyOp getter;
+    JSPropertyOp setter;
+};
+
+struct JSFunctionSpec {
+    const char *name;
+    JSNative call;
+    uint8 nargs;
+    uint8 flags;
+    uint16 extra;
+};
+
+extern JSObject *
+JS_InitClass(JSContext *cx, JSObject *obj, JSObject *parent_proto,
+             JSClass *clasp, JSNative constructor, uintN nargs,
+             JSPropertySpec *ps, JSFunctionSpec *fs,
+             JSPropertySpec *static_ps, JSFunctionSpec *static_fs);
+
+
+
+
+
+
+
+extern JSClass *
+JS_GetClass(JSObject *obj);
+
+
+
+
+extern JSBool
+JS_InstanceOf(JSContext *cx, JSObject *obj, JSClass *clasp, jsval *argv);
+
+extern JSBool
+JS_HasInstance(JSContext *cx, JSObject *obj, jsval v, JSBool *bp);
+
+extern void *
+JS_GetPrivate(JSContext *cx, JSObject *obj);
+
+extern JSBool
+JS_SetPrivate(JSContext *cx, JSObject *obj, void *data);
+
+extern void *
+JS_GetInstancePrivate(JSContext *cx, JSObject *obj, JSClass *clasp,
+                      jsval *argv);
+
+extern JSObject *
+JS_GetPrototype(JSContext *cx, JSObject *obj);
+
+extern JSBool
+JS_SetPrototype(JSContext *cx, JSObject *obj, JSObject *proto);
+
+extern JSObject *
+JS_GetParent(JSContext *cx, JSObject *obj);
+
+extern JSBool
+JS_SetParent(JSContext *cx, JSObject *obj, JSObject *parent);
+
+extern JSObject *
+JS_GetConstructor(JSContext *cx, JSObject *proto);
+
+
+
+
+
+
+extern JSBool
+JS_GetObjectId(JSContext *cx, JSObject *obj, jsid *idp);
+
+extern JSObject *
+JS_NewObject(JSContext *cx, JSClass *clasp, JSObject *proto, JSObject *parent);
+
+extern JSBool
+JS_SealObject(JSContext *cx, JSObject *obj, JSBool deep);
+
+extern JSObject *
+JS_ConstructObject(JSContext *cx, JSClass *clasp, JSObject *proto,
+                   JSObject *parent);
+
+extern JSObject *
+JS_ConstructObjectWithArguments(JSContext *cx, JSClass *clasp, JSObject *proto,
+                                JSObject *parent, uintN argc, jsval *argv);
+
+extern JSObject *
+JS_DefineObject(JSContext *cx, JSObject *obj, const char *name, JSClass *clasp,
+                JSObject *proto, uintN attrs);
+
+extern JSBool
+JS_DefineConstDoubles(JSContext *cx, JSObject *obj, JSConstDoubleSpec *cds);
+
+extern JSBool
+JS_DefineProperties(JSContext *cx, JSObject *obj, JSPropertySpec *ps);
+
+extern JSBool
+JS_DefineProperty(JSContext *cx, JSObject *obj, const char *name, jsval value,
+                  JSPropertyOp getter, JSPropertyOp setter, uintN attrs);
+
+
+
+
+
+
+
+extern JSBool
+JS_GetPropertyAttributes(JSContext *cx, JSObject *obj, const char *name,
+                         uintN *attrsp, JSBool *foundp);
+
+
+
+
+
+
+extern JSBool
+JS_GetPropertyAttrsGetterAndSetter(JSContext *cx, JSObject *obj,
+                                   const char *name,
+                                   uintN *attrsp, JSBool *foundp,
+                                   JSPropertyOp *getterp,
+                                   JSPropertyOp *setterp);
+
+
+
+
+
+
+
+extern JSBool
+JS_SetPropertyAttributes(JSContext *cx, JSObject *obj, const char *name,
+                         uintN attrs, JSBool *foundp);
+
+extern JSBool
+JS_DefinePropertyWithTinyId(JSContext *cx, JSObject *obj, const char *name,
+                            int8 tinyid, jsval value,
+                            JSPropertyOp getter, JSPropertyOp setter,
+                            uintN attrs);
+
+extern JSBool
+JS_AliasProperty(JSContext *cx, JSObject *obj, const char *name,
+                 const char *alias);
+
+extern JSBool
+JS_HasProperty(JSContext *cx, JSObject *obj, const char *name, JSBool *foundp);
+
+extern JSBool
+JS_LookupProperty(JSContext *cx, JSObject *obj, const char *name, jsval *vp);
+
+extern JSBool
+JS_LookupPropertyWithFlags(JSContext *cx, JSObject *obj, const char *name,
+                           uintN flags, jsval *vp);
+
+extern JSBool
+JS_GetProperty(JSContext *cx, JSObject *obj, const char *name, jsval *vp);
+
+extern JSBool
+JS_GetMethod(JSContext *cx, JSObject *obj, const char *name, JSObject **objp,
+             jsval *vp);
+
+extern JSBool
+JS_SetProperty(JSContext *cx, JSObject *obj, const char *name, jsval *vp);
+
+extern JSBool
+JS_DeleteProperty(JSContext *cx, JSObject *obj, const char *name);
+
+extern JSBool
+JS_DeleteProperty2(JSContext *cx, JSObject *obj, const char *name,
+                   jsval *rval);
+
+extern JSBool
+JS_DefineUCProperty(JSContext *cx, JSObject *obj,
+                    const jschar *name, size_t namelen, jsval value,
+                    JSPropertyOp getter, JSPropertyOp setter,
+                    uintN attrs);
+
+
+
+
+
+
+
+extern JSBool
+JS_GetUCPropertyAttributes(JSContext *cx, JSObject *obj,
+                           const jschar *name, size_t namelen,
+                           uintN *attrsp, JSBool *foundp);
+
+
+
+
+
+
+extern JSBool
+JS_GetUCPropertyAttrsGetterAndSetter(JSContext *cx, JSObject *obj,
+                                     const jschar *name, size_t namelen,
+                                     uintN *attrsp, JSBool *foundp,
+                                     JSPropertyOp *getterp,
+                                     JSPropertyOp *setterp);
+
+
+
+
+
+
+
+extern JSBool
+JS_SetUCPropertyAttributes(JSContext *cx, JSObject *obj,
+                           const jschar *name, size_t namelen,
+                           uintN attrs, JSBool *foundp);
+
+
+extern JSBool
+JS_DefineUCPropertyWithTinyId(JSContext *cx, JSObject *obj,
+                              const jschar *name, size_t namelen,
+                              int8 tinyid, jsval value,
+                              JSPropertyOp getter, JSPropertyOp setter,
+                              uintN attrs);
+
+extern JSBool
+JS_HasUCProperty(JSContext *cx, JSObject *obj,
+                 const jschar *name, size_t namelen,
+                 JSBool *vp);
+
+extern JSBool
+JS_LookupUCProperty(JSContext *cx, JSObject *obj,
+                    const jschar *name, size_t namelen,
+                    jsval *vp);
+
+extern JSBool
+JS_GetUCProperty(JSContext *cx, JSObject *obj,
+                 const jschar *name, size_t namelen,
+                 jsval *vp);
+
+extern JSBool
+JS_SetUCProperty(JSContext *cx, JSObject *obj,
+                 const jschar *name, size_t namelen,
+                 jsval *vp);
+
+extern JSBool
+JS_DeleteUCProperty2(JSContext *cx, JSObject *obj,
+                     const jschar *name, size_t namelen,
+                     jsval *rval);
+
+extern JSObject *
+JS_NewArrayObject(JSContext *cx, jsint length, jsval *vector);
+
+extern JSBool
+JS_IsArrayObject(JSContext *cx, JSObject *obj);
+
+extern JSBool
+JS_GetArrayLength(JSContext *cx, JSObject *obj, jsuint *lengthp);
+
+extern JSBool
+JS_SetArrayLength(JSContext *cx, JSObject *obj, jsuint length);
+
+extern JSBool
+JS_HasArrayLength(JSContext *cx, JSObject *obj, jsuint *lengthp);
+
+extern JSBool
+JS_DefineElement(JSContext *cx, JSObject *obj, jsint index, jsval value,
+                 JSPropertyOp getter, JSPropertyOp setter, uintN attrs);
+
+extern JSBool
+JS_AliasElement(JSContext *cx, JSObject *obj, const char *name, jsint alias);
+
+extern JSBool
+JS_HasElement(JSContext *cx, JSObject *obj, jsint index, JSBool *foundp);
+
+extern JSBool
+JS_LookupElement(JSContext *cx, JSObject *obj, jsint index, jsval *vp);
+
+extern JSBool
+JS_GetElement(JSContext *cx, JSObject *obj, jsint index, jsval *vp);
+
+extern JSBool
+JS_SetElement(JSContext *cx, JSObject *obj, jsint index, jsval *vp);
+
+extern JSBool
+JS_DeleteElement(JSContext *cx, JSObject *obj, jsint index);
+
+extern JSBool
+JS_DeleteElement2(JSContext *cx, JSObject *obj, jsint index, jsval *rval);
+
+extern void
+JS_ClearScope(JSContext *cx, JSObject *obj);
+
+extern JSIdArray *
+JS_Enumerate(JSContext *cx, JSObject *obj);
+
+
+
+
+
+
+extern JSObject *
+JS_NewPropertyIterator(JSContext *cx, JSObject *obj);
+
+
+
+
+
+
+extern JSBool
+JS_NextProperty(JSContext *cx, JSObject *iterobj, jsid *idp);
+
+extern JSBool
+JS_CheckAccess(JSContext *cx, JSObject *obj, jsid id, JSAccessMode mode,
+               jsval *vp, uintN *attrsp);
+
+extern JSCheckAccessOp
+JS_SetCheckObjectAccessCallback(JSRuntime *rt, JSCheckAccessOp acb);
+
+extern JSBool
+JS_GetReservedSlot(JSContext *cx, JSObject *obj, uint32 index, jsval *vp);
+
+extern JSBool
+JS_SetReservedSlot(JSContext *cx, JSObject *obj, uint32 index, jsval v);
+
+
+
+
+
+
+struct JSPrincipals {
+    char *codebase;
+
+
+    void * (* getPrincipalArray)(JSContext *cx, JSPrincipals *);
+    JSBool (* globalPrivilegesEnabled)(JSContext *cx, JSPrincipals *);
+
+
+    jsrefcount refcount;
+
+    void (* destroy)(JSContext *cx, JSPrincipals *);
+    JSBool (* subsume)(JSPrincipals *, JSPrincipals *);
+};
+# 1355 "/nexbyte/server/include/js/jsapi.h"
+extern JSPrincipalsTranscoder
+JS_SetPrincipalsTranscoder(JSRuntime *rt, JSPrincipalsTranscoder px);
+
+extern JSObjectPrincipalsFinder
+JS_SetObjectPrincipalsFinder(JSRuntime *rt, JSObjectPrincipalsFinder fop);
+
+
+
+
+
+
+extern JSFunction *
+JS_NewFunction(JSContext *cx, JSNative call, uintN nargs, uintN flags,
+               JSObject *parent, const char *name);
+
+extern JSObject *
+JS_GetFunctionObject(JSFunction *fun);
+
+
+
+
+
+extern const char *
+JS_GetFunctionName(JSFunction *fun);
+# 1390 "/nexbyte/server/include/js/jsapi.h"
+extern JSString *
+JS_GetFunctionId(JSFunction *fun);
+
+
+
+
+extern uintN
+JS_GetFunctionFlags(JSFunction *fun);
+
+
+
+
+
+
+
+extern JSBool
+JS_ObjectIsFunction(JSContext *cx, JSObject *obj);
+
+extern JSBool
+JS_DefineFunctions(JSContext *cx, JSObject *obj, JSFunctionSpec *fs);
+
+extern JSFunction *
+JS_DefineFunction(JSContext *cx, JSObject *obj, const char *name, JSNative call,
+                  uintN nargs, uintN attrs);
+
+extern JSFunction *
+JS_DefineUCFunction(JSContext *cx, JSObject *obj,
+                    const jschar *name, size_t namelen, JSNative call,
+                    uintN nargs, uintN attrs);
+
+extern JSObject *
+JS_CloneFunctionObject(JSContext *cx, JSObject *funobj, JSObject *parent);
+# 1430 "/nexbyte/server/include/js/jsapi.h"
+extern JSBool
+JS_BufferIsCompilableUnit(JSContext *cx, JSObject *obj,
+                          const char *bytes, size_t length);
+# 1441 "/nexbyte/server/include/js/jsapi.h"
+extern JSScript *
+JS_CompileScript(JSContext *cx, JSObject *obj,
+                 const char *bytes, size_t length,
+                 const char *filename, uintN lineno);
+
+extern JSScript *
+JS_CompileScriptForPrincipals(JSContext *cx, JSObject *obj,
+                              JSPrincipals *principals,
+                              const char *bytes, size_t length,
+                              const char *filename, uintN lineno);
+
+extern JSScript *
+JS_CompileUCScript(JSContext *cx, JSObject *obj,
+                   const jschar *chars, size_t length,
+                   const char *filename, uintN lineno);
+
+extern JSScript *
+JS_CompileUCScriptForPrincipals(JSContext *cx, JSObject *obj,
+                                JSPrincipals *principals,
+                                const jschar *chars, size_t length,
+                                const char *filename, uintN lineno);
+
+extern JSScript *
+JS_CompileFile(JSContext *cx, JSObject *obj, const char *filename);
+
+extern JSScript *
+JS_CompileFileHandle(JSContext *cx, JSObject *obj, const char *filename,
+                     FILE *fh);
+
+extern JSScript *
+JS_CompileFileHandleForPrincipals(JSContext *cx, JSObject *obj,
+                                  const char *filename, FILE *fh,
+                                  JSPrincipals *principals);
+# 1491 "/nexbyte/server/include/js/jsapi.h"
+extern JSObject *
+JS_NewScriptObject(JSContext *cx, JSScript *script);
+
+
+
+
+
+extern JSObject *
+JS_GetScriptObject(JSScript *script);
+
+extern void
+JS_DestroyScript(JSContext *cx, JSScript *script);
+
+extern JSFunction *
+JS_CompileFunction(JSContext *cx, JSObject *obj, const char *name,
+                   uintN nargs, const char **argnames,
+                   const char *bytes, size_t length,
+                   const char *filename, uintN lineno);
+
+extern JSFunction *
+JS_CompileFunctionForPrincipals(JSContext *cx, JSObject *obj,
+                                JSPrincipals *principals, const char *name,
+                                uintN nargs, const char **argnames,
+                                const char *bytes, size_t length,
+                                const char *filename, uintN lineno);
+
+extern JSFunction *
+JS_CompileUCFunction(JSContext *cx, JSObject *obj, const char *name,
+                     uintN nargs, const char **argnames,
+                     const jschar *chars, size_t length,
+                     const char *filename, uintN lineno);
+
+extern JSFunction *
+JS_CompileUCFunctionForPrincipals(JSContext *cx, JSObject *obj,
+                                  JSPrincipals *principals, const char *name,
+                                  uintN nargs, const char **argnames,
+                                  const jschar *chars, size_t length,
+                                  const char *filename, uintN lineno);
+
+extern JSString *
+JS_DecompileScript(JSContext *cx, JSScript *script, const char *name,
+                   uintN indent);
+
+
+
+
+
+
+
+extern JSString *
+JS_DecompileFunction(JSContext *cx, JSFunction *fun, uintN indent);
+
+extern JSString *
+JS_DecompileFunctionBody(JSContext *cx, JSFunction *fun, uintN indent);
+# 1581 "/nexbyte/server/include/js/jsapi.h"
+extern JSBool
+JS_ExecuteScript(JSContext *cx, JSObject *obj, JSScript *script, jsval *rval);
+
+
+
+
+
+typedef enum JSExecPart { JSEXEC_PROLOG, JSEXEC_MAIN } JSExecPart;
+
+extern JSBool
+JS_ExecuteScriptPart(JSContext *cx, JSObject *obj, JSScript *script,
+                     JSExecPart part, jsval *rval);
+
+extern JSBool
+JS_EvaluateScript(JSContext *cx, JSObject *obj,
+                  const char *bytes, uintN length,
+                  const char *filename, uintN lineno,
+                  jsval *rval);
+
+extern JSBool
+JS_EvaluateScriptForPrincipals(JSContext *cx, JSObject *obj,
+                               JSPrincipals *principals,
+                               const char *bytes, uintN length,
+                               const char *filename, uintN lineno,
+                               jsval *rval);
+
+extern JSBool
+JS_EvaluateUCScript(JSContext *cx, JSObject *obj,
+                    const jschar *chars, uintN length,
+                    const char *filename, uintN lineno,
+                    jsval *rval);
+
+extern JSBool
+JS_EvaluateUCScriptForPrincipals(JSContext *cx, JSObject *obj,
+                                 JSPrincipals *principals,
+                                 const jschar *chars, uintN length,
+                                 const char *filename, uintN lineno,
+                                 jsval *rval);
+
+extern JSBool
+JS_CallFunction(JSContext *cx, JSObject *obj, JSFunction *fun, uintN argc,
+                jsval *argv, jsval *rval);
+
+extern JSBool
+JS_CallFunctionName(JSContext *cx, JSObject *obj, const char *name, uintN argc,
+                    jsval *argv, jsval *rval);
+
+extern JSBool
+JS_CallFunctionValue(JSContext *cx, JSObject *obj, jsval fval, uintN argc,
+                     jsval *argv, jsval *rval);
+
+extern JSBranchCallback
+JS_SetBranchCallback(JSContext *cx, JSBranchCallback cb);
+
+extern JSBool
+JS_IsRunning(JSContext *cx);
+
+extern JSBool
+JS_IsConstructing(JSContext *cx);
+
+
+
+
+
+
+extern JSBool
+JS_IsAssigning(JSContext *cx);
+# 1657 "/nexbyte/server/include/js/jsapi.h"
+extern void
+JS_SetCallReturnValue2(JSContext *cx, jsval v);
+# 1671 "/nexbyte/server/include/js/jsapi.h"
+extern JSString *
+JS_NewString(JSContext *cx, char *bytes, size_t length);
+
+extern JSString *
+JS_NewStringCopyN(JSContext *cx, const char *s, size_t n);
+
+extern JSString *
+JS_NewStringCopyZ(JSContext *cx, const char *s);
+
+extern JSString *
+JS_InternString(JSContext *cx, const char *s);
+
+extern JSString *
+JS_NewUCString(JSContext *cx, jschar *chars, size_t length);
+
+extern JSString *
+JS_NewUCStringCopyN(JSContext *cx, const jschar *s, size_t n);
+
+extern JSString *
+JS_NewUCStringCopyZ(JSContext *cx, const jschar *s);
+
+extern JSString *
+JS_InternUCStringN(JSContext *cx, const jschar *s, size_t length);
+
+extern JSString *
+JS_InternUCString(JSContext *cx, const jschar *s);
+
+extern char *
+JS_GetStringBytes(JSString *str);
+
+extern jschar *
+JS_GetStringChars(JSString *str);
+
+extern size_t
+JS_GetStringLength(JSString *str);
+
+extern intN
+JS_CompareStrings(JSString *str1, JSString *str2);
+# 1729 "/nexbyte/server/include/js/jsapi.h"
+extern JSString *
+JS_NewGrowableString(JSContext *cx, jschar *chars, size_t length);
+
+
+
+
+
+
+extern JSString *
+JS_NewDependentString(JSContext *cx, JSString *str, size_t start,
+                      size_t length);
+# 1748 "/nexbyte/server/include/js/jsapi.h"
+extern JSString *
+JS_ConcatStrings(JSContext *cx, JSString *left, JSString *right);
+
+
+
+
+
+extern const jschar *
+JS_UndependString(JSContext *cx, JSString *str);
+
+
+
+
+
+extern JSBool
+JS_MakeStringImmutable(JSContext *cx, JSString *str);
+
+
+
+
+
+
+ JSBool
+
+JS_CStringsAreUTF8(void);
+# 1799 "/nexbyte/server/include/js/jsapi.h"
+ JSBool
+JS_EncodeCharacters(JSContext *cx, const jschar *src, size_t srclen, char *dst,
+                    size_t *dstlenp);
+
+ JSBool
+JS_DecodeBytes(JSContext *cx, const char *src, size_t srclen, jschar *dst,
+               size_t *dstlenp);
+
+
+
+
+
+
+struct JSLocaleCallbacks {
+    JSLocaleToUpperCase localeToUpperCase;
+    JSLocaleToLowerCase localeToLowerCase;
+    JSLocaleCompare localeCompare;
+    JSLocaleToUnicode localeToUnicode;
+    JSErrorCallback localeGetErrorMessage;
+};
+
+
+
+
+
+extern void
+JS_SetLocaleCallbacks(JSContext *cx, JSLocaleCallbacks *callbacks);
+
+
+
+
+
+extern JSLocaleCallbacks *
+JS_GetLocaleCallbacks(JSContext *cx);
+# 1846 "/nexbyte/server/include/js/jsapi.h"
+extern void
+JS_ReportError(JSContext *cx, const char *format, ...);
+
+
+
+
+extern void
+JS_ReportErrorNumber(JSContext *cx, JSErrorCallback errorCallback,
+                     void *userRef, const uintN errorNumber, ...);
+
+
+
+
+extern void
+JS_ReportErrorNumberUC(JSContext *cx, JSErrorCallback errorCallback,
+                     void *userRef, const uintN errorNumber, ...);
+
+
+
+
+
+
+
+extern JSBool
+JS_ReportWarning(JSContext *cx, const char *format, ...);
+
+extern JSBool
+JS_ReportErrorFlagsAndNumber(JSContext *cx, uintN flags,
+                             JSErrorCallback errorCallback, void *userRef,
+                             const uintN errorNumber, ...);
+
+extern JSBool
+JS_ReportErrorFlagsAndNumberUC(JSContext *cx, uintN flags,
+                               JSErrorCallback errorCallback, void *userRef,
+                               const uintN errorNumber, ...);
+
+
+
+
+extern void
+JS_ReportOutOfMemory(JSContext *cx);
+
+struct JSErrorReport {
+    const char *filename;
+    uintN lineno;
+    const char *linebuf;
+    const char *tokenptr;
+    const jschar *uclinebuf;
+    const jschar *uctokenptr;
+    uintN flags;
+    uintN errorNumber;
+    const jschar *ucmessage;
+    const jschar **messageArgs;
+};
+# 1920 "/nexbyte/server/include/js/jsapi.h"
+extern JSErrorReporter
+JS_SetErrorReporter(JSContext *cx, JSErrorReporter er);
+# 1932 "/nexbyte/server/include/js/jsapi.h"
+extern JSObject *
+JS_NewRegExpObject(JSContext *cx, char *bytes, size_t length, uintN flags);
+
+extern JSObject *
+JS_NewUCRegExpObject(JSContext *cx, jschar *chars, size_t length, uintN flags);
+
+extern void
+JS_SetRegExpInput(JSContext *cx, JSString *input, JSBool multiline);
+
+extern void
+JS_ClearRegExpStatics(JSContext *cx);
+
+extern void
+JS_ClearRegExpRoots(JSContext *cx);
+
+
+
+
+
+extern JSBool
+JS_IsExceptionPending(JSContext *cx);
+
+extern JSBool
+JS_GetPendingException(JSContext *cx, jsval *vp);
+
+extern void
+JS_SetPendingException(JSContext *cx, jsval v);
+
+extern void
+JS_ClearPendingException(JSContext *cx);
+
+extern JSBool
+JS_ReportPendingException(JSContext *cx);
+# 1977 "/nexbyte/server/include/js/jsapi.h"
+extern JSExceptionState *
+JS_SaveExceptionState(JSContext *cx);
+
+extern void
+JS_RestoreExceptionState(JSContext *cx, JSExceptionState *state);
+
+extern void
+JS_DropExceptionState(JSContext *cx, JSExceptionState *state);
+# 1993 "/nexbyte/server/include/js/jsapi.h"
+extern JSErrorReport *
+JS_ErrorFromException(JSContext *cx, jsval v);
+
+
+
+
+
+extern JSBool
+JS_ThrowReportedError(JSContext *cx, const char *message,
+                      JSErrorReport *reportp);
+# 2028 "/nexbyte/server/include/js/jsapi.h"
+}
+# 49 "/nexbyte/server/include/js/jsatom.h" 2
+
+
+
+
+
+
+
+extern "C" {
+# 65 "/nexbyte/server/include/js/jsatom.h"
+struct JSAtom {
+    JSHashEntry entry;
+
+    uint32 flags;
+    jsatomid number;
+};
+# 89 "/nexbyte/server/include/js/jsatom.h"
+extern const char *
+js_AtomToPrintableString(JSContext *cx, JSAtom *atom);
+
+
+
+
+struct JSAtomListElement {
+    JSHashEntry entry;
+};
+# 111 "/nexbyte/server/include/js/jsatom.h"
+struct JSAtomList {
+    JSAtomListElement *list;
+    JSHashTable *table;
+    jsuint count;
+};
+# 147 "/nexbyte/server/include/js/jsatom.h"
+struct JSAtomMap {
+    JSAtom **vector;
+    jsatomid length;
+};
+
+struct JSAtomState {
+    JSRuntime *runtime;
+    JSHashTable *table;
+    jsatomid number;
+    jsatomid liveAtoms;
+
+
+    JSAtom *emptyAtom;
+
+
+    JSAtom *typeAtoms[JSTYPE_LIMIT];
+    JSAtom *booleanAtoms[2];
+    JSAtom *nullAtom;
+
+
+    JSAtom *ArgumentsAtom;
+    JSAtom *ArrayAtom;
+    JSAtom *BooleanAtom;
+    JSAtom *CallAtom;
+    JSAtom *DateAtom;
+    JSAtom *ErrorAtom;
+    JSAtom *FunctionAtom;
+    JSAtom *MathAtom;
+    JSAtom *NamespaceAtom;
+    JSAtom *NumberAtom;
+    JSAtom *ObjectAtom;
+    JSAtom *QNameAtom;
+    JSAtom *RegExpAtom;
+    JSAtom *ScriptAtom;
+    JSAtom *StringAtom;
+    JSAtom *XMLAtom;
+    JSAtom *FileAtom;
+    JSAtom *anonymousAtom;
+    JSAtom *argumentsAtom;
+    JSAtom *arityAtom;
+    JSAtom *calleeAtom;
+    JSAtom *callerAtom;
+    JSAtom *classPrototypeAtom;
+    JSAtom *constructorAtom;
+    JSAtom *countAtom;
+    JSAtom *eachAtom;
+    JSAtom *etagoAtom;
+    JSAtom *evalAtom;
+    JSAtom *getAtom;
+    JSAtom *getterAtom;
+    JSAtom *indexAtom;
+    JSAtom *inputAtom;
+    JSAtom *lengthAtom;
+    JSAtom *nameAtom;
+    JSAtom *namespaceAtom;
+    JSAtom *noSuchMethodAtom;
+    JSAtom *parentAtom;
+    JSAtom *protoAtom;
+    JSAtom *ptagcAtom;
+    JSAtom *qualifierAtom;
+    JSAtom *setAtom;
+    JSAtom *setterAtom;
+    JSAtom *spaceAtom;
+    JSAtom *stagoAtom;
+    JSAtom *starAtom;
+    JSAtom *starQualifierAtom;
+    JSAtom *tagcAtom;
+    JSAtom *toLocaleStringAtom;
+    JSAtom *toSourceAtom;
+    JSAtom *toStringAtom;
+    JSAtom *valueOfAtom;
+    JSAtom *xmlAtom;
+
+    JSAtom *DSOAtom;
+
+
+
+    struct {
+        JSAtom *AnyNameAtom;
+        JSAtom *AttributeNameAtom;
+        JSAtom *EvalErrorAtom;
+        JSAtom *InfinityAtom;
+        JSAtom *InternalErrorAtom;
+        JSAtom *NaNAtom;
+        JSAtom *RangeErrorAtom;
+        JSAtom *ReferenceErrorAtom;
+        JSAtom *SyntaxErrorAtom;
+        JSAtom *TypeErrorAtom;
+        JSAtom *URIErrorAtom;
+        JSAtom *XMLListAtom;
+        JSAtom *decodeURIAtom;
+        JSAtom *decodeURIComponentAtom;
+        JSAtom *defineGetterAtom;
+        JSAtom *defineSetterAtom;
+        JSAtom *encodeURIAtom;
+        JSAtom *encodeURIComponentAtom;
+        JSAtom *escapeAtom;
+        JSAtom *functionNamespaceURIAtom;
+        JSAtom *hasOwnPropertyAtom;
+        JSAtom *isFiniteAtom;
+        JSAtom *isNaNAtom;
+        JSAtom *isPrototypeOfAtom;
+        JSAtom *isXMLNameAtom;
+        JSAtom *lookupGetterAtom;
+        JSAtom *lookupSetterAtom;
+        JSAtom *parseFloatAtom;
+        JSAtom *parseIntAtom;
+        JSAtom *propertyIsEnumerableAtom;
+        JSAtom *unescapeAtom;
+        JSAtom *unevalAtom;
+        JSAtom *unwatchAtom;
+        JSAtom *watchAtom;
+    } lazy;
+# 272 "/nexbyte/server/include/js/jsatom.h"
+};
+
+
+extern const char *js_type_str[];
+extern const char *js_boolean_str[];
+
+extern const char js_Arguments_str[];
+extern const char js_Array_str[];
+extern const char js_Boolean_str[];
+extern const char js_Call_str[];
+extern const char js_Date_str[];
+extern const char js_Function_str[];
+extern const char js_Math_str[];
+extern const char js_Namespace_str[];
+extern const char js_Number_str[];
+extern const char js_Object_str[];
+extern const char js_QName_str[];
+extern const char js_RegExp_str[];
+extern const char js_Script_str[];
+extern const char js_String_str[];
+extern const char js_XML_str[];
+extern const char js_File_str[];
+extern const char js_anonymous_str[];
+extern const char js_arguments_str[];
+extern const char js_arity_str[];
+extern const char js_callee_str[];
+extern const char js_caller_str[];
+extern const char js_class_prototype_str[];
+extern const char js_constructor_str[];
+extern const char js_count_str[];
+extern const char js_etago_str[];
+extern const char js_each_str[];
+extern const char js_eval_str[];
+extern const char js_getter_str[];
+extern const char js_get_str[];
+extern const char js_index_str[];
+extern const char js_input_str[];
+extern const char js_length_str[];
+extern const char js_name_str[];
+extern const char js_namespace_str[];
+extern const char js_noSuchMethod_str[];
+extern const char js_object_str[];
+extern const char js_parent_str[];
+extern const char js_private_str[];
+extern const char js_proto_str[];
+extern const char js_ptagc_str[];
+extern const char js_qualifier_str[];
+extern const char js_setter_str[];
+extern const char js_set_str[];
+extern const char js_space_str[];
+extern const char js_stago_str[];
+extern const char js_star_str[];
+extern const char js_starQualifier_str[];
+extern const char js_tagc_str[];
+extern const char js_toSource_str[];
+extern const char js_toString_str[];
+extern const char js_toLocaleString_str[];
+extern const char js_valueOf_str[];
+extern const char js_xml_str[];
+# 344 "/nexbyte/server/include/js/jsatom.h"
+extern JSBool
+js_InitAtomState(JSContext *cx, JSAtomState *state);
+
+
+
+
+extern void
+js_FreeAtomState(JSContext *cx, JSAtomState *state);
+# 366 "/nexbyte/server/include/js/jsatom.h"
+extern void
+js_FinishAtomState(JSAtomState *state);
+
+
+
+
+typedef void
+(*JSGCThingMarker)(void *thing, void *data);
+
+extern void
+js_MarkAtomState(JSAtomState *state, uintN gcflags, JSGCThingMarker mark,
+                 void *data);
+
+extern void
+js_SweepAtomState(JSAtomState *state);
+
+extern JSBool
+js_InitPinnedAtoms(JSContext *cx, JSAtomState *state);
+
+extern void
+js_UnpinPinnedAtoms(JSAtomState *state);
+
+
+
+
+
+extern JSAtom *
+js_AtomizeObject(JSContext *cx, JSObject *obj, uintN flags);
+
+
+
+
+
+extern JSAtom *
+js_AtomizeBoolean(JSContext *cx, JSBool b, uintN flags);
+
+
+
+
+
+extern JSAtom *
+js_AtomizeInt(JSContext *cx, jsint i, uintN flags);
+
+
+
+
+
+extern JSAtom *
+js_AtomizeDouble(JSContext *cx, jsdouble d, uintN flags);
+
+
+
+
+
+extern JSAtom *
+js_AtomizeString(JSContext *cx, JSString *str, uintN flags);
+
+extern JSAtom *
+js_Atomize(JSContext *cx, const char *bytes, size_t length, uintN flags);
+
+extern JSAtom *
+js_AtomizeChars(JSContext *cx, const jschar *chars, size_t length, uintN flags);
+
+
+
+
+extern JSAtom *
+js_AtomizeValue(JSContext *cx, jsval value, uintN flags);
+
+
+
+
+extern JSAtom *
+js_ValueToStringAtom(JSContext *cx, jsval v);
+
+
+
+
+extern JSAtomListElement *
+js_IndexAtom(JSContext *cx, JSAtom *atom, JSAtomList *al);
+
+
+
+
+extern JSAtom *
+js_GetAtom(JSContext *cx, JSAtomMap *map, jsatomid i);
+# 460 "/nexbyte/server/include/js/jsatom.h"
+extern JSBool
+js_InitAtomMap(JSContext *cx, JSAtomMap *map, JSAtomList *al);
+
+
+
+
+extern void
+js_FreeAtomMap(JSContext *cx, JSAtomMap *map);
+
+}
+# 49 "/nexbyte/server/include/js/jscntxt.h" 2
+# 1 "/nexbyte/server/include/js/jsconfig.h" 1
+# 50 "/nexbyte/server/include/js/jscntxt.h" 2
+# 1 "/nexbyte/server/include/js/jsdhash.h" 1
+# 46 "/nexbyte/server/include/js/jsdhash.h"
+extern "C" {
+# 77 "/nexbyte/server/include/js/jsdhash.h"
+typedef uint32 JSDHashNumber;
+typedef struct JSDHashEntryHdr JSDHashEntryHdr;
+typedef struct JSDHashEntryStub JSDHashEntryStub;
+typedef struct JSDHashTable JSDHashTable;
+typedef struct JSDHashTableOps JSDHashTableOps;
+# 111 "/nexbyte/server/include/js/jsdhash.h"
+struct JSDHashEntryHdr {
+    JSDHashNumber keyHash;
+};
+# 191 "/nexbyte/server/include/js/jsdhash.h"
+struct JSDHashTable {
+    const JSDHashTableOps *ops;
+    void *data;
+    int16 hashShift;
+    uint8 maxAlphaFrac;
+    uint8 minAlphaFrac;
+    uint32 entrySize;
+    uint32 entryCount;
+    uint32 removedCount;
+    uint32 generation;
+    char *entryStore;
+# 223 "/nexbyte/server/include/js/jsdhash.h"
+};
+# 237 "/nexbyte/server/include/js/jsdhash.h"
+typedef void *
+(* JSDHashAllocTable)(JSDHashTable *table, uint32 nbytes);
+
+typedef void
+(* JSDHashFreeTable) (JSDHashTable *table, void *ptr);
+
+
+
+
+
+
+
+typedef const void *
+(* JSDHashGetKey) (JSDHashTable *table,
+                                      JSDHashEntryHdr *entry);
+
+
+
+
+
+typedef JSDHashNumber
+(* JSDHashHashKey) (JSDHashTable *table, const void *key);
+
+
+
+
+
+typedef JSBool
+(* JSDHashMatchEntry)(JSDHashTable *table,
+                                      const JSDHashEntryHdr *entry,
+                                      const void *key);
+
+
+
+
+
+
+
+typedef void
+(* JSDHashMoveEntry)(JSDHashTable *table,
+                                     const JSDHashEntryHdr *from,
+                                     JSDHashEntryHdr *to);
+
+
+
+
+
+
+typedef void
+(* JSDHashClearEntry)(JSDHashTable *table,
+                                      JSDHashEntryHdr *entry);
+
+
+
+
+
+
+typedef void
+(* JSDHashFinalize) (JSDHashTable *table);
+# 304 "/nexbyte/server/include/js/jsdhash.h"
+typedef JSBool
+(* JSDHashInitEntry)(JSDHashTable *table,
+                                     JSDHashEntryHdr *entry,
+                                     const void *key);
+# 336 "/nexbyte/server/include/js/jsdhash.h"
+struct JSDHashTableOps {
+
+    JSDHashAllocTable allocTable;
+    JSDHashFreeTable freeTable;
+    JSDHashGetKey getKey;
+    JSDHashHashKey hashKey;
+    JSDHashMatchEntry matchEntry;
+    JSDHashMoveEntry moveEntry;
+    JSDHashClearEntry clearEntry;
+    JSDHashFinalize finalize;
+
+
+    JSDHashInitEntry initEntry;
+};
+
+
+
+
+extern void *
+JS_DHashAllocTable(JSDHashTable *table, uint32 nbytes);
+
+extern void
+JS_DHashFreeTable(JSDHashTable *table, void *ptr);
+
+extern JSDHashNumber
+JS_DHashStringKey(JSDHashTable *table, const void *key);
+
+
+struct JSDHashEntryStub {
+    JSDHashEntryHdr hdr;
+    const void *key;
+};
+
+extern const void *
+JS_DHashGetKeyStub(JSDHashTable *table, JSDHashEntryHdr *entry);
+
+extern JSDHashNumber
+JS_DHashVoidPtrKeyStub(JSDHashTable *table, const void *key);
+
+extern JSBool
+JS_DHashMatchEntryStub(JSDHashTable *table,
+                       const JSDHashEntryHdr *entry,
+                       const void *key);
+
+extern JSBool
+JS_DHashMatchStringKey(JSDHashTable *table,
+                       const JSDHashEntryHdr *entry,
+                       const void *key);
+
+extern void
+JS_DHashMoveEntryStub(JSDHashTable *table,
+                      const JSDHashEntryHdr *from,
+                      JSDHashEntryHdr *to);
+
+extern void
+JS_DHashClearEntryStub(JSDHashTable *table, JSDHashEntryHdr *entry);
+
+extern void
+JS_DHashFreeStringKey(JSDHashTable *table, JSDHashEntryHdr *entry);
+
+extern void
+JS_DHashFinalizeStub(JSDHashTable *table);
+
+
+
+
+
+
+extern const JSDHashTableOps *
+JS_DHashGetStubOps(void);
+
+
+
+
+
+
+
+extern JSDHashTable *
+JS_NewDHashTable(const JSDHashTableOps *ops, void *data, uint32 entrySize,
+                 uint32 capacity);
+
+
+
+
+
+extern void
+JS_DHashTableDestroy(JSDHashTable *table);
+
+
+
+
+
+
+
+extern JSBool
+JS_DHashTableInit(JSDHashTable *table, const JSDHashTableOps *ops, void *data,
+                  uint32 entrySize, uint32 capacity);
+# 442 "/nexbyte/server/include/js/jsdhash.h"
+extern void
+JS_DHashTableSetAlphaBounds(JSDHashTable *table,
+                            float maxAlpha,
+                            float minAlpha);
+# 462 "/nexbyte/server/include/js/jsdhash.h"
+extern void
+JS_DHashTableFinish(JSDHashTable *table);
+
+
+
+
+
+
+
+typedef enum JSDHashOperator {
+    JS_DHASH_LOOKUP = 0,
+    JS_DHASH_ADD = 1,
+    JS_DHASH_REMOVE = 2,
+    JS_DHASH_NEXT = 0,
+    JS_DHASH_STOP = 1
+} JSDHashOperator;
+# 509 "/nexbyte/server/include/js/jsdhash.h"
+extern JSDHashEntryHdr * __attribute__ ((regparm (3),stdcall))
+JS_DHashTableOperate(JSDHashTable *table, const void *key, JSDHashOperator op);
+# 521 "/nexbyte/server/include/js/jsdhash.h"
+extern void
+JS_DHashTableRawRemove(JSDHashTable *table, JSDHashEntryHdr *entry);
+# 563 "/nexbyte/server/include/js/jsdhash.h"
+typedef JSDHashOperator
+(* JSDHashEnumerator)(JSDHashTable *table, JSDHashEntryHdr *hdr,
+                                      uint32 number, void *arg);
+
+extern uint32
+JS_DHashTableEnumerate(JSDHashTable *table, JSDHashEnumerator etor, void *arg);
+# 577 "/nexbyte/server/include/js/jsdhash.h"
+}
+# 51 "/nexbyte/server/include/js/jscntxt.h" 2
+# 1 "/nexbyte/server/include/js/jsgc.h" 1
+# 49 "/nexbyte/server/include/js/jsgc.h"
+extern "C" {
+# 81 "/nexbyte/server/include/js/jsgc.h"
+extern uint8 *
+js_GetGCThingFlags(void *thing);
+
+
+struct JSGCRootHashEntry {
+    JSDHashEntryHdr hdr;
+    void *root;
+    const char *name;
+};
+
+struct JSGCLockHashEntry {
+    JSDHashEntryHdr hdr;
+    const JSGCThing *thing;
+    uint32 count;
+};
+# 108 "/nexbyte/server/include/js/jsgc.h"
+extern intN
+js_ChangeExternalStringFinalizer(JSStringFinalizeOp oldop,
+                                 JSStringFinalizeOp newop);
+
+extern JSBool
+js_InitGC(JSRuntime *rt, uint32 maxbytes);
+
+extern void
+js_FinishGC(JSRuntime *rt);
+
+extern JSBool
+js_AddRoot(JSContext *cx, void *rp, const char *name);
+
+extern JSBool
+js_AddRootRT(JSRuntime *rt, void *rp, const char *name);
+
+extern JSBool
+js_RemoveRoot(JSRuntime *rt, void *rp);
+
+
+
+
+struct JSGCThing {
+    JSGCThing *next;
+    uint8 *flagp;
+};
+
+
+
+
+
+
+extern void *
+js_NewGCThing(JSContext *cx, uintN flags, size_t nbytes);
+
+extern JSBool
+js_LockGCThing(JSContext *cx, void *thing);
+
+extern JSBool
+js_LockGCThingRT(JSRuntime *rt, void *thing);
+
+extern JSBool
+js_UnlockGCThingRT(JSRuntime *rt, void *thing);
+
+extern JSBool
+js_IsAboutToBeFinalized(JSContext *cx, void *thing);
+
+extern void
+js_MarkAtom(JSContext *cx, JSAtom *atom, void *arg);
+# 165 "/nexbyte/server/include/js/jsgc.h"
+extern void
+js_MarkGCThing(JSContext *cx, void *thing, void *arg);
+# 212 "/nexbyte/server/include/js/jsgc.h"
+extern void
+js_ForceGC(JSContext *cx, uintN gcflags);
+
+extern void
+js_GC(JSContext *cx, uintN gcflags);
+# 267 "/nexbyte/server/include/js/jsgc.h"
+}
+# 52 "/nexbyte/server/include/js/jscntxt.h" 2
+# 1 "/nexbyte/server/include/js/jsinterp.h" 1
+# 48 "/nexbyte/server/include/js/jsinterp.h"
+extern "C" {
+
+
+
+
+struct JSStackFrame {
+    JSObject *callobj;
+    JSObject *argsobj;
+    JSObject *varobj;
+    JSScript *script;
+    JSFunction *fun;
+    JSObject *thisp;
+    uintN argc;
+    jsval *argv;
+    jsval rval;
+    uintN nvars;
+    jsval *vars;
+    JSStackFrame *down;
+    void *annotation;
+    JSObject *scopeChain;
+    jsbytecode *pc;
+    jsval *sp;
+    jsval *spbase;
+    uintN sharpDepth;
+    JSObject *sharpArray;
+    uint32 flags;
+    JSStackFrame *dormantNext;
+    JSObject *xmlNamespace;
+};
+
+typedef struct JSInlineFrame {
+    JSStackFrame frame;
+    void *mark;
+    void *hookData;
+    JSVersion callerVersion;
+} JSInlineFrame;
+# 153 "/nexbyte/server/include/js/jsinterp.h"
+typedef union JSPropertyCacheEntry {
+    struct {
+        JSObject *object;
+        JSScopeProperty *property;
+    } s;
+
+
+
+} JSPropertyCacheEntry;
+
+
+
+
+
+typedef struct JSPropertyCache {
+    JSPropertyCacheEntry table[((JSUint32)1 << (10))];
+    JSBool empty;
+    JSBool disabled;
+# 181 "/nexbyte/server/include/js/jsinterp.h"
+} JSPropertyCache;
+# 223 "/nexbyte/server/include/js/jsinterp.h"
+extern void
+js_FlushPropertyCache(JSContext *cx);
+
+extern void
+js_DisablePropertyCache(JSContext *cx);
+
+extern void
+js_EnablePropertyCache(JSContext *cx);
+
+extern jsval *
+js_AllocStack(JSContext *cx, uintN nslots, void **markp);
+
+extern void
+js_FreeStack(JSContext *cx, void *mark);
+
+extern JSBool
+js_GetArgument(JSContext *cx, JSObject *obj, jsval id, jsval *vp);
+
+extern JSBool
+js_SetArgument(JSContext *cx, JSObject *obj, jsval id, jsval *vp);
+
+extern JSBool
+js_GetLocalVariable(JSContext *cx, JSObject *obj, jsval id, jsval *vp);
+
+extern JSBool
+js_SetLocalVariable(JSContext *cx, JSObject *obj, jsval id, jsval *vp);
+# 270 "/nexbyte/server/include/js/jsinterp.h"
+extern JSBool
+js_ComputeThis(JSContext *cx, JSObject *thisp, JSStackFrame *fp);
+
+
+
+
+
+
+extern JSBool
+js_Invoke(JSContext *cx, uintN argc, uintN flags);
+# 298 "/nexbyte/server/include/js/jsinterp.h"
+extern JSBool
+js_InternalInvoke(JSContext *cx, JSObject *obj, jsval fval, uintN flags,
+                  uintN argc, jsval *argv, jsval *rval);
+
+extern JSBool
+js_InternalGetOrSet(JSContext *cx, JSObject *obj, jsid id, jsval fval,
+                    JSAccessMode mode, uintN argc, jsval *argv, jsval *rval);
+
+extern JSBool
+js_Execute(JSContext *cx, JSObject *chain, JSScript *script,
+           JSStackFrame *down, uintN flags, jsval *result);
+
+extern JSBool
+js_CheckRedeclaration(JSContext *cx, JSObject *obj, jsid id, uintN attrs,
+                      JSObject **objp, JSProperty **propp);
+
+extern JSBool
+js_StrictlyEqual(jsval lval, jsval rval);
+
+extern JSBool
+js_Interpret(JSContext *cx, jsbytecode *pc, jsval *result);
+
+}
+# 53 "/nexbyte/server/include/js/jscntxt.h" 2
+# 1 "/nexbyte/server/include/js/jsobj.h" 1
+# 55 "/nexbyte/server/include/js/jsobj.h"
+extern "C" {
+
+struct JSObjectMap {
+    jsrefcount nrefs;
+    JSObjectOps *ops;
+    uint32 nslots;
+    uint32 freeslot;
+};
+# 130 "/nexbyte/server/include/js/jsobj.h"
+struct JSObject {
+    JSObjectMap *map;
+    jsval *slots;
+};
+# 235 "/nexbyte/server/include/js/jsobj.h"
+extern JSObjectOps js_ObjectOps;
+extern JSObjectOps js_WithObjectOps;
+extern JSClass js_ObjectClass;
+extern JSClass js_WithClass;
+
+struct JSSharpObjectMap {
+    jsrefcount depth;
+    jsatomid sharpgen;
+    JSHashTable *table;
+};
+# 255 "/nexbyte/server/include/js/jsobj.h"
+extern JSHashEntry *
+js_EnterSharpObject(JSContext *cx, JSObject *obj, JSIdArray **idap,
+                    jschar **sp);
+
+extern void
+js_LeaveSharpObject(JSContext *cx, JSIdArray **idap);
+
+extern JSBool
+js_obj_toSource(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
+                jsval *rval);
+
+extern JSBool
+js_obj_toString(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
+                jsval *rval);
+
+extern JSBool
+js_HasOwnPropertyHelper(JSContext *cx, JSObject *obj, JSLookupPropOp lookup,
+                        uintN argc, jsval *argv, jsval *rval);
+
+extern JSObject *
+js_InitObjectClass(JSContext *cx, JSObject *obj);
+
+
+extern const char js_watch_str[];
+extern const char js_unwatch_str[];
+extern const char js_hasOwnProperty_str[];
+extern const char js_isPrototypeOf_str[];
+extern const char js_propertyIsEnumerable_str[];
+extern const char js_defineGetter_str[];
+extern const char js_defineSetter_str[];
+extern const char js_lookupGetter_str[];
+extern const char js_lookupSetter_str[];
+
+extern void
+js_InitObjectMap(JSObjectMap *map, jsrefcount nrefs, JSObjectOps *ops,
+                 JSClass *clasp);
+
+extern JSObjectMap *
+js_NewObjectMap(JSContext *cx, jsrefcount nrefs, JSObjectOps *ops,
+                JSClass *clasp, JSObject *obj);
+
+extern void
+js_DestroyObjectMap(JSContext *cx, JSObjectMap *map);
+
+extern JSObjectMap *
+js_HoldObjectMap(JSContext *cx, JSObjectMap *map);
+
+extern JSObjectMap *
+js_DropObjectMap(JSContext *cx, JSObjectMap *map, JSObject *obj);
+
+extern JSObject *
+js_NewObject(JSContext *cx, JSClass *clasp, JSObject *proto, JSObject *parent);
+
+extern JSBool
+js_FindConstructor(JSContext *cx, JSObject *start, const char *name, jsval *vp);
+
+extern JSObject *
+js_ConstructObject(JSContext *cx, JSClass *clasp, JSObject *proto,
+                   JSObject *parent, uintN argc, jsval *argv);
+
+extern void
+js_FinalizeObject(JSContext *cx, JSObject *obj);
+
+extern JSBool
+js_AllocSlot(JSContext *cx, JSObject *obj, uint32 *slotp);
+
+extern void
+js_FreeSlot(JSContext *cx, JSObject *obj, uint32 slot);
+
+
+
+
+
+
+
+extern JSScopeProperty *
+js_AddHiddenProperty(JSContext *cx, JSObject *obj, jsid id,
+                     JSPropertyOp getter, JSPropertyOp setter, uint32 slot,
+                     uintN attrs, uintN flags, intN shortid);
+
+extern JSBool
+js_LookupHiddenProperty(JSContext *cx, JSObject *obj, jsid id, JSObject **objp,
+                        JSProperty **propp);
+
+
+
+
+
+extern JSScopeProperty *
+js_AddNativeProperty(JSContext *cx, JSObject *obj, jsid id,
+                     JSPropertyOp getter, JSPropertyOp setter, uint32 slot,
+                     uintN attrs, uintN flags, intN shortid);
+
+
+
+
+
+
+extern JSScopeProperty *
+js_ChangeNativePropertyAttrs(JSContext *cx, JSObject *obj,
+                             JSScopeProperty *sprop, uintN attrs, uintN mask,
+                             JSPropertyOp getter, JSPropertyOp setter);
+# 365 "/nexbyte/server/include/js/jsobj.h"
+extern JSBool
+js_DefineProperty(JSContext *cx, JSObject *obj, jsid id, jsval value,
+                  JSPropertyOp getter, JSPropertyOp setter, uintN attrs,
+                  JSProperty **propp);
+
+extern JSBool
+js_DefineNativeProperty(JSContext *cx, JSObject *obj, jsid id, jsval value,
+                        JSPropertyOp getter, JSPropertyOp setter, uintN attrs,
+                        uintN flags, intN shortid, JSProperty **propp);
+# 382 "/nexbyte/server/include/js/jsobj.h"
+extern JSBool
+js_LookupProperty(JSContext *cx, JSObject *obj, jsid id, JSObject **objp,
+                  JSProperty **propp);
+
+
+
+
+extern JSBool
+js_LookupPropertyWithFlags(JSContext *cx, JSObject *obj, jsid id, uintN flags,
+                           JSObject **objp, JSProperty **propp);
+
+extern JSBool
+js_FindProperty(JSContext *cx, jsid id, JSObject **objp, JSObject **pobjp,
+                JSProperty **propp);
+
+extern JSObject *
+js_FindIdentifierBase(JSContext *cx, jsid id);
+
+extern JSObject *
+js_FindVariableScope(JSContext *cx, JSFunction **funp);
+
+extern JSBool
+js_GetProperty(JSContext *cx, JSObject *obj, jsid id, jsval *vp);
+
+extern JSBool
+js_SetProperty(JSContext *cx, JSObject *obj, jsid id, jsval *vp);
+
+extern JSBool
+js_GetAttributes(JSContext *cx, JSObject *obj, jsid id, JSProperty *prop,
+                 uintN *attrsp);
+
+extern JSBool
+js_SetAttributes(JSContext *cx, JSObject *obj, jsid id, JSProperty *prop,
+                 uintN *attrsp);
+
+extern JSBool
+js_DeleteProperty(JSContext *cx, JSObject *obj, jsid id, jsval *rval);
+
+extern JSBool
+js_DefaultValue(JSContext *cx, JSObject *obj, JSType hint, jsval *vp);
+
+extern JSIdArray *
+js_NewIdArray(JSContext *cx, jsint length);
+
+
+
+
+extern JSIdArray *
+js_SetIdArrayLength(JSContext *cx, JSIdArray *ida, jsint length);
+
+extern JSBool
+js_Enumerate(JSContext *cx, JSObject *obj, JSIterateOp enum_op,
+             jsval *statep, jsid *idp);
+
+extern JSBool
+js_CheckAccess(JSContext *cx, JSObject *obj, jsid id, JSAccessMode mode,
+               jsval *vp, uintN *attrsp);
+
+extern JSBool
+js_Call(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
+
+extern JSBool
+js_Construct(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
+             jsval *rval);
+
+extern JSBool
+js_HasInstance(JSContext *cx, JSObject *obj, jsval v, JSBool *bp);
+
+extern JSBool
+js_SetProtoOrParent(JSContext *cx, JSObject *obj, uint32 slot, JSObject *pobj);
+
+extern JSBool
+js_IsDelegate(JSContext *cx, JSObject *obj, jsval v, JSBool *bp);
+
+extern JSBool
+js_GetClassPrototype(JSContext *cx, const char *name, JSObject **protop);
+
+extern JSBool
+js_SetClassPrototype(JSContext *cx, JSObject *ctor, JSObject *proto,
+                     uintN attrs);
+
+extern JSBool
+js_ValueToObject(JSContext *cx, jsval v, JSObject **objp);
+
+extern JSObject *
+js_ValueToNonNullObject(JSContext *cx, jsval v);
+
+extern JSBool
+js_TryValueOf(JSContext *cx, JSObject *obj, JSType type, jsval *rval);
+
+extern JSBool
+js_TryMethod(JSContext *cx, JSObject *obj, JSAtom *atom,
+             uintN argc, jsval *argv, jsval *rval);
+
+extern JSBool
+js_XDRObject(JSXDRState *xdr, JSObject **objp);
+
+extern uint32
+js_Mark(JSContext *cx, JSObject *obj, void *arg);
+
+extern void
+js_Clear(JSContext *cx, JSObject *obj);
+
+extern jsval
+js_GetRequiredSlot(JSContext *cx, JSObject *obj, uint32 slot);
+
+extern JSBool
+js_SetRequiredSlot(JSContext *cx, JSObject *obj, uint32 slot, jsval v);
+
+extern JSObject *
+js_CheckScopeChainValidity(JSContext *cx, JSObject *scopeobj, const char *caller);
+
+extern JSBool
+js_CheckPrincipalsAccess(JSContext *cx, JSObject *scopeobj,
+                         JSPrincipals *principals, const char *caller);
+}
+# 54 "/nexbyte/server/include/js/jscntxt.h" 2
+
+
+# 1 "/nexbyte/server/include/js/jsregexp.h" 1
+# 45 "/nexbyte/server/include/js/jsregexp.h"
+# 1 "/data/nexbyte/server/bin/../lib/gcc/i686-pc-linux-gnu/4.1.2/include/stddef.h" 1 3 4
+# 46 "/nexbyte/server/include/js/jsregexp.h" 2
+
+# 1 "/nexbyte/server/include/js/jsstr.h" 1
+# 55 "/nexbyte/server/include/js/jsstr.h"
+# 1 "/nexbyte/server/include/ctype.h" 1 3
+# 30 "/nexbyte/server/include/ctype.h" 3
+extern "C" {
+# 48 "/nexbyte/server/include/ctype.h" 3
+enum
+{
+  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
+  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
+  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
+  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
+  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
+  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
+  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
+  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
+  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
+  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
+  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
+  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
+};
+# 81 "/nexbyte/server/include/ctype.h" 3
+extern __const unsigned short int **__ctype_b_loc (void)
+     __attribute__ ((__const));
+extern __const __int32_t **__ctype_tolower_loc (void)
+     __attribute__ ((__const));
+extern __const __int32_t **__ctype_toupper_loc (void)
+     __attribute__ ((__const));
+# 96 "/nexbyte/server/include/ctype.h" 3
+
+
+
+
+
+
+extern int isalnum (int) throw ();
+extern int isalpha (int) throw ();
+extern int iscntrl (int) throw ();
+extern int isdigit (int) throw ();
+extern int islower (int) throw ();
+extern int isgraph (int) throw ();
+extern int isprint (int) throw ();
+extern int ispunct (int) throw ();
+extern int isspace (int) throw ();
+extern int isupper (int) throw ();
+extern int isxdigit (int) throw ();
+
+
+
+extern int tolower (int __c) throw ();
+
+
+extern int toupper (int __c) throw ();
+
+
+
+
+
+
+
+
+extern int isblank (int) throw ();
+
+
+
+
+
+
+extern int isctype (int __c, int __mask) throw ();
+
+
+
+
+
+
+extern int isascii (int __c) throw ();
+
+
+
+extern int toascii (int __c) throw ();
+
+
+
+extern int _toupper (int) throw ();
+extern int _tolower (int) throw ();
+# 247 "/nexbyte/server/include/ctype.h" 3
+extern int isalnum_l (int, __locale_t) throw ();
+extern int isalpha_l (int, __locale_t) throw ();
+extern int iscntrl_l (int, __locale_t) throw ();
+extern int isdigit_l (int, __locale_t) throw ();
+extern int islower_l (int, __locale_t) throw ();
+extern int isgraph_l (int, __locale_t) throw ();
+extern int isprint_l (int, __locale_t) throw ();
+extern int ispunct_l (int, __locale_t) throw ();
+extern int isspace_l (int, __locale_t) throw ();
+extern int isupper_l (int, __locale_t) throw ();
+extern int isxdigit_l (int, __locale_t) throw ();
+
+extern int isblank_l (int, __locale_t) throw ();
+
+
+
+extern int __tolower_l (int __c, __locale_t __l) throw ();
+extern int tolower_l (int __c, __locale_t __l) throw ();
+
+
+extern int __toupper_l (int __c, __locale_t __l) throw ();
+extern int toupper_l (int __c, __locale_t __l) throw ();
+# 323 "/nexbyte/server/include/ctype.h" 3
+}
+# 56 "/nexbyte/server/include/js/jsstr.h" 2
+
+
+
+
+extern "C" {
+# 72 "/nexbyte/server/include/js/jsstr.h"
+struct JSString {
+    size_t length;
+    jschar *chars;
+};
+# 86 "/nexbyte/server/include/js/jsstr.h"
+struct JSDependentString {
+    size_t length;
+    JSString *base;
+};
+# 148 "/nexbyte/server/include/js/jsstr.h"
+extern size_t
+js_MinimizeDependentStrings(JSString *str, int level, JSString **basep);
+
+extern jschar *
+js_GetDependentStringChars(JSString *str);
+
+extern jschar *
+js_GetStringChars(JSString *str);
+
+extern JSString *
+js_ConcatStrings(JSContext *cx, JSString *left, JSString *right);
+
+extern const jschar *
+js_UndependString(JSContext *cx, JSString *str);
+
+struct JSSubString {
+    size_t length;
+    const jschar *chars;
+};
+
+extern jschar js_empty_ucstr[];
+extern JSSubString js_EmptySubString;
+
+
+extern const uint8 js_X[];
+extern const uint8 js_Y[];
+extern const uint32 js_A[];
+
+
+typedef enum JSCharType {
+    JSCT_UNASSIGNED = 0,
+    JSCT_UPPERCASE_LETTER = 1,
+    JSCT_LOWERCASE_LETTER = 2,
+    JSCT_TITLECASE_LETTER = 3,
+    JSCT_MODIFIER_LETTER = 4,
+    JSCT_OTHER_LETTER = 5,
+    JSCT_NON_SPACING_MARK = 6,
+    JSCT_ENCLOSING_MARK = 7,
+    JSCT_COMBINING_SPACING_MARK = 8,
+    JSCT_DECIMAL_DIGIT_NUMBER = 9,
+    JSCT_LETTER_NUMBER = 10,
+    JSCT_OTHER_NUMBER = 11,
+    JSCT_SPACE_SEPARATOR = 12,
+    JSCT_LINE_SEPARATOR = 13,
+    JSCT_PARAGRAPH_SEPARATOR = 14,
+    JSCT_CONTROL = 15,
+    JSCT_FORMAT = 16,
+    JSCT_PRIVATE_USE = 18,
+    JSCT_SURROGATE = 19,
+    JSCT_DASH_PUNCTUATION = 20,
+    JSCT_START_PUNCTUATION = 21,
+    JSCT_END_PUNCTUATION = 22,
+    JSCT_CONNECTOR_PUNCTUATION = 23,
+    JSCT_OTHER_PUNCTUATION = 24,
+    JSCT_MATH_SYMBOL = 25,
+    JSCT_CURRENCY_SYMBOL = 26,
+    JSCT_MODIFIER_SYMBOL = 27,
+    JSCT_OTHER_SYMBOL = 28
+} JSCharType;
+# 298 "/nexbyte/server/include/js/jsstr.h"
+extern JSBool
+js_InitStringGlobals(void);
+
+extern void
+js_FreeStringGlobals(void);
+
+extern void
+js_PurgeDeflatedStringCache(JSString *str);
+
+
+extern JSBool
+js_InitRuntimeStringState(JSContext *cx);
+
+extern void
+js_FinishRuntimeStringState(JSContext *cx);
+
+
+extern JSClass js_StringClass;
+
+extern JSObject *
+js_InitStringClass(JSContext *cx, JSObject *obj);
+
+extern const char js_escape_str[];
+extern const char js_unescape_str[];
+extern const char js_uneval_str[];
+extern const char js_decodeURI_str[];
+extern const char js_encodeURI_str[];
+extern const char js_decodeURIComponent_str[];
+extern const char js_encodeURIComponent_str[];
+
+
+extern JSString *
+js_NewString(JSContext *cx, jschar *chars, size_t length, uintN gcflag);
+
+extern JSString *
+js_NewDependentString(JSContext *cx, JSString *base, size_t start,
+                      size_t length, uintN gcflag);
+
+
+extern JSString *
+js_NewStringCopyN(JSContext *cx, const jschar *s, size_t n, uintN gcflag);
+
+
+extern JSString *
+js_NewStringCopyZ(JSContext *cx, const jschar *s, uintN gcflag);
+
+
+extern void
+js_FinalizeString(JSContext *cx, JSString *str);
+
+extern void
+js_FinalizeStringRT(JSRuntime *rt, JSString *str);
+
+
+extern JSObject *
+js_StringToObject(JSContext *cx, JSString *str);
+
+
+
+
+extern const char *
+js_ValueToPrintableString(JSContext *cx, jsval v);
+
+
+
+
+
+extern JSString *
+js_ValueToString(JSContext *cx, jsval v);
+
+
+
+
+
+extern JSString *
+js_ValueToSource(JSContext *cx, jsval v);
+
+
+
+
+
+extern JSHashNumber
+js_HashString(JSString *str);
+
+
+
+
+
+
+extern intN
+js_CompareStrings(JSString *str1, JSString *str2);
+# 402 "/nexbyte/server/include/js/jsstr.h"
+extern jsint
+js_BoyerMooreHorspool(const jschar *text, jsint textlen,
+                      const jschar *pat, jsint patlen,
+                      jsint start);
+
+extern size_t
+js_strlen(const jschar *s);
+
+extern jschar *
+js_strchr(const jschar *s, jschar c);
+
+extern jschar *
+js_strchr_limit(const jschar *s, jschar c, const jschar *limit);
+
+
+
+
+
+
+extern const jschar *
+js_SkipWhiteSpace(const jschar *s);
+
+
+
+
+
+
+extern jschar *
+js_InflateString(JSContext *cx, const char *bytes, size_t *length);
+
+extern char *
+js_DeflateString(JSContext *cx, const jschar *chars, size_t length);
+# 442 "/nexbyte/server/include/js/jsstr.h"
+extern JSBool
+js_InflateStringToBuffer(JSContext* cx, const char *bytes, size_t length, jschar *chars, size_t* charsLength);
+# 452 "/nexbyte/server/include/js/jsstr.h"
+extern JSBool
+js_DeflateStringToBuffer(JSContext* cx, const jschar *chars, size_t charsLength, char *bytes, size_t* length);
+
+
+
+
+
+extern JSBool
+js_SetStringBytes(JSString *str, char *bytes, size_t length);
+
+
+
+
+
+extern char *
+js_GetStringBytes(JSString *str);
+
+JSBool
+js_str_escape(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
+              jsval *rval);
+
+
+
+
+
+extern int
+js_OneUcs4ToUtf8Char(uint8 *utf8Buffer, uint32 ucs4Char);
+
+}
+# 48 "/nexbyte/server/include/js/jsregexp.h" 2
+
+
+
+
+
+struct JSRegExpStatics {
+    JSString *input;
+    JSBool multiline;
+    uint16 parenCount;
+    uint16 moreLength;
+    JSSubString parens[9];
+    JSSubString *moreParens;
+    JSSubString lastMatch;
+    JSSubString lastParen;
+    JSSubString leftContext;
+    JSSubString rightContext;
+};
+# 74 "/nexbyte/server/include/js/jsregexp.h"
+typedef struct RECharSet {
+    JSPackedBool converted;
+    JSPackedBool sense;
+    uint16 length;
+    union {
+        uint8 *bits;
+        struct {
+            size_t startIndex;
+            size_t length;
+        } src;
+    } u;
+} RECharSet;
+# 98 "/nexbyte/server/include/js/jsregexp.h"
+typedef struct RENode RENode;
+
+struct JSRegExp {
+    jsrefcount nrefs;
+    uint16 flags;
+    uint16 cloneIndex;
+
+    size_t parenCount;
+    size_t classCount;
+    RECharSet *classList;
+    JSString *source;
+    jsbytecode program[1];
+};
+
+extern JSRegExp *
+js_NewRegExp(JSContext *cx, JSTokenStream *ts,
+             JSString *str, uintN flags, JSBool flat);
+
+extern JSRegExp *
+js_NewRegExpOpt(JSContext *cx, JSTokenStream *ts,
+                JSString *str, JSString *opt, JSBool flat);
+
+extern void
+js_DestroyRegExp(JSContext *cx, JSRegExp *re);
+
+
+
+
+
+
+extern JSBool
+js_ExecuteRegExp(JSContext *cx, JSRegExp *re, JSString *str, size_t *indexp,
+                 JSBool test, jsval *rval);
+
+
+
+
+
+extern JSBool
+js_InitRegExpStatics(JSContext *cx, JSRegExpStatics *res);
+
+extern void
+js_FreeRegExpStatics(JSContext *cx, JSRegExpStatics *res);
+
+
+
+
+
+extern JSClass js_RegExpClass;
+
+extern JSObject *
+js_InitRegExpClass(JSContext *cx, JSObject *obj);
+
+
+
+
+extern JSBool
+js_regexp_toString(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
+                   jsval *rval);
+
+
+
+
+extern JSObject *
+js_NewRegExpObject(JSContext *cx, JSTokenStream *ts,
+                   jschar *chars, size_t length, uintN flags);
+
+extern JSBool
+js_XDRRegExp(JSXDRState *xdr, JSObject **objp);
+
+extern JSObject *
+js_CloneRegExpObject(JSContext *cx, JSObject *obj, JSObject *parent);
+
+
+
+
+extern JSBool
+js_GetLastIndex(JSContext *cx, JSObject *obj, jsdouble *lastIndex);
+
+extern JSBool
+js_SetLastIndex(JSContext *cx, JSObject *obj, jsdouble lastIndex);
+# 57 "/nexbyte/server/include/js/jscntxt.h" 2
+
+extern "C" {
+
+typedef enum JSGCMode { JS_NO_GC, JS_MAYBE_GC, JS_FORCE_GC } JSGCMode;
+
+typedef enum JSRuntimeState {
+    JSRTS_DOWN,
+    JSRTS_LAUNCHING,
+    JSRTS_UP,
+    JSRTS_LANDING
+} JSRuntimeState;
+
+typedef struct JSPropertyTreeEntry {
+    JSDHashEntryHdr hdr;
+    JSScopeProperty *child;
+} JSPropertyTreeEntry;
+
+struct JSRuntime {
+
+    JSRuntimeState state;
+
+
+    JSArenaPool gcArenaPool[((10 * sizeof(JSGCThing)) / sizeof(JSGCThing))];
+    JSGCThing *gcFreeList[((10 * sizeof(JSGCThing)) / sizeof(JSGCThing))];
+    JSDHashTable gcRootsHash;
+    JSDHashTable *gcLocksHash;
+    jsrefcount gcKeepAtoms;
+    uint32 gcBytes;
+    uint32 gcLastBytes;
+    uint32 gcMaxBytes;
+    uint32 gcLevel;
+    uint32 gcNumber;
+    JSPackedBool gcPoke;
+    JSPackedBool gcRunning;
+    JSGCCallback gcCallback;
+    uint32 gcMallocBytes;
+# 105 "/nexbyte/server/include/js/jscntxt.h"
+    uint32 gcPrivateBytes;
+
+
+
+    JSXMLNamespace *gcDoomedNamespaces;
+    JSXMLQName *gcDoomedQNames;
+    JSXML *gcDoomedXML;
+
+
+
+
+
+
+    JSAtomState atomState;
+
+
+    JSBool rngInitialized;
+    int64 rngMultiplier;
+    int64 rngAddend;
+    int64 rngMask;
+    int64 rngSeed;
+    jsdouble rngDscale;
+
+
+    jsdouble *jsNaN;
+    jsdouble *jsNegativeInfinity;
+    jsdouble *jsPositiveInfinity;
+
+
+    JSString *emptyString;
+
+
+    JSCList contextList;
+
+
+    JSTrapHandler interruptHandler;
+    void *interruptHandlerData;
+    JSNewScriptHook newScriptHook;
+    void *newScriptHookData;
+    JSDestroyScriptHook destroyScriptHook;
+    void *destroyScriptHookData;
+    JSTrapHandler debuggerHandler;
+    void *debuggerHandlerData;
+    JSSourceHandler sourceHandler;
+    void *sourceHandlerData;
+    JSInterpreterHook executeHook;
+    void *executeHookData;
+    JSInterpreterHook callHook;
+    void *callHookData;
+    JSObjectHook objectHook;
+    void *objectHookData;
+    JSTrapHandler throwHook;
+    void *throwHookData;
+    JSDebugErrorHook debugErrorHook;
+    void *debugErrorHookData;
+
+
+    JSCList trapList;
+    JSCList watchPointList;
+
+
+
+    JSPropertyCache propertyCache;
+
+
+    void *data;
+# 222 "/nexbyte/server/include/js/jscntxt.h"
+    JSCheckAccessOp checkObjectAccess;
+
+
+    JSPrincipalsTranscoder principalsTranscoder;
+
+
+    JSObjectPrincipalsFinder findObjectPrincipals;
+
+
+    JSDHashTable propertyTreeHash;
+    JSScopeProperty *propertyFreeList;
+    JSArenaPool propertyArenaPool;
+
+
+    struct JSHashTable *scriptFilenameTable;
+    JSCList scriptFilenamePrefixes;
+
+
+
+
+
+    const char *thousandsSeparator;
+    const char *decimalSeparator;
+    const char *numGrouping;
+# 254 "/nexbyte/server/include/js/jscntxt.h"
+    JSObject *anynameObject;
+    JSObject *functionNamespaceObject;
+# 291 "/nexbyte/server/include/js/jscntxt.h"
+};
+# 318 "/nexbyte/server/include/js/jscntxt.h"
+struct JSStackHeader {
+    uintN nslots;
+    JSStackHeader *down;
+};
+# 331 "/nexbyte/server/include/js/jscntxt.h"
+typedef struct JSResolvingKey {
+    JSObject *obj;
+    jsid id;
+} JSResolvingKey;
+
+typedef struct JSResolvingEntry {
+    JSDHashEntryHdr hdr;
+    JSResolvingKey key;
+    uint32 flags;
+} JSResolvingEntry;
+
+
+
+
+typedef struct JSLocalRootChunk JSLocalRootChunk;
+
+
+
+
+
+struct JSLocalRootChunk {
+    jsval roots[((JSUint32)1 << (8))];
+    JSLocalRootChunk *down;
+};
+
+typedef struct JSLocalRootStack {
+    uint32 scopeMark;
+    uint32 rootCount;
+    JSLocalRootChunk *topChunk;
+    JSLocalRootChunk firstChunk;
+} JSLocalRootStack;
+
+
+
+typedef struct JSTempValueRooter JSTempValueRooter;
+# 377 "/nexbyte/server/include/js/jscntxt.h"
+struct JSTempValueRooter {
+    JSTempValueRooter *down;
+    jsint count;
+    union {
+        jsval value;
+        jsval *array;
+    } u;
+};
+# 421 "/nexbyte/server/include/js/jscntxt.h"
+struct JSContext {
+    JSCList links;
+
+
+    uintN interpLevel;
+
+
+    jsuword stackLimit;
+
+
+    uint16 version;
+    jsbytecode jsop_eq;
+    jsbytecode jsop_ne;
+
+
+    JSRuntime *runtime;
+
+
+    JSArenaPool stackPool;
+    JSStackFrame *fp;
+
+
+    JSArenaPool tempPool;
+
+
+    JSObject *globalObject;
+
+
+    JSGCThing *newborn[((JSUint32)1 << (4))];
+
+
+    JSAtom *lastAtom;
+
+
+    jsval lastInternalResult;
+
+
+    JSRegExpStatics regExpStatics;
+
+
+    JSSharpObjectMap sharpObjectMap;
+
+
+    JSArgumentFormatMap *argumentFormatMap;
+
+
+    char *lastMessage;
+
+
+
+
+
+    JSBranchCallback branchCallback;
+    JSErrorReporter errorReporter;
+
+
+    void *data;
+
+
+    JSStackFrame *dormantFrameChain;
+# 496 "/nexbyte/server/include/js/jscntxt.h"
+    jsval rval2;
+    JSPackedBool rval2set;
+# 507 "/nexbyte/server/include/js/jscntxt.h"
+    uint8 xmlSettingFlags;
+
+
+
+
+
+
+
+    JSPackedBool creatingException;
+
+
+
+
+
+    JSPackedBool throwing;
+    jsval exception;
+
+
+    uint32 options;
+
+
+    JSLocaleCallbacks *localeCallbacks;
+
+
+
+
+
+
+
+    JSDHashTable *resolvingTable;
+
+
+    JSStackHeader *stackHeaders;
+
+
+    JSLocalRootStack *localRootStack;
+
+
+    JSTempValueRooter *tempValueRooters;
+};
+# 602 "/nexbyte/server/include/js/jscntxt.h"
+extern void
+js_OnVersionChange(JSContext *cx);
+
+
+
+
+
+extern void
+js_SetVersion(JSContext *cx, JSVersion version);
+
+
+
+
+
+extern JSContext *
+js_NewContext(JSRuntime *rt, size_t stackChunkSize);
+
+extern void
+js_DestroyContext(JSContext *cx, JSGCMode gcmode);
+
+
+
+
+
+extern JSBool
+js_ValidContextPointer(JSRuntime *rt, JSContext *cx);
+
+
+
+
+
+extern JSContext *
+js_ContextIterator(JSRuntime *rt, JSBool unlocked, JSContext **iterp);
+
+
+
+
+extern JSBool
+js_StartResolving(JSContext *cx, JSResolvingKey *key, uint32 flag,
+                  JSResolvingEntry **entryp);
+
+extern void
+js_StopResolving(JSContext *cx, JSResolvingKey *key, uint32 flag,
+                 JSResolvingEntry *entry, uint32 generation);
+
+
+
+
+extern JSBool
+js_EnterLocalRootScope(JSContext *cx);
+
+extern void
+js_LeaveLocalRootScope(JSContext *cx);
+
+extern void
+js_ForgetLocalRoot(JSContext *cx, jsval v);
+
+extern int
+js_PushLocalRoot(JSContext *cx, JSLocalRootStack *lrs, jsval v);
+
+extern void
+js_MarkLocalRoots(JSContext *cx, JSLocalRootStack *lrs);
+
+
+
+
+
+typedef enum JSErrNum {
+
+
+# 1 "/nexbyte/server/include/js/js.msg" 1
+# 82 "/nexbyte/server/include/js/js.msg"
+JSMSG_NOT_AN_ERROR = 0,
+JSMSG_NOT_DEFINED = 1,
+JSMSG_NO_REG_EXPS = 2,
+JSMSG_MORE_ARGS_NEEDED = 3,
+JSMSG_BAD_CHAR = 4,
+JSMSG_BAD_TYPE = 5,
+JSMSG_CANT_LOCK = 6,
+JSMSG_CANT_UNLOCK = 7,
+JSMSG_INCOMPATIBLE_PROTO = 8,
+JSMSG_NO_CONSTRUCTOR = 9,
+JSMSG_CANT_ALIAS = 10,
+JSMSG_NOT_SCRIPTED_FUNCTION = 11,
+JSMSG_BAD_SORT_ARG = 12,
+JSMSG_BAD_ATOMIC_NUMBER = 13,
+JSMSG_TOO_MANY_LITERALS = 14,
+JSMSG_CANT_WATCH = 15,
+JSMSG_STACK_UNDERFLOW = 16,
+JSMSG_NEED_DIET = 17,
+JSMSG_TOO_MANY_LOCAL_ROOTS = 18,
+JSMSG_READ_ONLY = 19,
+JSMSG_BAD_FORMAL = 20,
+JSMSG_SAME_FORMAL = 21,
+JSMSG_NOT_FUNCTION = 22,
+JSMSG_NOT_CONSTRUCTOR = 23,
+JSMSG_STACK_OVERFLOW = 24,
+JSMSG_NOT_EXPORTED = 25,
+JSMSG_OVER_RECURSED = 26,
+JSMSG_IN_NOT_OBJECT = 27,
+JSMSG_BAD_NEW_RESULT = 28,
+JSMSG_BAD_SHARP_DEF = 29,
+JSMSG_BAD_SHARP_USE = 30,
+JSMSG_BAD_INSTANCEOF_RHS = 31,
+JSMSG_BAD_BYTECODE = 32,
+JSMSG_BAD_RADIX = 33,
+JSMSG_NAN = 34,
+JSMSG_CANT_CONVERT = 35,
+JSMSG_CYCLIC_VALUE = 36,
+JSMSG_PERMANENT = 37,
+JSMSG_CANT_CONVERT_TO = 38,
+JSMSG_NO_PROPERTIES = 39,
+JSMSG_CANT_FIND_CLASS = 40,
+JSMSG_CANT_XDR_CLASS = 41,
+JSMSG_BYTECODE_TOO_BIG = 42,
+JSMSG_UNKNOWN_FORMAT = 43,
+JSMSG_TOO_MANY_CON_ARGS = 44,
+JSMSG_TOO_MANY_FUN_ARGS = 45,
+JSMSG_BAD_QUANTIFIER = 46,
+JSMSG_MIN_TOO_BIG = 47,
+JSMSG_MAX_TOO_BIG = 48,
+JSMSG_OUT_OF_ORDER = 49,
+JSMSG_ZERO_QUANTIFIER = 50,
+JSMSG_UNTERM_QUANTIFIER = 51,
+JSMSG_EMPTY_BEFORE_STAR = 52,
+JSMSG_EMPTY_BEFORE_PLUS = 53,
+JSMSG_MISSING_PAREN = 54,
+JSMSG_UNTERM_CLASS = 55,
+JSMSG_TRAILING_SLASH = 56,
+JSMSG_BAD_CLASS_RANGE = 57,
+JSMSG_BAD_FLAG = 58,
+JSMSG_NO_INPUT = 59,
+JSMSG_CANT_OPEN = 60,
+JSMSG_BAD_STRING_MASK = 61,
+JSMSG_UNMATCHED_RIGHT_PAREN = 62,
+JSMSG_END_OF_DATA = 63,
+JSMSG_SEEK_BEYOND_START = 64,
+JSMSG_SEEK_BEYOND_END = 65,
+JSMSG_END_SEEK = 66,
+JSMSG_WHITHER_WHENCE = 67,
+JSMSG_BAD_SCRIPT_MAGIC = 68,
+JSMSG_PAREN_BEFORE_FORMAL = 69,
+JSMSG_MISSING_FORMAL = 70,
+JSMSG_PAREN_AFTER_FORMAL = 71,
+JSMSG_CURLY_BEFORE_BODY = 72,
+JSMSG_CURLY_AFTER_BODY = 73,
+JSMSG_PAREN_BEFORE_COND = 74,
+JSMSG_PAREN_AFTER_COND = 75,
+JSMSG_NO_IMPORT_NAME = 76,
+JSMSG_NAME_AFTER_DOT = 77,
+JSMSG_BRACKET_IN_INDEX = 78,
+JSMSG_NO_EXPORT_NAME = 79,
+JSMSG_PAREN_BEFORE_SWITCH = 80,
+JSMSG_PAREN_AFTER_SWITCH = 81,
+JSMSG_CURLY_BEFORE_SWITCH = 82,
+JSMSG_COLON_AFTER_CASE = 83,
+JSMSG_WHILE_AFTER_DO = 84,
+JSMSG_PAREN_AFTER_FOR = 85,
+JSMSG_SEMI_AFTER_FOR_INIT = 86,
+JSMSG_SEMI_AFTER_FOR_COND = 87,
+JSMSG_PAREN_AFTER_FOR_CTRL = 88,
+JSMSG_CURLY_BEFORE_TRY = 89,
+JSMSG_CURLY_AFTER_TRY = 90,
+JSMSG_PAREN_BEFORE_CATCH = 91,
+JSMSG_CATCH_IDENTIFIER = 92,
+JSMSG_PAREN_AFTER_CATCH = 93,
+JSMSG_CURLY_BEFORE_CATCH = 94,
+JSMSG_CURLY_AFTER_CATCH = 95,
+JSMSG_CURLY_BEFORE_FINALLY = 96,
+JSMSG_CURLY_AFTER_FINALLY = 97,
+JSMSG_CATCH_OR_FINALLY = 98,
+JSMSG_PAREN_BEFORE_WITH = 99,
+JSMSG_PAREN_AFTER_WITH = 100,
+JSMSG_CURLY_IN_COMPOUND = 101,
+JSMSG_NO_VARIABLE_NAME = 102,
+JSMSG_COLON_IN_COND = 103,
+JSMSG_PAREN_AFTER_ARGS = 104,
+JSMSG_BRACKET_AFTER_LIST = 105,
+JSMSG_COLON_AFTER_ID = 106,
+JSMSG_CURLY_AFTER_LIST = 107,
+JSMSG_PAREN_IN_PAREN = 108,
+JSMSG_SEMI_BEFORE_STMNT = 109,
+JSMSG_NO_RETURN_VALUE = 110,
+JSMSG_DUPLICATE_FORMAL = 111,
+JSMSG_EQUAL_AS_ASSIGN = 112,
+JSMSG_BAD_IMPORT = 113,
+JSMSG_TOO_MANY_DEFAULTS = 114,
+JSMSG_TOO_MANY_CASES = 115,
+JSMSG_BAD_SWITCH = 116,
+JSMSG_BAD_FOR_LEFTSIDE = 117,
+JSMSG_CATCH_AFTER_GENERAL = 118,
+JSMSG_CATCH_WITHOUT_TRY = 119,
+JSMSG_FINALLY_WITHOUT_TRY = 120,
+JSMSG_LABEL_NOT_FOUND = 121,
+JSMSG_TOUGH_BREAK = 122,
+JSMSG_BAD_CONTINUE = 123,
+JSMSG_BAD_RETURN = 124,
+JSMSG_BAD_LABEL = 125,
+JSMSG_DUPLICATE_LABEL = 126,
+JSMSG_VAR_HIDES_ARG = 127,
+JSMSG_BAD_VAR_INIT = 128,
+JSMSG_BAD_LEFTSIDE_OF_ASS = 129,
+JSMSG_BAD_OPERAND = 130,
+JSMSG_BAD_PROP_ID = 131,
+JSMSG_RESERVED_ID = 132,
+JSMSG_SYNTAX_ERROR = 133,
+JSMSG_BAD_SHARP_VAR_DEF = 134,
+JSMSG_BAD_PROTOTYPE = 135,
+JSMSG_MISSING_EXPONENT = 136,
+JSMSG_OUT_OF_MEMORY = 137,
+JSMSG_UNTERMINATED_STRING = 138,
+JSMSG_TOO_MANY_PARENS = 139,
+JSMSG_UNTERMINATED_COMMENT = 140,
+JSMSG_UNTERMINATED_REGEXP = 141,
+JSMSG_BAD_REGEXP_FLAG = 142,
+JSMSG_SHARPVAR_TOO_BIG = 143,
+JSMSG_ILLEGAL_CHARACTER = 144,
+JSMSG_BAD_OCTAL = 145,
+JSMSG_BAD_INDIRECT_CALL = 146,
+JSMSG_UNCAUGHT_EXCEPTION = 147,
+JSMSG_INVALID_BACKREF = 148,
+JSMSG_BAD_BACKREF = 149,
+JSMSG_PRECISION_RANGE = 150,
+JSMSG_BAD_GETTER_OR_SETTER = 151,
+JSMSG_BAD_ARRAY_LENGTH = 152,
+JSMSG_CANT_DESCRIBE_PROPS = 153,
+JSMSG_BAD_APPLY_ARGS = 154,
+JSMSG_REDECLARED_VAR = 155,
+JSMSG_UNDECLARED_VAR = 156,
+JSMSG_ANON_NO_RETURN_VALUE = 157,
+JSMSG_DEPRECATED_USAGE = 158,
+JSMSG_BAD_URI = 159,
+JSMSG_GETTER_ONLY = 160,
+JSMSG_TRAILING_COMMA = 161,
+JSMSG_UNDEFINED_PROP = 162,
+JSMSG_USELESS_EXPR = 163,
+JSMSG_REDECLARED_PARAM = 164,
+JSMSG_NEWREGEXP_FLAGGED = 165,
+JSMSG_RESERVED_SLOT_RANGE = 166,
+JSMSG_CANT_DECODE_PRINCIPALS = 167,
+JSMSG_CANT_SEAL_OBJECT = 168,
+JSMSG_CANT_UNSEAL_OBJECT = 169,
+JSMSG_BAD_XML_MARKUP = 170,
+JSMSG_BAD_XML_CHARACTER = 171,
+JSMSG_BAD_DEFAULT_XML_NAMESPACE = 172,
+JSMSG_BAD_XML_NAME_SYNTAX = 173,
+JSMSG_BRACKET_AFTER_ATTR_EXPR = 174,
+JSMSG_NAME_AFTER_DBLDOT = 175,
+JSMSG_CURLY_IN_XML_EXPR = 176,
+JSMSG_BAD_XML_NAMESPACE = 177,
+JSMSG_BAD_XML_ATTR_NAME = 178,
+JSMSG_BAD_XML_NAME = 179,
+JSMSG_BAD_XML_CONVERSION = 180,
+JSMSG_BAD_XMLLIST_CONVERSION = 181,
+JSMSG_IS_NOT_XML_OBJECT = 182,
+JSMSG_NO_ASSIGN_IN_XML_ATTR = 183,
+JSMSG_BAD_XML_ATTR_VALUE = 184,
+JSMSG_XML_TAG_NAME_MISMATCH = 185,
+JSMSG_BAD_XML_TAG_SYNTAX = 186,
+JSMSG_BAD_XML_LIST_SYNTAX = 187,
+JSMSG_INCOMPATIBLE_METHOD = 188,
+JSMSG_CANT_SET_XML_ATTRS = 189,
+JSMSG_END_OF_XML_SOURCE = 190,
+JSMSG_END_OF_XML_ENTITY = 191,
+JSMSG_BAD_XML_QNAME = 192,
+JSMSG_BAD_FOR_EACH_LOOP = 193,
+JSMSG_BAD_XMLLIST_PUT = 194,
+JSMSG_UNKNOWN_XML_ENTITY = 195,
+JSMSG_BAD_XML_NCR = 196,
+JSMSG_UNDEFINED_XML_NAME = 197,
+JSMSG_DUPLICATE_XML_ATTR = 198,
+JSMSG_TOO_MANY_FUN_VARS = 199,
+JSMSG_ARRAY_INIT_TOO_BIG = 200,
+JSMSG_REGEXP_TOO_COMPLEX = 201,
+JSMSG_BUFFER_TOO_SMALL = 202,
+JSMSG_BAD_SURROGATE_CHAR = 203,
+JSMSG_UTF8_CHAR_TOO_LARGE = 204,
+JSMSG_MALFORMED_UTF8_CHAR = 205,
+# 673 "/nexbyte/server/include/js/jscntxt.h" 2
+
+    JSErr_Limit
+} JSErrNum;
+
+extern const JSErrorFormatString *
+js_GetErrorMessage(void *userRef, const char *locale, const uintN errorNumber);
+# 696 "/nexbyte/server/include/js/jscntxt.h"
+extern void
+js_ReportOutOfMemory(JSContext *cx);
+
+
+
+
+
+extern void
+js_ReportErrorAgain(JSContext *cx, const char *message, JSErrorReport *report);
+
+extern void
+js_ReportIsNotDefined(JSContext *cx, const char *name);
+
+extern JSErrorFormatString js_ErrorFormatString[JSErr_Limit];
+# 724 "/nexbyte/server/include/js/jscntxt.h"
+}
+# 27 "static.cpp" 2
+
+# 1 "../common/stack.h" 1
+# 46 "../common/stack.h"
+inline void StackInit( void **stack ) {
+
+ *stack = __null;
+}
+
+
+inline void* StackData( const void * const * stack ) {
+
+  return ((void**)*stack)[1];
+}
+
+inline void StackSetData( const void * const * stack, void *data ) {
+
+  ((void**)*stack)[1] = data;
+}
+
+
+inline void* StackPrev( const void * const * stack ) {
+
+  return ((void**)*stack)[0];
+}
+
+
+inline void StackGoPrev( void ** stack ) {
+
+ *stack = ((void**)*stack)[0];
+}
+
+
+inline bool StackIsEnd( const void * const * stack ) {
+
+ return *stack == __null;
+}
+
+
+inline int StackLength( const void * const * stack ) {
+
+ register int length;
+ for ( length = 0; *stack; stack = (void**)*stack, length++ );
+ return length;
+}
+
+
+inline void* StackFind( void * const * stack, const void *data ) {
+
+ register void *it;
+ for ( it = *stack; it && StackData(&it) != data; StackGoPrev(&it) );
+ return it;
+}
+
+
+inline bool StackHas( void * const * stack, const void *data ) {
+
+ return StackFind(stack, data) != __null;
+}
+
+
+inline void StackPush( void **stack, void *data ) {
+
+  void **newItem = (void**)malloc( sizeof( void* ) * 2 );
+  newItem[0] = *stack;
+  newItem[1] = data;
+  *stack = newItem;
+}
+
+
+inline void* StackPop( void **stack ) {
+
+  void *data, **item = (void**)*stack;
+  *stack = item[0];
+  data = item[1];
+  free( item );
+  return data;
+}
+
+
+inline bool StackReplaceData( void * const *stack, const void *data, void *newData ) {
+
+ void *it;
+ if ( it = StackFind( stack, data ) )
+  StackSetData( stack, newData );
+ return it != __null;
+}
+
+
+inline bool StackIterate( void * const * stack, void **iterator ) {
+
+ return *iterator = *iterator == __null ? *stack : StackPrev(iterator);
+}
+
+
+inline void StackReverse( void **stack ) {
+
+ for ( void *tmp, *ptr = *stack; *(void**)ptr != __null; ) {
+
+  tmp = *stack;
+  *stack = *(void**)ptr;
+  *(void**)ptr = *(void**)*stack;
+  *(void**)*stack = tmp;
+ }
+}
+
+
+inline bool StackRemove( void **stack, void *data ) {
+
+ for ( ; *stack; stack = (void**)*stack )
+  if ( StackData(stack) == data ) {
+
+   void *tmp = *stack;
+   *stack = StackPrev(stack);
+   free(tmp);
+   return true;
+  }
+ return false;
+}
+
+
+inline void StackFreeContent( void **stack ) {
+
+ while ( *stack )
+      free( StackPop( stack ) );
+}
+
+
+inline void StackFree( void **stack ) {
+
+ while ( *stack )
+      StackPop( stack );
+}
+# 29 "static.cpp" 2
+
+extern JSFunction *stdoutFunction;
+
+BEGIN_STATIC
+
+DEFINE_FUNCTION( Expand ) {
+
+ RT_ASSERT_ARGC( 1 );
+
+ char *srcBegin;
+ int srcLen;
+ RT_JSVAL_TO_STRING_AND_LENGTH( argv[0], srcBegin, srcLen );
+ char *srcEnd = srcBegin + srcLen;
+
+ JSObject *table;
+ if ( argc >= 2 ) {
+
+  RT_ASSERT_OBJECT( argv[1] );
+  table = ((JSObject *)((void *)((argv[1]) & ~(jsval)(((JSUint32)1 << (3)) - 1))));
+ } else {
+
+  table = obj;
+ }
+
+ typedef struct {
+
+  const char *data;
+  long int length;
+ } Chunk;
+
+ int totalLength = 0;
+
+ void *stack;
+ StackInit( &stack );
+ Chunk *chunk;
+ char *tok;
+ jsval val;
+
+ while (true) {
+
+  tok = strstr(srcBegin, "$(");
+
+  if ( tok == __null ) {
+
+   chunk = (Chunk*)malloc(sizeof(Chunk));
+   chunk->data = srcBegin;
+   chunk->length = srcEnd - srcBegin;
+   totalLength += chunk->length;
+   StackPush( &stack, chunk );
+   break;
+  }
+
+  chunk = (Chunk*)malloc(sizeof(Chunk));
+  chunk->data = srcBegin;
+  chunk->length = tok - srcBegin;
+  totalLength += chunk->length;
+  StackPush( &stack, chunk );
+
+  srcBegin = tok + 2;
+
+
+
+  tok = strstr(srcBegin, ")");
+
+  if ( tok == __null )
+   break;
+
+  char tmp = *tok;
+  *tok = 0;
+  JS_GetProperty(cx, table, srcBegin, &val);
+  *tok = tmp;
+
+  chunk = (Chunk*)malloc(sizeof(Chunk));
+  RT_JSVAL_TO_STRING_AND_LENGTH( val, chunk->data, chunk->length );
+  totalLength += chunk->length;
+  StackPush( &stack, chunk );
+
+  srcBegin = tok + 1;
+
+
+ }
+
+ StackReverse(&stack);
+
+ char *expandedString = (char*)JS_malloc(cx, totalLength);
+
+ char *tmp = expandedString;
+ while ( !StackIsEnd(&stack) ) {
+
+  Chunk *chunk = (Chunk*)StackPop(&stack);
+  memcpy(tmp, chunk->data, chunk->length);
+  tmp += chunk->length;
+  free(chunk);
+ }
+
+ *rval = (((jsval)(JS_NewString(cx, expandedString, totalLength))) | (0x4));
+
+
+
+ return (JSIntn)1;
+}
+
+
+
+DEFINE_FUNCTION( Seal ) {
+
+ RT_ASSERT_ARGC(1);
+ JSBool deep;
+ RT_ASSERT_OBJECT(argv[0]);
+
+ if ( argc >= 2 )
+  RT_CHECK_CALL( JS_ValueToBoolean( cx, argv[1], &deep ) )
+ else
+  deep = (JSIntn)0;
+ return JS_SealObject(cx, ((JSObject *)((void *)((argv[0]) & ~(jsval)(((JSUint32)1 << (3)) - 1)))), deep);
+}
+
+
+
+DEFINE_FUNCTION( Clear ) {
+
+ RT_ASSERT_ARGC(1);
+ RT_ASSERT_OBJECT(argv[0]);
+ JS_ClearScope(cx, ((JSObject *)((void *)((argv[0]) & ~(jsval)(((JSUint32)1 << (3)) - 1)))));
+ return (JSIntn)1;
+}
+
+
+DEFINE_FUNCTION( SetScope ) {
+
+ RT_ASSERT_ARGC(2);
+
+ JSObject *o;
+ JS_ValueToObject(cx, argv[0], &o);
+
+ JSObject *p;
+ JS_ValueToObject(cx, argv[1], &p);
+
+ *rval = ((jsval)(JS_GetParent(cx, o)));
+
+ RT_CHECK_CALL( JS_SetParent(cx, o, p) );
+
+ return (JSIntn)1;
+}
+
+
+
+DEFINE_FUNCTION( HideProperties ) {
+
+ RT_ASSERT_ARGC(2);
+ JSObject *object;
+ JSBool err;
+ RT_CHECK_CALL( JS_ValueToObject( cx, argv[0], &object ) );
+ const char *propertyName;
+ uintN attributes;
+ for ( uintN i=1; i<argc; i++ ) {
+
+  jsid id;
+  uintN attrs;
+  JSObject *obj2;
+  JSProperty *prop;
+
+  RT_CHECK_CALL( JS_ValueToId(cx, argv[i], &id) );
+  RT_CHECK_CALL( (object)->map->ops->lookupProperty(cx,object,id,&obj2,&prop) );
+  if (!prop || object != obj2) {
+
+   if (prop)
+    ((obj2)->map->ops->dropProperty ? (obj2)->map->ops->dropProperty(cx,obj2,prop) : (void)0);
+   REPORT_ERROR( "Invalid property name." );
+  }
+  RT_CHECK_CALL( (object)->map->ops->getAttributes(cx,object,id,prop,&attrs) );
+  attrs &= ~0x01;
+  RT_CHECK_CALL( (object)->map->ops->setAttributes(cx,object,id,prop,&attrs) );
+  ((object)->map->ops->dropProperty ? (object)->map->ops->dropProperty(cx,object,prop) : (void)0);
+# 215 "static.cpp"
+ }
+ return (JSIntn)1;
+}
+
+
+DEFINE_FUNCTION( IdOf ) {
+
+ jsid id;
+ if ( (((argv[0]) & (((JSUint32)1 << (3)) - 1)) == 0x0) )
+  JS_GetObjectId(cx, ((JSObject *)((void *)((argv[0]) & ~(jsval)(((JSUint32)1 << (3)) - 1)))), &id);
+ else
+  JS_ValueToId(cx, argv[0], &id);
+ JS_NewNumberValue(cx,(JSUword)id,rval);
+ return (JSIntn)1;
+}
+# 245 "static.cpp"
+DEFINE_FUNCTION( Warning ) {
+
+ JSString *jssMesage = JS_ValueToString(cx, argv[0]);
+ argv[0] = (((jsval)(jssMesage)) | (0x4));
+ JS_ReportWarning( cx, "%s", JS_GetStringBytes(jssMesage) );
+ return (JSIntn)1;
+}
+
+
+
+DEFINE_PROPERTY( gcByte ) {
+
+ JSRuntime *rt = cx->runtime;
+ *vp = (((jsval)(rt->gcBytes) << 1) | 0x1);
+ return (JSIntn)1;
+}
+
+
+DEFINE_FUNCTION( CollectGarbage ) {
+
+
+
+
+
+ JS_GC( cx );
+
+
+
+
+
+ return (JSIntn)1;
+}
+
+
+DEFINE_FUNCTION( Print ) {
+
+ if ( stdoutFunction == __null )
+  return (JSIntn)1;
+ for (uintN i = 0; i<argc; i++)
+  RT_CHECK_CALL( JS_CallFunction(cx, obj, stdoutFunction, 1, &argv[i], rval) );
+ return (JSIntn)1;
+}
+# 302 "static.cpp"
+static JSScript* LoadScript(JSContext *cx, JSObject *obj, const char *fileName, bool useCompFile) {
+
+ char compiledFileName[MAX_PATH];
+ strcpy( compiledFileName, fileName );
+ strcat( compiledFileName, "xdr" );
+
+ struct _stat srcFileStat;
+ bool hasSrcFile = ( _stat( fileName, &srcFileStat ) != -1 ) ;
+
+ struct _stat compFileStat;
+ bool hasCompFile = ( _stat( compiledFileName, &compFileStat ) != -1 );
+
+ bool compFileUpToDate = ( hasSrcFile && hasCompFile && (srcFileStat.st_mtim.tv_sec < compFileStat.st_mtim.tv_sec) ) || ( hasCompFile && !hasSrcFile );
+
+ if ( !hasSrcFile && !hasCompFile ) {
+
+  JS_ReportError( cx, "Unable to load Script, file \"%s\" or \"%s\" not found.", fileName, compiledFileName );
+  return __null;
+ }
+
+ JSScript *script;
+
+ if ( useCompFile && compFileUpToDate ) {
+
+  FILE *file = fopen(compiledFileName, "rb");
+
+  if ( !file ) {
+
+   JS_ReportError( cx, "Unable to open file \"%s\" for reading.", compiledFileName );
+   return __null;
+  }
+
+  int compFileSize = compFileStat.st_size;
+  void *data = JS_malloc( cx, compFileSize );
+
+  size_t readCount = fread( data, 1, compFileSize, file );
+
+  if ( readCount != compFileSize ) {
+
+   JS_ReportError( cx, "Unable to read the file \"%s\" ", compiledFileName );
+   return __null;
+  }
+
+  fclose( file );
+
+  JSXDRState *xdr = JS_XDRNewMem(cx,JSXDR_DECODE);
+  if ( xdr == __null )
+   return __null;
+  JS_XDRMemSetData( xdr, data, compFileSize );
+  JSBool xdrSuccess = JS_XDRScript( xdr, &script );
+  if ( xdrSuccess != (JSIntn)1 )
+   return __null;
+
+  JS_XDRMemSetData(xdr, __null, 0);
+  JS_XDRDestroy(xdr);
+  JS_free( cx, data );
+ } else {
+
+  script = JS_CompileFile(cx, obj, fileName);
+
+  if ( useCompFile && script != __null ) {
+
+   JSXDRState *xdr = JS_XDRNewMem(cx,JSXDR_ENCODE);
+   if (!xdr)
+    return __null;
+   JSBool xdrSuccess = JS_XDRScript( xdr, &script );
+   if ( xdrSuccess != (JSIntn)1 )
+    return __null;
+   FILE *file = fopen( compiledFileName, "wb" );
+   if ( file != __null ) {
+
+    uint32 length;
+    void *buf = JS_XDRMemGetData( xdr, &length );
+    if ( buf == __null )
+     return __null;
+
+    fwrite( buf, 1, length, file );
+    fclose(file);
+   }
+   JS_XDRDestroy( xdr );
+  }
+ }
+ return script;
+}
+
+
+
+DEFINE_FUNCTION( Exec ) {
+
+
+ JSString *str;
+ const char *filename;
+ JSScript *script;
+ JSBool ok;
+
+ uint32 oldopts;
+
+ RT_ASSERT_ARGC(1);
+ bool saveCompiledScripts = true;
+ if ( argc >= 2 && argv[1] == (((jsval)((JSIntn)0) << 3) | (0x6)) )
+  saveCompiledScripts = false;
+
+ str = JS_ValueToString(cx, argv[0]);
+ RT_ASSERT( str != __null, "unable to get the filename." );
+ argv[0] = (((jsval)(str)) | (0x4));
+ filename = JS_GetStringBytes(str);
+ errno = 0;
+
+ oldopts = JS_GetOptions(cx);
+ JS_SetOptions(cx, oldopts | ((JSUint32)1 << (4)));
+
+ script = LoadScript( cx, obj, filename, saveCompiledScripts );
+ if (!script) {
+  ok = (JSIntn)0;
+ } else {
+
+
+
+
+
+  ok = JS_ExecuteScript(cx, obj, script, rval);
+  JS_DestroyScript(cx, script);
+ }
+ JS_SetOptions(cx, oldopts);
+
+ if (!ok)
+  return (JSIntn)0;
+ return (JSIntn)1;
+}
+
+
+
+
+DEFINE_FUNCTION( IsStatementValid ) {
+
+ RT_ASSERT_ARGC( 1 );
+ char *buffer;
+ int length;
+ RT_JSVAL_TO_STRING_AND_LENGTH( argv[0], buffer, length );
+ *rval = JS_BufferIsCompilableUnit(cx, obj, buffer, length) == (JSIntn)1 ? (((jsval)((JSIntn)1) << 3) | (0x6)) : (((jsval)((JSIntn)0) << 3) | (0x6));
+ return (JSIntn)1;
+}
+
+
+
+
+
+CONFIGURE_STATIC
+
+ BEGIN_STATIC_FUNCTION_SPEC
+  FUNCTION( Expand )
+  FUNCTION( Seal )
+  FUNCTION( Clear )
+  FUNCTION( SetScope )
+  FUNCTION( HideProperties )
+  FUNCTION( Exec )
+  FUNCTION( IsStatementValid )
+  FUNCTION( Print )
+  FUNCTION( CollectGarbage )
+  FUNCTION( Warning )
+  FUNCTION( IdOf )
+ END_STATIC_FUNCTION_SPEC
+
+ BEGIN_STATIC_PROPERTY_SPEC
+  PROPERTY_READ( gcByte )
+ END_STATIC_PROPERTY_SPEC
+
+END_STATIC
diff -ruN jslibs-20070508_orig/jsstd/stdafx.h jslibs-20070508/jsstd/stdafx.h
--- jslibs-20070508_orig/jsstd/stdafx.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsstd/stdafx.h	2008-11-09 14:40:03.000000000 +0100
@@ -15,7 +15,7 @@
 #include <jsapi.h>
 
 #define USE_UNSAFE_MODE
-#include "../common/jshelper.h"
-#include "../common/jsclass.h"
+#include "../common/jsHelper.h"
+#include "../common/jsClass.h"
 
 #include <stdlib.h>
diff -ruN jslibs-20070508_orig/jswinhost/GNUmakefile jslibs-20070508/jswinhost/GNUmakefile
--- jslibs-20070508_orig/jswinhost/GNUmakefile	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jswinhost/GNUmakefile	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,67 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+
+# Package and system info.
+# ---------------------------------------------------------------------------
+PACKAGE = jswinhost
+DEPMODE = 0
+WARNINGS = undef no-ctor-dtor-privacy no-attributes
+MACHINE = arch=i686
+AUXDIRS = 
+
+# Library build configuration.
+# ---------------------------------------------------------------------------
+#js_LIBRARIES = \
+#  nspr
+
+HEADERS = $(wildcard include/*/*.h include/*/*/*.h include/*/*/*/*.h)
+
+IMPORTLIBS = $(patsubst %,js%.$(ilibext),$(js_LIBRARIES))
+SHAREDLIBS = $(addprefix ,$(patsubst $(ilibmask),$(slibmask),$(IMPORTLIBS)))
+LIBRARIES = $(IMPORTLIBS) $(SHAREDLIBS)
+
+PROGRAMS = jswinhost$(binext)
+
+#hell:
+#	@echo $(SHAREDLIBS)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+DISTFILES = $(call collect,makefiles sources autoconf win32 texts automake images nls mac scripts borland auxfiles *.bkl *.xrc *.wxr) version-script.in
+
+# Include global configuration.
+# ---------------------------------------------------------------------------
+TARGETS = $(LIBRARIES) $(PROGRAMS)
+
+#$(dir $(wildcard ../audium.mk))
+topdir ?= ../
+include $(topdir)build.mk
+include $(topdir)js.mk
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+# Installation target
+install: all
+	$(call install-rdata,$(wildcard include/*/*.h),$(DESTDIR)$(includedir),include)
+	$(call install-rdata,$(wildcard include/*/*/*.h),$(DESTDIR)$(includedir),include)
+	$(call install-rdata,$(wildcard include/*/*/*/*.h),$(DESTDIR)$(includedir),include)
+#	$(call install-data,$(wildcard lib/wx/include/msw-ansi-release-2.8/wx/*.h),$(includedir)/wx)
+#	$(call install-data,$(wildcard lib/wx/include/msw-ansi-release-2.8/wx/msw/*.h),$(includedir)/wx/msw)
+	$(call install-data,$(IMPORTLIBS),$(DESTDIR)$(libdir))
+	$(call install-exec,$(SHAREDLIBS),$(DESTDIR)$(slibdir))
+
+# Library link targets.
+# ---------------------------------------------------------------------------
+jswinhost_OBJECTS = jswinhost.o 
+#stdafx.o
+  
+DRIVER = $(CXX)
+
+# wx_regex
+$(jswinhost_OBJECTS): CXXFLAGS += -I. $(JS_CFLAGS) $(NSPR_CFLAGS)
+$(jswinhost_OBJECTS): %.o: %.cpp
+	$(COMPILE) -c -o $@ $<
+
+jswinhost: LIBS = $(JS_LIBS)
+jswinhost: $(jswinhost_OBJECTS)
+	$(LINK) -o $@ $^
diff -ruN jslibs-20070508_orig/jswinhost/jswinhost.cpp jslibs-20070508/jswinhost/jswinhost.cpp
--- jslibs-20070508_orig/jswinhost/jswinhost.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jswinhost/jswinhost.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -1,6 +1,5 @@
-#include "stdafx.h"
-
 #ifdef WIN32
+ #include "stdafx.h"
  #define DLL_EXT ".dll"
 #else
  #define DLL_EXT ".so"
@@ -11,8 +10,16 @@
 
 #include "jsprf.h"
 
+#include <limits.h>
+#include <string.h>
+#include <dlfcn.h>
+
+#ifndef MAX_PATH
+#define MAX_PATH PATH_MAX
+#endif
+
 #include "../common/jsNames.h"
-#include "../common/jshelper.h"
+#include "../common/jsHelper.h"
 #include "../configuration/configuration.h"
 #include "../moduleManager/moduleManager.h"
 
@@ -25,7 +32,11 @@
 	strcpy( libFileName, fileName );
 	strcat( libFileName, DLL_EXT );
 	ModuleId id = ModuleLoad(libFileName, cx, obj);
+#ifdef WIN32
 	RT_ASSERT_2( id != 0, "Unable to load the module %s (error:%d).", libFileName, GetLastError() );
+#else
+	RT_ASSERT_2( id != 0, "Unable to load the module %s (error:%s).", libFileName, dlerror() );
+#endif
 	RT_CHECK_CALL( JS_NewNumberValue(cx, id, rval) );
 	return JS_TRUE;
 }
@@ -35,7 +46,7 @@
 	RT_ASSERT_ARGC(1);
 	jsdouble dVal;
 	RT_CHECK_CALL( JS_ValueToNumber(cx, argv[0], &dVal) );
-	ModuleId id = dVal;
+	ModuleId id = (int)dVal;
 	bool st = ModuleUnload(id, cx);
 	RT_ASSERT( st == true, "Unable to unload the module" );
 	return JS_TRUE;
@@ -111,6 +122,7 @@
     int i, j, k, n;
     char *prefix, *tmp;
     const char *ctmp;
+    char *msg;
 
     if (!report) {
 
@@ -160,7 +172,7 @@
 
     /* report->linebuf usually ends with a newline. */
     n = strlen(report->linebuf);
-    char *msg = JS_smprintf(":\n%s%s%s%s",
+    msg = JS_smprintf(":\n%s%s%s%s",
             prefix,
             report->linebuf,
             (n > 0 && report->linebuf[n-1] == '\n') ? "" : "\n",
@@ -185,9 +197,12 @@
 }
 
 
-
-int APIENTRY WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow ) {
-
+#ifdef WIN32
+int APIENTRY WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow )
+#else
+int main(int argc, char *argv[])
+#endif
+{
 	JSRuntime *rt;
 	JSContext *cx;
 	JSObject *globalObject;
@@ -198,7 +213,7 @@
 	rt = JS_NewRuntime(maxbytes); // maxbytes specifies the number of allocated bytes after which garbage collection is run.
 	cx = JS_NewContext(rt, stackSize); // A context specifies a stack size for the script, the amount, in bytes, of private memory to allocate to the execution stack for the script.
 
-	JS_SetVersion( cx, JSVERSION_1_7 );
+	JS_SetVersion( cx, JSVERSION_1_6 );
 	// (TBD) set into configuration file
 
 	JS_SetErrorReporter(cx, ErrorReporter);
@@ -236,8 +251,14 @@
 	JS_SetProperty(cx, configObject, NAME_CONFIGURATION_UNSAFE_MODE, &value);
 
 // arguments
+#ifdef WIN32
 	JS_DefineProperty(cx, globalObject, NAME_GLOBAL_ARGUMENT, STRING_TO_JSVAL(JS_NewStringCopyZ(cx, lpCmdLine)), NULL, NULL, JSPROP_READONLY | JSPROP_PERMANENT);
-	
+#endif
+
+#ifndef WIN32
+	char *moduleFileName = argv[0];
+  char *name = basename(moduleFileName);
+#else  
 	CHAR moduleFileName[MAX_PATH];
 	DWORD len = GetModuleFileName(hInstance, moduleFileName, sizeof(moduleFileName));
 	if ( len == 0 )
@@ -247,6 +268,7 @@
 		return -1;
 	*name = '\0';
 	name++;
+#endif
 	
 	JS_DefineProperty(cx, globalObject, NAME_GLOBAL_SCRIPT_HOST_NAME, STRING_TO_JSVAL(JS_NewStringCopyZ(cx, name)), NULL, NULL, JSPROP_READONLY | JSPROP_PERMANENT);
 	JS_DefineProperty(cx, globalObject, NAME_GLOBAL_SCRIPT_HOST_PATH, STRING_TO_JSVAL(JS_NewStringCopyZ(cx, moduleFileName)), NULL, NULL, JSPROP_READONLY | JSPROP_PERMANENT);
@@ -257,8 +279,14 @@
 		options |= JSOPTION_STRICT;
 	JS_SetOptions(cx, options );
 
+#ifndef WIN32
+  char scriptName[PATH_MAX];
+  strncpy(scriptName, argv[0], sizeof(scriptName)-1);
+  size_t scriptNameLen = strlen(scriptName);
+#else  
 	CHAR scriptName[MAX_PATH];
 	DWORD scriptNameLen = GetModuleFileName(hInstance, scriptName, sizeof(scriptName));
+#endif
 	strcpy( scriptName + scriptNameLen - 3, "js" ); // construct the script name
 
 	JSScript *script = JS_CompileFile( cx, globalObject, scriptName );
@@ -281,4 +309,4 @@
   ModuleFreeAll();
 
   return 0;
-}
\ No newline at end of file
+}
diff -ruN jslibs-20070508_orig/jsz/GNUmakefile jslibs-20070508/jsz/GNUmakefile
--- jslibs-20070508_orig/jsz/GNUmakefile	1970-01-01 01:00:00.000000000 +0100
+++ jslibs-20070508/jsz/GNUmakefile	2008-11-09 14:40:03.000000000 +0100
@@ -0,0 +1,55 @@
+# $Id: jslibs-20070508-linux.patch,v 1.1 2007/05/09 21:02:48 roman Exp $
+
+# Package and system info.
+# ---------------------------------------------------------------------------
+PACKAGE = jsz
+DEPMODE = 0
+WARNINGS = undef no-ctor-dtor-privacy no-attributes
+MACHINE = arch=i686
+AUXDIRS = 
+CMDECHO = full
+
+# Library build configuration.
+# ---------------------------------------------------------------------------
+js_LIBRARIES = \
+  z
+
+IMPORTLIBS = $(patsubst %,js%.$(ilibext),$(js_LIBRARIES))
+SHAREDLIBS = $(addprefix ,$(patsubst $(ilibmask),$(modmask),$(IMPORTLIBS)))
+LIBRARIES = $(IMPORTLIBS) $(SHAREDLIBS)
+LTLIBRARIES = $(js_LIBRARIES:%=js%.la)
+
+#hell:
+#	@echo $(SHAREDLIBS)
+
+# Global build configuration.
+# ---------------------------------------------------------------------------
+DISTFILES = $(call collect,makefiles sources autoconf win32 texts automake images nls mac scripts borland auxfiles *.bkl *.xrc *.wxr) version-script.in
+
+# Include global configuration.
+# ---------------------------------------------------------------------------
+TARGETS = $(LTLIBRARIES) $(PROGRAMS)
+
+#$(dir $(wildcard ../audium.mk))
+topdir ?= ../
+include $(topdir)build.mk
+include $(topdir)js.mk
+
+# Build targets.
+# ---------------------------------------------------------------------------
+
+# Installation target
+install: all
+	$(INSTALL) -d $(DESTDIR)$(libdir)/js
+	$(LIBTOOL) --mode=install $(INSTALL) -m 755 $(LTLIBRARIES) $(DESTDIR)$(libdir)/js
+# Library link targets.
+# ---------------------------------------------------------------------------
+jsz_LTOBJECTS = main.lo z.lo zError.lo
+  
+$(jsz_LTOBJECTS): CXXFLAGS += -I. $(JS_CFLAGS) $(ZLIB_CFLAGS)
+$(jsz_LTOBJECTS): %.lo: %.cpp
+
+jsz.la: LTLINK = $(LTCXXLINK)
+jsz.la: $(jsz_LTOBJECTS)
+jsz.la: LDFLAGS = -module -rpath $(libdir) -no-undefined -avoid-version
+jsz.la: LIBS = $(JS_LIBS) $(ZLIB_LIBS)
diff -ruN jslibs-20070508_orig/jsz/buffer.h jslibs-20070508/jsz/buffer.h
--- jslibs-20070508_orig/jsz/buffer.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsz/buffer.h	2008-11-09 14:40:03.000000000 +0100
@@ -62,7 +62,7 @@
 		_hasStaticMem = true;
 
 		_queueLength = INITIAL_QUEUE_LENGTH;
-		_queue = (BufferChunk*)malloc( _queueLength * sizeof BufferChunk );
+		_queue = (BufferChunk*)malloc( _queueLength * sizeof(BufferChunk));
 		_currentIndex = 0;
 
 		_queue[0].mem = NULL;
@@ -121,7 +121,7 @@
 			if ( _currentIndex >= _queueLength ) {
 
 				_queueLength *= 2;
-				_queue = (BufferChunk*)realloc( _queue, _queueLength * sizeof BufferChunk );
+				_queue = (BufferChunk*)realloc( _queue, _queueLength * sizeof(BufferChunk) );
 			}
 
 			if ( _hasStaticMem && length <= sizeof _staticMem ) {
@@ -169,4 +169,4 @@
 		return waste;
 	}
 
-};
\ No newline at end of file
+};
diff -ruN jslibs-20070508_orig/jsz/main.cpp jslibs-20070508/jsz/main.cpp
--- jslibs-20070508_orig/jsz/main.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsz/main.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -12,23 +12,30 @@
  * License.
  * ***** END LICENSE BLOCK ***** */
 
+#ifdef WIN32
 #include "stdafx.h"
-
 #define XP_WIN
+#else
+#define XP_UNIX
+#endif
 #include <jsapi.h>
 
 
 #include "zError.h"
 #include "z.h"
 
-extern "C" __declspec(dllexport) JSBool ModuleInit(JSContext *cx, JSObject *obj) {
+extern "C"
+#ifdef WIN32
+__declspec(dllexport)
+#endif
+JSBool ModuleInit(JSContext *cx, JSObject *obj) {
 
 	zInitClass( cx, obj );
 	InitErrorClass( cx, obj );
   return JS_TRUE;
 }
 
-
+#ifdef WIN32
 BOOL APIENTRY DllMain( HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved ) {
 
   switch (ul_reason_for_call) {
@@ -41,4 +48,4 @@
   }
   return TRUE;
 }
-
+#endif
diff -ruN jslibs-20070508_orig/jsz/z.cpp jslibs-20070508/jsz/z.cpp
--- jslibs-20070508_orig/jsz/z.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsz/z.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -12,14 +12,19 @@
  * License.
  * ***** END LICENSE BLOCK ***** */
 
+#ifdef WIN32
 #include "stdafx.h"
+#define XP_WIN
+#else
+#define XP_UNIX
+#endif
 
 #define ASSERT(e)
 
-#define XP_WIN
 #include <jsapi.h>
 #include <zlib.h>
 #include <stdlib.h>
+#include <string.h>
 
 #include "zError.h"
 #include "z.h"
@@ -159,7 +164,7 @@
 		return JS_FALSE;
 	}
 
-	z_streamp stream = (z_streamp)malloc( sizeof z_stream );
+	z_streamp stream = (z_streamp)malloc( sizeof(z_stream) );
 	stream->zalloc = Z_NULL;
 	stream->zfree = Z_NULL;
 	stream->opaque = (voidpf) false; // use this private member to store the "stream_end" status (eof)
@@ -267,7 +272,7 @@
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 JSBool z_static_getter_idealInputLength(JSContext *cx, JSObject *obj, jsval id, jsval *vp) {
 
-	JS_NewNumberValue( cx, Buffer.staticBufferLength, vp );
+	JS_NewNumberValue( cx, Buffer::staticBufferLength, vp );
 	return JS_TRUE;
 }
 
diff -ruN jslibs-20070508_orig/jsz/zError.cpp jslibs-20070508/jsz/zError.cpp
--- jslibs-20070508_orig/jsz/zError.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/jsz/zError.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -12,9 +12,13 @@
  * License.
  * ***** END LICENSE BLOCK ***** */
 
+#ifdef WIN32
 #include "stdafx.h"
-
 #define XP_WIN
+#else
+#define XP_UNIX
+#endif
+
 #include <jsapi.h>
 //#include <jsdbgapi.h>
 //#include <jscntxt.h>
diff -ruN jslibs-20070508_orig/moduleManager/moduleManager.cpp jslibs-20070508/moduleManager/moduleManager.cpp
--- jslibs-20070508_orig/moduleManager/moduleManager.cpp	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/moduleManager/moduleManager.cpp	2008-11-09 14:40:03.000000000 +0100
@@ -17,32 +17,54 @@
 
 #include "../common/queue.h"
 
+#ifndef _WIN32
+#include <dlfcn.h>
+#endif
+
+#ifdef _WIN32
 HMODULE _moduleList[32] = {NULL}; // do not manage the module list dynamicaly, we allow a maximum of 32 modules
+#else
+void *_moduleList[32] = {NULL};
+#endif
 
 ModuleId ModuleLoad( const char *fileName, JSContext *cx, JSObject *obj ) {
 
 	if ( fileName == NULL || *fileName == '\0' )
 		return 0;
+#ifdef _WIN32
 	HMODULE module = ::LoadLibrary(fileName);
-	if ( module == NULL )
-		return 0;
-	int i;
+#else
+  void *module = dlopen(fileName, RTLD_NOW);
+#endif // _WIN32
+  if( module == NULL )
+    return 0;
+  int i;
 	int MaxModuleSlot = sizeof(_moduleList)/sizeof(*_moduleList);
 	for ( i = 0; _moduleList[i] != NULL && i < MaxModuleSlot; ++i ); // find a free module slot
 	if ( i == MaxModuleSlot )
 		return 0;
+#ifdef _WIN32
 	ModuleInitFunction moduleInit = (ModuleInitFunction)::GetProcAddress( module, NAME_MODULE_INIT );
+#else
+  ModuleInitFunction moduleInit = (ModuleInitFunction)::dlsym( module, NAME_MODULE_INIT );
+#endif
 	if ( moduleInit == NULL ) {
-
+#ifdef _WIN32
 		::FreeLibrary(module);
+#else
+    ::dlclose(module);
+#endif
 		return 0;
 	}
 
 	_moduleList[i] = module;
 
 	if ( moduleInit(cx, obj) == JS_FALSE ) {
-		
+#ifdef _WIN32
 		::FreeLibrary(module);
+#else
+    ::dlclose(module);
+#endif
 		_moduleList[i] = NULL;
 		return 0;
 	}
@@ -50,11 +72,19 @@
 }
 
 bool ModuleIsUnloadable( ModuleId id ) {
-
+#ifdef _WIN32
 	HMODULE module = (HMODULE)id;
+#else
+  void *module = (void *)id;
+#endif
 	if ( module == NULL )
 		return false;
-	ModuleReleaseFunction moduleRelease = (ModuleReleaseFunction)::GetProcAddress( module, NAME_MODULE_RELEASE );
+	ModuleReleaseFunction moduleRelease = (ModuleReleaseFunction)
+#ifdef _WIN32
+    ::GetProcAddress( module, NAME_MODULE_RELEASE );
+#else
+    ::dlsym( module, NAME_MODULE_RELEASE );
+#endif
 	if ( moduleRelease == NULL )
 		return false;
 	return true;
@@ -102,7 +132,12 @@
 	for ( int i = sizeof(_moduleList) / sizeof(*_moduleList) - 1; i >= 0; --i ) // beware: 'i' must be signed // start from the end
 		if ( _moduleList[i] != NULL ) {
 
-			ModuleReleaseFunction moduleRelease = (ModuleReleaseFunction)::GetProcAddress( _moduleList[i], NAME_MODULE_RELEASE );
+			ModuleReleaseFunction moduleRelease = (ModuleReleaseFunction)
+#ifdef _WIN32
+        ::GetProcAddress( _moduleList[i], NAME_MODULE_RELEASE );
+#else
+        ::dlsym( _moduleList[i], NAME_MODULE_RELEASE );
+#endif
 			if ( moduleRelease != NULL )
 				moduleRelease(cx);
 		}
@@ -113,9 +148,18 @@
 	for ( int i = sizeof(_moduleList) / sizeof(*_moduleList) - 1; i >= 0; --i ) // beware: 'i' must be signed // start from the end
 		if ( _moduleList[i] != NULL ) {
 
-			ModuleFreeFunction moduleFree = (ModuleFreeFunction)::GetProcAddress( _moduleList[i], NAME_MODULE_FREE );
+			ModuleFreeFunction moduleFree = (ModuleFreeFunction)
+#ifdef _WIN32
+        ::GetProcAddress( _moduleList[i], NAME_MODULE_FREE );
+#else
+        ::dlsym( _moduleList[i], NAME_MODULE_FREE );
+#endif
 			if ( moduleFree != NULL )
 				moduleFree();
+#ifdef _WIN32
 			::FreeLibrary(_moduleList[i]);
+#else
+      ::dlclose(_moduleList[i]);
+#endif
 		}
 }
diff -ruN jslibs-20070508_orig/moduleManager/moduleManager.h jslibs-20070508/moduleManager/moduleManager.h
--- jslibs-20070508_orig/moduleManager/moduleManager.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/moduleManager/moduleManager.h	2008-11-09 14:40:03.000000000 +0100
@@ -26,9 +26,15 @@
 typedef JSBool (*ModuleReleaseFunction)(JSContext *cx);
 typedef void (*ModuleFreeFunction)(void);
 
-extern "C" __declspec(dllexport) JSBool ModuleInit(JSContext *cx, JSObject *obj);
-extern "C" __declspec(dllexport) JSBool ModuleRelease(JSContext *cx);
-extern "C" __declspec(dllexport) void ModuleFree();
+#ifdef WIN32
+#define EXPORT __declspec(dllexport)
+#else
+#define EXPORT
+#endif
+
+extern "C" EXPORT JSBool ModuleInit(JSContext *cx, JSObject *obj);
+extern "C" EXPORT JSBool ModuleRelease(JSContext *cx);
+extern "C" EXPORT void ModuleFree();
 
 ModuleId ModuleLoad( const char *fileName, JSContext *cx, JSObject *obj );
 bool ModuleIsUnloadable( ModuleId id );
diff -ruN jslibs-20070508_orig/moduleManager/stdafx.h jslibs-20070508/moduleManager/stdafx.h
--- jslibs-20070508_orig/moduleManager/stdafx.h	2008-11-09 14:40:03.000000000 +0100
+++ jslibs-20070508/moduleManager/stdafx.h	2008-11-09 14:40:03.000000000 +0100
@@ -3,14 +3,17 @@
 // are changed infrequently
 //
 
+#ifdef _WIN32
 #pragma once
 
 #define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers
 
 // TODO: reference additional headers your program requires here
+
 #include <windows.h>
 #define XP_WIN
+#endif
 #include <jsapi.h>
-#include "../common/jshelper.h"
+#include "../common/jsHelper.h"
 
 
