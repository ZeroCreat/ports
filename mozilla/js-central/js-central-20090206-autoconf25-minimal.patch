diff --git a/src/aclocal.m4 b/src/aclocal.m4
index 7f11cd2..5de567f 100644
--- a/src/aclocal.m4
+++ b/src/aclocal.m4
@@ -1,9 +1,16 @@
-dnl
-dnl Local autoconf macros used with mozilla
-dnl The contents of this file are under the Public Domain.
-dnl 
+# generated automatically by aclocal 1.10.1 -*- Autoconf -*-
 
-builtin(include, build/autoconf/pkg.m4)dnl
-builtin(include, build/autoconf/nspr.m4)dnl
-builtin(include, build/autoconf/altoptions.m4)dnl
-builtin(include, build/autoconf/moznbytetype.m4)dnl
+# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
+# 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
+# This file is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+# PARTICULAR PURPOSE.
+
+m4_include([build/autoconf/altoptions.m4])
+m4_include([build/autoconf/moznbytetype.m4])
+m4_include([build/autoconf/nspr.m4])
diff --git a/src/config/autoconf.mk.in b/src/config/autoconf.mk.in
index 62e5674..4779b67 100644
--- a/src/config/autoconf.mk.in
+++ b/src/config/autoconf.mk.in
@@ -59,6 +59,7 @@ bindir		= @bindir@
 includedir	= @includedir@
 libdir		= @libdir@
 datadir		= @datadir@
+datarootdir = @datarootdir@
 mandir		= @mandir@
 
 installdir	= $(libdir)/$(MOZ_APP_NAME)-$(MOZ_APP_VERSION)
diff --git a/src/configure.in b/src/configure.in
index f636b12..3dcc89f 100644
--- a/src/configure.in
+++ b/src/configure.in
@@ -60,11 +60,12 @@ dnl ***** END LICENSE BLOCK *****
 dnl Process this file with autoconf to produce a configure script.
 dnl ========================================================
 
-AC_PREREQ(2.13)
-AC_INIT(jsapi.h)
+AC_PREREQ(2.61)
+AC_INIT
+AC_CONFIG_SRCDIR([jsapi.h])
 AC_CONFIG_AUX_DIR(${srcdir}/build/autoconf)
 AC_CONFIG_HEADER(js-config.h)
-AC_CANONICAL_SYSTEM
+AC_CANONICAL_TARGET
 TARGET_CPU="${target_cpu}"
 TARGET_VENDOR="${target_vendor}"
 TARGET_OS="${target_os}"
@@ -200,14 +201,17 @@ dnl ========================================================
 
 if test "$COMPILE_ENVIRONMENT"; then
 
+AC_PROG_CC
+AC_PROG_CXX
+
 if test "$target" != "$host"; then
-    echo "cross compiling from $host to $target"
+    AC_MSG_NOTICE([cross compiling from $host to $target])
 
     _SAVE_CC="$CC"
     _SAVE_CFLAGS="$CFLAGS"
     _SAVE_LDFLAGS="$LDFLAGS"
 
-    AC_MSG_CHECKING([for host c compiler])
+    AC_MSG_CHECKING([for host C compiler])
     AC_CHECK_PROGS(HOST_CC, $HOST_CC gcc cc /usr/ucb/cc cl icc, "")
     if test -z "$HOST_CC"; then
         AC_MSG_ERROR([no acceptable c compiler found in \$PATH])
@@ -237,7 +241,7 @@ if test "$target" != "$host"; then
 
     AC_MSG_CHECKING([whether the host c compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
     AC_TRY_COMPILE([], [return(0);], 
-	[ac_cv_prog_hostcc_works=1 AC_MSG_RESULT([yes])],
+	[ac_cv_prog_hostcc_works=1; AC_MSG_RESULT([yes])],
 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CC cannot create executables.]) )
 
     CC="$HOST_CXX"
@@ -245,7 +249,7 @@ if test "$target" != "$host"; then
 
     AC_MSG_CHECKING([whether the host c++ compiler ($HOST_CXX $HOST_CXXFLAGS $HOST_LDFLAGS) works])
     AC_TRY_COMPILE([], [return(0);], 
-	[ac_cv_prog_hostcxx_works=1 AC_MSG_RESULT([yes])],
+	[ac_cv_prog_hostcxx_works=1; AC_MSG_RESULT([yes])],
 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CXX cannot create executables.]) )
     
     CC=$_SAVE_CC
@@ -297,8 +301,6 @@ if test "$target" != "$host"; then
     dnl compiler appear native.  So we override that here.
     cross_compiling=yes
 else
-    AC_PROG_CC
-    AC_PROG_CXX
     AC_PROG_RANLIB
     AC_PATH_PROGS(AS, $AS as, $CC)
     AC_CHECK_PROGS(AR, ar, :)
@@ -410,17 +412,15 @@ case "$target" in
         # Make sure compilers are valid
         CFLAGS="$CFLAGS -TC -nologo"
         CXXFLAGS="$CXXFLAGS -TP -nologo"
-        AC_LANG_SAVE
-        AC_LANG_C
         AC_TRY_COMPILE([#include <stdio.h>],
             [ printf("Hello World\n"); ],,
             AC_MSG_ERROR([\$(CC) test failed.  You must have MS VC++ in your path to build.]) )
 
-        AC_LANG_CPLUSPLUS
+        AC_LANG_PUSH([C++])
         AC_TRY_COMPILE([#include <new.h>],
             [ unsigned *test = new unsigned(42); ],,
             AC_MSG_ERROR([\$(CXX) test failed.  You must have MS VC++ in your path to build.]) )
-        AC_LANG_RESTORE
+        AC_LANG_POP([C++])
         
         changequote(,)
         _MSVC_VER_FILTER='s|.* ([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?).*|\1|p'
@@ -594,6 +594,9 @@ if test -n "$_WIN32_MSVC"; then
     esac
 fi
 
+AC_PROG_CC_C99([C99="$CC $ac_cv_prog_cc_c99"], [C99="$CC"])
+AC_SUBST([C99])
+
 fi # COMPILE_ENVIRONMENT
 
 if test "$cross_compiling"  = "yes"; then
@@ -828,14 +831,13 @@ tools are selected during the Xcode/Developer Tools installation.])
     fi
   fi
 
-  AC_LANG_SAVE
   AC_MSG_CHECKING([for valid compiler/Mac OS X SDK combination])
-  AC_LANG_CPLUSPLUS
+  AC_LANG_PUSH([C++])
   AC_TRY_COMPILE([#include <new>
                  int main() { return 0; }],
    result=yes,
    result=no)
-  AC_LANG_RESTORE
+  AC_LANG_POP([C++])
   AC_MSG_RESULT($result)
 
   if test "$result" = "no" ; then
@@ -895,6 +897,7 @@ fi # COMPILE_ENVIRONMENT
 dnl ========================================================
 dnl set the defaults first
 dnl ========================================================
+m4_pattern_allow([AS_BIN])
 AS_BIN=$AS
 AR_FLAGS='cr $@'
 AR_LIST='$(AR) t'
@@ -1326,8 +1329,7 @@ if test "$GNU_CXX"; then
     AC_CACHE_CHECK(whether the compiler supports -Wno-invalid-offsetof,
                    ac_has_wno_invalid_offsetof,
         [
-            AC_LANG_SAVE
-            AC_LANG_CPLUSPLUS
+            AC_LANG_PUSH([C++])
             _SAVE_CXXFLAGS="$CXXFLAGS"
             CXXFLAGS="$CXXFLAGS ${_COMPILER_PREFIX}-Wno-invalid-offsetof"
             AC_TRY_COMPILE([],
@@ -1335,7 +1337,7 @@ if test "$GNU_CXX"; then
                            ac_has_wno_invalid_offsetof="yes",
                            ac_has_wno_invalid_offsetof="no")
             CXXFLAGS="$_SAVE_CXXFLAGS"
-            AC_LANG_RESTORE
+            AC_LANG_POP([C++])
         ])
     if test "$ac_has_wno_invalid_offsetof" = "yes"; then
         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-Wno-invalid-offsetof"
@@ -1398,9 +1400,7 @@ configure_static_assert_macros='
 dnl test that the macros actually work:
 AC_MSG_CHECKING(that static assertion macros used in autoconf tests work)
 AC_CACHE_VAL(ac_cv_static_assertion_macros_work,
- [AC_LANG_SAVE
-  AC_LANG_C
-  ac_cv_static_assertion_macros_work="yes"
+ [ac_cv_static_assertion_macros_work="yes"
   AC_TRY_COMPILE([$configure_static_assert_macros],
                  [CONFIGURE_STATIC_ASSERT(1)],
                  ,
@@ -1409,7 +1409,7 @@ AC_CACHE_VAL(ac_cv_static_assertion_macros_work,
                  [CONFIGURE_STATIC_ASSERT(0)],
                  ac_cv_static_assertion_macros_work="no",
                  )
-  AC_LANG_CPLUSPLUS
+  AC_LANG_PUSH([C++])
   AC_TRY_COMPILE([$configure_static_assert_macros],
                  [CONFIGURE_STATIC_ASSERT(1)],
                  ,
@@ -1418,7 +1418,7 @@ AC_CACHE_VAL(ac_cv_static_assertion_macros_work,
                  [CONFIGURE_STATIC_ASSERT(0)],
                  ac_cv_static_assertion_macros_work="no",
                  )
-  AC_LANG_RESTORE
+  AC_LANG_POP([C++])
  ])
 AC_MSG_RESULT("$ac_cv_static_assertion_macros_work")
 if test "$ac_cv_static_assertion_macros_work" = "no"; then
@@ -1430,8 +1430,6 @@ dnl ========================================================
 dnl Checking for 64-bit OS
 dnl ========================================================
 if test "$COMPILE_ENVIRONMENT"; then
-AC_LANG_SAVE
-AC_LANG_C
 AC_MSG_CHECKING(for 64-bit OS)
 AC_TRY_COMPILE([$configure_static_assert_macros],
                [CONFIGURE_STATIC_ASSERT(sizeof(long) == 8)],
@@ -1442,7 +1440,6 @@ if test "$result" = "yes"; then
     HAVE_64BIT_OS=1
 fi
 AC_SUBST(HAVE_64BIT_OS)
-AC_LANG_RESTORE
 fi # COMPILE_ENVIRONMENT
 
 dnl ========================================================
@@ -1564,8 +1561,7 @@ case "$target" in
         MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
         MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
         if test "$COMPILE_ENVIRONMENT"; then
-            AC_LANG_SAVE
-            AC_LANG_CPLUSPLUS
+            AC_LANG_PUSH([C++])
             AC_MSG_CHECKING([for VisualAge C++ compiler version >= 6.0.0.3])
             AC_TRY_COMPILE([],
                 [#if (__IBMCPP__ < 600)
@@ -1578,7 +1574,7 @@ case "$target" in
             else
                 AC_MSG_RESULT([yes])    
             fi
-            AC_LANG_RESTORE
+            AC_LANG_POP([C++])
             TARGET_COMPILER_ABI="ibmc"
             CC_VERSION=`lslpp -Lcq vac.C 2>/dev/null | awk -F: '{ print $3 }'`
             CXX_VERSION=`lslpp -Lcq vacpp.cmp.core 2>/dev/null | awk -F: '{ print $3 }'`
@@ -2045,10 +2041,9 @@ case "$target" in
     *)
         AC_CHECK_HEADERS(mmintrin.h oleacc.idl)
 
-        AC_LANG_SAVE
-        AC_LANG_CPLUSPLUS
+        AC_LANG_PUSH([C++])
         AC_CHECK_HEADERS(atlbase.h wpcapi.h)
-        AC_LANG_RESTORE
+        AC_LANG_POP([C++])
         ;;
     esac
 
@@ -2314,8 +2309,7 @@ dnl the qsort routine under solaris is faulty
         CC_VERSION=`$CC -V 2>&1 | grep '^cc:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
         CXX_VERSION=`$CXX -V 2>&1 | grep '^CC:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
        AC_MSG_CHECKING([for Forte compiler version >= WS6U2])
-       AC_LANG_SAVE
-       AC_LANG_CPLUSPLUS
+       AC_LANG_PUSH([C++])
        AC_TRY_COMPILE([],
            [#if (__SUNPRO_CC < 0x530)
            #error "Denied"
@@ -2328,7 +2322,7 @@ dnl the qsort routine under solaris is faulty
             _res="yes"
         fi
         AC_MSG_RESULT([$_res])
-        AC_LANG_RESTORE
+        AC_LANG_POP([C++])
     else
        ASFLAGS="$ASFLAGS -fPIC"
        DSO_LDOPTS='-G'
@@ -2509,13 +2503,8 @@ AC_SUBST(NANOJIT_ARCH)
 if test -z "$SKIP_COMPILER_CHECKS"; then
 dnl Checks for typedefs, structures, and compiler characteristics.
 dnl ========================================================
-AC_LANG_C
 AC_HEADER_STDC
 AC_C_CONST
-AC_TYPE_MODE_T
-AC_TYPE_OFF_T
-AC_TYPE_PID_T
-AC_TYPE_SIZE_T
 AC_STRUCT_ST_BLKSIZE
 AC_MSG_CHECKING(for siginfo_t)
 AC_CACHE_VAL(ac_cv_siginfo_t,
@@ -2662,7 +2651,7 @@ fi
 dnl On the gcc trunk (as of 2001-02-09) _GNU_SOURCE, and thus __USE_GNU,
 dnl are defined when compiling C++ but not C.  Since the result of this
 dnl test is used only in C++, do it in C++.
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 
 AC_MSG_CHECKING(for uname.domainname)
 AC_CACHE_VAL(ac_cv_have_uname_domainname_field,
@@ -2694,7 +2683,7 @@ else
     AC_MSG_RESULT(no)
 fi
 
-AC_LANG_C
+AC_LANG_POP([C++])
 
 dnl Check for usable wchar_t (2 bytes, unsigned)
 dnl (we really don't need the unsignedness check anymore)
@@ -2718,8 +2707,7 @@ dnl 2.95-2.97 have a signed wchar_t in c++ only and some versions
 dnl only have short-wchar support for c++.
 dnl Note that we assume that mac & win32 have short wchar (see nscore.h)
 
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH([C++])
     _SAVE_CXXFLAGS=$CXXFLAGS
     CXXFLAGS="$CXXFLAGS -fshort-wchar"
 
@@ -2739,7 +2727,7 @@ dnl Note that we assume that mac & win32 have short wchar (see nscore.h)
     else    
         CXXFLAGS=$_SAVE_CXXFLAGS
     fi
-    AC_LANG_RESTORE
+    AC_LANG_POP([C++])
 fi
 
 dnl Check for .hidden assembler directive and visibility attribute.
@@ -2887,11 +2875,11 @@ AC_CHECK_HEADERS(mmintrin.h)
 
 dnl Check whether the compiler supports the new-style C++ standard
 dnl library headers (i.e. <new>) or needs the old "new.h"
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 NEW_H=new.h
 AC_CHECK_HEADER(new, [NEW_H=new])
 AC_DEFINE_UNQUOTED(NEW_H, <$NEW_H>)
-AC_LANG_C
+AC_LANG_POP([C++])
 
 AC_ARG_ENABLE(dtrace,
               [  --enable-dtrace         build with dtrace support if available (default=no)],
@@ -2938,9 +2926,9 @@ case $target in
 *)
     AC_CHECK_LIB(m, atan)
     AC_CHECK_LIB(dl, dlopen,
-    AC_CHECK_HEADER(dlfcn.h, 
-        LIBS="-ldl $LIBS"
-        AC_DEFINE(HAVE_LIBDL)))
+    [AC_CHECK_HEADER(dlfcn.h, 
+        [LIBS="-ldl $LIBS"
+AC_DEFINE(HAVE_LIBDL)])])
     ;;
 esac
 
@@ -3177,8 +3165,7 @@ AC_CHECK_FUNCS(localtime_r strtok_r)
 dnl check for wcrtomb/mbrtowc
 dnl =======================================================================
 if test -z "$MACOS_DEPLOYMENT_TARGET" || test "$MACOS_DEPLOYMENT_TARGET" -ge "100300"; then
-AC_LANG_SAVE
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 AC_CACHE_CHECK(for wcrtomb,
     ac_cv_have_wcrtomb,
     [AC_TRY_LINK([#include <wchar.h>],
@@ -3197,7 +3184,7 @@ AC_CACHE_CHECK(for mbrtowc,
 if test "$ac_cv_have_mbrtowc" = "yes"; then
     AC_DEFINE(HAVE_MBRTOWC)
 fi
-AC_LANG_RESTORE
+AC_LANG_POP([C++])
 fi
 
 AC_CACHE_CHECK(
@@ -3222,7 +3209,7 @@ dnl    AC_CHECK_LIB(bind, res_ninit, AC_DEFINE(HAVE_RES_NINIT),
 dnl        AC_CHECK_LIB(resolv, res_ninit, AC_DEFINE(HAVE_RES_NINIT)))
 fi
 
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 AC_CACHE_CHECK(
     [for gnu_get_libc_version()],
     ac_cv_func_gnu_get_libc_version,
@@ -3298,7 +3285,7 @@ LIBS=$_SAVE_LIBS
     ;;
 esac
 
-AC_LANG_C
+AC_LANG_POP([C++])
 
 dnl **********************
 dnl *** va_copy checks ***
@@ -3461,7 +3448,7 @@ fi
 dnl ========================================================
 dnl Put your C++ language/feature checks below
 dnl ========================================================
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 
 HAVE_GCC3_ABI=
 if test "$GNU_CC"; then
@@ -3707,9 +3694,9 @@ fi
 
 AC_CACHE_CHECK(for C++ reinterpret_cast,
                ac_cv_cpp_reinterpret_cast,
-               [AC_TRY_COMPILE(struct X { int i; };
-                               struct Y { int i; };,
-                               X x; X*const z = &x;Y*y = reinterpret_cast<Y*>(z);,
+               [AC_TRY_COMPILE([struct X { int i; };
+                               struct Y { int i; };],
+                               [X x; X*const z = &x;Y*y = reinterpret_cast<Y*>(z);],
                                ac_cv_cpp_reinterpret_cast=yes,
                                ac_cv_cpp_reinterpret_cast=no)])
 if test "$ac_cv_cpp_reinterpret_cast" = yes ; then
@@ -3776,7 +3763,7 @@ fi
 
 
 dnl End of C++ language/feature checks
-AC_LANG_C
+AC_LANG_POP([C++])
 
 dnl ========================================================
 dnl =  Internationalization checks
@@ -4378,10 +4365,9 @@ MOZ_ARG_ENABLE_BOOL(old-abi-compat-wrappers,
     MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS= )
 if test "$COMPILE_ENVIRONMENT"; then
 if test "$MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS"; then
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH([C++])
     AC_CHECK_FUNCS(__builtin_vec_new __builtin_vec_delete __builtin_new __builtin_delete __pure_virtual)
-    AC_LANG_RESTORE
+    AC_LANG_POP([C++])
     AC_DEFINE(MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS)
 fi
 fi # COMPILE_ENVIRONMENT
@@ -4459,10 +4445,9 @@ dnl ========================================================
 dnl = Support for demangling undefined symbols
 dnl ========================================================
 if test -z "$SKIP_LIBRARY_CHECKS"; then
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH([C++])
     AC_CHECK_FUNCS(__cxa_demangle, HAVE_DEMANGLE=1, HAVE_DEMANGLE=)
-    AC_LANG_RESTORE
+    AC_LANG_POP([C++])
 fi
 
 # Demangle only for debug or trace-malloc builds
@@ -4476,9 +4461,9 @@ AC_SUBST(MOZ_DEMANGLE_SYMBOLS)
 dnl ========================================================
 dnl = Support for gcc stack unwinding (from gcc 3.3)
 dnl ========================================================
-if test "$HAVE_GCC3_ABI" && test -z "$SKIP_LIBRARY_CHECKS"; then
-    AC_CHECK_HEADER(unwind.h, AC_CHECK_FUNCS(_Unwind_Backtrace))
-fi
+dnl if test "$HAVE_GCC3_ABI" && test -z "$SKIP_LIBRARY_CHECKS"; then
+dnl    AC_CHECK_HEADER(unwind.h, AC_CHECK_FUNCS(_Unwind_Backtrace))
+dnl fi
 
 dnl ========================================================
 dnl =
@@ -4629,7 +4614,7 @@ AC_SUBST(PROFILE_GEN_LDFLAGS)
 AC_SUBST(PROFILE_USE_CFLAGS)
 AC_SUBST(PROFILE_USE_LDFLAGS)
 
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 
 dnl ========================================================
 dnl Test for -pedantic bustage
@@ -4726,6 +4711,8 @@ AC_CACHE_CHECK(for correct overload resolution with const and templates,
                     ac_nscap_nonconst_opeq_bug="yes")])
 CXXFLAGS="$_SAVE_CXXFLAGS"
 
+AC_LANG_POP([C++])
+
 if test "$ac_nscap_nonconst_opeq_bug" = "yes" ; then
     AC_DEFINE(NSCAP_DONT_PROVIDE_NONCONST_OPEQ)
 fi
@@ -4780,11 +4767,10 @@ fi
 # Irix & OSF native compilers do not like exception declarations 
 # when exceptions are disabled
 if test -n "$MIPSPRO_CXX" -o -n "$COMPAQ_CXX" -o -n "$VACPP"; then
-    AC_DEFINE(CPP_THROW_NEW, [])
+    AC_DEFINE_UNQUOTED([CPP_THROW_NEW], [""])
 else
-    AC_DEFINE(CPP_THROW_NEW, [throw()])
+    AC_DEFINE_UNQUOTED([CPP_THROW_NEW], ["throw()"])
 fi
-AC_LANG_C
 
 dnl ========================================================
 dnl =
@@ -4869,9 +4855,7 @@ EDITLINE_LIBS=
 dnl Conveniently, Win32 sets SKIP_LIBRARY_CHECKS...
 if test -z "$SKIP_LIBRARY_CHECKS"; then
   if test -n "$JS_WANT_READLINE"; then
-    AC_CHECK_LIB(readline, readline,
-                 EDITLINE_LIBS="-lreadline",
-                 AC_MSG_ERROR([No system readline library found.]))
+    AC_CHECK_LIB([readline], [readline], [EDITLINE_LIBS="-lreadline"], AC_MSG_ERROR([No system readline library found.]))
   else
     dnl By default, we use editline
     JS_NATIVE_EDITLINE=1
@@ -5179,7 +5163,7 @@ dnl ========================================================
 dnl JavaScript shell
 dnl ========================================================
 
-AC_HAVE_FUNCS(setlocale)
+AC_CHECK_FUNCS([setlocale])
 
 dnl ========================================================
 dnl Use cygwin wrapper for win32 builds, except MSYS/MinGW
@@ -5209,6 +5193,17 @@ AC_SUBST(MOZILLA_VERSION)
 
 AC_SUBST(ac_configure_args)
 
+AC_SUBST([BUILD_MODULES])
+AC_SUBST([MOZ_BUILD_APP])
+AC_SUBST([MOZ_EXTENSIONS])
+AC_SUBST([MOZ_IMG_DECODERS])
+AC_SUBST([MOZ_IMG_ENCODERS])
+AC_SUBST([MOZ_JSDEBUGGER])
+AC_SUBST([TAR])
+AC_SUBST([XPCOM_FROZEN_LDOPTS])
+AC_SUBST([XPCOM_LIBS])
+AC_SUBST([HAVE_DTRACE])
+
 dnl Spit out some output
 dnl ========================================================
 
@@ -5247,11 +5242,8 @@ EOF
   if cmp -s $_CONFIG_TMP $_CONFIG_DEFS_H; then
     rm $_CONFIG_TMP
   else
-    AC_MSG_RESULT("creating $_CONFIG_DEFS_H")
+    AC_MSG_RESULT([creating $_CONFIG_DEFS_H])
     mv -f $_CONFIG_TMP $_CONFIG_DEFS_H
-
-    echo ==== $_CONFIG_DEFS_H =================================
-    cat $_CONFIG_DEFS_H
   fi
 
 dnl Probably shouldn't call this manually but we always want the output of DEFS
@@ -5301,7 +5293,8 @@ echo $MAKEFILES > unallmakefiles
 
 mv -f config/autoconf.mk config/autoconf.mk.orig 2> /dev/null
 
-AC_OUTPUT($MAKEFILES)
+AC_CONFIG_FILES([$MAKEFILES])
+AC_OUTPUT
 
 dnl Prevent the regeneration of autoconf.mk forcing rebuilds of the world
 if cmp -s config/autoconf.mk config/autoconf.mk.orig; then
