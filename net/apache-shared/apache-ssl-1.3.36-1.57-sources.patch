diff -ru -ruN apache_1.3.36_orig/CHANGES.SSL apache_1.3.36/CHANGES.SSL
--- apache_1.3.36_orig/CHANGES.SSL	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/CHANGES.SSL	2006-05-18 17:16:13.793322864 +0200
@@ -0,0 +1,655 @@
+Changed with Apache-SSL 1.3.36/1.57
+
+  *) Make splashcache auto-restart on errors.
+     [Ben Laurie]
+
+  *) Compatibility with OpenSSL 0.9.8.
+     [Ben Laurie]
+
+Changed with Apache-SSL 1.3.33/1.56
+
+  *) Updated splashcache to use the latest version of Splash!, and
+     also the FreeBSD port of spread (by default).
+     [Ben Laurie]
+
+Changed with Apache-SSL 1.3.29/1.55
+
+  *) The CRL environment variables could get set even if the condition
+     they indicated was not true. Fixed.
+     [Ben Laurie]
+
+Changed with Apache-SSL 1.3.29/1.54
+
+  *) Do SSLNoV2 by a different, more reliable, method.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.29/1.53
+
+  *) Port to 1.3.29.
+     [Ben Laurie]
+
+  *) Fix vulnerability in FakeBasicAuth.
+     [Ben Laurie, reported by Wietse Venema]
+
+  *) Add SSLNoV2 directive to disable SSL version 2.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.28/1.52
+
+  *) Add new options, SSLOnCRLExpirySetEnv and SSLOnNoCRLSetEnv.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.28/1.51
+
+  *) Add AES ciphersuites to keysize table. (Someone gave me a patch for
+     this, but I lost it - let me know who you were).
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.28/1.50
+
+  *) Add CRL support. New directives SSLUseCRL, SSLCRLCheckAll and
+     SSLOnRevocationSetEnv are in the sample configuration file. Note
+     that an option to redirect to a URL on revocation would be
+     feasible but is not yet implemented.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.28/1.49
+
+  *) Port to new version.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.27/1.49
+
+  *) Add TLS1 ciphersuites for CGI env vars keysize stuff.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.27/1.48
+
+  *) Port to new version.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.26/1.48
+
+  *) Port to new version.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.24/1.48
+
+  *) Port to new version.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.22/1.48
+
+  *) src/Configuration mysteriously had an explicit path for SSL_LIB_DIR
+     instead of SSL_BASE. Fixed.
+     [Ben Laurie, reported by John Sellens <jsellens@generalconcepts.com>]
+
+Changes with Apache-SSL 1.3.22/1.47
+
+  *) Make buffer overflow fix actually work.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.22/1.46
+
+  *) Fix potential buffer overflow with rogue client certificates.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.22/1.45
+
+  *) Improve ciphersuite diagnostics, so SGC renegotiation can be seen better.
+     [Ben Laurie]
+
+  *) The required ciphers were not correctly merged between contexts, resulting
+     in the workaround for IE SGC bugs failing under some circumstances. Fixed.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.22/1.44
+
+  *) Port to new version.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.19/1.44
+
+  *) Make things that should have used #if use that instead of #ifdef.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.19/1.43
+ 
+  *) Add (untested) OpenSSL engine support.
+     [Geoff Thorpe]
+
+  *) Add SSLCheckClientDN directive - takes a filename and checks DNs against
+     the contents of the file - an alternative to SSLFakeBasicAuth.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.14/1.42
+
+  *) Add splashcache as an alternative to gcache. This requires Splash!, of
+     course.
+     [Ben Laurie]
+
+  *) Make splashcache actually work.
+     [Jonathan Stanton <jonathan@cs.jhu.edu>]
+
+  *) Port to Apache 1.3.14.
+     [Ben Laurie]
+
+  *) Make the SSLCacheServerPath take two optional extra arguments, so
+     splashcache can get its spread server and db name.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.12/1.41
+
+  *) Make httpsdctl say "httpsd" instead of "httpd" in messages.
+     [Ben Laurie]
+
+  *) Allow the use of EGD for randomness. See the example config for syntax.
+     [Ben Laurie]
+
+  *) Add /usr to the list of possible paths for OpenSSL.
+     [Marc G. Fournier <scrappy@hub.org>]
+
+Changes with Apache-SSL 1.3.12/1.40
+
+  *) Make it possible to load Apache-SSL as a DSO.
+     (./configure --enable-shared=apache_ssl, for example). The appropriate
+     LoadModule is shown in the example config.
+     [Ben Laurie]
+
+  *) Make configure/APACI produce a compatible installation (i.e.
+     httpd.{conf,pid,lock} instead of httpsd.*) by default.
+     [Ben Laurie]
+
+  *) Seed the random number generator in "make certificate" with some
+     not-very-good, but portable, randomness.
+     [Ben Laurie]
+
+  *) Make untrusted client certificates work with OpenSSL 0.9.5.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.12/1.39
+
+  *) Port to new version of Apache.
+     [Ben Laurie]
+
+  *) Make SSL_IS_OPTIONAL default to TRUE (so people don't have to know to set
+     it to make subrequests work).
+     [Ben Laurie and Petr Lampa <lampa@fee.vutbr.cz>]
+
+  *) Add extra certificate environment variables.
+     [Petr Lampa <lampa@fee.vutbr.cz>]
+
+  *) Session timeout wasn't set in local cache.
+     [Petr Lampa <lampa@fee.vutbr.cz>]
+
+Changes with Apache-SSL 1.3.11/1.38
+
+  *) Port to new version of Apache.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.6/1.37
+
+  *) LogLevelIsDebug() function needed to be moved so that DSO configurations
+     compile properly.
+     [? Contributors name lost]
+
+Changes with Apache-SSL 1.3.6/1.36
+
+  *) Add experimental Keynote (http://www.cis.upenn.edu/~keynote) support. Not
+     only does this provide a very cool way to do stuff based on certificate
+     attributes (and more), but it also demonstrates that it is possible to
+     write independent add-on modules for Apache-SSL.
+     [Ben Laurie]
+
+  *) Remove spurious printf.
+     [Stefano Ravaioli <stefano.ravaioli@cineca.it>]
+
+  *) Add note about environment variables to 1.35 changes.
+     [Ben Laurie]
+
+  *) Add SSLDenySSL directive.
+     [Bruce Tenison <btenison@dibbs.net>, revised by Ben Laurie]
+
+Changes with Apache-SSL 1.3.6/1.35
+
+  *) Use /dev/urandom in the example configuration instead of /dev/random.
+     [Ben Laurie, suggested by Adam Laurie]
+
+  *) make install didn't install gcache. Fixed.
+     [Ben Laurie]
+
+  *) Move version warning to buff.h, so it happens before the compiler dies.
+     [Ben Laurie]
+
+  *) Change how environment variables are added, for more flexibility. Note
+     that this means that if you want the variables to be set from within a
+     module, you must call ap_add_common_vars() and ap_add_cgi_vars().
+     [Ben Laurie]
+
+  *) Support new OpenSSL header layout.
+     [Ben Laurie]
+
+  *) Set the session ID context when renegotiating.
+     [Ben Laurie, pointed out by
+      Bodo Moeller <3moeller@informatik.uni-hamburg.de>]
+
+Changes with Apache-SSL 1.3.6/1.34
+
+  *) A facility I added to make logging of debugging info work was breaking
+     during startup. Fixed.
+     [Bryan Blackburn <blb@pobox.org>]
+
+  *) Add new directive SSLNoCAList. This prevents Apache-SSL from sending the
+     list of acceptable CAs to the client. Although I can't think why this
+     would be any use in a production environment, it is very handy to assure
+     yourself that CA checking is actually happening.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.6/1.33
+
+  *) Try a slightly different approach for server renegotiation.
+     [Ben Laurie, after conversations with Ralf Engelschall and Bodo Moeller
+     <3moeller@informatik.uni-hamburg.de>]
+
+  *) Why can't people not bugger us up in ports and RPMs? FreeBSD took it upon
+     themselves to move the OpenSSL installation directory, so we work around
+     it in FixPatch.
+     [Adam Laurie]
+
+  *) Fix client renegotiation (which would cause a crash). In the process, get
+     rid of nasty globals and use OpenSSL ex_data stuff instead. Note that this
+     means that Global Server IDs should now work with Apache-SSL.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.6/1.32
+
+  *) Upgraded to Apache 1.3.6.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.4/1.32
+
+  *) Add support for new OpenSSL session ID context, so we can still reuse
+     sessions.
+     [Ben Laurie]
+
+  *) If the client certificate is optional, with no CA required, then don't
+     send a CA list.
+     [Ben Laurie]
+
+  *) Add support for new 56/1024 bit export ciphersuites.
+     [Ben Laurie]
+
+  *) Use new certificate stack functions in OpenSSL 0.9.2. Combine
+     SSLCACertificateFile and SSLCACertificateDir CA certs to send to the
+     client.
+     [Ben Laurie]
+
+Changes with Apache-SSL 1.3.4/1.31
+
+  *) Make Apache-SSL work with "configure --enable-shared=max".
+     [Ben Laurie, reported by Don Sullivan <dsullivan@gaia.arc.nasa.gov>]
+
+  *) Make httpsd the default install target.
+     [Ben Laurie, reported by Don Sullivan <dsullivan@gaia.arc.nasa.gov>]
+
+  *) Add new SSLRandomFile and SSLRandomFilePerConnection directives.
+     [Ben Laurie, suggested by Bodo Moeller
+      <3moeller@informatik.uni-hamburg.de>]
+
+Changes with Apache_SSL 1.3.4/1.30
+
+  *) Port to Apache 1.3.4. [Ben Laurie]
+
+  *) Timeout during SSL accept phase.
+     [Ben Laurie, suggested by Nigel Metheringham]
+
+  *) Make error message when gcache fails to open the socket more specific.
+     [Ben Laurie]
+
+  *) Make SSLVerifyClient and SSLVerifyDepth per directory. This involves
+     renegotiating the client connection and is rather a major change, so by
+     default it is disabled. Enable it by setting RENEG to TRUE in
+     apache_ssl.c. This is just the first in a series of
+     per-directorifications. N.B. This facility is not currently very reliable,
+     so only enable it for testing. [Ben Laurie]
+
+Changes with Apache_SSL 1.3.3/1.29
+
+  *) Make SSL_SERVER_I_/SSL_CLIENT_I_ change optional - set USE_OLD_ENVIRONMENT
+     to true in apache_ssl.c to use the old names. [Ben Laurie]
+
+  *) Add some missing entries in the 1.28 changes. [Spotted by Ralf
+     Engelschall]
+
+  *) Don't log SSL_accept failure if the return value is zero - this should
+     eliminate the spurious warnings Netscape causes. [Ben Laurie]
+
+  *) Fix file descriptor leak. [Quinton Dolan <q@fan.net.au>]
+
+  *) Fix error in server certificate soft link. [Ben Laurie]
+
+  *) Send CA list to client when SSLCACertificatePath is used (this was only
+     done for SSLCACertificateFile up to now). [Ben Laurie]
+
+Changes with Apache_SSL 1.3.3/1.28
+
+  *) Pad certificate exports with =s, as some implementations required them,
+     and they're significantly easier to remove than to add.
+     [Ben Laurie, reported by Adam Laurie]
+
+  *) Make cert issuer components actually start with SSL_SERVER_I_/
+     SSL_CLIENT_I_ as documented, instead of SSL_SERVER_I/SSL_CLIENT_I.
+     [Ben Laurie]
+
+  *) Check for a few more errors to avoid problems with cert chains and
+     certificate verification. [Ralf Engelschall]
+
+Changes with Apache_SSL 1.3.2/1.27
+
+  *) Fix lingering problem where gcache died if left alone for a while. This
+     appears to be caused by spurious SIGPIPEs on some OSes. [Ben Laurie]
+
+Changes with Apache_SSL 1.3.2/1.26 (never released)
+
+  *) Add test to FixPatch to check that patch is up-to-date. [Ben Laurie]
+
+  *) Don't export client cert chain with SSLeay before 0.9.0, since it can't
+     disable session ID caching. [Ben Laurie]
+
+  *) Make sure session caching is enabled if certificate export is (at least
+     until it is no longer needed).
+     [Ben Laurie, pointed out by Ralf Engelschall]
+
+  *) Add new SSLExportClientCertificates option. [Ben Laurie]
+
+  *) Default to not exporting client cert chains. [Ben Laurie]
+
+  *) Stop Ralf bleating about gcc warnings. [Ben Laurie]
+
+Changes with Apache_SSL 1.3.2/1.25
+
+  *) Port to new Apache. [Ben Laurie]
+
+  *) Supply client certificate chain in environment as SSL_CLIENT_CERT and
+     SSL_CLIENT_CERT_CHAIN_1 and so on. Can be disabled if desired in buff.h.
+     [Ben Laurie]
+
+  *) Allow passphrase retries. [Ben Laurie, suggested by Holger Reif]
+
+Changes with Apache_SSL 1.3.1/1.24
+
+  *) Cache private keys over restarts. This means you can use passphrases and
+     survive a restart. It also means that the ugliness with sleep is no longer
+     required (we can read the private keys on the first pass through the
+     config file). Of course, having a server autostart still requires you to
+     have no passphrase. [Ben Laurie]
+
+Changes with Apache-SSL 1.3.1/1.23
+
+  *) Rerefix dependencies.
+     [Ben Laurie, Koga Youichirou <y-koga@jp.FreeBSD.org>]
+
+  *) Fix make install a bit more. [Koga Youichirou <y-koga@jp.FreeBSD.org>]
+
+  *) Stop irritating people with my EXTRA_CFLAGS. [Ben Laurie]
+
+  *) Don't launch gcache until runtime checks have been completed. [Ben Laurie,
+     reported by Bjoern A. Zeeb <bear@dinx.de>]
+
+Changes with Apache-SSL 1.3.1/1.22
+
+  *) Refix dependencies. [Ben Laurie]
+
+Changes with Apache-SSL 1.3.1/1.21
+
+  *) Fix dependencies. [Suggested by Ralf S. Engelschall]
+
+  *) Add missing copyright notices. [Ralf S. Engelschall]
+
+  *) Fix APACI install and apachectl fixup to do httpsd instead of httpd.
+     Install gcache.
+     [Koga Youichirou <y-koga@jp.FreeBSD.org>]
+
+  *) Eliminate SSLLogFile (all info logged to it now goes to the error log).
+     Make its use an error (with an explanation). [Ben Laurie]
+
+  *) Correct typo when Apache-SSL is shared (bFirst instead of bFirstTime).
+     [arobertson@phoenix.co.uk]
+
+  *) Switch some stuff that really should be on stderr back again. [Ben Laurie]
+
+  *) Finally make FREE_SESSION work. I'm still not convinced that there was any
+     real reason to do it, though. [Ben Laurie]
+
+Changes with Apache-SSL 1.3.1/1.20
+
+  *) Log most errors instead of putting them on stderr. [Ben Laurie]
+
+  *) Do Apache-SSL on inetd connections.
+     [Philippe Vanhaesendonck <pvanhaes@be.oracle.com>]
+
+  *) Make Apache-SSL the last module again so FakeBasicAuth works. [Ben Laurie]
+
+  *) Do a cleanup before starting gcache. [Ben Laurie]
+
+  *) Make gcache die when httpsd dies. This failing in previous versions
+     appears to be a bug in Apache. [Ben Laurie]
+
+  *) Document the biz with passphrases and sleep. [Ben Laurie]
+
+  *) Include the FixPatch script to fix up paths in SSLpatch. [Andrew Ford
+     <andrew@icarus.demon.co.uk>]
+
+  *) Make a few functions static that weren't but should have been.
+     [Ben Laurie]
+
+  *) Don't use the new version string stuff (but explain why). [Ben Laurie]
+
+  *) Don't patch configure (that was a mistake - I'd use --compat if I were you
+     if you do use configure). [Ben Laurie]
+
+  *) Make apachectl control httpsd instead of httpd.
+     [Koga Youichirou <y-koga@jp.FreeBSD.org>]
+
+  *) Get rid of {srm,access}.conf, make a few things in README.SSL clearer.
+     [Jean Meloche <jean@stat.ubc.ca>]
+
+Changes with Apache-SSL 1.3.0/1.19
+
+  *) Close the private key file. [Jean-Hugues ROYER <jhroyer@joher.com>]
+
+  *) Mess about with file descriptors to make passphrases work again. They
+     don't work quite as they used to, however, since they are prompted for
+     after the server has detached. This means you'll need to follow the server
+     launch with a long sleep so you don't fight with the shell to enter the
+     passphrase. [Ben Laurie]
+
+Changes with Apache-SSL 1.3.0/1.18
+
+  *) Make numeric SSLCacheServerPort work again. [Ben Laurie]
+
+  *) Move gcache launch into the module init function. [Ben Laurie]
+
+  *) Remove nasty bFirst kludge - so now modules are initialised twice, just
+     like in a standard Apache. [Ben Laurie]
+
+  *) Failing to provide a CA cert file (SSLCACertificateFile) should no longer
+     cause a crash. [Ben Laurie]
+
+  *) New SSLRequireSSL directive, to forbid non-SSL access to sensitive
+     directories in case of configuration error. [Ben Laurie, suggested by Rob
+     Heittman]
+
+  *) SSLEnable didn't work. Nor did anything that required inheritance from the
+     main server. Directives now inherit. WARNING: this may change the
+     behaviour of your server when upgrading. [Ben Laurie, reported by Adam
+     Laurie]
+
+Changes with Apache-SSL 1.2.6/1.17
+
+  *) Change CHANGES.SSL format to match src/CHANGES. [Ben Laurie]
+
+  *) Make gcache only accept connections from localhost, and become the same
+     user as Apache. [Ben Laurie, suggested by Rick Perry <perry@ece.vill.edu>]
+
+  *) Move gcache launch point so it is after logs have been opened, and
+     arrange for error/diagnostic output to be logged. [Ben Laurie]
+
+  *) Add stuff to expand client and server certs field by field for CGI
+     scripts. [Quinton Dolan <q@fan.net.au>]
+
+  *) Stop suexec from filtering HTTPS/SSL environment vars. [Ben Laurie,
+     suggested by Kristofer Peterson <bepeterson@taconic.net>]
+
+  *) Document environment vars in README.SSL. [Ben Laurie]
+
+  *) Resolve conflict between SSLeay and crypt.h in mod_auth_msql.c.
+     [Sean Purdy <sean@cix.co.uk>]
+
+  *) Make fixup return DECLINED instead of OK (thus allowing other fixups to
+     be called). [Jaromir Dolecek <dolecek@ics.muni.cz>]
+
+  *) Fix htdigest. [Ben Laurie]
+
+  *) Remove unsigned short typedef to keep SGI happy. [Brian S. Wallace
+     <wallace@wbs.issi.net>]
+
+  *) Make Configuration.tmpl more consistent with Configuration. [Ben Laurie]
+
+  *) Make SSL optionally optional, which is useful for subrequests.
+     [Ben Laurie, suggested by Jaromir Dolecek <dolecek@ics.muni.cz>]
+
+  *) Make SSLLogFile server root relative. [Ben Laurie, suggested by Matthias
+     Suencksen <msuencks@marcant.de>]
+
+  *) Optionally use Unix domain sockets for the cache server.
+     [Ben Laurie, Stefano Ravaioli <Stefano.Ravaioli@cineca.it>]
+
+  *) Actually use the configured cache expiry time. [Ben Laurie]
+
+  *) Don't try to handle a connection to gcache if accept() gets an error.
+     [Stefano Ravaioli <Stefano.Ravaioli@cineca.it>].
+
+  *) Correctly report the SSL version number (format changed, no longer "2" or
+     "3", now "TLS1", "SSL2" or "SSL3").
+     [Ben Laurie]
+
+  *) Use our own SSLeay configuration file, to ask the right question for CN.
+     [Holger Reif <Holger.Reif@Prakinf.tu-ilmenau.de>]
+
+1.2.6+1.16	Make it possible to disable session caching.
+		Support SSLeay 0.9.0.
+		Make client auth work with session caching (contributed by
+			Stefano Ravaioli <Stefano.Ravaioli@cineca.it>).
+		Possibly make gcache more reliable.
+		Make SSLVerifyClient 3 work. At least with SSLeay 0.9.0.
+		Give up on support for SSLeay 0.6.x (at least until someone
+			persuades me otherwise).
+
+1.2.6+1.15	Fix minor security holes (/tmp symlink attacks) (found by
+			Ondrej Suchy <ondrej@eurexa.cz>).
+		Port to Apache 1.2.6.
+		Fix mistake in check_fulluri (contributed by Frank Bernard
+			<fbernard@apriori.de>).
+
+1.2.5+1.14	mod_imap.c was not correctly translated. Fixed.
+		Pass on SSL_* to module make.
+		Add SSL_APP_DIR to make life easier for people who want to use
+			installed SSLeay.
+		Add experimental session ID caching.
+		Add vague explanation of SSLRequiredCiphers and friends.
+		Add SSLEnable (contributed by Ray Bellis <rpb@community.net.uk>).
+
+
+1.2.5+1.13	This version was sponsored by Virgin Music Group.
+		Brought up to date.
+		Send client the server's CA for client certs [Wojceich Tryc].
+		Note that this could be made more sophisticated!
+
+1.2.4+1.12	? [this is the only version that works correctly with 1.2.4]
+
+1.2.4+1.11	Fix bug related to double load of config.
+		Fix bug in check_fulluri (pointed out by Laurentiu Badea). This
+			could have caused some strangeness in virtual hosts, I
+			suppose.
+
+1.2.4+1.10	Fix bug in buff.c causing corruption in large files.
+
+1.2.4+1.9	Brought up to date.
+
+1.?+1.4-8	?
+
+1.1.1+1.3	Configurable logging was lost in 1.2. Fixed.
+		':' missing. Fixed.
+		Now that HTTP and HTTPS are both supported many assumption
+			about default ports are wrong. Mostly fixed.
+
+1.1.1+1.2	Ported to Apache 1.1.1 (thanks to Nigel Metheringham for an
+			initial version of this).
+		Changed version numbering scheme again to conform to HTTP
+			standards.
+		Ported to SSLeay 0.6.1. Support still present for 0.5.x.
+		Added "no CA" client verification mode. This didn't work with
+			SSLeay 0.5.x and is untested with 0.6.1.
+		Added new directives SSLRequiredCiphers, SSLRequireCipher,
+			SSLBanCipher, SSLDisable.
+		Allowed a single server to serve both HTTP and HTTPS.
+		Set HTTPS, HTTPS_CIPHER, HTTPS_KEYSIZE, HTTPS_SECRETKEYSIZE and
+			SSL_CLIENT_DN for CGIs.
+
+1.0.5+1.1	Allow SSLCertificateKeyFile to use an absolute path.
+
+1.0.5+1.0	Ported to Apache 1.0.5 and SSLeay 0.5.2a.
+		Fixed mod_dir.c stack overrun bug.
+		Fixed client authentication.
+		Changed version numbering scheme to de facto standard Apache
+			derivative numbering (that is <derivative name>/<Apache
+			version>+<derivative version>).
+
+1.0.3a		Ported to Apache 1.0.3 and SSLeay 0.5.1b.
+		Removed SSL logging from mod_log_common.c. It is now available
+			only in configurable logs.
+		Removed duplicate typedef for pool in apache_ssl1.h.
+		Added "make certificate" to generate a test certificate.
+		Added per-host control of CA verification path/file.
+		Inverted this list!
+
+1.0.1a		Ported to Apache 1.0.1. This was considerably more troublesome
+			than expected, so apologies to those who have tried and
+			failed to apply the 0.8.14 patches to 1.0.x.
+		A small amount of extra documentation was added to httpd.conf.
+		Worked around a bug in timeouts in 1.0.1 (pool close functions
+			weren't used).
+		Copyright notices updated.
+
+0.8.14h		Corrected mod_imap - http: and https: were reversed.
+		Corrected another reference to http: in util.c, and default
+			port numbers in util.c, mod_imap.c and httpd.h.
+
+0.8.14g		Added configurable logging to mod_log_config.c (another
+			sameer@c2.org idea).
+		Removed extra logging from mod_log_common.c (code left behind
+			in case anyone relies on it, but will be removed
+			later).
+		Made mod_imap use https: by default, and recognise https: and
+			ftp: as valid methods (again, sameer@c2.org).
+			(Not tested).
+
+0.8.14f		szClientX509 was not cleared for a new connection. Fixed.
+		Put my PGP key in the distribution instead of anyone else who
+			happens to have "ben" in their name. Ooops!
+
+0.8.14e		Removed os_conn_printf(), which was ugly, unused and
+			unintelligible.
+		Added "#include <stdarg.h>" to apache_ssl2.h.
+		Removed os_one_time_init(), also ugly and unused.
+		Added SSLLogError (suggested by sameer@c2.org), to log errors
+			to the main error log. Note that many are also logged
+			in SSLLogFile.
+		Added remark about patch usage in README.SSL.
+
+0.8.14d		Fixed mod_imap.c.
+		Added SSLLogFile for miscellaneous rubbish produced by SSL.
+		Added this file, and EXPORT.SSL.
+
+
diff -ru -ruN apache_1.3.36_orig/EXTRAS.SSL apache_1.3.36/EXTRAS.SSL
--- apache_1.3.36_orig/EXTRAS.SSL	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/EXTRAS.SSL	2006-05-18 17:16:13.793322864 +0200
@@ -0,0 +1,18 @@
+This file documents differences between Apache-SSL and Apache.
+
+Configuration directives
+------------------------
+
+See SSLconf/conf/httpd.conf for all extra SSL directives.
+
+mod_log_config.c
+----------------
+
+The following have been added to configurable logging:
+
+%...{cipher}c:  cipher used (SSL_get_cipher)
+%...{clientcert}c: client certificate information
+%...{errcode}c: X509 verify error code
+%...{errstr}c: X509 verify error string
+
+
diff -ru -ruN apache_1.3.36_orig/FixPatch apache_1.3.36/FixPatch
--- apache_1.3.36_orig/FixPatch	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/FixPatch	2006-05-18 17:16:13.793322864 +0200
@@ -0,0 +1,139 @@
+#! /bin/sh
+#
+# Script to set up paths for Apache-SSL and apply the SSLpatch
+# Fixes up the paths to the OpenSSL libraries and include files.
+#
+# Written by Andrew Ford 
+#            <A.Ford@ford-mason.co.uk>
+#            http://www.ford-mason.co.uk/
+# No copyright -- this file is placed in the public domain.
+# No warranty  -- use at your own risk.
+
+if patch -v >/dev/null 2>&1; then
+	echo "Your version of patch is OK."
+else
+	echo "Your version of patch is out-of-date. You need patch 2.1 or 2.5."
+	echo "N.B. We mean the program called 'patch' needs an update, not that you have the wrong patch!!!" 
+	exit
+fi
+
+# Default paths
+
+SSL_REL_PATHS="../openssl-*";
+SSL_ABS_PATHS="/usr/local/*/openssl-* /usr/local/*/*/openssl-*
+/opt/*/openssl-* /opt/*/*/openssl-*";
+# include $PREFIX here so we work nicely as a port.
+SSL_INST_DIR="/usr/local/ssl /usr $PREFIX"
+
+# Sort the paths
+RELDIRS=`echo $SSL_REL_PATHS | xargs -n 1 echo | sort -r`
+ABSDIRS=`echo $SSL_ABS_PATHS | xargs -n 1 echo | sort -r`
+
+if [ $# = 0 ]; then
+    DIRS="$RELDIRS $ABSDIRS $SSL_INST_DIR";
+elif [ $# = 1 ]; then
+    DIRS=$1
+else
+    echo usage: $0 [ssl-dir]
+    exit;
+fi
+
+
+# Initialize variables
+
+SSL_BASE=
+SSL_BASE_DIR=
+
+# Look for the first match in the list of directories
+
+echo "Searching for a usable OpenSSL installation or source directory"
+for dir in $DIRS; do
+    if [ -d $dir -a -d $dir/include/openssl ]; then 
+        absdir=`cd $dir; pwd`
+        if [ -z "$SSL_BASE" -o $absdir != "$SSL_BASE" ]; then
+            if [ -d $dir/lib ]; then
+               INSTALLED_IN="$INSTALLED_IN $absdir"
+            else
+               SOURCE_IN="$SOURCE_IN $absdir"
+            fi
+        fi
+        if [ -z "$SSL_BASE" ]; then
+           SSL_BASE=$absdir
+           if [ -d $dir/lib ]; then SSL_LIB_DIR=`cd $SSL_BASE/lib; pwd`; fi
+        fi;
+    fi
+done
+
+if [ -z "$SSL_BASE" ]; then
+    echo "I couldn't find OpenSSL in $DIRS";
+    echo "If you have installed it you will have to tell me where it is."
+    echo "by running the script as: $0 ssl-dir"
+    echo "Note that this version of Apache-SSL requires OpenSSL 0.9.3 or later"
+    exit
+fi
+
+SSL_APP_DIR=$SSL_BASE/apps
+
+# If there is a lib directory then this is probably the installed
+# version of OpenSSL.  The application binaries will be in the bin subdirectory
+
+if [ ! -z "$SSL_LIB_DIR" ]; then
+   ARG2='-e s!+SSL_LIB_DIR=.*!+SSL_LIB_DIR='$SSL_BASE/lib'!';
+   ARG3='-e s!+SSL_APP_DIR=.*!+SSL_APP_DIR='$SSL_BASE/bin'!';
+   SSL_APP_DIR=$SSL_BASE/bin
+fi
+
+# Check whethere we are using OpenSSL
+
+if [ -x "$SSL_APP_DIR/openssl" ]; then
+    echo "Looks like you are using OpenSSL, adjusting app name"
+    ARG4='-e s!+SSL_APP=.*!+SSL_APP='$SSL_APP_DIR/openssl'!';
+fi
+
+# Edit the SSLpatch
+
+sed -e 's!^+SSL_BASE=.*!+SSL_BASE='$SSL_BASE'!' $ARG2 $ARG3 $ARG4 <SSLpatch >SSLpatch.fixed-up
+
+
+# Tell them where OpenSSL was found and ask whether the fixed-up patch
+# should be applied.
+
+if [ ! -z "$SOURCE_IN" ]; then
+    echo "OpenSSL sources were found in:$SOURCE_IN"
+    echo "OpenSSL needs updating to include a function to read a specified number of"
+    echo "bytes from EGD - if you haven't applied the patch already and are using"
+    echo "OpenSSL 0.9.5a, then it needs applying"
+    echo -n "Do you want me to apply the OpenSSL EGD patch for you? [n] "
+    read ans
+    echo $ans | grep -i "^[ \t]*y" >/dev/null
+    if [ $? = 0 ]; then
+	(BASE=`pwd` ; cd $SOURCE_IN ; patch -p1 < $BASE/openssl-0.9.5a-egd.diff)
+	echo "Now you need to rebuild and install OpenSSL"
+	exit
+    else
+	echo "OK, I won't apply the OpenSSL patch.";
+    fi
+fi
+if [ ! -z "$INSTALLED_IN" ]; then
+   echo "OpenSSL installation found in:$INSTALLED_IN"
+fi
+
+if [ ! -z "$SSL_LIB_DIR" ]; then
+   echo "Using the installed version of OpenSSL found in $SSL_BASE"
+else
+   echo "Using the source version of OpenSSL found in $SSL_BASE"
+fi;
+echo "If this is not what you want stop now and specify the path to OpenSSL
+explicitly."
+echo
+
+echo -n "Do you want me to apply the fixed-up Apache-SSL patch for you? [n] "
+read ans
+echo $ans | grep -i "^[ \t]*y" >/dev/null
+if [ $? = 0 ]; then
+    patch -p1 <SSLpatch.fixed-up
+else
+    echo "OK, I won't apply the fixed-up patch.  I've left it in SSLpatch.fixed-up";
+fi
+
+exit
diff -ru -ruN apache_1.3.36_orig/LICENCE.SSL apache_1.3.36/LICENCE.SSL
--- apache_1.3.36_orig/LICENCE.SSL	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/LICENCE.SSL	2006-05-18 17:16:13.793322864 +0200
@@ -0,0 +1,53 @@
+
+/* ====================================================================
+ * Copyright (c) 1995 Ben Laurie.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer. 
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. All advertising materials mentioning features or use of this
+ *    software must display the following acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * 4. The name "Apache-SSL Server" must not be used to
+ *    endorse or promote products derived from this software without
+ *    prior written permission.
+ *
+ * 5. Redistributions of any form whatsoever must retain the following
+ *    acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * THIS SOFTWARE IS PROVIDED BY BEN LAURIE ``AS IS'' AND ANY
+ * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL BEN LAURIE OR
+ * HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of patches to the Apache HTTP server interfacing it
+ * to SSLeay.
+ * For more information on Apache-SSL, contact Ben Laurie <ben@algroup.co.uk>.
+ *
+ * For more information on Apache see http://www.apache.org.
+ *
+ * For more information on SSLeay see http://www.psy.uq.oz.au/~ftp/Crypto/.
+ *
+ */
diff -ru -ruN apache_1.3.36_orig/Makefile.tmpl apache_1.3.36/Makefile.tmpl
--- apache_1.3.36_orig/Makefile.tmpl	2006-05-18 17:16:13.596352808 +0200
+++ apache_1.3.36/Makefile.tmpl	2006-05-18 17:16:13.842315416 +0200
@@ -247,6 +247,7 @@
 #   shared object files.
 install-programs:
 	@echo "===> [programs: Installing Apache $(TARGET) program and shared objects]"
+	$(INSTALL_PROGRAM) $(TOP)/$(SRC)/modules/ssl/gcache $(root)$(sbindir)/gcache
 	-@if [ ".`grep '^[ 	]*AddModule.*mod_so\.o' $(TOP)/$(SRC)/Configuration.apaci`" != . ]; then \
 		echo "$(INSTALL_CORE) $(TOP)/$(SRC)/$(TARGET) $(root)$(sbindir)/$(TARGET)"; \
 		$(INSTALL_CORE) $(TOP)/$(SRC)/$(TARGET) $(root)$(sbindir)/$(TARGET); \
diff -ru -ruN apache_1.3.36_orig/README.SSL apache_1.3.36/README.SSL
--- apache_1.3.36_orig/README.SSL	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/README.SSL	2006-05-18 17:16:13.793322864 +0200
@@ -0,0 +1,157 @@
+README for Apache-SSL/1.3.33 Ben-SSL/1.56
+-----------------------------------------
+
+(C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Ben Laurie <ben@algroup.co.uk> (https://www.apache-ssl.org/)
+
+These patches interface Apache to OpenSSL.
+
+For further information on Apache see:
+
+	http://www.apache.org
+	"Apache: The Definitive Guide" published by O'Reilly
+		(http://www.ora.com).
+
+For further information on OpenSSL see:
+
+	http://www.openssl.org/
+
+REMEMBER export and/or import of crypto software or crypto hooks is illegal
+in many parts of the world.
+
+Prerequisites
+-------------
+
+Apache 1.3.33
+OpenSSL 0.9.7d or later
+patch 2.1 or 2.5
+
+
+Files
+-----
+
+ben.pgp.key.asc			My PGP public key
+EXTRAS.SSL			Documentation on extra features
+LICENCE.SSL			A copy of the Apache-SSL licence
+README.SSL			This file
+SECURITY			Some thoughts about SSL and security
+SSLpatch			A patch file to be applied to the Apache source
+src/modules/ssl/*		Extra module for Apache
+SSLconf/conf/access.conf	Empty (required by Apache)
+SSLconf/conf/httpd.conf		Example configuration
+SSLconf/conf/srm.conf		Empty (required by Apache)
+SSLconf/conf/mime.types		A copy of the the sample mime.types (required)
+md5sums				MD5 checksums of all files (using md5sum)
+md5sums.asc			My detached signature of md5sums
+
+
+Installation
+------------
+
+1. Get hold of OpenSSL (from the sites mentioned above), and compile it.
+
+2. Get hold of Apache 1.3.33 (from ftp://www.apache.org/apache/dist).
+
+3. Unpack it.
+
+4. do "cd apache_1.3.33"
+
+5. Unpack this distribution.
+
+6. (Optional) Run the FixPatch script to try to fix up the OpenSSL paths in the
+patch. If you choose not to do this, you'll need to do some extra work in step
+8. This step is only optional because its new and I'm waiting for feedback
+before eliminating the old methods.
+
+7. do "patch -p1 < SSLpatch" (if you chose not to run FixPatch).
+
+8. Proceed with standard Apache configuration. Note that you'll need to set
+SSL_* in src/Configuration to appropriate values, unless you did step 6. If you
+point to the SSLeay source tree, then you'll only need to set SSL_BASE.
+
+9. Look at the (very brief) example configuration in SSLconf (yes, access.conf
+and srm.conf are supposed to be empty).
+
+10. Make yourself a test certificate by doing "cd src; make certificate".
+
+11. Before using this server for anything serious, read the file SECURITY.
+
+12. Have fun!
+
+13. Email any patches/suggestions to the address above PAYING CLOSE ATTENTION
+TO ANY APPLICABLE EXPORT/IMPORT LAWS.
+
+14. If this software doesn't do what you want, and you can't or won't fix it
+yourself, I am available for hire. Send me email outlining what you want and
+I will quote.
+
+
+Starting Apache-SSL
+-------------------
+
+In general, starting Apache-SSL is just like starting Apache, except the
+executable is called httpsd instead of httpd. It used to be that you had to add
+a sleep after firing up Apache-SSL. THIS IS NO LONGER TRUE.
+
+If you change a private key file, it is necessary to restart Apache-SSL from
+scratch - the key caching will otherwise cause the old version to be reused.
+
+CGI Environment Variables
+-------------------------
+
+Name			Value		Desc
+----			_____		----
+HTTPS			on		HTTPS is being used.
+HTTPS_CIPHER		<string>	SSL/TLS cipherspec
+SSL_CIPHER		<string>	The same as HTTPS_CIPHER
+SSL_PROTOCOL_VERSION	<string>	?	
+SSL_SSLEAY_VERSION	<string>	?
+HTTPS_KEYSIZE		<number>	Number of bits in the session key
+HTTPS_SECRETKEYSIZE	<number>	Number of bits in the secret key
+SSL_CLIENT_DN		<string>	DN in client's certificate
+SSL_CLIENT_<x509>	<string>	Component of client's DN
+SSL_CLIENT_I_DN		<string>	DN of issuer of client's certificate
+SSL_CLIENT_I_<x509>	<string>	Component of client's issuer's DN
+SSL_SERVER_DN		<string>	DN in server's certificate
+SSL_SERVER_<x509>	<string>	Component of server's DN
+SSL_SERVER_I_DN		<string>	DN of issuer of server's certificate
+SSL_SERVER_I_<x509>	<string>	Component of server's issuer's DN
+SSL_CLIENT_CERT         <string>        Base64 encoding of client cert
+SSL_CLIENT_CERT_CHAIN_n <string>        Base64 encoding of client cert chain
+
+where <x509> is a component of an X509 DN.
+
+
+Derived Works
+-------------
+
+I have been asked what to do about the version string for derived works. The
+comment above the version string in httpd.h spells it out pretty clearly, but,
+to reiterate, any derived work's version string should include "Apache/x.y.z"
+and "Ben-SSL/x.y" in it.
+
+
+Compatibility
+-------------
+
+This version tested only with Netscape 4.7 on Windows NT.
+
+
+Credits
+-------
+
+Thanks to The Apache Group and the NCSA, for Apache, to Eric Young and Tim
+Hudson, for SSLeay, and to Baroness Camilla von Massenbach, for putting up
+with me.
+
+Thanks to Brad Eacker (beacker@beakman.cks.com) for providing a port from
+Apache-SSL 1.1.3+1.3 to Apache 1.2b8.
+
+Ben Laurie is Technical Director of A.L. Digital Ltd., London, England, who
+generously support the development of Apache-SSL.
+
+See http://www.algroup.co.uk/
+
+Sponsorship
+-----------
+
+1.2.5+1.13 was sponsored by Virgin Music Group.
diff -ru -ruN apache_1.3.36_orig/SECURITY apache_1.3.36/SECURITY
--- apache_1.3.36_orig/SECURITY	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/SECURITY	2006-05-18 17:16:13.794322712 +0200
@@ -0,0 +1,36 @@
+OK, so you've got an SSL server running, but does that mean your system is now
+secure?
+
+The answer is a resounding NO, for a number of reasons. The following questions
+illustrate some of the problems.
+
+SSL itself may not be secure. People think it is, do you?
+
+Does this code implement SSL correctly?
+
+Have the authors of the various components put in back doors?
+
+Does the code take appropriate measures to keep private keys private? To what
+extent is your cooperation in this process required?
+
+Is your system physically secure?
+
+Is your system appropriately secured from intrusion over the network?
+
+Who do you trust? Do you understand the trust relationship involved in
+certificates? Do your system admins?
+
+Are your keys, and keys you trust, generated sufficiently carefully to avoid
+reverse engineering of the private keys?
+
+How do you obtain certificates, keys, and the like, securely?
+
+Can you trust your users to safeguard their certificates?
+
+If you can't answer these questions to your satisfaction, then you have a
+problem. Even if you can, you may not be secure. Don't blame me if it all
+goes horribly wrong.
+
+[references to useful documentation solicited for this space]
+
+Ben Laurie <ben@algroup.co.uk>
diff -ru -ruN apache_1.3.36_orig/SSLconf/conf/httpd.conf apache_1.3.36/SSLconf/conf/httpd.conf
--- apache_1.3.36_orig/SSLconf/conf/httpd.conf	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/SSLconf/conf/httpd.conf	2006-05-18 17:16:13.795322560 +0200
@@ -0,0 +1,246 @@
+# This is an example configuration file for Apache-SSL.
+# Copyright (C) 1995,6,7,8,9,2000,2001 Ben Laurie
+
+# If Apache-SSL is a DSO...
+# Note that you must load the SSL module first, or other modules that use the
+# SSL library will have unresolved symbols.
+#<IfModule !apache_ssl.c>
+#LoadModule apache_ssl_module /home/ben/work/apache-ssl/apache_1.3.22-ssl/src/modules/ssl/libssl.so
+#</IfModule>
+
+# By popular demand, this file now illustrates the way to create two websites,
+# one secured (on port 8887), the other not (on port 8888).
+
+# You may need one of thse
+User ben
+Group ben
+
+LogLevel debug
+
+# Disable SSL version 2 (you should always do this)
+SSLNoV2
+
+# If built with --enable-shared=max...
+#LoadModule config_log_module /home/ben/work/apache-ssl/apache_1.3.22-ssl/src/modules/standard/mod_log_config.so
+#LoadModule auth_module /home/ben/work/apache-ssl/apache_1.3.22-ssl/src/modules/standard/mod_auth.so
+#LoadModule cgi_module /home/ben/work/apache-ssl/apache_1.3.22-ssl/src/modules/standard/mod_cgi.so
+#LoadModule alias_module /home/ben/work/apache-ssl/apache_1.3.22-ssl/src/modules/standard/mod_alias.so
+
+# Disable CA list sending for testing...
+#SSLNoCAList
+
+# Load some randomness.
+# This is loaded at startup, reading at most 1024 bytes from /dev/urandom.
+# You may prefer to use /dev/random, but be aware that some OSes (e.g. Linux)
+# insist on returning all 1024 bytes, thus blocking the server until the
+# randomness is available.
+# The randomness will be _shared_ between all server instances. You can have
+# as many of these as you want.
+SSLRandomFile file /dev/urandom 1024
+# And this one will be loaded before SSL is negotiated for each connection.
+# Again, you can have as many of these as you want, and they will all be used
+# at each connection.
+SSLRandomFilePerConnection file /dev/urandom 1024
+#SSLRandomFilePerConnection egd /path/to/egd/socket 1024
+
+# SSL Servers MUST be standalone, currently.
+ServerType standalone
+
+# The default port for SSL is 443...
+Port 8887
+Listen 8887
+Listen 8888
+
+# My test document root
+DocumentRoot /home/ben/www/docs
+#DocumentRoot /home/ben/work/apache-ssl/apache_1.3.4-ssl/htdocs
+
+<Directory /home/ben/work/apache-ssl/apache_1.3.4-ssl/htdocs/manual>
+# This directive forbids access except when SSL is in use. Very handy for
+# defending against configuration errors that expose stuff that should be
+# protected
+SSLRequireSSL
+# Conversely, you can forbid SSL with...
+# SSLDenySSL
+
+# Use these here if renegotiation is permitted
+#SSLVerifyClient 2
+#SSLVerifyDepth 2
+
+#AuthType Basic
+#AuthName Experimental
+#AuthGroupFile /dev/null
+#AuthUserFile /home/ben/www/users
+#require valid-user
+</Directory>
+
+# Watch what's going on
+TransferLog logs/transfer_log
+
+# Note that all SSL options can apply to virtual hosts.
+
+# Disable SSL. Useful in combination with virtual hosts. Note that SSLEnable is
+# now also supported.
+#SSLDisable
+SSLEnable
+
+# Set the path for the global cache server executable.
+# If this facility gives you trouble, you can disable it by setting
+# CACHE_SESSIONS to FALSE in apache_ssl.c
+SSLCacheServerPath ../src/modules/ssl/gcache
+#SSLCacheServerPath ../src/modules/ssl/splashcache 3333@scuzzy ssl
+
+# Set the global cache server port number, or path. If it is a path, a Unix
+# domain socket is used. If a number, a TCP socket.
+SSLCacheServerPort logs/gcache_port
+#SSLCacheServerPort 1234
+
+# Directory for the cache server to run in (in case of crashes). Optional.
+SSLCacheServerRunDir /tmp
+
+# Set the session cache timeout, in seconds (set to 15 for testing, use a
+# higher value in real life)
+SSLSessionCacheTimeout 15
+
+# Set the CA certificate verification path (must be PEM encoded).
+# (in addition to getenv("SSL_CERT_DIR"), I think).
+#SSLCACertificatePath /home/ben/work/apache-ssl/apache_1.3.4-ssl/SSLconf/conf
+
+# Set the CA certificate verification file (must be PEM encoded).
+# (in addition to getenv("SSL_CERT_FILE"), I think).
+#SSLCACertificateFile /some/where/somefile
+#SSLCACertificateFile /home/ben/work/apache-ssl/apache_1.3.4-ssl/SSLconf/conf/httpsd.pem
+
+# Point SSLCertificateFile at a PEM encoded certificate.
+# If the certificate is encrypted, then you will be prompted for a pass phrase.
+# Note that a kill -1 will prompt again.
+# A test certificate can be generated with "make certificate".
+#SSLCertificateFile /home/ben/work/apache-ssl/apache_1.3.4-ssl/SSLconf/conf/httpsd.pem
+SSLCertificateFile /home/ben/work/apache-ssl/apache_1.3.12-ssl/SSLconf/conf/chained.cert.cert
+SSLCertificateKeyFile /home/ben/work/apache-ssl/apache_1.3.12-ssl/SSLconf/conf/chained.cert.key
+#SSLCertificateFile /u/ben/apache/apache_1.2.6-ssl/SSLconf/conf/t1.pem
+
+
+# If the key is not combined with the certificate, use this directive to
+# point at the key file. If this starts with a '/' it specifies an absolute
+# path, otherwise it is relative to the default certificate area. That is, it
+# means "<default>/private/<keyfile>".
+#SSLCertificateKeyFile /some/place/with/your.key
+
+# Set SSLVerifyClient to:
+# 0 if no certicate is required
+# 1 if the client may present a valid certificate
+# 2 if the client must present a valid certificate
+# 3 if the client may present a valid certificate but it is not required to
+#   have a valid CA
+SSLVerifyClient 0
+# How deeply to verify before deciding they don't have a valid certificate
+SSLVerifyDepth 10
+
+# CRL Handling
+# N.B. Cached sessions are _not_ rechecked against the CRL, so make sure
+# SSLSessionCacheTimeout is set low enough.
+
+# Add this directive to check the client cert against its CRL
+# OpenSSL will look for the CRL in the CA path (i.e. the path set with
+# SSLCACertificatePath), and will expect to find a symlink from <hash>.r<n>
+# to the CRL in PEM format. It is up to you to ensure an in-date CRL is
+# available at that location. This hash can be generated like so:
+# hash=`openssl crl -hash -in $file -noout`
+# ln -sf $file $hash.r0
+SSLUseCRL
+
+# Check all certificates in the client certificate chain instead of just
+# the final one.
+SSLCRLCheckAll
+
+# Allow revoked certificates through, but set an environment variable (to YES)
+SSLOnRevocationSetEnv SSL_REVOKED
+
+# Allow a certificate with an expired CRL through, but set an environment
+# variable (to YES). Note that with this unset, the error returned is
+# certificate expired (TLS doesn't have an error for CRL expired! Doh!)
+SSLOnCRLExpirySetEnv SSL_CRL_EXPIRED
+
+# Allow a certificate with no CRL through, but set an environment variable
+# (to YES)
+SSLOnNoCRLSetEnv SSL_NO_CRL
+
+# If you have enabled client cert exports (in buff.h) you need to use
+# SSLExportClientCertificates to enable them. Note that the server still has to
+# mess about with certs even if this is disabled (and exports are enabled)
+# because the cert chain is received before we can know whether it is needed or
+# not.
+<Location /scripts>
+#SSLExportClientCertificates
+</Location>
+
+# Translate the client X509 into a Basic authorisation. This means that the
+# standard Auth/DBMAuth methods can be used for access control. The user name
+# is the "one line" version of the client's X509 certificate. Note that no
+# password is obtained from the user. Every entry in the user file needs this
+# password: xxj31ZMTZzkVA. See the code for further explanation.
+SSLFakeBasicAuth
+
+# List the ciphers that the client is permitted to negotiate. See the source
+# for a definitive list. For example:
+#SSLRequiredCiphers RC4-MD5:RC4-SHA:IDEA-CBC-MD5:DES-CBC3-SHA
+
+# These two can be used per-directory to require or ban ciphers. Note that (at
+# least in the current version) Apache-SSL will not attempt to renegotiate if a
+# cipher is banned (or not required).
+# You should probably at least ban the null encryption ciphers.
+#SSLRequireCipher
+SSLBanCipher NULL-MD5:NULL-SHA
+
+# A home for miscellaneous rubbish generated by SSL. Much of it is duplicated
+# in the error log file. Put this somewhere where it cannot be used for symlink
+# attacks on a real server (i.e. somewhere where only root can write).
+# Don't use this anymore! Now everything is logged in the error log.
+#SSLLogFile /tmp/ssl.log
+
+# Custom logging
+CustomLog	logs/ssl_log "%t %{version}c %{cipher}c %{clientcert}c"
+
+<VirtualHost heap:8888>
+#SSLDisable
+SSLEnable
+</VirtualHost>
+
+# If you want, you can disable SSL globally, and enable it in a virtual host...
+#<VirtualHost heap:8887>
+#SSLEnable
+# and the rest of the SSL stuf...
+#</VirtualHost>
+
+# Experiment with authorization...
+#<Directory /home/ben/www/docs>
+#AuthType Basic
+#AuthName Experimental
+#AuthGroupFile /dev/null
+#AuthUserFile /home/ben/www/conf/auth
+#allow from all
+#require valid-user
+#</Directory>
+
+ScriptAlias	/scripts	/home/ben/www/scripts
+
+<IfModule apache_ssl_keynote.c>
+# KeyNote configuration (only if enabled, of course)
+
+# Simple example: admit anyone
+#SSLKeyNoteTrustedAssertion keynote/admit-all
+
+# Or: admit no-one
+#SSLKeyNoteTrustedAssertion keynote/admit-none
+
+# Or: admit only Ben's Thawte certificate
+#SSLKeyNoteTrustedAssertion keynote/admit-ben-thawte
+
+# Or: admit Ben's Thawte certificate to part of the site
+#SSLKeyNoteTrustedAssertion keynote/admit-ben-thawte-restricted
+
+# Or: admit _any_ Thawte Freemail cert to any part of the site
+SSLKeyNoteTrustedAssertion keynote/admit-thawte
+SSLKeyNoteTrustedIssuerTemplate keynote/cert-issuer-simple
+</IfModule>
diff -ru -ruN apache_1.3.36_orig/SSLconf/conf/mime.types apache_1.3.36/SSLconf/conf/mime.types
--- apache_1.3.36_orig/SSLconf/conf/mime.types	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/SSLconf/conf/mime.types	2004-11-24 20:10:19.000000000 +0100
@@ -0,0 +1,592 @@
+# This is a comment. I love comments.
+
+# This file controls what Internet media types are sent to the client for
+# given file extension(s).  Sending the correct media type to the client
+# is important so they know how to handle the content of the file.
+# Extra types can either be added here or by using an AddType directive
+# in your config files. For more information about Internet media types,
+# please read RFC 2045, 2046, 2047, 2048, and 2077.  The Internet media type
+# registry is at <http://www.iana.org/assignments/media-types/>.
+
+# MIME type			Extensions
+application/activemessage
+application/andrew-inset	ez
+application/applefile
+application/atom+xml		atom
+application/atomicmail
+application/batch-smtp
+application/beep+xml
+application/cals-1840
+application/cnrp+xml
+application/commonground
+application/cpl+xml
+application/cybercash
+application/dca-rft
+application/dec-dx
+application/dvcs
+application/edi-consent
+application/edifact
+application/edi-x12
+application/eshop
+application/font-tdpfr
+application/http
+application/hyperstudio
+application/iges
+application/index
+application/index.cmd
+application/index.obj
+application/index.response
+application/index.vnd
+application/iotp
+application/ipp
+application/isup
+application/mac-binhex40	hqx
+application/mac-compactpro	cpt
+application/macwriteii
+application/marc
+application/mathematica
+application/mathml+xml		mathml
+application/msword		doc
+application/news-message-id
+application/news-transmission
+application/ocsp-request
+application/ocsp-response
+application/octet-stream	bin dms lha lzh exe class so dll dmg
+application/oda			oda
+application/ogg			ogg
+application/parityfec
+application/pdf			pdf
+application/pgp-encrypted
+application/pgp-keys
+application/pgp-signature
+application/pkcs10
+application/pkcs7-mime
+application/pkcs7-signature
+application/pkix-cert
+application/pkix-crl
+application/pkixcmp
+application/postscript		ai eps ps
+application/prs.alvestrand.titrax-sheet
+application/prs.cww
+application/prs.nprend
+application/prs.plucker
+application/qsig
+application/rdf+xml		rdf
+application/reginfo+xml
+application/remote-printing
+application/riscos
+application/rtf
+application/sdp
+application/set-payment
+application/set-payment-initiation
+application/set-registration
+application/set-registration-initiation
+application/sgml
+application/sgml-open-catalog
+application/sieve
+application/slate
+application/smil		smi smil
+application/srgs		gram
+application/srgs+xml		grxml
+application/timestamp-query
+application/timestamp-reply
+application/tve-trigger
+application/vemmi
+application/vnd.3gpp.pic-bw-large
+application/vnd.3gpp.pic-bw-small
+application/vnd.3gpp.pic-bw-var
+application/vnd.3gpp.sms
+application/vnd.3m.post-it-notes
+application/vnd.accpac.simply.aso
+application/vnd.accpac.simply.imp
+application/vnd.acucobol
+application/vnd.acucorp
+application/vnd.adobe.xfdf
+application/vnd.aether.imp
+application/vnd.amiga.ami
+application/vnd.anser-web-certificate-issue-initiation
+application/vnd.anser-web-funds-transfer-initiation
+application/vnd.audiograph
+application/vnd.blueice.multipass
+application/vnd.bmi
+application/vnd.businessobjects
+application/vnd.canon-cpdl
+application/vnd.canon-lips
+application/vnd.cinderella
+application/vnd.claymore
+application/vnd.commerce-battelle
+application/vnd.commonspace
+application/vnd.contact.cmsg
+application/vnd.cosmocaller
+application/vnd.criticaltools.wbs+xml
+application/vnd.ctc-posml
+application/vnd.cups-postscript
+application/vnd.cups-raster
+application/vnd.cups-raw
+application/vnd.curl
+application/vnd.cybank
+application/vnd.data-vision.rdz
+application/vnd.dna
+application/vnd.dpgraph
+application/vnd.dreamfactory
+application/vnd.dxr
+application/vnd.ecdis-update
+application/vnd.ecowin.chart
+application/vnd.ecowin.filerequest
+application/vnd.ecowin.fileupdate
+application/vnd.ecowin.series
+application/vnd.ecowin.seriesrequest
+application/vnd.ecowin.seriesupdate
+application/vnd.enliven
+application/vnd.epson.esf
+application/vnd.epson.msf
+application/vnd.epson.quickanime
+application/vnd.epson.salt
+application/vnd.epson.ssf
+application/vnd.ericsson.quickcall
+application/vnd.eudora.data
+application/vnd.fdf
+application/vnd.ffsns
+application/vnd.fints
+application/vnd.flographit
+application/vnd.framemaker
+application/vnd.fsc.weblaunch
+application/vnd.fujitsu.oasys
+application/vnd.fujitsu.oasys2
+application/vnd.fujitsu.oasys3
+application/vnd.fujitsu.oasysgp
+application/vnd.fujitsu.oasysprs
+application/vnd.fujixerox.ddd
+application/vnd.fujixerox.docuworks
+application/vnd.fujixerox.docuworks.binder
+application/vnd.fut-misnet
+application/vnd.grafeq
+application/vnd.groove-account
+application/vnd.groove-help
+application/vnd.groove-identity-message
+application/vnd.groove-injector
+application/vnd.groove-tool-message
+application/vnd.groove-tool-template
+application/vnd.groove-vcard
+application/vnd.hbci
+application/vnd.hhe.lesson-player
+application/vnd.hp-hpgl
+application/vnd.hp-hpid
+application/vnd.hp-hps
+application/vnd.hp-pcl
+application/vnd.hp-pclxl
+application/vnd.httphone
+application/vnd.hzn-3d-crossword
+application/vnd.ibm.afplinedata
+application/vnd.ibm.electronic-media
+application/vnd.ibm.minipay
+application/vnd.ibm.modcap
+application/vnd.ibm.rights-management
+application/vnd.ibm.secure-container
+application/vnd.informix-visionary
+application/vnd.intercon.formnet
+application/vnd.intertrust.digibox
+application/vnd.intertrust.nncp
+application/vnd.intu.qbo
+application/vnd.intu.qfx
+application/vnd.irepository.package+xml
+application/vnd.is-xpr
+application/vnd.japannet-directory-service
+application/vnd.japannet-jpnstore-wakeup
+application/vnd.japannet-payment-wakeup
+application/vnd.japannet-registration
+application/vnd.japannet-registration-wakeup
+application/vnd.japannet-setstore-wakeup
+application/vnd.japannet-verification
+application/vnd.japannet-verification-wakeup
+application/vnd.jisp
+application/vnd.kde.karbon
+application/vnd.kde.kchart
+application/vnd.kde.kformula
+application/vnd.kde.kivio
+application/vnd.kde.kontour
+application/vnd.kde.kpresenter
+application/vnd.kde.kspread
+application/vnd.kde.kword
+application/vnd.kenameaapp
+application/vnd.koan
+application/vnd.liberty-request+xml
+application/vnd.llamagraphics.life-balance.desktop
+application/vnd.llamagraphics.life-balance.exchange+xml
+application/vnd.lotus-1-2-3
+application/vnd.lotus-approach
+application/vnd.lotus-freelance
+application/vnd.lotus-notes
+application/vnd.lotus-organizer
+application/vnd.lotus-screencam
+application/vnd.lotus-wordpro
+application/vnd.mcd
+application/vnd.mediastation.cdkey
+application/vnd.meridian-slingshot
+application/vnd.micrografx.flo
+application/vnd.micrografx.igx
+application/vnd.mif		mif
+application/vnd.minisoft-hp3000-save
+application/vnd.mitsubishi.misty-guard.trustweb
+application/vnd.mobius.daf
+application/vnd.mobius.dis
+application/vnd.mobius.mbk
+application/vnd.mobius.mqy
+application/vnd.mobius.msl
+application/vnd.mobius.plc
+application/vnd.mobius.txf
+application/vnd.mophun.application
+application/vnd.mophun.certificate
+application/vnd.motorola.flexsuite
+application/vnd.motorola.flexsuite.adsi
+application/vnd.motorola.flexsuite.fis
+application/vnd.motorola.flexsuite.gotap
+application/vnd.motorola.flexsuite.kmr
+application/vnd.motorola.flexsuite.ttc
+application/vnd.motorola.flexsuite.wem
+application/vnd.mozilla.xul+xml	xul
+application/vnd.ms-artgalry
+application/vnd.ms-asf
+application/vnd.ms-excel	xls
+application/vnd.ms-lrm
+application/vnd.ms-powerpoint	ppt
+application/vnd.ms-project
+application/vnd.ms-tnef
+application/vnd.ms-works
+application/vnd.ms-wpl
+application/vnd.mseq
+application/vnd.msign
+application/vnd.music-niff
+application/vnd.musician
+application/vnd.netfpx
+application/vnd.noblenet-directory
+application/vnd.noblenet-sealer
+application/vnd.noblenet-web
+application/vnd.novadigm.edm
+application/vnd.novadigm.edx
+application/vnd.novadigm.ext
+application/vnd.obn
+application/vnd.osa.netdeploy
+application/vnd.palm
+application/vnd.pg.format
+application/vnd.pg.osasli
+application/vnd.powerbuilder6
+application/vnd.powerbuilder6-s
+application/vnd.powerbuilder7
+application/vnd.powerbuilder7-s
+application/vnd.powerbuilder75
+application/vnd.powerbuilder75-s
+application/vnd.previewsystems.box
+application/vnd.publishare-delta-tree
+application/vnd.pvi.ptid1
+application/vnd.pwg-multiplexed
+application/vnd.pwg-xhtml-print+xml
+application/vnd.quark.quarkxpress
+application/vnd.rapid
+application/vnd.rn-realmedia	rm
+application/vnd.s3sms
+application/vnd.sealed.net
+application/vnd.seemail
+application/vnd.shana.informed.formdata
+application/vnd.shana.informed.formtemplate
+application/vnd.shana.informed.interchange
+application/vnd.shana.informed.package
+application/vnd.smaf
+application/vnd.sss-cod
+application/vnd.sss-dtf
+application/vnd.sss-ntf
+application/vnd.street-stream
+application/vnd.svd
+application/vnd.swiftview-ics
+application/vnd.triscape.mxs
+application/vnd.trueapp
+application/vnd.truedoc
+application/vnd.ufdl
+application/vnd.uplanet.alert
+application/vnd.uplanet.alert-wbxml
+application/vnd.uplanet.bearer-choice
+application/vnd.uplanet.bearer-choice-wbxml
+application/vnd.uplanet.cacheop
+application/vnd.uplanet.cacheop-wbxml
+application/vnd.uplanet.channel
+application/vnd.uplanet.channel-wbxml
+application/vnd.uplanet.list
+application/vnd.uplanet.list-wbxml
+application/vnd.uplanet.listcmd
+application/vnd.uplanet.listcmd-wbxml
+application/vnd.uplanet.signal
+application/vnd.vcx
+application/vnd.vectorworks
+application/vnd.vidsoft.vidconference
+application/vnd.visio
+application/vnd.visionary
+application/vnd.vividence.scriptfile
+application/vnd.vsf
+application/vnd.wap.sic
+application/vnd.wap.slc
+application/vnd.wap.wbxml	wbxml
+application/vnd.wap.wmlc	wmlc
+application/vnd.wap.wmlscriptc	wmlsc
+application/vnd.webturbo
+application/vnd.wrq-hp3000-labelled
+application/vnd.wt.stf
+application/vnd.wv.csp+wbxml
+application/vnd.xara
+application/vnd.xfdl
+application/vnd.yamaha.hv-dic
+application/vnd.yamaha.hv-script
+application/vnd.yamaha.hv-voice
+application/vnd.yellowriver-custom-menu
+application/voicexml+xml	vxml
+application/watcherinfo+xml
+application/whoispp-query
+application/whoispp-response
+application/wita
+application/wordperfect5.1
+application/x-bcpio		bcpio
+application/x-cdlink		vcd
+application/x-chess-pgn		pgn
+application/x-compress
+application/x-cpio		cpio
+application/x-csh		csh
+application/x-director		dcr dir dxr
+application/x-dvi		dvi
+application/x-futuresplash	spl
+application/x-gtar		gtar
+application/x-gzip
+application/x-hdf		hdf
+application/x-javascript	js
+application/x-koan		skp skd skt skm
+application/x-latex		latex
+application/x-netcdf		nc cdf
+application/x-sh		sh
+application/x-shar		shar
+application/x-shockwave-flash	swf
+application/x-stuffit		sit
+application/x-sv4cpio		sv4cpio
+application/x-sv4crc		sv4crc
+application/x-tar		tar
+application/x-tcl		tcl
+application/x-tex		tex
+application/x-texinfo		texinfo texi
+application/x-troff		t tr roff
+application/x-troff-man		man
+application/x-troff-me		me
+application/x-troff-ms		ms
+application/x-ustar		ustar
+application/x-wais-source	src
+application/x400-bp
+application/xhtml+xml		xhtml xht
+application/xslt+xml		xslt
+application/xml			xml xsl
+application/xml-dtd		dtd
+application/xml-external-parsed-entity
+application/zip			zip
+audio/32kadpcm
+audio/amr
+audio/amr-wb
+audio/basic			au snd
+audio/cn
+audio/dat12
+audio/dsr-es201108
+audio/dvi4
+audio/evrc
+audio/evrc0
+audio/g722
+audio/g.722.1
+audio/g723
+audio/g726-16
+audio/g726-24
+audio/g726-32
+audio/g726-40
+audio/g728
+audio/g729
+audio/g729D
+audio/g729E
+audio/gsm
+audio/gsm-efr
+audio/l8
+audio/l16
+audio/l20
+audio/l24
+audio/lpc
+audio/midi			mid midi kar
+audio/mpa
+audio/mpa-robust
+audio/mp4a-latm
+audio/mpeg			mpga mp2 mp3
+audio/parityfec
+audio/pcma
+audio/pcmu
+audio/prs.sid
+audio/qcelp
+audio/red
+audio/smv
+audio/smv0
+audio/telephone-event
+audio/tone
+audio/vdvi
+audio/vnd.3gpp.iufp
+audio/vnd.cisco.nse
+audio/vnd.cns.anp1
+audio/vnd.cns.inf1
+audio/vnd.digital-winds
+audio/vnd.everad.plj
+audio/vnd.lucent.voice
+audio/vnd.nortel.vbk
+audio/vnd.nuera.ecelp4800
+audio/vnd.nuera.ecelp7470
+audio/vnd.nuera.ecelp9600
+audio/vnd.octel.sbc
+audio/vnd.qcelp
+audio/vnd.rhetorex.32kadpcm
+audio/vnd.vmx.cvsd
+audio/x-aiff			aif aiff aifc
+audio/x-alaw-basic
+audio/x-mpegurl			m3u
+audio/x-pn-realaudio		ram ra
+audio/x-pn-realaudio-plugin
+audio/x-wav			wav
+chemical/x-pdb			pdb
+chemical/x-xyz			xyz
+image/bmp			bmp
+image/cgm			cgm
+image/g3fax
+image/gif			gif
+image/ief			ief
+image/jpeg			jpeg jpg jpe
+image/naplps
+image/png			png
+image/prs.btif
+image/prs.pti
+image/svg+xml			svg
+image/t38
+image/tiff			tiff tif
+image/tiff-fx
+image/vnd.cns.inf2
+image/vnd.djvu			djvu djv
+image/vnd.dwg
+image/vnd.dxf
+image/vnd.fastbidsheet
+image/vnd.fpx
+image/vnd.fst
+image/vnd.fujixerox.edmics-mmr
+image/vnd.fujixerox.edmics-rlc
+image/vnd.globalgraphics.pgb
+image/vnd.mix
+image/vnd.ms-modi
+image/vnd.net-fpx
+image/vnd.svf
+image/vnd.wap.wbmp		wbmp
+image/vnd.xiff
+image/x-cmu-raster		ras
+image/x-icon			ico
+image/x-portable-anymap		pnm
+image/x-portable-bitmap		pbm
+image/x-portable-graymap	pgm
+image/x-portable-pixmap		ppm
+image/x-rgb			rgb
+image/x-xbitmap			xbm
+image/x-xpixmap			xpm
+image/x-xwindowdump		xwd
+message/delivery-status
+message/disposition-notification
+message/external-body
+message/http
+message/news
+message/partial
+message/rfc822
+message/s-http
+message/sip
+message/sipfrag
+model/iges			igs iges
+model/mesh			msh mesh silo
+model/vnd.dwf
+model/vnd.flatland.3dml
+model/vnd.gdl
+model/vnd.gs-gdl
+model/vnd.gtw
+model/vnd.mts
+model/vnd.parasolid.transmit.binary
+model/vnd.parasolid.transmit.text
+model/vnd.vtu
+model/vrml			wrl vrml
+multipart/alternative
+multipart/appledouble
+multipart/byteranges
+multipart/digest
+multipart/encrypted
+multipart/form-data
+multipart/header-set
+multipart/mixed
+multipart/parallel
+multipart/related
+multipart/report
+multipart/signed
+multipart/voice-message
+text/calendar			ics ifb
+text/css			css
+text/directory
+text/enriched
+text/html			html htm
+text/parityfec
+text/plain			asc txt
+text/prs.lines.tag
+text/rfc822-headers
+text/richtext			rtx
+text/rtf			rtf
+text/sgml			sgml sgm
+text/t140
+text/tab-separated-values	tsv
+text/uri-list
+text/vnd.abc
+text/vnd.curl
+text/vnd.dmclientscript
+text/vnd.fly
+text/vnd.fmi.flexstor
+text/vnd.in3d.3dml
+text/vnd.in3d.spot
+text/vnd.iptc.nitf
+text/vnd.iptc.newsml
+text/vnd.latex-z
+text/vnd.motorola.reflex
+text/vnd.ms-mediapackage
+text/vnd.net2phone.commcenter.command
+text/vnd.sun.j2me.app-descriptor
+text/vnd.wap.si
+text/vnd.wap.sl
+text/vnd.wap.wml		wml
+text/vnd.wap.wmlscript		wmls
+text/x-setext			etx
+text/xml
+text/xml-external-parsed-entity
+video/bmpeg
+video/bt656
+video/celb
+video/dv
+video/h261
+video/h263
+video/h263-1998
+video/h263-2000
+video/jpeg
+video/mp1s
+video/mp2p
+video/mp2t
+video/mp4v-es
+video/mpv
+video/mpeg			mpeg mpg mpe
+video/nv
+video/parityfec
+video/pointer
+video/quicktime			qt mov
+video/smpte292m
+video/vnd.fvt
+video/vnd.motorola.video
+video/vnd.motorola.videop
+video/vnd.mpegurl		mxu m4u
+video/vnd.nokia.interleaved-multimedia
+video/vnd.objectvideo
+video/vnd.vivo
+video/x-msvideo			avi
+video/x-sgi-movie		movie
+x-conference/x-cooltalk		ice
diff -ru -ruN apache_1.3.36_orig/SSLconf/conf/ssleay.cnf apache_1.3.36/SSLconf/conf/ssleay.cnf
--- apache_1.3.36_orig/SSLconf/conf/ssleay.cnf	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/SSLconf/conf/ssleay.cnf	2006-05-18 17:16:13.795322560 +0200
@@ -0,0 +1,34 @@
+#
+# SSLeay example configuration file.
+#
+
+RANDFILE                = $ENV::HOME/.rnd
+
+[ req ]
+default_bits            = 1024
+default_keyfile         = privkey.pem
+distinguished_name      = req_distinguished_name
+
+[ req_distinguished_name ]
+countryName                     = Country Name (2 letter code)
+countryName_default             = GB
+countryName_min                 = 2
+countryName_max                 = 2
+
+stateOrProvinceName             = State or Province Name (full name)
+stateOrProvinceName_default     = Some-State
+
+localityName                    = Locality Name (eg, city)
+
+organizationName                = Organization Name (eg, company; recommended)
+organizationName_max            = 64
+
+organizationalUnitName          = Organizational Unit Name (eg, section)
+organizationalUnitName_max      = 64
+
+commonName                      = server name (eg. ssl.domain.tld; required!!!)
+commonName_max                  = 64
+
+emailAddress                    = Email Address
+emailAddress_max                = 40
+
diff -ru -ruN apache_1.3.36_orig/SSLconf/keynote/admit-all apache_1.3.36/SSLconf/keynote/admit-all
--- apache_1.3.36_orig/SSLconf/keynote/admit-all	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/SSLconf/keynote/admit-all	2006-05-18 17:16:13.794322712 +0200
@@ -0,0 +1,4 @@
+keynote-version: 2
+authorizer: "POLICY"
+# leave out licensees altogether and we trust everyone...
+#licensees:
diff -ru -ruN apache_1.3.36_orig/SSLconf/keynote/admit-ben-thawte apache_1.3.36/SSLconf/keynote/admit-ben-thawte
--- apache_1.3.36_orig/SSLconf/keynote/admit-ben-thawte	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/SSLconf/keynote/admit-ben-thawte	2006-05-18 17:16:13.795322560 +0200
@@ -0,0 +1,3 @@
+keynote-version: 2
+authorizer: "POLICY"
+licensees: "/CN=Thawte Freemail Member/Email=ben@algroup.co.uk"
diff -ru -ruN apache_1.3.36_orig/SSLconf/keynote/admit-ben-thawte-restricted apache_1.3.36/SSLconf/keynote/admit-ben-thawte-restricted
--- apache_1.3.36_orig/SSLconf/keynote/admit-ben-thawte-restricted	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/SSLconf/keynote/admit-ben-thawte-restricted	2006-05-18 17:16:13.794322712 +0200
@@ -0,0 +1,4 @@
+keynote-version: 2
+authorizer: "POLICY"
+licensees: "/CN=Thawte Freemail Member/Email=ben@algroup.co.uk"
+conditions: !(CGI_REQUEST_URI ~= "/manual/.*") -> "permit";
diff -ru -ruN apache_1.3.36_orig/SSLconf/keynote/admit-none apache_1.3.36/SSLconf/keynote/admit-none
--- apache_1.3.36_orig/SSLconf/keynote/admit-none	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/SSLconf/keynote/admit-none	2006-05-18 17:16:13.794322712 +0200
@@ -0,0 +1,5 @@
+keynote-version: 2
+authorizer: "POLICY"
+# no licensees, so no-one gets in!
+licensees:
+conditions: ;
diff -ru -ruN apache_1.3.36_orig/SSLconf/keynote/admit-thawte apache_1.3.36/SSLconf/keynote/admit-thawte
--- apache_1.3.36_orig/SSLconf/keynote/admit-thawte	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/SSLconf/keynote/admit-thawte	2006-05-18 17:16:13.795322560 +0200
@@ -0,0 +1,3 @@
+keynote-version: 2
+authorizer: "POLICY"
+licensees: "/C=ZA/ST=Western Cape/L=Durbanville/O=Thawte Consulting/OU=Thawte PF RSA IK 1998.9.16 17:55/CN=Thawte Personal Freemail RSA Issuer 1998.9.16"
diff -ru -ruN apache_1.3.36_orig/SSLconf/keynote/cert-issuer-simple apache_1.3.36/SSLconf/keynote/cert-issuer-simple
--- apache_1.3.36_orig/SSLconf/keynote/cert-issuer-simple	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/SSLconf/keynote/cert-issuer-simple	2006-05-18 17:16:13.795322560 +0200
@@ -0,0 +1,3 @@
+keynote-version: 2
+authorizer: "@@ISSUER@@"
+licensees: "@@SUBJECT@@"
diff -ru -ruN apache_1.3.36_orig/SSLpatch apache_1.3.36/SSLpatch
--- apache_1.3.36_orig/SSLpatch	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/SSLpatch	2006-05-18 17:16:13.796322408 +0200
@@ -0,0 +1,1502 @@
+diff -u -r ../apache_1.3.36/Makefile.tmpl ./Makefile.tmpl
+--- ../apache_1.3.36/Makefile.tmpl	Wed Nov 24 19:10:19 2004
++++ ./Makefile.tmpl	Wed Dec 21 11:56:50 2005
+@@ -247,6 +247,7 @@
+ #   shared object files.
+ install-programs:
+ 	@echo "===> [programs: Installing Apache $(TARGET) program and shared objects]"
++	$(INSTALL_PROGRAM) $(TOP)/$(SRC)/modules/ssl/gcache $(root)$(sbindir)/gcache
+ 	-@if [ ".`grep '^[ 	]*AddModule.*mod_so\.o' $(TOP)/$(SRC)/Configuration.apaci`" != . ]; then \
+ 		echo "$(INSTALL_CORE) $(TOP)/$(SRC)/$(TARGET) $(root)$(sbindir)/$(TARGET)"; \
+ 		$(INSTALL_CORE) $(TOP)/$(SRC)/$(TARGET) $(root)$(sbindir)/$(TARGET); \
+diff -u -r ../apache_1.3.36/configure ./configure
+--- ../apache_1.3.36/configure	Wed Nov 24 19:10:19 2004
++++ ./configure	Wed Dec 21 11:56:50 2005
+@@ -789,7 +789,9 @@
+                            OOIFS="$IFS"
+                            IFS=':'
+                            for module in $modules; do
+-                               eval "shared_${module}=yes" 
++#			       if [ $module != apache_ssl ]; then
++				   eval "shared_${module}=yes"
++#			       fi
+                            done
+                            IFS="$OOIFS"
+                            shared_so=no        # because of bootstrapping
+@@ -1057,8 +1059,10 @@
+ ##
+ if [ "x$TARGET" != "x" ]; then
+     thetarget="$TARGET"
++    theconfig="$thetarget"
+ else
+-    thetarget=httpd
++    thetarget=httpsd
++    theconfig=httpd
+ fi
+ 
+ ##
+@@ -1477,6 +1481,7 @@
+     eval "share=\$shared_$module"
+     if [ "x$share" = "xyes" ]; then
+         echo $SEO "s%^\\(.*\\)AddModule\\(.*mod_$module\\.\\)[oam].*\\(.*\\)%\\1SharedModule\\2so\\3%g" >>$sedsubst
++        echo $SEO "s%^\\(.*\\)AddModule\\(.*$module\\.\\)[oam].*\\(.*\\)%\\1SharedModule\\2so\\3%g" >>$sedsubst
+         echo $SEO "s%^\\(.*\\)AddModule\\(.*lib$module\\.\\)[oam].*\\(.*\\)%\\1SharedModule\\2so\\3%g" >>$sedsubst
+         m="$m [shared]"
+     fi
+diff -u -r ../apache_1.3.36/src/Configuration ./src/Configuration
+--- ../apache_1.3.36/src/Configuration	Fri Oct 14 00:39:00 2005
++++ ./src/Configuration	Wed Dec 21 12:02:16 2005
+@@ -62,6 +62,21 @@
+ #OPTIM=
+ #RANLIB=
+ 
++TARGET=httpsd
++
++#
++# SSL Related stuff. N.B. This is set up to use the SSLeay source, NOT an
++# installed version.
++#
++KEYNOTE_BASE=/home/ben/work/KeyNote
++SSL_BASE=/usr
++SSL_INCLUDE= -I$(SSL_BASE)/include
++SSL_CFLAGS= -DAPACHE_SSL
++SSL_LIB_DIR=/usr/lib
++SSL_LIBS= -L$(SSL_LIB_DIR) -lssl -lcrypto
++SSL_APP_DIR=/usr/bin
++SSL_APP=/usr/bin/openssl
++
+ ################################################################
+ # Name of the installed Apache HTTP webserver.
+ #
+@@ -235,6 +250,11 @@
+ # is and the more memory it will take, so if you are unlikely to use the
+ # functionality of a particular module you might wish to leave it out.
+ 
++##
++## Experimental Apache-SSL KeyNote support.
++
++# AddModule modules/ssl-keynote/apache_ssl_keynote.o
++
+ ## mod_mmap_static is an experimental module, you almost certainly
+ ## don't need it.  It can make some webservers faster.  No further
+ ## documentation is provided here because you'd be foolish
+@@ -460,3 +480,7 @@
+ 
+ AddModule modules/standard/mod_setenvif.o
+ 
++## Damn damn damn. Apache inverts the module list. SSL must go first to fake
++## basic authorization (that is, last in this file).
++
++AddModule modules/ssl/apache_ssl.a
+diff -u -r ../apache_1.3.36/src/Configuration.tmpl ./src/Configuration.tmpl
+--- ../apache_1.3.36/src/Configuration.tmpl	Wed Nov 24 19:10:19 2004
++++ ./src/Configuration.tmpl	Wed Dec 21 11:56:50 2005
+@@ -62,6 +62,21 @@
+ #OPTIM=
+ #RANLIB=
+ 
++TARGET=httpsd
++
++#
++# SSL Related stuff. N.B. This is set up to use the SSLeay source, NOT an
++# installed version.
++#
++KEYNOTE_BASE=/home/ben/work/KeyNote
++SSL_BASE=/usr
++SSL_INCLUDE= -I$(SSL_BASE)/include
++SSL_CFLAGS= -DAPACHE_SSL
++SSL_LIB_DIR=/usr/lib
++SSL_LIBS= -L$(SSL_LIB_DIR) -lssl -lcrypto
++SSL_APP_DIR=/usr/bin
++SSL_APP=/usr/bin/openssl
++
+ ################################################################
+ # Name of the installed Apache HTTP webserver.
+ #
+@@ -235,6 +250,11 @@
+ # is and the more memory it will take, so if you are unlikely to use the
+ # functionality of a particular module you might wish to leave it out.
+ 
++##
++## Experimental Apache-SSL KeyNote support.
++
++# AddModule modules/ssl-keynote/apache_ssl_keynote.o
++
+ ## mod_mmap_static is an experimental module, you almost certainly
+ ## don't need it.  It can make some webservers faster.  No further
+ ## documentation is provided here because you'd be foolish
+@@ -460,3 +480,7 @@
+ 
+ AddModule modules/standard/mod_setenvif.o
+ 
++## Damn damn damn. Apache inverts the module list. SSL must go first to fake
++## basic authorization (that is, last in this file).
++
++AddModule modules/ssl/apache_ssl.a
+diff -u -r ../apache_1.3.36/src/Configure ./src/Configure
+--- ../apache_1.3.36/src/Configure	Wed Nov 24 19:10:19 2004
++++ ./src/Configure	Wed Dec 21 11:56:50 2005
+@@ -873,7 +873,7 @@
+ ##
+ echo >>Makefile.config "OSDIR=\$(SRCDIR)/$OSDIR"
+ echo >>Makefile.config "INCDIR=\$(SRCDIR)/include"
+-echo >>Makefile.config "INCLUDES0=-I\$(OSDIR) -I\$(INCDIR)"
++echo >>Makefile.config "INCLUDES0=-I\$(OSDIR) -I\$(INCDIR) \$(SSL_INCLUDE)"
+ echo >>Makefile.config "SHELL=$SHELL"
+ echo >>Makefile.config "OS=$OS"
+ 
+@@ -1833,6 +1833,10 @@
+ 		    echo "    o $modbase adds libraries: $modlibs1"
+ 		    modlibs="$modlibs $modlibs1"
+ 		fi
++		if grep "Libs:" $tmpfile2 > /dev/null; then
++		    modlibs=`grep Libs: $tmpfile2 | sed 's/^.*Libs:[ 	]*//'`
++		    echo "    o $modbase adds libraries: $modlibs"
++		fi
+ 		rm -f $tmpfile2 $tmpfile3
+ 		if [ "x$ext" != "x$SHMOD_SUFFIX_NAME" ]; then
+ 		    ext=o
+@@ -2151,7 +2155,7 @@
+ ## for $LIBS at this point. This implies that anything below
+ ## can only alter $LIBS
+ ##
+-echo "CFLAGS1=$CFLAGS" >>Makefile.config
++echo "CFLAGS1=$CFLAGS \$(SSL_CFLAGS)" >>Makefile.config
+ echo "INCLUDES1=$INCLUDES" >>Makefile.config
+ echo "LIBS_SHLIB=$LIBS_SHLIB" >>Makefile.config
+ echo "LDFLAGS1=$LDFLAGS" >>Makefile.config
+@@ -2371,7 +2375,7 @@
+ ####################################################################
+ ## Finish creating the Makefile.config file
+ ##
+-echo "LIBS1=$modlibs $LIBS">> Makefile.config
++echo "LIBS1=$modlibs $LIBS \$(SSL_LIBS)">> Makefile.config
+ echo "##" >> Makefile.config
+ echo "##  (End of automatically generated section)">> Makefile.config
+ echo "##" >> Makefile.config
+diff -u -r ../apache_1.3.36/src/Makefile.tmpl ./src/Makefile.tmpl
+--- ../apache_1.3.36/src/Makefile.tmpl	Wed Nov 24 19:10:19 2004
++++ ./src/Makefile.tmpl	Wed Dec 21 11:56:50 2005
+@@ -30,6 +30,15 @@
+ 
+ $(TARGET): $(EXTRA_DEPS) $(SUBTARGET)
+ 
++certificate:
++	ps > /tmp/ssl-rand; date >> /tmp/ssl-rand; \
++	RANDFILE=/tmp/ssl-rand $(SSL_APP) req -config ../SSLconf/conf/ssleay.cnf \
++	-new -x509 -nodes -out ../SSLconf/conf/httpsd.pem \
++	-keyout ../SSLconf/conf/httpsd.pem; \
++	ln -sf httpsd.pem ../SSLconf/conf/`$(SSL_APP) \
++	x509 -noout -hash < ../SSLconf/conf/httpsd.pem`.0; \
++	rm /tmp/ssl-rand
++
+ target_static: subdirs modules.o
+ 	$(CC) -c $(INCLUDES) $(CFLAGS) buildmark.c
+ 	$(CC) $(CFLAGS) $(LDFLAGS) $(LDFLAGS_SHLIB_EXPORT) \
+@@ -125,10 +134,10 @@
+ 
+ # DO NOT REMOVE
+ buildmark.o: buildmark.c include/ap_config.h include/ap_mmn.h \
+- include/ap_config_auto.h $(OSDIR)/os.h include/ap_ctype.h \
+- include/hsregex.h include/httpd.h include/ap_alloc.h include/buff.h \
++ include/ap_config_auto.h os/unix/os.h os/unix/os-inline.c \
++ include/ap_ctype.h include/httpd.h include/ap_alloc.h include/buff.h \
+  include/ap.h include/util_uri.h
+ modules.o: modules.c include/httpd.h include/ap_config.h \
+- include/ap_mmn.h include/ap_config_auto.h $(OSDIR)/os.h \
+- include/ap_ctype.h include/hsregex.h include/ap_alloc.h include/buff.h \
+- include/ap.h include/util_uri.h include/http_config.h
++ include/ap_mmn.h include/ap_config_auto.h os/unix/os.h \
++ os/unix/os-inline.c include/ap_ctype.h include/ap_alloc.h \
++ include/buff.h include/ap.h include/util_uri.h include/http_config.h
+diff -u -r ../apache_1.3.36/src/ap/Makefile.tmpl ./src/ap/Makefile.tmpl
+--- ../apache_1.3.36/src/ap/Makefile.tmpl	Wed Nov 24 19:10:19 2004
++++ ./src/ap/Makefile.tmpl	Wed Dec 21 11:56:50 2005
+@@ -40,45 +40,52 @@
+ 	    && rm Makefile.new
+ 
+ # DO NOT REMOVE
++ap_base64.o: ap_base64.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap.h
++ap_checkpass.o: ap_checkpass.c $(INCDIR)/ap_config.h \
++ $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_md5.h \
++ $(INCDIR)/ap_sha1.h $(INCDIR)/ap.h
+ ap_cpystrn.o: ap_cpystrn.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
++ap_ebcdic.o: ap_ebcdic.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
++ $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
++ $(INCDIR)/http_core.h $(INCDIR)/http_config.h
+ ap_execve.o: ap_execve.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
+ ap_fnmatch.o: ap_fnmatch.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/fnmatch.h
++ $(INCDIR)/ap_ctype.h $(INCDIR)/fnmatch.h
+ ap_getpass.o: ap_getpass.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap.h
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap.h
+ ap_md5c.o: ap_md5c.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_md5.h \
+- $(INCDIR)/ap.h
+-ap_sha1.o: ap_sha1.c $(INCDIR)/ap_config.h $(INCDIR)/ap_sha1.h \
+- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_md5.h $(INCDIR)/ap.h
++ap_sha1.o: ap_sha1.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_sha1.h $(INCDIR)/ap.h
+ ap_signal.o: ap_signal.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
+ ap_slack.o: ap_slack.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h $(INCDIR)/http_log.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
++ $(INCDIR)/http_log.h
+ ap_snprintf.o: ap_snprintf.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
+ ap_strtol.o: ap_strtol.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
+diff -u -r ../apache_1.3.36/src/include/ap_config.h ./src/include/ap_config.h
+--- ../apache_1.3.36/src/include/ap_config.h	Wed Nov 24 19:10:19 2004
++++ ./src/include/ap_config.h	Wed Dec 21 11:56:50 2005
+@@ -432,7 +432,17 @@
+  * all glibc based systems need crypt.h
+  */
+ #if defined(__GNU_LIBRARY__) && __GNU_LIBRARY__ > 1
+-#include <crypt.h>
++
++# ifdef APACHE_SSL
++#  define des_encrypt BASE_des_encrypt
++# endif
++
++# include <crypt.h>
++
++# ifdef APACHE_SSL
++#  undef des_encrypt
++# endif
++
+ #endif
+ 
+ /* glibc 2.0.0 through 2.0.4 need size_t * here, where 2.0.5 needs socklen_t *
+@@ -1452,6 +1462,10 @@
+ 
+ #ifndef ap_wait_t
+ #define ap_wait_t int
++#endif
++
++#ifdef APACHE_SSL
++# define NO_WRITEV
+ #endif
+ 
+ #ifdef __cplusplus
+diff -u -r ../apache_1.3.36/src/include/ap_mmn.h ./src/include/ap_mmn.h
+--- ../apache_1.3.36/src/include/ap_mmn.h	Tue Jun 28 19:03:25 2005
++++ ./src/include/ap_mmn.h	Wed Dec 21 11:56:50 2005
+@@ -207,6 +207,7 @@
+  */
+ 
+ #define MODULE_MAGIC_COOKIE 0x41503133UL /* "AP13" */
++#define SSL_MAGIC_COOKIE 0x53533133UL /* "SS13" */
+ 
+ #ifndef MODULE_MAGIC_NUMBER_MAJOR
+ #define MODULE_MAGIC_NUMBER_MAJOR 19990320
+diff -u -r ../apache_1.3.36/src/include/buff.h ./src/include/buff.h
+--- ../apache_1.3.36/src/include/buff.h	Wed Nov 24 19:10:19 2004
++++ ./src/include/buff.h	Wed Dec 21 11:56:50 2005
+@@ -19,13 +19,30 @@
+ #ifdef __cplusplus
+ extern "C" {
+ #endif
+-
+ #ifdef B_SFIO
++
+ #include "sfio.h"
+ #endif
+ 
+ #include <stdarg.h>
+ 
++#ifdef APACHE_SSL
++
++# include <stdio.h>
++# include <openssl/ssl.h>
++
++#if SSLEAY_VERSION_NUMBER < 0x0920
++# error "Don't use OpenSSL/SSLeay versions less than 0.9.2b, they have a serious security problem!"
++#endif
++
++# define APACHE_SSL_EXPORT_CERTS	FALSE
++# if APACHE_SSL_EXPORT_CERTS
++/* SSLeay doesn't, so we must! */
++#  define APACHE_SSL_KEEP_CERTS		TRUE
++# endif
++
++#endif
++
+ /* Reading is buffered */
+ #define B_RD     (1)
+ /* Writing is buffered */
+@@ -85,6 +102,19 @@
+ #ifdef B_SFIO
+     Sfio_t *sf_in;
+     Sfio_t *sf_out;
++#endif
++
++#ifdef APACHE_SSL
++    /* Add some context for SSL */
++    SSL *ssl;
++    char *szClientX509;
++    int nVerifyError;
++    BOOL bRevoked;
++    BOOL bCRLExpired;
++    BOOL bNoCRL;
++# if APACHE_SSL_KEEP_CERTS
++    table *tableCertChain;
++# endif
+ #endif
+ 
+     void *callback_data;
+diff -u -r ../apache_1.3.36/src/include/http_config.h ./src/include/http_config.h
+--- ../apache_1.3.36/src/include/http_config.h	Wed Nov 24 19:10:19 2004
++++ ./src/include/http_config.h	Wed Dec 21 11:56:50 2005
+@@ -233,6 +233,11 @@
+     void (*child_exit) (server_rec *, pool *);
+ #endif
+     int (*post_read_request) (request_rec *);
++#ifdef APACHE_SSL
++/* These are only present if the cookie is SSL_MAGIC_COOKIE */
++    void (*setup_connection)(conn_rec *);
++    void (*add_common_vars)(request_rec *);
++#endif
+ } module;
+ 
+ /* Initializer for the first few module slots, which are only
+@@ -253,6 +258,14 @@
+ 				NULL, \
+ 				MODULE_MAGIC_COOKIE
+ 
++#define SSL_MODULE_STUFF	MODULE_MAGIC_NUMBER_MAJOR, \
++				MODULE_MAGIC_NUMBER_MINOR, \
++				-1, \
++				__FILE__, \
++				NULL, \
++				NULL, \
++				SSL_MAGIC_COOKIE
++
+ /* Generic accessors for other modules to get at their own module-specific
+  * data
+  */
+@@ -363,6 +376,11 @@
+ CORE_EXPORT(const command_rec *) ap_find_command_in_modules(const char *cmd_name, module **mod);
+ CORE_EXPORT(void *) ap_set_config_vectors(cmd_parms *parms, void *config, module *mod);
+ CORE_EXPORT(const char *) ap_handle_command(cmd_parms *parms, void *config, const char *l);
++
++#ifdef APACHE_SSL
++CORE_EXPORT(void) ap_add_common_vars2(request_rec *r);
++CORE_EXPORT(void) ap_setup_connection(conn_rec *c);
++#endif
+ 
+ #endif
+ 
+diff -u -r ../apache_1.3.36/src/include/http_main.h ./src/include/http_main.h
+--- ../apache_1.3.36/src/include/http_main.h	Wed Nov 24 19:10:19 2004
++++ ./src/include/http_main.h	Wed Dec 21 11:56:50 2005
+@@ -73,6 +73,7 @@
+ API_EXPORT(void) ap_start_shutdown(void);
+ API_EXPORT(void) ap_start_restart(int);
+ API_EXPORT(void) ap_hard_timeout(char *, request_rec *);
++void ap_conn_timeout(char *name,conn_rec *conn);
+ API_EXPORT(void) ap_keepalive_timeout(char *, request_rec *);
+ API_EXPORT(void) ap_soft_timeout(char *, request_rec *);
+ API_EXPORT(void) ap_kill_timeout(request_rec *);
+@@ -128,6 +129,8 @@
+  * write_fd are possibly killed off separately.
+  */
+ API_EXPORT(void) ap_unregister_other_child(void *data);
++/* Check for debug-level logging */
++API_EXPORT(int) LogLevelIsDebug(void);
+ 
+ #endif
+ 
+diff -u -r ../apache_1.3.36/src/include/httpd.h ./src/include/httpd.h
+--- ../apache_1.3.36/src/include/httpd.h	Fri Oct 14 00:25:14 2005
++++ ./src/include/httpd.h	Wed Dec 21 11:59:13 2005
+@@ -24,6 +24,11 @@
+  * httpd.h: header for simple (ha! not anymore) http daemon
+  */
+ 
++/* Needed all over the place */
++typedef unsigned int BOOL;
++#define TRUE 		1
++#define FALSE 		0
++
+ /* Headers in which EVERYONE has an interest... */
+ 
+ #include "ap_config.h"
+@@ -102,8 +107,13 @@
+ #define ap_http_method(r) ap_os_http_method((void*)r)
+ #define ap_default_port(r) ap_os_default_port((void*)r)
+ #else
+-#define ap_http_method(r)	"http"
+-#define ap_default_port(r)	DEFAULT_HTTP_PORT
++# ifdef APACHE_SSL
++#  define ap_http_method(r)	((r)->connection->client->ssl ? "https" : "http")
++#  define ap_default_port(r)	((r)->connection->client->ssl ? DEFAULT_HTTPS_PORT : DEFAULT_HTTP_PORT)
++# else
++#  define ap_http_method(r)	"http"
++#  define ap_default_port(r)	DEFAULT_HTTP_PORT
++# endif
+ #endif
+ 
+ /* --------- Default user name and group name running standalone ---------- */
+@@ -389,7 +399,11 @@
+ #define SERVER_BASEVENDOR   "Apache Group"
+ #define SERVER_BASEPRODUCT  "Apache"
+ #define SERVER_BASEREVISION "1.3.36"
+-#define SERVER_BASEVERSION  SERVER_BASEPRODUCT "/" SERVER_BASEREVISION
++#ifdef APACHE_SSL
++# define SERVER_BASEVERSION  SERVER_BASEPRODUCT "/" SERVER_BASEREVISION " Ben-SSL/1.57"
++#else
++# define SERVER_BASEVERSION  SERVER_BASEPRODUCT "/" SERVER_BASEREVISION
++#endif
+ 
+ #define SERVER_PRODUCT  SERVER_BASEPRODUCT
+ #define SERVER_REVISION SERVER_BASEREVISION
+@@ -865,6 +879,11 @@
+ #define DEFAULT_VHOST_ADDR 0xfffffffful
+ 
+ typedef struct server_addr_rec server_addr_rec;
++
++#ifdef APACHE_SSL
++int ApacheSSLSetupConnection(conn_rec *conn);
++void ApacheSSLAddCommonVars(request_rec *r);
++#endif
+ struct server_addr_rec {
+     server_addr_rec *next;
+     struct in_addr host_addr;	/* The bound address, for this server */
+diff -u -r ../apache_1.3.36/src/main/Makefile.tmpl ./src/main/Makefile.tmpl
+--- ../apache_1.3.36/src/main/Makefile.tmpl	Wed Nov 24 19:10:19 2004
++++ ./src/main/Makefile.tmpl	Wed Dec 21 11:56:50 2005
+@@ -14,7 +14,7 @@
+       rfc1413.o
+ 
+ .c.o:
+-	$(CC) -c $(INCLUDES) $(CFLAGS) $<
++	$(CC) -c $(INCLUDES) $(CFLAGS) $(SSL_CFLAGS) $<
+ 
+ all: $(HEADERS) $(LIB)
+ 
+@@ -60,30 +60,30 @@
+ # DO NOT REMOVE
+ alloc.o: alloc.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/multithread.h $(INCDIR)/http_log.h
+ buff.o: buff.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_main.h $(INCDIR)/http_log.h
+ gen_test_char.o: gen_test_char.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(INCDIR)/ap_ctype.h \
+- $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
+  $(INCDIR)/ap.h $(INCDIR)/util_uri.h
+ gen_uri_delims.o: gen_uri_delims.c
+ http_config.o: http_config.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_config.h $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_conf_globals.h \
+- $(INCDIR)/http_vhost.h $(INCDIR)/explain.h
++ $(INCDIR)/http_vhost.h $(INCDIR)/explain.h $(INCDIR)/fnmatch.h
+ http_core.o: http_core.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_config.h $(INCDIR)/http_core.h \
+  $(INCDIR)/http_protocol.h $(INCDIR)/http_request.h \
+@@ -93,23 +93,24 @@
+  $(INCDIR)/fnmatch.h
+ http_log.o: http_log.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+- $(INCDIR)/http_config.h $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+- $(INCDIR)/http_main.h
++ $(INCDIR)/http_conf_globals.h $(INCDIR)/http_config.h \
++ $(INCDIR)/http_core.h $(INCDIR)/http_log.h $(INCDIR)/http_main.h
+ http_main.o: http_main.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_main.h $(INCDIR)/http_log.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_protocol.h $(INCDIR)/http_request.h \
+  $(INCDIR)/http_conf_globals.h $(INCDIR)/http_core.h \
+  $(INCDIR)/http_vhost.h $(INCDIR)/util_script.h \
+- $(INCDIR)/scoreboard.h $(INCDIR)/multithread.h $(INCDIR)/explain.h
++ $(INCDIR)/scoreboard.h $(INCDIR)/multithread.h $(INCDIR)/explain.h \
++ ../lib/expat-lite/xmlparse.h
+ http_protocol.o: http_protocol.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(INCDIR)/ap_ctype.h \
+- $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
+  $(INCDIR)/ap.h $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_protocol.h \
+  $(INCDIR)/http_main.h $(INCDIR)/http_request.h \
+@@ -117,8 +118,8 @@
+  $(INCDIR)/http_conf_globals.h
+ http_request.o: http_request.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(INCDIR)/ap_ctype.h \
+- $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
+  $(INCDIR)/ap.h $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+  $(INCDIR)/http_protocol.h $(INCDIR)/http_conf_globals.h \
+@@ -126,32 +127,32 @@
+  $(INCDIR)/fnmatch.h
+ http_vhost.o: http_vhost.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_config.h $(INCDIR)/http_conf_globals.h \
+  $(INCDIR)/http_log.h $(INCDIR)/http_vhost.h \
+  $(INCDIR)/http_protocol.h
+ rfc1413.o: rfc1413.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_log.h $(INCDIR)/rfc1413.h $(INCDIR)/http_main.h
+ util.o: util.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_conf_globals.h $(INCDIR)/http_log.h test_char.h
+ util_date.o: util_date.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(INCDIR)/ap_ctype.h \
+- $(INCDIR)/hsregex.h $(INCDIR)/util_date.h
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
++ $(INCDIR)/ap_ctype.h $(INCDIR)/util_date.h
+ util_md5.o: util_md5.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/util_md5.h $(INCDIR)/ap_md5.h
+ util_script.o: util_script.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_config.h $(INCDIR)/http_conf_globals.h \
+  $(INCDIR)/http_main.h $(INCDIR)/http_log.h \
+@@ -160,6 +161,6 @@
+  $(INCDIR)/util_date.h
+ util_uri.o: util_uri.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_log.h $(INCDIR)/http_conf_globals.h uri_delims.h
+diff -u -r ../apache_1.3.36/src/main/buff.c ./src/main/buff.c
+--- ../apache_1.3.36/src/main/buff.c	Wed Nov 24 19:10:19 2004
++++ ./src/main/buff.c	Wed Dec 21 11:56:50 2005
+@@ -31,6 +31,10 @@
+ #include <bstring.h>		/* for IRIX, FD_SET calls bzero() */
+ #endif
+ 
++#ifdef APACHE_SSL
++# include <openssl/err.h>
++#endif
++
+ #ifndef DEFAULT_BUFSIZE
+ #define DEFAULT_BUFSIZE (4096)
+ #endif
+@@ -250,6 +254,46 @@
+     }
+     else
+ #endif
++#ifdef APACHE_SSL
++    if(fb->ssl)
++	{
++	int pa;
++
++	do
++	    {
++	    /* A horrible hack: an increase in this stat indicates that the
++	       client renegotiated. Is there a better way? Ben 10 Apr 1999
++	    */
++	    pa=fb->ssl->ctx->stats.sess_accept;
++
++	    rv=SSL_read(fb->ssl,buf,nbyte);
++
++	    ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,NULL,
++			 "read returned %d rwstate=%d state=%d rstate=%d "
++			 "cren=%d aren=%d accept=%d",
++			 rv,fb->ssl->rwstate,fb->ssl->state,fb->ssl->rstate,
++			 fb->ssl->ctx->stats.sess_connect_renegotiate,
++			 fb->ssl->ctx->stats.sess_accept_renegotiate,
++			 fb->ssl->ctx->stats.sess_accept);
++	    }
++	while(rv < 0 && fb->ssl->ctx->stats.sess_accept != pa);
++
++	if(rv < 0)
++	    {
++	    int l;
++
++	    while((l=ERR_get_error()))
++		{
++		char buf[MAX_STRING_LEN];
++
++		ERR_error_string(l,buf);
++		ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,NULL,"%s",
++			     buf);
++		}
++	    }
++	}
++    else
++#endif
+ 	rv = read(fb->fd_in, buf, nbyte);
+     
+     return rv;
+@@ -291,6 +335,7 @@
+ #else
+     rv = ap_read(fb, buf, nbyte);
+ #endif /* WIN32 */
++
+     return rv;
+ }
+ 
+@@ -308,6 +353,27 @@
+     }
+     else
+ #endif
++#ifdef APACHE_SSL
++    if(fb->ssl)
++	{
++	rv=SSL_write(fb->ssl,buf,nbyte);
++
++	if(rv < 0)
++	    {
++	    int l;
++
++	    while((l=ERR_get_error()))
++		{
++		char buf[MAX_STRING_LEN];
++
++		ERR_error_string(l,buf);
++		ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,NULL,"%s",
++			     buf);
++		}
++	    }
++	}
++    else
++#endif
+ #if defined (B_SFIO)
+ 	rv = sfwrite(fb->sf_out, buf, nbyte);
+ #else
+@@ -421,6 +487,11 @@
+     fb->callback_data = NULL;
+     fb->filter_callback = NULL;
+ 
++#ifdef APACHE_SSL
++    fb->ssl = NULL;
++    fb->szClientX509 = NULL;
++#endif
++
+     return fb;
+ }
+ 
+@@ -1151,7 +1222,7 @@
+ 	return write_with_errors(fb, buf, nbyte);
+     }
+ 
+-#ifdef NO_WRITEV
++#if defined(NO_WRITEV)
+     /* without writev() this has poor performance, too bad */
+ 
+     ap_snprintf(chunksize, sizeof(chunksize), "%x" CRLF, nbyte);
+diff -u -r ../apache_1.3.36/src/main/http_config.c ./src/main/http_config.c
+--- ../apache_1.3.36/src/main/http_config.c	Wed Nov 24 19:10:19 2004
++++ ./src/main/http_config.c	Wed Dec 21 11:56:50 2005
+@@ -334,6 +334,26 @@
+     return run_all ? OK : DECLINED;
+ }
+ 
++#ifdef APACHE_SSL
++void ap_add_common_vars2(request_rec *r)
++    {
++    module *m;
++
++    for (m = top_module; m; m = m->next)
++	if (m->magic == SSL_MAGIC_COOKIE && m->add_common_vars)
++	    (*m->add_common_vars)(r);
++    }
++
++void ap_setup_connection(conn_rec *c)
++    {
++    module *m;
++
++    for (m = top_module; m; m = m->next)
++	if (m->magic == SSL_MAGIC_COOKIE && m->setup_connection)
++	    (*m->setup_connection)(c);
++    }
++#endif
++
+ API_EXPORT(int) ap_translate_name(request_rec *r)
+ {
+     return run_method(r, offsets_into_method_ptrs.translate_handler, 0);
+diff -u -r ../apache_1.3.36/src/main/http_log.c ./src/main/http_log.c
+--- ../apache_1.3.36/src/main/http_log.c	Wed Nov 24 19:10:19 2004
++++ ./src/main/http_log.c	Wed Dec 21 11:56:50 2005
+@@ -285,7 +285,8 @@
+ 	 * notice
+ 	 */
+ 	if (((level & APLOG_LEVELMASK) != APLOG_NOTICE) &&
+-	    ((level & APLOG_LEVELMASK) > DEFAULT_LOGLEVEL))
++	    ((level & APLOG_LEVELMASK) > DEFAULT_LOGLEVEL)
++	    && !LogLevelIsDebug())
+ 	    return;
+ 	logf = stderr;
+     }
+diff -u -r ../apache_1.3.36/src/main/http_main.c ./src/main/http_main.c
+--- ../apache_1.3.36/src/main/http_main.c	Tue Apr  5 13:21:33 2005
++++ ./src/main/http_main.c	Wed Dec 21 11:56:50 2005
+@@ -370,6 +370,9 @@
+ 
+ API_VAR_EXPORT int ap_change_shmem_uid = 0;
+ 
++int LogLevelIsDebug()
++    { return server_conf && server_conf->loglevel == APLOG_DEBUG; }
++
+ /*
+  * This routine is called when the pconf pool is vacuumed.  It resets the
+  * server version string to a known value and [re]enables modifications
+@@ -1706,8 +1709,21 @@
+     }
+ }
+ 
++/* Essentially the same as ap_keepalive_timeout, but used if you have no
++   request_rec */
++void ap_conn_timeout(char *name,conn_rec *conn)
++    {
++    unsigned int to;
+ 
++    timeout_req=NULL;
++    timeout_name=name;
+ 
++    if(conn->keptalive)
++	to=conn->server->keep_alive_timeout;
++    else
++	to=conn->server->timeout;
++    ap_set_callback_and_alarm(timeout, to);
++    }
+ 
+ API_EXPORT(void) ap_keepalive_timeout(char *name, request_rec *r)
+ {
+@@ -4768,6 +4784,16 @@
+ 				          (struct sockaddr_in *) &sa_server,
+ 				          my_child_num);
+ 
++#ifdef APACHE_SSL
++	/* 
++	 * This could return false if the connection cannot be setup,
++	 * so maybe we should do something with this here...
++	 * however it also blocks the BUFF connections
++	 * so the next bit should fall out anyway!
++	 */
++	ap_setup_connection(current_conn);
++#endif
++
+ 	/*
+ 	 * Read and process each request found on our connection
+ 	 * until no requests are left or we decide to close.
+@@ -5776,6 +5802,16 @@
+ 			          (struct sockaddr_in *) &sa_client,
+ 			          (struct sockaddr_in *) &sa_server, -1);
+ 
++#ifdef APACHE_SSL
++      /*
++       * This could return false if the connection cannot be setup,
++       * so maybe we should do something with this here...
++       * however it also blocks the BUFF connections
++       * so the next bit should fall out anyway!
++       */
++      ap_setup_connection(conn);
++#endif
++
+ 	while ((r = ap_read_request(conn)) != NULL) {
+ 
+ 	    if (r->status == HTTP_OK)
+@@ -6086,6 +6122,16 @@
+ 	requests_this_child++;
+ 
+ 	ap_note_cleanups_for_socket_ex(ptrans, csd, 1);
++
++#ifdef APACHE_SSL
++	/* 
++	 * This returns false if the connection cannot be setup,
++	 * so maybe we should do something with this here...
++	 * however it also blocks the BUFF connections
++	 * so the next bit should fall out anyway!
++	 */
++	ApacheSSLSetupConnection(current_conn);
++#endif
+ 
+ 	/*
+ 	 * We now have a connection, so set it up with the appropriate
+diff -u -r ../apache_1.3.36/src/main/util_script.c ./src/main/util_script.c
+--- ../apache_1.3.36/src/main/util_script.c	Wed Nov 24 19:10:19 2004
++++ ./src/main/util_script.c	Wed Dec 21 11:56:50 2005
+@@ -277,6 +277,10 @@
+     }
+ 
+     ap_overlap_tables(r->subprocess_env, e, AP_OVERLAP_TABLES_SET);
++
++#ifdef APACHE_SSL
++    ap_add_common_vars2(r);
++#endif
+ }
+ 
+ /* This "cute" little function comes about because the path info on
+diff -u -r ../apache_1.3.36/src/modules/standard/Makefile.tmpl ./src/modules/standard/Makefile.tmpl
+--- ../apache_1.3.36/src/modules/standard/Makefile.tmpl	Wed Nov 24 19:10:19 2004
++++ ./src/modules/standard/Makefile.tmpl	Wed Dec 21 11:56:50 2005
+@@ -7,7 +7,7 @@
+ mod_access.o: mod_access.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_core.h \
+  $(INCDIR)/http_config.h $(INCDIR)/http_log.h \
+@@ -15,7 +15,7 @@
+ mod_actions.o: mod_actions.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+@@ -24,12 +24,13 @@
+ mod_alias.o: mod_alias.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h $(INCDIR)/http_config.h
++ $(INCDIR)/util_uri.h $(INCDIR)/http_core.h \
++ $(INCDIR)/http_config.h $(INCDIR)/http_log.h
+ mod_asis.o: mod_asis.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_protocol.h $(INCDIR)/http_log.h \
+@@ -37,7 +38,7 @@
+  $(INCDIR)/http_request.h
+ mod_auth.o: mod_auth.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+@@ -45,7 +46,7 @@
+ mod_auth_anon.o: mod_auth_anon.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+@@ -53,7 +54,7 @@
+ mod_auth_db.o: mod_auth_db.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+@@ -61,7 +62,7 @@
+ mod_auth_dbm.o: mod_auth_dbm.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+@@ -69,23 +70,24 @@
+ mod_autoindex.o: mod_autoindex.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_request.h \
+  $(INCDIR)/http_protocol.h $(INCDIR)/http_log.h \
+- $(INCDIR)/http_main.h $(INCDIR)/util_script.h
++ $(INCDIR)/http_main.h $(INCDIR)/util_script.h \
++ $(INCDIR)/fnmatch.h
+ mod_cern_meta.o: mod_cern_meta.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/util_script.h $(INCDIR)/http_log.h \
+  $(INCDIR)/http_request.h
+ mod_cgi.o: mod_cgi.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+@@ -95,7 +97,7 @@
+ mod_digest.o: mod_digest.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+@@ -103,7 +105,7 @@
+  $(INCDIR)/ap_md5.h
+ mod_dir.o: mod_dir.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_request.h \
+@@ -111,25 +113,25 @@
+  $(INCDIR)/http_main.h $(INCDIR)/util_script.h
+ mod_env.o: mod_env.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h
+ mod_expires.o: mod_expires.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_log.h
+ mod_headers.o: mod_headers.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h
+ mod_imap.o: mod_imap.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+@@ -138,7 +140,7 @@
+ mod_include.o: mod_include.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+@@ -146,7 +148,7 @@
+  $(INCDIR)/http_main.h $(INCDIR)/util_script.h
+ mod_info.o: mod_info.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+@@ -155,34 +157,34 @@
+ mod_log_agent.o: mod_log_agent.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_log.h
+ mod_log_config.o: mod_log_config.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h
+ mod_log_referer.o: mod_log_referer.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_log.h
+ mod_mime.o: mod_mime.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_log.h
+ mod_mime_magic.o: mod_mime_magic.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+@@ -190,15 +192,16 @@
+ mod_negotiation.o: mod_negotiation.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+- $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+- $(INCDIR)/http_log.h $(INCDIR)/util_script.h
++ $(INCDIR)/http_request.h $(INCDIR)/http_protocol.h \
++ $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
++ $(INCDIR)/util_script.h
+ mod_rewrite.o: mod_rewrite.c mod_rewrite.h $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_conf_globals.h $(INCDIR)/http_request.h \
+@@ -207,27 +210,27 @@
+ mod_setenvif.o: mod_setenvif.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h
+ mod_so.o: mod_so.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_log.h
+ mod_speling.o: mod_speling.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_core.h \
+  $(INCDIR)/http_config.h $(INCDIR)/http_log.h
+ mod_status.o: mod_status.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_protocol.h \
+@@ -237,20 +240,27 @@
+ mod_unique_id.o: mod_unique_id.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_log.h $(INCDIR)/multithread.h
+ mod_userdir.o: mod_userdir.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h
+ mod_usertrack.o: mod_usertrack.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
++ $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
++ $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
++ $(INCDIR)/http_core.h
++mod_vhost_alias.o: mod_vhost_alias.c $(INCDIR)/httpd.h \
++ $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h
+diff -u -r ../apache_1.3.36/src/modules/standard/mod_log_config.c ./src/modules/standard/mod_log_config.c
+--- ../apache_1.3.36/src/modules/standard/mod_log_config.c	Wed Nov 24 19:10:19 2004
++++ ./src/modules/standard/mod_log_config.c	Wed Dec 21 11:56:50 2005
+@@ -94,6 +94,15 @@
+  * %...m:  the request method
+  * %...{Foobar}n:  The contents of note "Foobar" from another module.
+  * %...{Foobar}o:  The contents of Foobar: header line(s) in the reply.
++ *
++ * Additional SSL directives:
++ *
++ * %...{cipher}c:  cipher used (SSL_get_cipher)
++ * %...{clientcert}c: client certificate information
++ * %...{errcode}c: X509 verify error code
++ * %...{errstr}c: X509 verify error string
++ * %...{version}c: SSL version (SSLeay 0.8.0 and above)
++ *
+  * %...p:  the port the request was served to
+  * %...P:  the process ID of the child that serviced the request.
+  * %...q:  the query string prepended by "?", or empty if no query string
+@@ -143,6 +152,10 @@
+ #include "http_log.h"
+ #include <limits.h>
+ 
++#ifdef APACHE_SSL
++# include <openssl/crypto.h>
++#endif
++
+ module MODULE_VAR_EXPORT config_log_module;
+ 
+ static int xfer_flags = (O_WRONLY | O_APPEND | O_CREAT);
+@@ -452,6 +465,10 @@
+  * Parsing the log format string
+  */
+ 
++#ifdef APACHE_SSL
++extern const char *log_ssl_info(request_rec *r, char *a);
++#endif
++
+ static struct log_item_list {
+     char ch;
+     item_key_func func;
+@@ -515,6 +532,9 @@
+     {
+         's', log_status, 1
+     },
++#ifdef APACHE_SSL
++    { 'c', log_ssl_info, 0 },
++#endif
+     {
+         't', log_request_time, 0
+     },
+@@ -982,6 +1002,71 @@
+ 
+     return err_string;
+ }
++
++#ifdef APACHE_SSL
++const char *log_ssl_info(request_rec *r, char *a)
++    {
++    char str[MAX_STRING_LEN];
++
++    if(!r->connection->client->ssl)
++	return NULL;
++
++    if(!strcmp(a, "cipher"))
++	return SSL_get_cipher(r->connection->client->ssl);
++
++    if(!strcmp(a, "clientcert"))
++	return r->connection->client->szClientX509;
++
++    if(!strcmp(a, "errcode"))
++	if(r->connection->client->nVerifyError)
++	    {
++	    sprintf(str, "%d", r->connection->client->nVerifyError);
++	    return ap_pstrdup(r->pool,str);
++	    }
++	else
++	    return NULL;
++
++    if(!strcmp(a, "errstr"))
++	if(r->connection->client->nVerifyError)
++#if SSLEAY_VERSION_NUMBER < 0x0800
++	    return X509_cert_verify_error_string(r->connection->client->nVerifyError);
++#else
++	    return X509_verify_cert_error_string(r->connection->client->nVerifyError);
++#endif
++	else
++	    return NULL;
++
++#if SSLEAY_VERSION_NUMBER >= 0x0800
++    if(!strcmp(a, "version"))
++	{
++#if SSLEAY_VERSION_NUMBER >= 0x0900
++	switch(r->connection->client->ssl->session->ssl_version)
++	    {
++	case TLS1_VERSION:
++	    return "TLS1";
++
++	case SSL3_VERSION:
++	    return "SSL3";
++
++	case SSL2_VERSION:
++	    return "SSL2";
++
++	default:
++	    return "?";
++	    }
++#else
++	static char v[2];
++
++	v[0]='0'+r->connection->client->ssl->session->ssl_version;
++	v[1]='\0';
++	return v;
++#endif
++	}
++#endif
++    
++    return NULL;
++}
++#endif
+ 
+ static const char *set_transfer_log(cmd_parms *cmd, void *dummy, char *fn)
+ {
+diff -u -r ../apache_1.3.36/src/modules/standard/mod_so.c ./src/modules/standard/mod_so.c
+--- ../apache_1.3.36/src/modules/standard/mod_so.c	Wed Nov 24 19:10:19 2004
++++ ./src/modules/standard/mod_so.c	Wed Dec 21 11:56:50 2005
+@@ -266,7 +266,8 @@
+      * Make sure the found module structure is really a module structure
+      * 
+      */
+-    if (modp->magic != MODULE_MAGIC_COOKIE) {
++    if (modp->magic != MODULE_MAGIC_COOKIE
++	&& modp->magic != SSL_MAGIC_COOKIE) {
+         return ap_pstrcat(cmd->pool, "API module structure `", modname,
+                           "' in file ", szModuleFile, " is garbled -"
+                           " perhaps this is not an Apache module DSO?", NULL);
+diff -u -r ../apache_1.3.36/src/os/unix/Makefile.tmpl ./src/os/unix/Makefile.tmpl
+--- ../apache_1.3.36/src/os/unix/Makefile.tmpl	Wed Nov 24 19:10:19 2004
++++ ./src/os/unix/Makefile.tmpl	Wed Dec 21 11:56:50 2005
+@@ -41,7 +41,7 @@
+ os-aix-dso.o: os-aix-dso.c
+ os-inline.o: os-inline.c $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h
++ $(OSDIR)/os.h $(INCDIR)/ap_ctype.h
+ os.o: os.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h os.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h os.h
+diff -u -r ../apache_1.3.36/src/support/apachectl ./src/support/apachectl
+--- ../apache_1.3.36/src/support/apachectl	Wed Nov 24 19:10:19 2004
++++ ./src/support/apachectl	Wed Dec 21 11:56:50 2005
+@@ -22,11 +22,11 @@
+ #	0 - operation completed successfully
+ #	1 - 
+ #	2 - usage error
+-#	3 - httpd could not be started
+-#	4 - httpd could not be stopped
+-#	5 - httpd could not be started during a restart
+-#	6 - httpd could not be restarted during a restart
+-#	7 - httpd could not be restarted during a graceful restart
++#	3 - httpsd could not be started
++#	4 - httpsd could not be stopped
++#	5 - httpsd could not be started during a restart
++#	6 - httpsd could not be restarted during a restart
++#	7 - httpsd could not be restarted during a graceful restart
+ #	8 - configuration syntax error
+ #
+ # When multiple arguments are given, only the error from the _last_
+@@ -39,8 +39,8 @@
+ # the path to your PID file
+ PIDFILE=/usr/local/apache/logs/httpd.pid
+ #
+-# the path to your httpd binary, including options if necessary
+-HTTPD='/usr/local/apache/src/httpd'
++# the path to your httpsd binary, including options if necessary
++HTTPD='/usr/local/apache/src/httpsd'
+ #
+ # a command that outputs a formatted text version of the HTML at the
+ # url given on the command line.  Designed for lynx, however other
+@@ -66,27 +66,27 @@
+     if [ -f $PIDFILE ] ; then
+ 	PID=`cat $PIDFILE`
+ 	if [ "x$PID" != "x" ] && kill -0 $PID 2>/dev/null ; then
+-	    STATUS="httpd (pid $PID) running"
++	    STATUS="httpsd (pid $PID) running"
+ 	    RUNNING=1
+ 	else
+-	    STATUS="httpd (pid $PID?) not running"
++	    STATUS="httpsd (pid $PID?) not running"
+ 	    RUNNING=0
+ 	fi
+     else
+-	STATUS="httpd (no pid file) not running"
++	STATUS="httpsd (no pid file) not running"
+ 	RUNNING=0
+     fi
+ 
+     case $ARG in
+     start)
+ 	if [ $RUNNING -eq 1 ]; then
+-	    echo "$0 $ARG: httpd (pid $PID) already running"
++	    echo "$0 $ARG: httpsd (pid $PID) already running"
+ 	    continue
+ 	fi
+ 	if $HTTPD ; then
+-	    echo "$0 $ARG: httpd started"
++	    echo "$0 $ARG: httpsd started"
+ 	else
+-	    echo "$0 $ARG: httpd could not be started"
++	    echo "$0 $ARG: httpsd could not be started"
+ 	    ERROR=3
+ 	fi
+ 	;;
+@@ -96,27 +96,27 @@
+ 	    continue
+ 	fi
+ 	if kill $PID ; then
+-	    echo "$0 $ARG: httpd stopped"
++	    echo "$0 $ARG: httpsd stopped"
+ 	else
+-	    echo "$0 $ARG: httpd could not be stopped"
++	    echo "$0 $ARG: httpsd could not be stopped"
+ 	    ERROR=4
+ 	fi
+ 	;;
+     restart)
+ 	if [ $RUNNING -eq 0 ]; then
+-	    echo "$0 $ARG: httpd not running, trying to start"
++	    echo "$0 $ARG: httpsd not running, trying to start"
+ 	    if $HTTPD ; then
+-		echo "$0 $ARG: httpd started"
++		echo "$0 $ARG: httpsd started"
+ 	    else
+-		echo "$0 $ARG: httpd could not be started"
++		echo "$0 $ARG: httpsd could not be started"
+ 		ERROR=5
+ 	    fi
+ 	else
+ 	    if $HTTPD -t >/dev/null 2>&1; then
+ 		if kill -HUP $PID ; then
+-		    echo "$0 $ARG: httpd restarted"
++		    echo "$0 $ARG: httpsd restarted"
+ 		else
+-		    echo "$0 $ARG: httpd could not be restarted"
++		    echo "$0 $ARG: httpsd could not be restarted"
+ 		    ERROR=6
+ 		fi
+ 	    else
+@@ -128,19 +128,19 @@
+ 	;;
+     graceful)
+ 	if [ $RUNNING -eq 0 ]; then
+-	    echo "$0 $ARG: httpd not running, trying to start"
++	    echo "$0 $ARG: httpsd not running, trying to start"
+ 	    if $HTTPD ; then
+-		echo "$0 $ARG: httpd started"
++		echo "$0 $ARG: httpsd started"
+ 	    else
+-		echo "$0 $ARG: httpd could not be started"
++		echo "$0 $ARG: httpsd could not be started"
+ 		ERROR=5
+ 	    fi
+ 	else
+ 	    if $HTTPD -t >/dev/null 2>&1; then
+ 		if kill -USR1 $PID ; then
+-		    echo "$0 $ARG: httpd gracefully restarted"
++		    echo "$0 $ARG: httpsd gracefully restarted"
+ 		else
+-		    echo "$0 $ARG: httpd could not be restarted"
++		    echo "$0 $ARG: httpsd could not be restarted"
+ 		    ERROR=7
+ 		fi
+ 	    else
+@@ -167,9 +167,9 @@
+ 	echo "usage: $0 (start|stop|restart|fullstatus|status|graceful|configtest|help)"
+ 	cat <<EOF
+ 
+-start      - start httpd
+-stop       - stop httpd
+-restart    - restart httpd if running by sending a SIGHUP or start if 
++start      - start httpsd
++stop       - stop httpsd
++restart    - restart httpsd if running by sending a SIGHUP or start if 
+              not running
+ fullstatus - dump a full status screen; requires lynx and mod_status enabled
+ status     - dump a short status screen; requires lynx and mod_status enabled
+diff -u -r ../apache_1.3.36/src/support/suexec.c ./src/support/suexec.c
+--- ../apache_1.3.36/src/support/suexec.c	Wed Nov 24 19:10:19 2004
++++ ./src/support/suexec.c	Wed Dec 21 11:56:50 2005
+@@ -90,6 +90,8 @@
+ {
+     /* variable name starts with */
+     "HTTP_",
++    "HTTPS",
++    "SSL_",
+ 
+     /* variable name is */
+     "AUTH_TYPE=",
diff -ru -ruN apache_1.3.36_orig/SSLpatch.fixed-up apache_1.3.36/SSLpatch.fixed-up
--- apache_1.3.36_orig/SSLpatch.fixed-up	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/SSLpatch.fixed-up	2006-05-18 17:16:13.835316480 +0200
@@ -0,0 +1,1502 @@
+diff -u -r ../apache_1.3.36/Makefile.tmpl ./Makefile.tmpl
+--- ../apache_1.3.36/Makefile.tmpl	Wed Nov 24 19:10:19 2004
++++ ./Makefile.tmpl	Wed Dec 21 11:56:50 2005
+@@ -247,6 +247,7 @@
+ #   shared object files.
+ install-programs:
+ 	@echo "===> [programs: Installing Apache $(TARGET) program and shared objects]"
++	$(INSTALL_PROGRAM) $(TOP)/$(SRC)/modules/ssl/gcache $(root)$(sbindir)/gcache
+ 	-@if [ ".`grep '^[ 	]*AddModule.*mod_so\.o' $(TOP)/$(SRC)/Configuration.apaci`" != . ]; then \
+ 		echo "$(INSTALL_CORE) $(TOP)/$(SRC)/$(TARGET) $(root)$(sbindir)/$(TARGET)"; \
+ 		$(INSTALL_CORE) $(TOP)/$(SRC)/$(TARGET) $(root)$(sbindir)/$(TARGET); \
+diff -u -r ../apache_1.3.36/configure ./configure
+--- ../apache_1.3.36/configure	Wed Nov 24 19:10:19 2004
++++ ./configure	Wed Dec 21 11:56:50 2005
+@@ -789,7 +789,9 @@
+                            OOIFS="$IFS"
+                            IFS=':'
+                            for module in $modules; do
+-                               eval "shared_${module}=yes" 
++#			       if [ $module != apache_ssl ]; then
++				   eval "shared_${module}=yes"
++#			       fi
+                            done
+                            IFS="$OOIFS"
+                            shared_so=no        # because of bootstrapping
+@@ -1057,8 +1059,10 @@
+ ##
+ if [ "x$TARGET" != "x" ]; then
+     thetarget="$TARGET"
++    theconfig="$thetarget"
+ else
+-    thetarget=httpd
++    thetarget=httpsd
++    theconfig=httpd
+ fi
+ 
+ ##
+@@ -1477,6 +1481,7 @@
+     eval "share=\$shared_$module"
+     if [ "x$share" = "xyes" ]; then
+         echo $SEO "s%^\\(.*\\)AddModule\\(.*mod_$module\\.\\)[oam].*\\(.*\\)%\\1SharedModule\\2so\\3%g" >>$sedsubst
++        echo $SEO "s%^\\(.*\\)AddModule\\(.*$module\\.\\)[oam].*\\(.*\\)%\\1SharedModule\\2so\\3%g" >>$sedsubst
+         echo $SEO "s%^\\(.*\\)AddModule\\(.*lib$module\\.\\)[oam].*\\(.*\\)%\\1SharedModule\\2so\\3%g" >>$sedsubst
+         m="$m [shared]"
+     fi
+diff -u -r ../apache_1.3.36/src/Configuration ./src/Configuration
+--- ../apache_1.3.36/src/Configuration	Fri Oct 14 00:39:00 2005
++++ ./src/Configuration	Wed Dec 21 12:02:16 2005
+@@ -62,6 +62,21 @@
+ #OPTIM=
+ #RANLIB=
+ 
++TARGET=httpsd
++
++#
++# SSL Related stuff. N.B. This is set up to use the SSLeay source, NOT an
++# installed version.
++#
++KEYNOTE_BASE=/home/ben/work/KeyNote
++SSL_BASE=/usr/local
++SSL_INCLUDE= -I$(SSL_BASE)/include
++SSL_CFLAGS= -DAPACHE_SSL
++SSL_LIB_DIR=/usr/local/lib
++SSL_LIBS= -L$(SSL_LIB_DIR) -lssl -lcrypto
++SSL_APP_DIR=/usr/local/bin
++SSL_APP=/usr/local/bin/openssl
++
+ ################################################################
+ # Name of the installed Apache HTTP webserver.
+ #
+@@ -235,6 +250,11 @@
+ # is and the more memory it will take, so if you are unlikely to use the
+ # functionality of a particular module you might wish to leave it out.
+ 
++##
++## Experimental Apache-SSL KeyNote support.
++
++# AddModule modules/ssl-keynote/apache_ssl_keynote.o
++
+ ## mod_mmap_static is an experimental module, you almost certainly
+ ## don't need it.  It can make some webservers faster.  No further
+ ## documentation is provided here because you'd be foolish
+@@ -460,3 +480,7 @@
+ 
+ AddModule modules/standard/mod_setenvif.o
+ 
++## Damn damn damn. Apache inverts the module list. SSL must go first to fake
++## basic authorization (that is, last in this file).
++
++AddModule modules/ssl/apache_ssl.a
+diff -u -r ../apache_1.3.36/src/Configuration.tmpl ./src/Configuration.tmpl
+--- ../apache_1.3.36/src/Configuration.tmpl	Wed Nov 24 19:10:19 2004
++++ ./src/Configuration.tmpl	Wed Dec 21 11:56:50 2005
+@@ -62,6 +62,21 @@
+ #OPTIM=
+ #RANLIB=
+ 
++TARGET=httpsd
++
++#
++# SSL Related stuff. N.B. This is set up to use the SSLeay source, NOT an
++# installed version.
++#
++KEYNOTE_BASE=/home/ben/work/KeyNote
++SSL_BASE=/usr/local
++SSL_INCLUDE= -I$(SSL_BASE)/include
++SSL_CFLAGS= -DAPACHE_SSL
++SSL_LIB_DIR=/usr/local/lib
++SSL_LIBS= -L$(SSL_LIB_DIR) -lssl -lcrypto
++SSL_APP_DIR=/usr/local/bin
++SSL_APP=/usr/local/bin/openssl
++
+ ################################################################
+ # Name of the installed Apache HTTP webserver.
+ #
+@@ -235,6 +250,11 @@
+ # is and the more memory it will take, so if you are unlikely to use the
+ # functionality of a particular module you might wish to leave it out.
+ 
++##
++## Experimental Apache-SSL KeyNote support.
++
++# AddModule modules/ssl-keynote/apache_ssl_keynote.o
++
+ ## mod_mmap_static is an experimental module, you almost certainly
+ ## don't need it.  It can make some webservers faster.  No further
+ ## documentation is provided here because you'd be foolish
+@@ -460,3 +480,7 @@
+ 
+ AddModule modules/standard/mod_setenvif.o
+ 
++## Damn damn damn. Apache inverts the module list. SSL must go first to fake
++## basic authorization (that is, last in this file).
++
++AddModule modules/ssl/apache_ssl.a
+diff -u -r ../apache_1.3.36/src/Configure ./src/Configure
+--- ../apache_1.3.36/src/Configure	Wed Nov 24 19:10:19 2004
++++ ./src/Configure	Wed Dec 21 11:56:50 2005
+@@ -873,7 +873,7 @@
+ ##
+ echo >>Makefile.config "OSDIR=\$(SRCDIR)/$OSDIR"
+ echo >>Makefile.config "INCDIR=\$(SRCDIR)/include"
+-echo >>Makefile.config "INCLUDES0=-I\$(OSDIR) -I\$(INCDIR)"
++echo >>Makefile.config "INCLUDES0=-I\$(OSDIR) -I\$(INCDIR) \$(SSL_INCLUDE)"
+ echo >>Makefile.config "SHELL=$SHELL"
+ echo >>Makefile.config "OS=$OS"
+ 
+@@ -1833,6 +1833,10 @@
+ 		    echo "    o $modbase adds libraries: $modlibs1"
+ 		    modlibs="$modlibs $modlibs1"
+ 		fi
++		if grep "Libs:" $tmpfile2 > /dev/null; then
++		    modlibs=`grep Libs: $tmpfile2 | sed 's/^.*Libs:[ 	]*//'`
++		    echo "    o $modbase adds libraries: $modlibs"
++		fi
+ 		rm -f $tmpfile2 $tmpfile3
+ 		if [ "x$ext" != "x$SHMOD_SUFFIX_NAME" ]; then
+ 		    ext=o
+@@ -2151,7 +2155,7 @@
+ ## for $LIBS at this point. This implies that anything below
+ ## can only alter $LIBS
+ ##
+-echo "CFLAGS1=$CFLAGS" >>Makefile.config
++echo "CFLAGS1=$CFLAGS \$(SSL_CFLAGS)" >>Makefile.config
+ echo "INCLUDES1=$INCLUDES" >>Makefile.config
+ echo "LIBS_SHLIB=$LIBS_SHLIB" >>Makefile.config
+ echo "LDFLAGS1=$LDFLAGS" >>Makefile.config
+@@ -2371,7 +2375,7 @@
+ ####################################################################
+ ## Finish creating the Makefile.config file
+ ##
+-echo "LIBS1=$modlibs $LIBS">> Makefile.config
++echo "LIBS1=$modlibs $LIBS \$(SSL_LIBS)">> Makefile.config
+ echo "##" >> Makefile.config
+ echo "##  (End of automatically generated section)">> Makefile.config
+ echo "##" >> Makefile.config
+diff -u -r ../apache_1.3.36/src/Makefile.tmpl ./src/Makefile.tmpl
+--- ../apache_1.3.36/src/Makefile.tmpl	Wed Nov 24 19:10:19 2004
++++ ./src/Makefile.tmpl	Wed Dec 21 11:56:50 2005
+@@ -30,6 +30,15 @@
+ 
+ $(TARGET): $(EXTRA_DEPS) $(SUBTARGET)
+ 
++certificate:
++	ps > /tmp/ssl-rand; date >> /tmp/ssl-rand; \
++	RANDFILE=/tmp/ssl-rand $(SSL_APP) req -config ../SSLconf/conf/ssleay.cnf \
++	-new -x509 -nodes -out ../SSLconf/conf/httpsd.pem \
++	-keyout ../SSLconf/conf/httpsd.pem; \
++	ln -sf httpsd.pem ../SSLconf/conf/`$(SSL_APP) \
++	x509 -noout -hash < ../SSLconf/conf/httpsd.pem`.0; \
++	rm /tmp/ssl-rand
++
+ target_static: subdirs modules.o
+ 	$(CC) -c $(INCLUDES) $(CFLAGS) buildmark.c
+ 	$(CC) $(CFLAGS) $(LDFLAGS) $(LDFLAGS_SHLIB_EXPORT) \
+@@ -125,10 +134,10 @@
+ 
+ # DO NOT REMOVE
+ buildmark.o: buildmark.c include/ap_config.h include/ap_mmn.h \
+- include/ap_config_auto.h $(OSDIR)/os.h include/ap_ctype.h \
+- include/hsregex.h include/httpd.h include/ap_alloc.h include/buff.h \
++ include/ap_config_auto.h os/unix/os.h os/unix/os-inline.c \
++ include/ap_ctype.h include/httpd.h include/ap_alloc.h include/buff.h \
+  include/ap.h include/util_uri.h
+ modules.o: modules.c include/httpd.h include/ap_config.h \
+- include/ap_mmn.h include/ap_config_auto.h $(OSDIR)/os.h \
+- include/ap_ctype.h include/hsregex.h include/ap_alloc.h include/buff.h \
+- include/ap.h include/util_uri.h include/http_config.h
++ include/ap_mmn.h include/ap_config_auto.h os/unix/os.h \
++ os/unix/os-inline.c include/ap_ctype.h include/ap_alloc.h \
++ include/buff.h include/ap.h include/util_uri.h include/http_config.h
+diff -u -r ../apache_1.3.36/src/ap/Makefile.tmpl ./src/ap/Makefile.tmpl
+--- ../apache_1.3.36/src/ap/Makefile.tmpl	Wed Nov 24 19:10:19 2004
++++ ./src/ap/Makefile.tmpl	Wed Dec 21 11:56:50 2005
+@@ -40,45 +40,52 @@
+ 	    && rm Makefile.new
+ 
+ # DO NOT REMOVE
++ap_base64.o: ap_base64.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap.h
++ap_checkpass.o: ap_checkpass.c $(INCDIR)/ap_config.h \
++ $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_md5.h \
++ $(INCDIR)/ap_sha1.h $(INCDIR)/ap.h
+ ap_cpystrn.o: ap_cpystrn.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
++ap_ebcdic.o: ap_ebcdic.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
++ $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
++ $(INCDIR)/http_core.h $(INCDIR)/http_config.h
+ ap_execve.o: ap_execve.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
+ ap_fnmatch.o: ap_fnmatch.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/fnmatch.h
++ $(INCDIR)/ap_ctype.h $(INCDIR)/fnmatch.h
+ ap_getpass.o: ap_getpass.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap.h
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap.h
+ ap_md5c.o: ap_md5c.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_md5.h \
+- $(INCDIR)/ap.h
+-ap_sha1.o: ap_sha1.c $(INCDIR)/ap_config.h $(INCDIR)/ap_sha1.h \
+- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_md5.h $(INCDIR)/ap.h
++ap_sha1.o: ap_sha1.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_sha1.h $(INCDIR)/ap.h
+ ap_signal.o: ap_signal.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
+ ap_slack.o: ap_slack.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h $(INCDIR)/http_log.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
++ $(INCDIR)/http_log.h
+ ap_snprintf.o: ap_snprintf.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
+ ap_strtol.o: ap_strtol.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
++ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
+diff -u -r ../apache_1.3.36/src/include/ap_config.h ./src/include/ap_config.h
+--- ../apache_1.3.36/src/include/ap_config.h	Wed Nov 24 19:10:19 2004
++++ ./src/include/ap_config.h	Wed Dec 21 11:56:50 2005
+@@ -432,7 +432,17 @@
+  * all glibc based systems need crypt.h
+  */
+ #if defined(__GNU_LIBRARY__) && __GNU_LIBRARY__ > 1
+-#include <crypt.h>
++
++# ifdef APACHE_SSL
++#  define des_encrypt BASE_des_encrypt
++# endif
++
++# include <crypt.h>
++
++# ifdef APACHE_SSL
++#  undef des_encrypt
++# endif
++
+ #endif
+ 
+ /* glibc 2.0.0 through 2.0.4 need size_t * here, where 2.0.5 needs socklen_t *
+@@ -1452,6 +1462,10 @@
+ 
+ #ifndef ap_wait_t
+ #define ap_wait_t int
++#endif
++
++#ifdef APACHE_SSL
++# define NO_WRITEV
+ #endif
+ 
+ #ifdef __cplusplus
+diff -u -r ../apache_1.3.36/src/include/ap_mmn.h ./src/include/ap_mmn.h
+--- ../apache_1.3.36/src/include/ap_mmn.h	Tue Jun 28 19:03:25 2005
++++ ./src/include/ap_mmn.h	Wed Dec 21 11:56:50 2005
+@@ -207,6 +207,7 @@
+  */
+ 
+ #define MODULE_MAGIC_COOKIE 0x41503133UL /* "AP13" */
++#define SSL_MAGIC_COOKIE 0x53533133UL /* "SS13" */
+ 
+ #ifndef MODULE_MAGIC_NUMBER_MAJOR
+ #define MODULE_MAGIC_NUMBER_MAJOR 19990320
+diff -u -r ../apache_1.3.36/src/include/buff.h ./src/include/buff.h
+--- ../apache_1.3.36/src/include/buff.h	Wed Nov 24 19:10:19 2004
++++ ./src/include/buff.h	Wed Dec 21 11:56:50 2005
+@@ -19,13 +19,30 @@
+ #ifdef __cplusplus
+ extern "C" {
+ #endif
+-
+ #ifdef B_SFIO
++
+ #include "sfio.h"
+ #endif
+ 
+ #include <stdarg.h>
+ 
++#ifdef APACHE_SSL
++
++# include <stdio.h>
++# include <openssl/ssl.h>
++
++#if SSLEAY_VERSION_NUMBER < 0x0920
++# error "Don't use OpenSSL/SSLeay versions less than 0.9.2b, they have a serious security problem!"
++#endif
++
++# define APACHE_SSL_EXPORT_CERTS	FALSE
++# if APACHE_SSL_EXPORT_CERTS
++/* SSLeay doesn't, so we must! */
++#  define APACHE_SSL_KEEP_CERTS		TRUE
++# endif
++
++#endif
++
+ /* Reading is buffered */
+ #define B_RD     (1)
+ /* Writing is buffered */
+@@ -85,6 +102,19 @@
+ #ifdef B_SFIO
+     Sfio_t *sf_in;
+     Sfio_t *sf_out;
++#endif
++
++#ifdef APACHE_SSL
++    /* Add some context for SSL */
++    SSL *ssl;
++    char *szClientX509;
++    int nVerifyError;
++    BOOL bRevoked;
++    BOOL bCRLExpired;
++    BOOL bNoCRL;
++# if APACHE_SSL_KEEP_CERTS
++    table *tableCertChain;
++# endif
+ #endif
+ 
+     void *callback_data;
+diff -u -r ../apache_1.3.36/src/include/http_config.h ./src/include/http_config.h
+--- ../apache_1.3.36/src/include/http_config.h	Wed Nov 24 19:10:19 2004
++++ ./src/include/http_config.h	Wed Dec 21 11:56:50 2005
+@@ -233,6 +233,11 @@
+     void (*child_exit) (server_rec *, pool *);
+ #endif
+     int (*post_read_request) (request_rec *);
++#ifdef APACHE_SSL
++/* These are only present if the cookie is SSL_MAGIC_COOKIE */
++    void (*setup_connection)(conn_rec *);
++    void (*add_common_vars)(request_rec *);
++#endif
+ } module;
+ 
+ /* Initializer for the first few module slots, which are only
+@@ -253,6 +258,14 @@
+ 				NULL, \
+ 				MODULE_MAGIC_COOKIE
+ 
++#define SSL_MODULE_STUFF	MODULE_MAGIC_NUMBER_MAJOR, \
++				MODULE_MAGIC_NUMBER_MINOR, \
++				-1, \
++				__FILE__, \
++				NULL, \
++				NULL, \
++				SSL_MAGIC_COOKIE
++
+ /* Generic accessors for other modules to get at their own module-specific
+  * data
+  */
+@@ -363,6 +376,11 @@
+ CORE_EXPORT(const command_rec *) ap_find_command_in_modules(const char *cmd_name, module **mod);
+ CORE_EXPORT(void *) ap_set_config_vectors(cmd_parms *parms, void *config, module *mod);
+ CORE_EXPORT(const char *) ap_handle_command(cmd_parms *parms, void *config, const char *l);
++
++#ifdef APACHE_SSL
++CORE_EXPORT(void) ap_add_common_vars2(request_rec *r);
++CORE_EXPORT(void) ap_setup_connection(conn_rec *c);
++#endif
+ 
+ #endif
+ 
+diff -u -r ../apache_1.3.36/src/include/http_main.h ./src/include/http_main.h
+--- ../apache_1.3.36/src/include/http_main.h	Wed Nov 24 19:10:19 2004
++++ ./src/include/http_main.h	Wed Dec 21 11:56:50 2005
+@@ -73,6 +73,7 @@
+ API_EXPORT(void) ap_start_shutdown(void);
+ API_EXPORT(void) ap_start_restart(int);
+ API_EXPORT(void) ap_hard_timeout(char *, request_rec *);
++void ap_conn_timeout(char *name,conn_rec *conn);
+ API_EXPORT(void) ap_keepalive_timeout(char *, request_rec *);
+ API_EXPORT(void) ap_soft_timeout(char *, request_rec *);
+ API_EXPORT(void) ap_kill_timeout(request_rec *);
+@@ -128,6 +129,8 @@
+  * write_fd are possibly killed off separately.
+  */
+ API_EXPORT(void) ap_unregister_other_child(void *data);
++/* Check for debug-level logging */
++API_EXPORT(int) LogLevelIsDebug(void);
+ 
+ #endif
+ 
+diff -u -r ../apache_1.3.36/src/include/httpd.h ./src/include/httpd.h
+--- ../apache_1.3.36/src/include/httpd.h	Fri Oct 14 00:25:14 2005
++++ ./src/include/httpd.h	Wed Dec 21 11:59:13 2005
+@@ -24,6 +24,11 @@
+  * httpd.h: header for simple (ha! not anymore) http daemon
+  */
+ 
++/* Needed all over the place */
++typedef unsigned int BOOL;
++#define TRUE 		1
++#define FALSE 		0
++
+ /* Headers in which EVERYONE has an interest... */
+ 
+ #include "ap_config.h"
+@@ -102,8 +107,13 @@
+ #define ap_http_method(r) ap_os_http_method((void*)r)
+ #define ap_default_port(r) ap_os_default_port((void*)r)
+ #else
+-#define ap_http_method(r)	"http"
+-#define ap_default_port(r)	DEFAULT_HTTP_PORT
++# ifdef APACHE_SSL
++#  define ap_http_method(r)	((r)->connection->client->ssl ? "https" : "http")
++#  define ap_default_port(r)	((r)->connection->client->ssl ? DEFAULT_HTTPS_PORT : DEFAULT_HTTP_PORT)
++# else
++#  define ap_http_method(r)	"http"
++#  define ap_default_port(r)	DEFAULT_HTTP_PORT
++# endif
+ #endif
+ 
+ /* --------- Default user name and group name running standalone ---------- */
+@@ -389,7 +399,11 @@
+ #define SERVER_BASEVENDOR   "Apache Group"
+ #define SERVER_BASEPRODUCT  "Apache"
+ #define SERVER_BASEREVISION "1.3.36"
+-#define SERVER_BASEVERSION  SERVER_BASEPRODUCT "/" SERVER_BASEREVISION
++#ifdef APACHE_SSL
++# define SERVER_BASEVERSION  SERVER_BASEPRODUCT "/" SERVER_BASEREVISION " Ben-SSL/1.57"
++#else
++# define SERVER_BASEVERSION  SERVER_BASEPRODUCT "/" SERVER_BASEREVISION
++#endif
+ 
+ #define SERVER_PRODUCT  SERVER_BASEPRODUCT
+ #define SERVER_REVISION SERVER_BASEREVISION
+@@ -865,6 +879,11 @@
+ #define DEFAULT_VHOST_ADDR 0xfffffffful
+ 
+ typedef struct server_addr_rec server_addr_rec;
++
++#ifdef APACHE_SSL
++int ApacheSSLSetupConnection(conn_rec *conn);
++void ApacheSSLAddCommonVars(request_rec *r);
++#endif
+ struct server_addr_rec {
+     server_addr_rec *next;
+     struct in_addr host_addr;	/* The bound address, for this server */
+diff -u -r ../apache_1.3.36/src/main/Makefile.tmpl ./src/main/Makefile.tmpl
+--- ../apache_1.3.36/src/main/Makefile.tmpl	Wed Nov 24 19:10:19 2004
++++ ./src/main/Makefile.tmpl	Wed Dec 21 11:56:50 2005
+@@ -14,7 +14,7 @@
+       rfc1413.o
+ 
+ .c.o:
+-	$(CC) -c $(INCLUDES) $(CFLAGS) $<
++	$(CC) -c $(INCLUDES) $(CFLAGS) $(SSL_CFLAGS) $<
+ 
+ all: $(HEADERS) $(LIB)
+ 
+@@ -60,30 +60,30 @@
+ # DO NOT REMOVE
+ alloc.o: alloc.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/multithread.h $(INCDIR)/http_log.h
+ buff.o: buff.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_main.h $(INCDIR)/http_log.h
+ gen_test_char.o: gen_test_char.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(INCDIR)/ap_ctype.h \
+- $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
+  $(INCDIR)/ap.h $(INCDIR)/util_uri.h
+ gen_uri_delims.o: gen_uri_delims.c
+ http_config.o: http_config.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_config.h $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_conf_globals.h \
+- $(INCDIR)/http_vhost.h $(INCDIR)/explain.h
++ $(INCDIR)/http_vhost.h $(INCDIR)/explain.h $(INCDIR)/fnmatch.h
+ http_core.o: http_core.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_config.h $(INCDIR)/http_core.h \
+  $(INCDIR)/http_protocol.h $(INCDIR)/http_request.h \
+@@ -93,23 +93,24 @@
+  $(INCDIR)/fnmatch.h
+ http_log.o: http_log.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+- $(INCDIR)/http_config.h $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+- $(INCDIR)/http_main.h
++ $(INCDIR)/http_conf_globals.h $(INCDIR)/http_config.h \
++ $(INCDIR)/http_core.h $(INCDIR)/http_log.h $(INCDIR)/http_main.h
+ http_main.o: http_main.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_main.h $(INCDIR)/http_log.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_protocol.h $(INCDIR)/http_request.h \
+  $(INCDIR)/http_conf_globals.h $(INCDIR)/http_core.h \
+  $(INCDIR)/http_vhost.h $(INCDIR)/util_script.h \
+- $(INCDIR)/scoreboard.h $(INCDIR)/multithread.h $(INCDIR)/explain.h
++ $(INCDIR)/scoreboard.h $(INCDIR)/multithread.h $(INCDIR)/explain.h \
++ ../lib/expat-lite/xmlparse.h
+ http_protocol.o: http_protocol.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(INCDIR)/ap_ctype.h \
+- $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
+  $(INCDIR)/ap.h $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_protocol.h \
+  $(INCDIR)/http_main.h $(INCDIR)/http_request.h \
+@@ -117,8 +118,8 @@
+  $(INCDIR)/http_conf_globals.h
+ http_request.o: http_request.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(INCDIR)/ap_ctype.h \
+- $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
++ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
+  $(INCDIR)/ap.h $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+  $(INCDIR)/http_protocol.h $(INCDIR)/http_conf_globals.h \
+@@ -126,32 +127,32 @@
+  $(INCDIR)/fnmatch.h
+ http_vhost.o: http_vhost.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_config.h $(INCDIR)/http_conf_globals.h \
+  $(INCDIR)/http_log.h $(INCDIR)/http_vhost.h \
+  $(INCDIR)/http_protocol.h
+ rfc1413.o: rfc1413.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_log.h $(INCDIR)/rfc1413.h $(INCDIR)/http_main.h
+ util.o: util.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_conf_globals.h $(INCDIR)/http_log.h test_char.h
+ util_date.o: util_date.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(INCDIR)/ap_ctype.h \
+- $(INCDIR)/hsregex.h $(INCDIR)/util_date.h
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
++ $(INCDIR)/ap_ctype.h $(INCDIR)/util_date.h
+ util_md5.o: util_md5.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/util_md5.h $(INCDIR)/ap_md5.h
+ util_script.o: util_script.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_config.h $(INCDIR)/http_conf_globals.h \
+  $(INCDIR)/http_main.h $(INCDIR)/http_log.h \
+@@ -160,6 +161,6 @@
+  $(INCDIR)/util_date.h
+ util_uri.o: util_uri.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+  $(INCDIR)/http_log.h $(INCDIR)/http_conf_globals.h uri_delims.h
+diff -u -r ../apache_1.3.36/src/main/buff.c ./src/main/buff.c
+--- ../apache_1.3.36/src/main/buff.c	Wed Nov 24 19:10:19 2004
++++ ./src/main/buff.c	Wed Dec 21 11:56:50 2005
+@@ -31,6 +31,10 @@
+ #include <bstring.h>		/* for IRIX, FD_SET calls bzero() */
+ #endif
+ 
++#ifdef APACHE_SSL
++# include <openssl/err.h>
++#endif
++
+ #ifndef DEFAULT_BUFSIZE
+ #define DEFAULT_BUFSIZE (4096)
+ #endif
+@@ -250,6 +254,46 @@
+     }
+     else
+ #endif
++#ifdef APACHE_SSL
++    if(fb->ssl)
++	{
++	int pa;
++
++	do
++	    {
++	    /* A horrible hack: an increase in this stat indicates that the
++	       client renegotiated. Is there a better way? Ben 10 Apr 1999
++	    */
++	    pa=fb->ssl->ctx->stats.sess_accept;
++
++	    rv=SSL_read(fb->ssl,buf,nbyte);
++
++	    ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,NULL,
++			 "read returned %d rwstate=%d state=%d rstate=%d "
++			 "cren=%d aren=%d accept=%d",
++			 rv,fb->ssl->rwstate,fb->ssl->state,fb->ssl->rstate,
++			 fb->ssl->ctx->stats.sess_connect_renegotiate,
++			 fb->ssl->ctx->stats.sess_accept_renegotiate,
++			 fb->ssl->ctx->stats.sess_accept);
++	    }
++	while(rv < 0 && fb->ssl->ctx->stats.sess_accept != pa);
++
++	if(rv < 0)
++	    {
++	    int l;
++
++	    while((l=ERR_get_error()))
++		{
++		char buf[MAX_STRING_LEN];
++
++		ERR_error_string(l,buf);
++		ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,NULL,"%s",
++			     buf);
++		}
++	    }
++	}
++    else
++#endif
+ 	rv = read(fb->fd_in, buf, nbyte);
+     
+     return rv;
+@@ -291,6 +335,7 @@
+ #else
+     rv = ap_read(fb, buf, nbyte);
+ #endif /* WIN32 */
++
+     return rv;
+ }
+ 
+@@ -308,6 +353,27 @@
+     }
+     else
+ #endif
++#ifdef APACHE_SSL
++    if(fb->ssl)
++	{
++	rv=SSL_write(fb->ssl,buf,nbyte);
++
++	if(rv < 0)
++	    {
++	    int l;
++
++	    while((l=ERR_get_error()))
++		{
++		char buf[MAX_STRING_LEN];
++
++		ERR_error_string(l,buf);
++		ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,NULL,"%s",
++			     buf);
++		}
++	    }
++	}
++    else
++#endif
+ #if defined (B_SFIO)
+ 	rv = sfwrite(fb->sf_out, buf, nbyte);
+ #else
+@@ -421,6 +487,11 @@
+     fb->callback_data = NULL;
+     fb->filter_callback = NULL;
+ 
++#ifdef APACHE_SSL
++    fb->ssl = NULL;
++    fb->szClientX509 = NULL;
++#endif
++
+     return fb;
+ }
+ 
+@@ -1151,7 +1222,7 @@
+ 	return write_with_errors(fb, buf, nbyte);
+     }
+ 
+-#ifdef NO_WRITEV
++#if defined(NO_WRITEV)
+     /* without writev() this has poor performance, too bad */
+ 
+     ap_snprintf(chunksize, sizeof(chunksize), "%x" CRLF, nbyte);
+diff -u -r ../apache_1.3.36/src/main/http_config.c ./src/main/http_config.c
+--- ../apache_1.3.36/src/main/http_config.c	Wed Nov 24 19:10:19 2004
++++ ./src/main/http_config.c	Wed Dec 21 11:56:50 2005
+@@ -334,6 +334,26 @@
+     return run_all ? OK : DECLINED;
+ }
+ 
++#ifdef APACHE_SSL
++void ap_add_common_vars2(request_rec *r)
++    {
++    module *m;
++
++    for (m = top_module; m; m = m->next)
++	if (m->magic == SSL_MAGIC_COOKIE && m->add_common_vars)
++	    (*m->add_common_vars)(r);
++    }
++
++void ap_setup_connection(conn_rec *c)
++    {
++    module *m;
++
++    for (m = top_module; m; m = m->next)
++	if (m->magic == SSL_MAGIC_COOKIE && m->setup_connection)
++	    (*m->setup_connection)(c);
++    }
++#endif
++
+ API_EXPORT(int) ap_translate_name(request_rec *r)
+ {
+     return run_method(r, offsets_into_method_ptrs.translate_handler, 0);
+diff -u -r ../apache_1.3.36/src/main/http_log.c ./src/main/http_log.c
+--- ../apache_1.3.36/src/main/http_log.c	Wed Nov 24 19:10:19 2004
++++ ./src/main/http_log.c	Wed Dec 21 11:56:50 2005
+@@ -285,7 +285,8 @@
+ 	 * notice
+ 	 */
+ 	if (((level & APLOG_LEVELMASK) != APLOG_NOTICE) &&
+-	    ((level & APLOG_LEVELMASK) > DEFAULT_LOGLEVEL))
++	    ((level & APLOG_LEVELMASK) > DEFAULT_LOGLEVEL)
++	    && !LogLevelIsDebug())
+ 	    return;
+ 	logf = stderr;
+     }
+diff -u -r ../apache_1.3.36/src/main/http_main.c ./src/main/http_main.c
+--- ../apache_1.3.36/src/main/http_main.c	Tue Apr  5 13:21:33 2005
++++ ./src/main/http_main.c	Wed Dec 21 11:56:50 2005
+@@ -370,6 +370,9 @@
+ 
+ API_VAR_EXPORT int ap_change_shmem_uid = 0;
+ 
++int LogLevelIsDebug()
++    { return server_conf && server_conf->loglevel == APLOG_DEBUG; }
++
+ /*
+  * This routine is called when the pconf pool is vacuumed.  It resets the
+  * server version string to a known value and [re]enables modifications
+@@ -1706,8 +1709,21 @@
+     }
+ }
+ 
++/* Essentially the same as ap_keepalive_timeout, but used if you have no
++   request_rec */
++void ap_conn_timeout(char *name,conn_rec *conn)
++    {
++    unsigned int to;
+ 
++    timeout_req=NULL;
++    timeout_name=name;
+ 
++    if(conn->keptalive)
++	to=conn->server->keep_alive_timeout;
++    else
++	to=conn->server->timeout;
++    ap_set_callback_and_alarm(timeout, to);
++    }
+ 
+ API_EXPORT(void) ap_keepalive_timeout(char *name, request_rec *r)
+ {
+@@ -4768,6 +4784,16 @@
+ 				          (struct sockaddr_in *) &sa_server,
+ 				          my_child_num);
+ 
++#ifdef APACHE_SSL
++	/* 
++	 * This could return false if the connection cannot be setup,
++	 * so maybe we should do something with this here...
++	 * however it also blocks the BUFF connections
++	 * so the next bit should fall out anyway!
++	 */
++	ap_setup_connection(current_conn);
++#endif
++
+ 	/*
+ 	 * Read and process each request found on our connection
+ 	 * until no requests are left or we decide to close.
+@@ -5776,6 +5802,16 @@
+ 			          (struct sockaddr_in *) &sa_client,
+ 			          (struct sockaddr_in *) &sa_server, -1);
+ 
++#ifdef APACHE_SSL
++      /*
++       * This could return false if the connection cannot be setup,
++       * so maybe we should do something with this here...
++       * however it also blocks the BUFF connections
++       * so the next bit should fall out anyway!
++       */
++      ap_setup_connection(conn);
++#endif
++
+ 	while ((r = ap_read_request(conn)) != NULL) {
+ 
+ 	    if (r->status == HTTP_OK)
+@@ -6086,6 +6122,16 @@
+ 	requests_this_child++;
+ 
+ 	ap_note_cleanups_for_socket_ex(ptrans, csd, 1);
++
++#ifdef APACHE_SSL
++	/* 
++	 * This returns false if the connection cannot be setup,
++	 * so maybe we should do something with this here...
++	 * however it also blocks the BUFF connections
++	 * so the next bit should fall out anyway!
++	 */
++	ApacheSSLSetupConnection(current_conn);
++#endif
+ 
+ 	/*
+ 	 * We now have a connection, so set it up with the appropriate
+diff -u -r ../apache_1.3.36/src/main/util_script.c ./src/main/util_script.c
+--- ../apache_1.3.36/src/main/util_script.c	Wed Nov 24 19:10:19 2004
++++ ./src/main/util_script.c	Wed Dec 21 11:56:50 2005
+@@ -277,6 +277,10 @@
+     }
+ 
+     ap_overlap_tables(r->subprocess_env, e, AP_OVERLAP_TABLES_SET);
++
++#ifdef APACHE_SSL
++    ap_add_common_vars2(r);
++#endif
+ }
+ 
+ /* This "cute" little function comes about because the path info on
+diff -u -r ../apache_1.3.36/src/modules/standard/Makefile.tmpl ./src/modules/standard/Makefile.tmpl
+--- ../apache_1.3.36/src/modules/standard/Makefile.tmpl	Wed Nov 24 19:10:19 2004
++++ ./src/modules/standard/Makefile.tmpl	Wed Dec 21 11:56:50 2005
+@@ -7,7 +7,7 @@
+ mod_access.o: mod_access.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_core.h \
+  $(INCDIR)/http_config.h $(INCDIR)/http_log.h \
+@@ -15,7 +15,7 @@
+ mod_actions.o: mod_actions.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+@@ -24,12 +24,13 @@
+ mod_alias.o: mod_alias.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+- $(INCDIR)/util_uri.h $(INCDIR)/http_config.h
++ $(INCDIR)/util_uri.h $(INCDIR)/http_core.h \
++ $(INCDIR)/http_config.h $(INCDIR)/http_log.h
+ mod_asis.o: mod_asis.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_protocol.h $(INCDIR)/http_log.h \
+@@ -37,7 +38,7 @@
+  $(INCDIR)/http_request.h
+ mod_auth.o: mod_auth.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+@@ -45,7 +46,7 @@
+ mod_auth_anon.o: mod_auth_anon.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+@@ -53,7 +54,7 @@
+ mod_auth_db.o: mod_auth_db.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+@@ -61,7 +62,7 @@
+ mod_auth_dbm.o: mod_auth_dbm.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+@@ -69,23 +70,24 @@
+ mod_autoindex.o: mod_autoindex.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_request.h \
+  $(INCDIR)/http_protocol.h $(INCDIR)/http_log.h \
+- $(INCDIR)/http_main.h $(INCDIR)/util_script.h
++ $(INCDIR)/http_main.h $(INCDIR)/util_script.h \
++ $(INCDIR)/fnmatch.h
+ mod_cern_meta.o: mod_cern_meta.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/util_script.h $(INCDIR)/http_log.h \
+  $(INCDIR)/http_request.h
+ mod_cgi.o: mod_cgi.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+@@ -95,7 +97,7 @@
+ mod_digest.o: mod_digest.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+@@ -103,7 +105,7 @@
+  $(INCDIR)/ap_md5.h
+ mod_dir.o: mod_dir.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_request.h \
+@@ -111,25 +113,25 @@
+  $(INCDIR)/http_main.h $(INCDIR)/util_script.h
+ mod_env.o: mod_env.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h
+ mod_expires.o: mod_expires.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_log.h
+ mod_headers.o: mod_headers.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h
+ mod_imap.o: mod_imap.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+@@ -138,7 +140,7 @@
+ mod_include.o: mod_include.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+@@ -146,7 +148,7 @@
+  $(INCDIR)/http_main.h $(INCDIR)/util_script.h
+ mod_info.o: mod_info.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+@@ -155,34 +157,34 @@
+ mod_log_agent.o: mod_log_agent.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_log.h
+ mod_log_config.o: mod_log_config.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h
+ mod_log_referer.o: mod_log_referer.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_log.h
+ mod_mime.o: mod_mime.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_log.h
+ mod_mime_magic.o: mod_mime_magic.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+@@ -190,15 +192,16 @@
+ mod_negotiation.o: mod_negotiation.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+- $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
+- $(INCDIR)/http_log.h $(INCDIR)/util_script.h
++ $(INCDIR)/http_request.h $(INCDIR)/http_protocol.h \
++ $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
++ $(INCDIR)/util_script.h
+ mod_rewrite.o: mod_rewrite.c mod_rewrite.h $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_conf_globals.h $(INCDIR)/http_request.h \
+@@ -207,27 +210,27 @@
+ mod_setenvif.o: mod_setenvif.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_log.h
+ mod_so.o: mod_so.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_log.h
+ mod_speling.o: mod_speling.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_core.h \
+  $(INCDIR)/http_config.h $(INCDIR)/http_log.h
+ mod_status.o: mod_status.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h $(INCDIR)/http_protocol.h \
+@@ -237,20 +240,27 @@
+ mod_unique_id.o: mod_unique_id.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_log.h $(INCDIR)/multithread.h
+ mod_userdir.o: mod_userdir.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h
+ mod_usertrack.o: mod_usertrack.c $(INCDIR)/httpd.h \
+  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
++ $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
++ $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
++ $(INCDIR)/http_core.h
++mod_vhost_alias.o: mod_vhost_alias.c $(INCDIR)/httpd.h \
++ $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
++ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+  $(INCDIR)/http_core.h
+diff -u -r ../apache_1.3.36/src/modules/standard/mod_log_config.c ./src/modules/standard/mod_log_config.c
+--- ../apache_1.3.36/src/modules/standard/mod_log_config.c	Wed Nov 24 19:10:19 2004
++++ ./src/modules/standard/mod_log_config.c	Wed Dec 21 11:56:50 2005
+@@ -94,6 +94,15 @@
+  * %...m:  the request method
+  * %...{Foobar}n:  The contents of note "Foobar" from another module.
+  * %...{Foobar}o:  The contents of Foobar: header line(s) in the reply.
++ *
++ * Additional SSL directives:
++ *
++ * %...{cipher}c:  cipher used (SSL_get_cipher)
++ * %...{clientcert}c: client certificate information
++ * %...{errcode}c: X509 verify error code
++ * %...{errstr}c: X509 verify error string
++ * %...{version}c: SSL version (SSLeay 0.8.0 and above)
++ *
+  * %...p:  the port the request was served to
+  * %...P:  the process ID of the child that serviced the request.
+  * %...q:  the query string prepended by "?", or empty if no query string
+@@ -143,6 +152,10 @@
+ #include "http_log.h"
+ #include <limits.h>
+ 
++#ifdef APACHE_SSL
++# include <openssl/crypto.h>
++#endif
++
+ module MODULE_VAR_EXPORT config_log_module;
+ 
+ static int xfer_flags = (O_WRONLY | O_APPEND | O_CREAT);
+@@ -452,6 +465,10 @@
+  * Parsing the log format string
+  */
+ 
++#ifdef APACHE_SSL
++extern const char *log_ssl_info(request_rec *r, char *a);
++#endif
++
+ static struct log_item_list {
+     char ch;
+     item_key_func func;
+@@ -515,6 +532,9 @@
+     {
+         's', log_status, 1
+     },
++#ifdef APACHE_SSL
++    { 'c', log_ssl_info, 0 },
++#endif
+     {
+         't', log_request_time, 0
+     },
+@@ -982,6 +1002,71 @@
+ 
+     return err_string;
+ }
++
++#ifdef APACHE_SSL
++const char *log_ssl_info(request_rec *r, char *a)
++    {
++    char str[MAX_STRING_LEN];
++
++    if(!r->connection->client->ssl)
++	return NULL;
++
++    if(!strcmp(a, "cipher"))
++	return SSL_get_cipher(r->connection->client->ssl);
++
++    if(!strcmp(a, "clientcert"))
++	return r->connection->client->szClientX509;
++
++    if(!strcmp(a, "errcode"))
++	if(r->connection->client->nVerifyError)
++	    {
++	    sprintf(str, "%d", r->connection->client->nVerifyError);
++	    return ap_pstrdup(r->pool,str);
++	    }
++	else
++	    return NULL;
++
++    if(!strcmp(a, "errstr"))
++	if(r->connection->client->nVerifyError)
++#if SSLEAY_VERSION_NUMBER < 0x0800
++	    return X509_cert_verify_error_string(r->connection->client->nVerifyError);
++#else
++	    return X509_verify_cert_error_string(r->connection->client->nVerifyError);
++#endif
++	else
++	    return NULL;
++
++#if SSLEAY_VERSION_NUMBER >= 0x0800
++    if(!strcmp(a, "version"))
++	{
++#if SSLEAY_VERSION_NUMBER >= 0x0900
++	switch(r->connection->client->ssl->session->ssl_version)
++	    {
++	case TLS1_VERSION:
++	    return "TLS1";
++
++	case SSL3_VERSION:
++	    return "SSL3";
++
++	case SSL2_VERSION:
++	    return "SSL2";
++
++	default:
++	    return "?";
++	    }
++#else
++	static char v[2];
++
++	v[0]='0'+r->connection->client->ssl->session->ssl_version;
++	v[1]='\0';
++	return v;
++#endif
++	}
++#endif
++    
++    return NULL;
++}
++#endif
+ 
+ static const char *set_transfer_log(cmd_parms *cmd, void *dummy, char *fn)
+ {
+diff -u -r ../apache_1.3.36/src/modules/standard/mod_so.c ./src/modules/standard/mod_so.c
+--- ../apache_1.3.36/src/modules/standard/mod_so.c	Wed Nov 24 19:10:19 2004
++++ ./src/modules/standard/mod_so.c	Wed Dec 21 11:56:50 2005
+@@ -266,7 +266,8 @@
+      * Make sure the found module structure is really a module structure
+      * 
+      */
+-    if (modp->magic != MODULE_MAGIC_COOKIE) {
++    if (modp->magic != MODULE_MAGIC_COOKIE
++	&& modp->magic != SSL_MAGIC_COOKIE) {
+         return ap_pstrcat(cmd->pool, "API module structure `", modname,
+                           "' in file ", szModuleFile, " is garbled -"
+                           " perhaps this is not an Apache module DSO?", NULL);
+diff -u -r ../apache_1.3.36/src/os/unix/Makefile.tmpl ./src/os/unix/Makefile.tmpl
+--- ../apache_1.3.36/src/os/unix/Makefile.tmpl	Wed Nov 24 19:10:19 2004
++++ ./src/os/unix/Makefile.tmpl	Wed Dec 21 11:56:50 2005
+@@ -41,7 +41,7 @@
+ os-aix-dso.o: os-aix-dso.c
+ os-inline.o: os-inline.c $(INCDIR)/ap_config.h \
+  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h
++ $(OSDIR)/os.h $(INCDIR)/ap_ctype.h
+ os.o: os.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h os.h
++ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h os.h
+diff -u -r ../apache_1.3.36/src/support/apachectl ./src/support/apachectl
+--- ../apache_1.3.36/src/support/apachectl	Wed Nov 24 19:10:19 2004
++++ ./src/support/apachectl	Wed Dec 21 11:56:50 2005
+@@ -22,11 +22,11 @@
+ #	0 - operation completed successfully
+ #	1 - 
+ #	2 - usage error
+-#	3 - httpd could not be started
+-#	4 - httpd could not be stopped
+-#	5 - httpd could not be started during a restart
+-#	6 - httpd could not be restarted during a restart
+-#	7 - httpd could not be restarted during a graceful restart
++#	3 - httpsd could not be started
++#	4 - httpsd could not be stopped
++#	5 - httpsd could not be started during a restart
++#	6 - httpsd could not be restarted during a restart
++#	7 - httpsd could not be restarted during a graceful restart
+ #	8 - configuration syntax error
+ #
+ # When multiple arguments are given, only the error from the _last_
+@@ -39,8 +39,8 @@
+ # the path to your PID file
+ PIDFILE=/usr/local/apache/logs/httpd.pid
+ #
+-# the path to your httpd binary, including options if necessary
+-HTTPD='/usr/local/apache/src/httpd'
++# the path to your httpsd binary, including options if necessary
++HTTPD='/usr/local/apache/src/httpsd'
+ #
+ # a command that outputs a formatted text version of the HTML at the
+ # url given on the command line.  Designed for lynx, however other
+@@ -66,27 +66,27 @@
+     if [ -f $PIDFILE ] ; then
+ 	PID=`cat $PIDFILE`
+ 	if [ "x$PID" != "x" ] && kill -0 $PID 2>/dev/null ; then
+-	    STATUS="httpd (pid $PID) running"
++	    STATUS="httpsd (pid $PID) running"
+ 	    RUNNING=1
+ 	else
+-	    STATUS="httpd (pid $PID?) not running"
++	    STATUS="httpsd (pid $PID?) not running"
+ 	    RUNNING=0
+ 	fi
+     else
+-	STATUS="httpd (no pid file) not running"
++	STATUS="httpsd (no pid file) not running"
+ 	RUNNING=0
+     fi
+ 
+     case $ARG in
+     start)
+ 	if [ $RUNNING -eq 1 ]; then
+-	    echo "$0 $ARG: httpd (pid $PID) already running"
++	    echo "$0 $ARG: httpsd (pid $PID) already running"
+ 	    continue
+ 	fi
+ 	if $HTTPD ; then
+-	    echo "$0 $ARG: httpd started"
++	    echo "$0 $ARG: httpsd started"
+ 	else
+-	    echo "$0 $ARG: httpd could not be started"
++	    echo "$0 $ARG: httpsd could not be started"
+ 	    ERROR=3
+ 	fi
+ 	;;
+@@ -96,27 +96,27 @@
+ 	    continue
+ 	fi
+ 	if kill $PID ; then
+-	    echo "$0 $ARG: httpd stopped"
++	    echo "$0 $ARG: httpsd stopped"
+ 	else
+-	    echo "$0 $ARG: httpd could not be stopped"
++	    echo "$0 $ARG: httpsd could not be stopped"
+ 	    ERROR=4
+ 	fi
+ 	;;
+     restart)
+ 	if [ $RUNNING -eq 0 ]; then
+-	    echo "$0 $ARG: httpd not running, trying to start"
++	    echo "$0 $ARG: httpsd not running, trying to start"
+ 	    if $HTTPD ; then
+-		echo "$0 $ARG: httpd started"
++		echo "$0 $ARG: httpsd started"
+ 	    else
+-		echo "$0 $ARG: httpd could not be started"
++		echo "$0 $ARG: httpsd could not be started"
+ 		ERROR=5
+ 	    fi
+ 	else
+ 	    if $HTTPD -t >/dev/null 2>&1; then
+ 		if kill -HUP $PID ; then
+-		    echo "$0 $ARG: httpd restarted"
++		    echo "$0 $ARG: httpsd restarted"
+ 		else
+-		    echo "$0 $ARG: httpd could not be restarted"
++		    echo "$0 $ARG: httpsd could not be restarted"
+ 		    ERROR=6
+ 		fi
+ 	    else
+@@ -128,19 +128,19 @@
+ 	;;
+     graceful)
+ 	if [ $RUNNING -eq 0 ]; then
+-	    echo "$0 $ARG: httpd not running, trying to start"
++	    echo "$0 $ARG: httpsd not running, trying to start"
+ 	    if $HTTPD ; then
+-		echo "$0 $ARG: httpd started"
++		echo "$0 $ARG: httpsd started"
+ 	    else
+-		echo "$0 $ARG: httpd could not be started"
++		echo "$0 $ARG: httpsd could not be started"
+ 		ERROR=5
+ 	    fi
+ 	else
+ 	    if $HTTPD -t >/dev/null 2>&1; then
+ 		if kill -USR1 $PID ; then
+-		    echo "$0 $ARG: httpd gracefully restarted"
++		    echo "$0 $ARG: httpsd gracefully restarted"
+ 		else
+-		    echo "$0 $ARG: httpd could not be restarted"
++		    echo "$0 $ARG: httpsd could not be restarted"
+ 		    ERROR=7
+ 		fi
+ 	    else
+@@ -167,9 +167,9 @@
+ 	echo "usage: $0 (start|stop|restart|fullstatus|status|graceful|configtest|help)"
+ 	cat <<EOF
+ 
+-start      - start httpd
+-stop       - stop httpd
+-restart    - restart httpd if running by sending a SIGHUP or start if 
++start      - start httpsd
++stop       - stop httpsd
++restart    - restart httpsd if running by sending a SIGHUP or start if 
+              not running
+ fullstatus - dump a full status screen; requires lynx and mod_status enabled
+ status     - dump a short status screen; requires lynx and mod_status enabled
+diff -u -r ../apache_1.3.36/src/support/suexec.c ./src/support/suexec.c
+--- ../apache_1.3.36/src/support/suexec.c	Wed Nov 24 19:10:19 2004
++++ ./src/support/suexec.c	Wed Dec 21 11:56:50 2005
+@@ -90,6 +90,8 @@
+ {
+     /* variable name starts with */
+     "HTTP_",
++    "HTTPS",
++    "SSL_",
+ 
+     /* variable name is */
+     "AUTH_TYPE=",
diff -ru -ruN apache_1.3.36_orig/ben.pgp.key.asc apache_1.3.36/ben.pgp.key.asc
--- apache_1.3.36_orig/ben.pgp.key.asc	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/ben.pgp.key.asc	2006-05-18 17:16:13.796322408 +0200
@@ -0,0 +1,32 @@
+Type Bits/KeyID    Date       User ID
+pub  1024/2719AF35 1995/05/13 Ben Laurie <ben@algroup.co.uk>
+                              Ben Laurie <ben@gonzo.ben.algroup.co.uk>
+
+-----BEGIN PGP PUBLIC KEY BLOCK-----
+Version: 2.6.3ia
+
+mQCNAi+0jQEAAAEEAK7oX0FeNncaHfa1v+V7SMUviAm8qB8orWG0zvja4ZtSrHVg
+/PMwppUh44t5ERA9lltRBdHu30+YSh8a1dYt1XOD83nknzj9rhtpFAPqyywlLVhN
+VY3PVLyMbULw27aEAGc+StFqrDoUQ0+j9QU/YH/IyVN9rBaJyhsIDEUnGa81AAUR
+tB5CZW4gTGF1cmllIDxiZW5AYWxncm91cC5jby51az6JARUDBRAyb2Doc3AsNzyk
+Yh0BARa6CACUBnsP9Vb+T/PvNYKVQBIODz+90tz5GozWwCVfPVSaRd8Dz+oF1sFs
+YCz/KuxqBhL5PkiCuSMfOVlPA5nirjoktMF/af5saZqhPr5rvr67Z1OzZnVDvWe4
+DhFrn8EoLrY5YNJhUwfINnZqyKaQu8TW6p4caLkTCW0KM+4ztTe74xRG9NeE+K0+
+0RMpAF3jEY36LGRjq6miazt2bVZQDTl6CuWE+gAaFlX2ojV7e1xdxVvpBIEc34MP
+g9ORJ0evx1QilMt1VyGcS/pe4IQgjdJqjU/4fzqFZkT2nntQMbV9kQyNe2+qfqP7
+giTryIanmBAfd3oOCTsRz2VKPfdhCqCRiQB1AwUQMRdzEEyr2GZv4ALJAQEuhAL6
+A8I84BR+87uNAHD0ZJkTM73WdyMEGvAKBvrZK/g0VLYj0NtgkSuRJfrXnGkuh27I
+ZrjfL952Q/mXgMtHhJHJ9YfenGFWSEDHnolNzKOzTQJpE01IZ3nWv7ezA9N1LZVC
+iQCVAgUQMROrdRsIDEUnGa81AQEUNgQAlvyjt534RDQd2AYGoZriaFzjaL7dTCRH
+4b1zxuWBNWf3pI4W0iwU02Q5rEWEmY5DLl6/ie+vcQKOWSqXVgnM/s6EARdKEN56
+d6PzkwszgfEybDYrcAxReJcTCcV8ItJer/iqpBLgtaxyUpI77NvKcDGHp6BgYpnv
+1lNkH0FISK+JAJUDBRAwtzlWdGx7qH+PTVkBARFWA/99NTCMihlOZS7LmHDVic/q
+H1K1DVdMcv0iL39+7Pq4+AA/ET8dWIgcjaIreSqAZTpjwU1pMPaWgecDD1rEMCYX
+R+JoofLJ24BLcSlpXJ/gWMifYNxqdDeMRkw/aW/kaXQJWIz+oDYNuOyi5VvB6faF
+6Lm7P5cw1mX0I5rYc3woh7QoQmVuIExhdXJpZSA8YmVuQGdvbnpvLmJlbi5hbGdy
+b3VwLmNvLnVrPokAlQIFEDEXgCUbCAxFJxmvNQEBiL8D/3MLjfHGvuByqP1VFQrF
+QeMNd2aIQuC7ys3lkDvrLkkPJQANua0/MdDaZk6F5pCGcTmmmaJOjcOcCheD7FU5
+w9zxkQGR3Swr3opFHSr/CkEl83jRy3oq1MFydWoGajQjIr/c23X8zr+XntPyO6VX
+q5He4RrTiXeAEFBzz+J+R+EQ
+=zh1u
+-----END PGP PUBLIC KEY BLOCK-----
diff -ru -ruN apache_1.3.36_orig/configure apache_1.3.36/configure
--- apache_1.3.36_orig/configure	2006-05-18 17:16:13.789323472 +0200
+++ apache_1.3.36/configure	2006-05-18 17:16:13.844315112 +0200
@@ -789,7 +789,9 @@
                            OOIFS="$IFS"
                            IFS=':'
                            for module in $modules; do
-                               eval "shared_${module}=yes" 
+#			       if [ $module != apache_ssl ]; then
+				   eval "shared_${module}=yes"
+#			       fi
                            done
                            IFS="$OOIFS"
                            shared_so=no        # because of bootstrapping
@@ -1057,8 +1059,10 @@
 ##
 if [ "x$TARGET" != "x" ]; then
     thetarget="$TARGET"
+    theconfig="$thetarget"
 else
-    thetarget=httpd
+    thetarget=httpsd
+    theconfig=httpd
 fi
 
 ##
@@ -1477,6 +1481,7 @@
     eval "share=\$shared_$module"
     if [ "x$share" = "xyes" ]; then
         echo $SEO "s%^\\(.*\\)AddModule\\(.*mod_$module\\.\\)[oam].*\\(.*\\)%\\1SharedModule\\2so\\3%g" >>$sedsubst
+        echo $SEO "s%^\\(.*\\)AddModule\\(.*$module\\.\\)[oam].*\\(.*\\)%\\1SharedModule\\2so\\3%g" >>$sedsubst
         echo $SEO "s%^\\(.*\\)AddModule\\(.*lib$module\\.\\)[oam].*\\(.*\\)%\\1SharedModule\\2so\\3%g" >>$sedsubst
         m="$m [shared]"
     fi
diff -ru -ruN apache_1.3.36_orig/md5sums apache_1.3.36/md5sums
--- apache_1.3.36_orig/md5sums	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/md5sums	2006-05-18 17:16:13.796322408 +0200
@@ -0,0 +1,30 @@
+MD5(ben.pgp.key.asc)= af9dd5904f20ebdb1548157fbd834434
+MD5(LICENCE.SSL)= faa707865ab7ca51786599e056fe6697
+MD5(CHANGES.SSL)= 365fa8554c4d9d36268f66a21298478a
+MD5(README.SSL)= 161a3098223e4fbe73c7e2215db67d8b
+MD5(EXTRAS.SSL)= d901e467544aee0660aeb8a83641c460
+MD5(SECURITY)= bc32f50c96a47eae1e2bf4996dbf7027
+MD5(SSLpatch)= 989b1c15582a4b2831646a4fb2bdd653
+MD5(FixPatch)= a45038d5f48d36874002786310aec4b1
+MD5(src/modules/ssl/apache_ssl.c)= 972b1568358ec1b90ae4a428a6cff4f7
+MD5(src/modules/ssl/gcacheclient.c)= 73dfa126557fe4d6f3d8b97a63aeb691
+MD5(src/modules/ssl/gcache.c)= ad4e544e0208853a9463b98fec0b5232
+MD5(src/modules/ssl/gcachecommon.c)= 632474ce396d0d97b81705455b4a6e3e
+MD5(src/include/gcache.h)= 15f4bb2b148654d658706cfe2bfe8c2a
+MD5(src/modules/ssl/splashcache.c)= 47f06dfad34ebd3f335357a146524351
+MD5(src/modules/ssl/crlutil.c)= 9b1c0c53f316ad158b9be240a3d77c3f
+MD5(src/modules/ssl/Makefile.tmpl)= 67a438b33a903f75c924f9f7737a11ec
+MD5(src/modules/ssl/Makefile.libdir)= 2593737c1a80cd935711e491f24fa523
+MD5(SSLconf/conf/httpd.conf)= 02b696d543cc2a340628c32c59ef1b01
+MD5(SSLconf/conf/mime.types)= 8b1a3fe075f9f4fc4b39ab642fc329e6
+MD5(SSLconf/conf/ssleay.cnf)= cb630011ec454a4607176e66ed6e0cea
+MD5(openssl-0.9.5a-egd.diff)= ed846e5c18c727de42d44dd21188389e
+MD5(src/modules/ssl-keynote/apache_ssl_keynote.c)= ca7da6c4de5dfc0534584ae432521f95
+MD5(src/modules/ssl-keynote/apache_ssl_keynote.module)= bf4e6b6df425a4193d9d3d52dd35f6d8
+MD5(src/modules/ssl-keynote/Makefile.tmpl)= 595fc8f0d895bae97ae21fba008d779e
+MD5(SSLconf/keynote/admit-all)= d7c9cbca51b6bef726beddb28cfe7359
+MD5(SSLconf/keynote/admit-ben-thawte)= 403b6130d18d498359439e00a7ac4c66
+MD5(SSLconf/keynote/admit-ben-thawte-restricted)= c4b4dd4f3417c5f8a04331d0c392bcb5
+MD5(SSLconf/keynote/admit-none)= 1bc5203ea2b70319f305b752cd08ecb0
+MD5(SSLconf/keynote/admit-thawte)= 02e7a460aa7e75031001e3d37c921882
+MD5(SSLconf/keynote/cert-issuer-simple)= f1e4f482bdc484365302080ccbc66d38
diff -ru -ruN apache_1.3.36_orig/md5sums.asc apache_1.3.36/md5sums.asc
--- apache_1.3.36_orig/md5sums.asc	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/md5sums.asc	2006-05-18 17:16:13.796322408 +0200
@@ -0,0 +1,9 @@
+-----BEGIN PGP SIGNATURE-----
+Version: GnuPG v1.4.2 (FreeBSD)
+
+iQCVAwUAQ6lEYhsIDEUnGa81AQL0iQP5AdnpEgc0/zIloiYvGAKINpMiVr+bPBD4
+B54yAA/by7xGlVK+DGOtLJKwCJUr8iQ+ATj1FBQPJJM5Oq5qsiRnDdk/0jxuvbwh
+JMzxtoalOpV6xzVTdiEFKhnbnkQDEMXMCEyZYmfy+mC+o49pAnUw6PVqALauJlbc
+kDyrJeuBmqw=
+=Z4uB
+-----END PGP SIGNATURE-----
diff -ru -ruN apache_1.3.36_orig/src/Configuration apache_1.3.36/src/Configuration
--- apache_1.3.36_orig/src/Configuration	2006-05-18 17:16:13.788323624 +0200
+++ apache_1.3.36/src/Configuration	2006-05-18 17:16:13.845314960 +0200
@@ -235,6 +250,11 @@
 # is and the more memory it will take, so if you are unlikely to use the
 # functionality of a particular module you might wish to leave it out.
 
+##
+## Experimental Apache-SSL KeyNote support.
+
+# AddModule modules/ssl-keynote/apache_ssl_keynote.o
+
 ## mod_mmap_static is an experimental module, you almost certainly
 ## don't need it.  It can make some webservers faster.  No further
 ## documentation is provided here because you'd be foolish
@@ -460,3 +480,7 @@
 
 AddModule modules/standard/mod_setenvif.o
 
+## Damn damn damn. Apache inverts the module list. SSL must go first to fake
+## basic authorization (that is, last in this file).
+
+AddModule modules/ssl/apache_ssl.a
diff -ru -ruN apache_1.3.36_orig/src/Configuration.tmpl apache_1.3.36/src/Configuration.tmpl
--- apache_1.3.36_orig/src/Configuration.tmpl	2006-05-18 17:16:13.775325600 +0200
+++ apache_1.3.36/src/Configuration.tmpl	2006-05-18 17:16:13.978294744 +0200
@@ -235,6 +251,11 @@
 # is and the more memory it will take, so if you are unlikely to use the
 # functionality of a particular module you might wish to leave it out.
 
+##
+## Experimental Apache-SSL KeyNote support.
+
+# AddModule modules/ssl-keynote/apache_ssl_keynote.o
+
 ## mod_mmap_static is an experimental module, you almost certainly
 ## don't need it.  It can make some webservers faster.  No further
 ## documentation is provided here because you'd be foolish
@@ -465,3 +486,7 @@
 
 # AddModule modules/snmp_agt/libsnmp_agt.a
 
+## Damn damn damn. Apache inverts the module list. SSL must go first to fake
+## basic authorization (that is, last in this file).
+
+AddModule modules/ssl/apache_ssl.a
diff -ru -ruN apache_1.3.36_orig/src/Configure apache_1.3.36/src/Configure
--- apache_1.3.36_orig/src/Configure	2006-05-18 17:16:13.692338216 +0200
+++ apache_1.3.36/src/Configure	2006-05-18 17:16:13.849314352 +0200
@@ -873,7 +873,7 @@
 ##
 echo >>Makefile.config "OSDIR=\$(SRCDIR)/$OSDIR"
 echo >>Makefile.config "INCDIR=\$(SRCDIR)/include"
-echo >>Makefile.config "INCLUDES0=-I\$(OSDIR) -I\$(INCDIR)"
+echo >>Makefile.config "INCLUDES0=-I\$(OSDIR) -I\$(INCDIR) \$(SSL_INCLUDE)"
 echo >>Makefile.config "SHELL=$SHELL"
 echo >>Makefile.config "OS=$OS"
 
@@ -1833,6 +1833,10 @@
 		    echo "    o $modbase adds libraries: $modlibs1"
 		    modlibs="$modlibs $modlibs1"
 		fi
+		if grep "Libs:" $tmpfile2 > /dev/null; then
+		    modlibs=`grep Libs: $tmpfile2 | sed 's/^.*Libs:[ 	]*//'`
+		    echo "    o $modbase adds libraries: $modlibs"
+		fi
 		rm -f $tmpfile2 $tmpfile3
 		if [ "x$ext" != "x$SHMOD_SUFFIX_NAME" ]; then
 		    ext=o
@@ -2151,7 +2155,7 @@
 ## for $LIBS at this point. This implies that anything below
 ## can only alter $LIBS
 ##
-echo "CFLAGS1=$CFLAGS" >>Makefile.config
+echo "CFLAGS1=$CFLAGS \$(SSL_CFLAGS)" >>Makefile.config
 echo "INCLUDES1=$INCLUDES" >>Makefile.config
 echo "LIBS_SHLIB=$LIBS_SHLIB" >>Makefile.config
 echo "LDFLAGS1=$LDFLAGS" >>Makefile.config
@@ -2371,7 +2375,7 @@
 ####################################################################
 ## Finish creating the Makefile.config file
 ##
-echo "LIBS1=$modlibs $LIBS">> Makefile.config
+echo "LIBS1=$modlibs $LIBS \$(SSL_LIBS)">> Makefile.config
 echo "##" >> Makefile.config
 echo "##  (End of automatically generated section)">> Makefile.config
 echo "##" >> Makefile.config
diff -ru -ruN apache_1.3.36_orig/src/Makefile.tmpl apache_1.3.36/src/Makefile.tmpl
--- apache_1.3.36_orig/src/Makefile.tmpl	2006-05-18 17:16:13.691338368 +0200
+++ apache_1.3.36/src/Makefile.tmpl	2006-05-18 17:16:13.850314200 +0200
@@ -30,6 +30,15 @@
 
 $(TARGET): $(EXTRA_DEPS) $(SUBTARGET)
 
+certificate:
+	ps > /tmp/ssl-rand; date >> /tmp/ssl-rand; \
+	RANDFILE=/tmp/ssl-rand $(SSL_APP) req -config ../SSLconf/conf/ssleay.cnf \
+	-new -x509 -nodes -out ../SSLconf/conf/httpsd.pem \
+	-keyout ../SSLconf/conf/httpsd.pem; \
+	ln -sf httpsd.pem ../SSLconf/conf/`$(SSL_APP) \
+	x509 -noout -hash < ../SSLconf/conf/httpsd.pem`.0; \
+	rm /tmp/ssl-rand
+
 target_static: subdirs modules.o
 	$(CC) -c $(INCLUDES) $(CFLAGS) buildmark.c
 	$(CC) $(CFLAGS) $(LDFLAGS) $(LDFLAGS_SHLIB_EXPORT) \
@@ -125,10 +134,10 @@
 
 # DO NOT REMOVE
 buildmark.o: buildmark.c include/ap_config.h include/ap_mmn.h \
- include/ap_config_auto.h $(OSDIR)/os.h include/ap_ctype.h \
- include/hsregex.h include/httpd.h include/ap_alloc.h include/buff.h \
+ include/ap_config_auto.h os/unix/os.h os/unix/os-inline.c \
+ include/ap_ctype.h include/httpd.h include/ap_alloc.h include/buff.h \
  include/ap.h include/util_uri.h
 modules.o: modules.c include/httpd.h include/ap_config.h \
- include/ap_mmn.h include/ap_config_auto.h $(OSDIR)/os.h \
- include/ap_ctype.h include/hsregex.h include/ap_alloc.h include/buff.h \
- include/ap.h include/util_uri.h include/http_config.h
+ include/ap_mmn.h include/ap_config_auto.h os/unix/os.h \
+ os/unix/os-inline.c include/ap_ctype.h include/ap_alloc.h \
+ include/buff.h include/ap.h include/util_uri.h include/http_config.h
diff -ru -ruN apache_1.3.36_orig/src/ap/Makefile.tmpl apache_1.3.36/src/ap/Makefile.tmpl
--- apache_1.3.36_orig/src/ap/Makefile.tmpl	2006-05-18 17:16:13.749329552 +0200
+++ apache_1.3.36/src/ap/Makefile.tmpl	2006-05-18 17:16:13.851314048 +0200
@@ -40,45 +40,52 @@
 	    && rm Makefile.new
 
 # DO NOT REMOVE
+ap_base64.o: ap_base64.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
+ $(INCDIR)/ap_ctype.h $(INCDIR)/ap.h
+ap_checkpass.o: ap_checkpass.c $(INCDIR)/ap_config.h \
+ $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_md5.h \
+ $(INCDIR)/ap_sha1.h $(INCDIR)/ap.h
 ap_cpystrn.o: ap_cpystrn.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
- $(INCDIR)/util_uri.h
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
+ap_ebcdic.o: ap_ebcdic.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+ $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+ $(INCDIR)/http_core.h $(INCDIR)/http_config.h
 ap_execve.o: ap_execve.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
- $(INCDIR)/util_uri.h
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
 ap_fnmatch.o: ap_fnmatch.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/fnmatch.h
+ $(INCDIR)/ap_ctype.h $(INCDIR)/fnmatch.h
 ap_getpass.o: ap_getpass.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap.h
+ $(INCDIR)/ap_ctype.h $(INCDIR)/ap.h
 ap_md5c.o: ap_md5c.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_md5.h \
- $(INCDIR)/ap.h
-ap_sha1.o: ap_sha1.c $(INCDIR)/ap_config.h $(INCDIR)/ap_sha1.h \
- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c
+ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_md5.h $(INCDIR)/ap.h
+ap_sha1.o: ap_sha1.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
+ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_sha1.h $(INCDIR)/ap.h
 ap_signal.o: ap_signal.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
- $(INCDIR)/util_uri.h
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
 ap_slack.o: ap_slack.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
- $(INCDIR)/util_uri.h $(INCDIR)/http_log.h
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
+ $(INCDIR)/http_log.h
 ap_snprintf.o: ap_snprintf.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
- $(INCDIR)/util_uri.h
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
 ap_strtol.o: ap_strtol.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
- $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
- $(INCDIR)/util_uri.h
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
+ $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h
diff -ru -ruN apache_1.3.36_orig/src/main/Makefile.tmpl apache_1.3.36/src/main/Makefile.tmpl
--- apache_1.3.36_orig/src/main/Makefile.tmpl	2006-05-18 17:16:13.703336544 +0200
+++ apache_1.3.36/src/main/Makefile.tmpl	2006-05-18 17:16:13.859312832 +0200
@@ -14,7 +14,7 @@
       rfc1413.o
 
 .c.o:
-	$(CC) -c $(INCLUDES) $(CFLAGS) $<
+	$(CC) -c $(INCLUDES) $(CFLAGS) $(SSL_CFLAGS) $<
 
 all: $(HEADERS) $(LIB)
 
@@ -60,30 +60,30 @@
 # DO NOT REMOVE
 alloc.o: alloc.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
  $(INCDIR)/multithread.h $(INCDIR)/http_log.h
 buff.o: buff.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
  $(INCDIR)/http_main.h $(INCDIR)/http_log.h
 gen_test_char.o: gen_test_char.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(INCDIR)/ap_ctype.h \
- $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
+ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
+ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
  $(INCDIR)/ap.h $(INCDIR)/util_uri.h
 gen_uri_delims.o: gen_uri_delims.c
 http_config.o: http_config.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
  $(INCDIR)/http_config.h $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
  $(INCDIR)/http_request.h $(INCDIR)/http_conf_globals.h \
- $(INCDIR)/http_vhost.h $(INCDIR)/explain.h
+ $(INCDIR)/http_vhost.h $(INCDIR)/explain.h $(INCDIR)/fnmatch.h
 http_core.o: http_core.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
  $(INCDIR)/http_config.h $(INCDIR)/http_core.h \
  $(INCDIR)/http_protocol.h $(INCDIR)/http_request.h \
@@ -93,23 +93,24 @@
  $(INCDIR)/fnmatch.h
 http_log.o: http_log.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
- $(INCDIR)/http_config.h $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
- $(INCDIR)/http_main.h
+ $(INCDIR)/http_conf_globals.h $(INCDIR)/http_config.h \
+ $(INCDIR)/http_core.h $(INCDIR)/http_log.h $(INCDIR)/http_main.h
 http_main.o: http_main.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
  $(INCDIR)/http_main.h $(INCDIR)/http_log.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_protocol.h $(INCDIR)/http_request.h \
  $(INCDIR)/http_conf_globals.h $(INCDIR)/http_core.h \
  $(INCDIR)/http_vhost.h $(INCDIR)/util_script.h \
- $(INCDIR)/scoreboard.h $(INCDIR)/multithread.h $(INCDIR)/explain.h
+ $(INCDIR)/scoreboard.h $(INCDIR)/multithread.h $(INCDIR)/explain.h \
+ ../lib/expat-lite/xmlparse.h
 http_protocol.o: http_protocol.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(INCDIR)/ap_ctype.h \
- $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
+ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
+ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
  $(INCDIR)/ap.h $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h $(INCDIR)/http_protocol.h \
  $(INCDIR)/http_main.h $(INCDIR)/http_request.h \
@@ -117,8 +118,8 @@
  $(INCDIR)/http_conf_globals.h
 http_request.o: http_request.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(INCDIR)/ap_ctype.h \
- $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
+ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
+ $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h \
  $(INCDIR)/ap.h $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
  $(INCDIR)/http_protocol.h $(INCDIR)/http_conf_globals.h \
@@ -126,32 +127,32 @@
  $(INCDIR)/fnmatch.h
 http_vhost.o: http_vhost.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
  $(INCDIR)/http_config.h $(INCDIR)/http_conf_globals.h \
  $(INCDIR)/http_log.h $(INCDIR)/http_vhost.h \
  $(INCDIR)/http_protocol.h
 rfc1413.o: rfc1413.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
  $(INCDIR)/http_log.h $(INCDIR)/rfc1413.h $(INCDIR)/http_main.h
 util.o: util.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
  $(INCDIR)/http_conf_globals.h $(INCDIR)/http_log.h test_char.h
 util_date.o: util_date.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
- $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(INCDIR)/ap_ctype.h \
- $(INCDIR)/hsregex.h $(INCDIR)/util_date.h
+ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h $(OSDIR)/os-inline.c \
+ $(INCDIR)/ap_ctype.h $(INCDIR)/util_date.h
 util_md5.o: util_md5.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
  $(INCDIR)/util_md5.h $(INCDIR)/ap_md5.h
 util_script.o: util_script.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
  $(INCDIR)/http_config.h $(INCDIR)/http_conf_globals.h \
  $(INCDIR)/http_main.h $(INCDIR)/http_log.h \
@@ -160,6 +161,6 @@
  $(INCDIR)/util_date.h
 util_uri.o: util_uri.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h $(INCDIR)/ap_alloc.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h $(INCDIR)/ap_alloc.h \
  $(INCDIR)/buff.h $(INCDIR)/ap.h $(INCDIR)/util_uri.h \
  $(INCDIR)/http_log.h $(INCDIR)/http_conf_globals.h uri_delims.h
diff -ru -ruN apache_1.3.36_orig/src/main/buff.c apache_1.3.36/src/main/buff.c
--- apache_1.3.36_orig/src/main/buff.c	2006-05-18 17:16:13.708335784 +0200
+++ apache_1.3.36/src/main/buff.c	2006-05-18 17:16:13.861312528 +0200
@@ -31,6 +31,10 @@
 #include <bstring.h>		/* for IRIX, FD_SET calls bzero() */
 #endif
 
+#ifdef APACHE_SSL
+# include <openssl/err.h>
+#endif
+
 #ifndef DEFAULT_BUFSIZE
 #define DEFAULT_BUFSIZE (4096)
 #endif
@@ -250,6 +254,46 @@
     }
     else
 #endif
+#ifdef APACHE_SSL
+    if(fb->ssl)
+	{
+	int pa;
+
+	do
+	    {
+	    /* A horrible hack: an increase in this stat indicates that the
+	       client renegotiated. Is there a better way? Ben 10 Apr 1999
+	    */
+	    pa=fb->ssl->ctx->stats.sess_accept;
+
+	    rv=SSL_read(fb->ssl,buf,nbyte);
+
+	    ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,NULL,
+			 "read returned %d rwstate=%d state=%d rstate=%d "
+			 "cren=%d aren=%d accept=%d",
+			 rv,fb->ssl->rwstate,fb->ssl->state,fb->ssl->rstate,
+			 fb->ssl->ctx->stats.sess_connect_renegotiate,
+			 fb->ssl->ctx->stats.sess_accept_renegotiate,
+			 fb->ssl->ctx->stats.sess_accept);
+	    }
+	while(rv < 0 && fb->ssl->ctx->stats.sess_accept != pa);
+
+	if(rv < 0)
+	    {
+	    int l;
+
+	    while((l=ERR_get_error()))
+		{
+		char buf[MAX_STRING_LEN];
+
+		ERR_error_string(l,buf);
+		ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,NULL,"%s",
+			     buf);
+		}
+	    }
+	}
+    else
+#endif
 	rv = read(fb->fd_in, buf, nbyte);
     
     return rv;
@@ -291,6 +335,7 @@
 #else
     rv = ap_read(fb, buf, nbyte);
 #endif /* WIN32 */
+
     return rv;
 }
 
@@ -308,6 +353,27 @@
     }
     else
 #endif
+#ifdef APACHE_SSL
+    if(fb->ssl)
+	{
+	rv=SSL_write(fb->ssl,buf,nbyte);
+
+	if(rv < 0)
+	    {
+	    int l;
+
+	    while((l=ERR_get_error()))
+		{
+		char buf[MAX_STRING_LEN];
+
+		ERR_error_string(l,buf);
+		ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,NULL,"%s",
+			     buf);
+		}
+	    }
+	}
+    else
+#endif
 #if defined (B_SFIO)
 	rv = sfwrite(fb->sf_out, buf, nbyte);
 #else
@@ -421,6 +487,11 @@
     fb->callback_data = NULL;
     fb->filter_callback = NULL;
 
+#ifdef APACHE_SSL
+    fb->ssl = NULL;
+    fb->szClientX509 = NULL;
+#endif
+
     return fb;
 }
 
@@ -1151,7 +1222,7 @@
 	return write_with_errors(fb, buf, nbyte);
     }
 
-#ifdef NO_WRITEV
+#if defined(NO_WRITEV)
     /* without writev() this has poor performance, too bad */
 
     ap_snprintf(chunksize, sizeof(chunksize), "%x" CRLF, nbyte);
diff -ru -ruN apache_1.3.36_orig/src/main/http_config.c apache_1.3.36/src/main/http_config.c
--- apache_1.3.36_orig/src/main/http_config.c	2006-05-18 17:16:13.708335784 +0200
+++ apache_1.3.36/src/main/http_config.c	2006-05-18 17:16:13.863312224 +0200
@@ -334,6 +334,26 @@
     return run_all ? OK : DECLINED;
 }
 
+#ifdef APACHE_SSL
+void ap_add_common_vars2(request_rec *r)
+    {
+    module *m;
+
+    for (m = top_module; m; m = m->next)
+	if (m->magic == SSL_MAGIC_COOKIE && m->add_common_vars)
+	    (*m->add_common_vars)(r);
+    }
+
+void ap_setup_connection(conn_rec *c)
+    {
+    module *m;
+
+    for (m = top_module; m; m = m->next)
+	if (m->magic == SSL_MAGIC_COOKIE && m->setup_connection)
+	    (*m->setup_connection)(c);
+    }
+#endif
+
 API_EXPORT(int) ap_translate_name(request_rec *r)
 {
     return run_method(r, offsets_into_method_ptrs.translate_handler, 0);
diff -ru -ruN apache_1.3.36_orig/src/main/http_log.c apache_1.3.36/src/main/http_log.c
--- apache_1.3.36_orig/src/main/http_log.c	2006-05-18 17:16:13.707335936 +0200
+++ apache_1.3.36/src/main/http_log.c	2006-05-18 17:16:13.864312072 +0200
@@ -285,7 +285,8 @@
 	 * notice
 	 */
 	if (((level & APLOG_LEVELMASK) != APLOG_NOTICE) &&
-	    ((level & APLOG_LEVELMASK) > DEFAULT_LOGLEVEL))
+	    ((level & APLOG_LEVELMASK) > DEFAULT_LOGLEVEL)
+	    && !LogLevelIsDebug())
 	    return;
 	logf = stderr;
     }
diff -ru -ruN apache_1.3.36_orig/src/main/http_main.c apache_1.3.36/src/main/http_main.c
--- apache_1.3.36_orig/src/main/http_main.c	2006-05-18 17:16:13.712335176 +0200
+++ apache_1.3.36/src/main/http_main.c	2006-05-18 17:16:13.870311160 +0200
@@ -374,6 +374,9 @@
 
 API_VAR_EXPORT int ap_change_shmem_uid = 0;
 
+int LogLevelIsDebug()
+    { return server_conf && server_conf->loglevel == APLOG_DEBUG; }
+
 /*
  * This routine is called when the pconf pool is vacuumed.  It resets the
  * server version string to a known value and [re]enables modifications
@@ -1710,8 +1713,21 @@
     }
 }
 
+/* Essentially the same as ap_keepalive_timeout, but used if you have no
+   request_rec */
+void ap_conn_timeout(char *name,conn_rec *conn)
+    {
+    unsigned int to;
 
+    timeout_req=NULL;
+    timeout_name=name;
 
+    if(conn->keptalive)
+	to=conn->server->keep_alive_timeout;
+    else
+	to=conn->server->timeout;
+    ap_set_callback_and_alarm(timeout, to);
+    }
 
 API_EXPORT(void) ap_keepalive_timeout(char *name, request_rec *r)
 {
@@ -4778,6 +4794,16 @@
 				          (struct sockaddr_in *) &sa_server,
 				          my_child_num);
 
+#ifdef APACHE_SSL
+	/* 
+	 * This could return false if the connection cannot be setup,
+	 * so maybe we should do something with this here...
+	 * however it also blocks the BUFF connections
+	 * so the next bit should fall out anyway!
+	 */
+	ap_setup_connection(current_conn);
+#endif
+
 	/*
 	 * Read and process each request found on our connection
 	 * until no requests are left or we decide to close.
@@ -5790,6 +5816,16 @@
 			          (struct sockaddr_in *) &sa_client,
 			          (struct sockaddr_in *) &sa_server, -1);
 
+#ifdef APACHE_SSL
+      /*
+       * This could return false if the connection cannot be setup,
+       * so maybe we should do something with this here...
+       * however it also blocks the BUFF connections
+       * so the next bit should fall out anyway!
+       */
+      ap_setup_connection(conn);
+#endif
+
 	while ((r = ap_read_request(conn)) != NULL) {
 
 	    if (r->status == HTTP_OK)
@@ -6101,6 +6137,16 @@
 
 	ap_note_cleanups_for_socket_ex(ptrans, csd, 1);
 
+#ifdef APACHE_SSL
+	/* 
+	 * This returns false if the connection cannot be setup,
+	 * so maybe we should do something with this here...
+	 * however it also blocks the BUFF connections
+	 * so the next bit should fall out anyway!
+	 */
+	ApacheSSLSetupConnection(current_conn);
+#endif
+
 	/*
 	 * We now have a connection, so set it up with the appropriate
 	 * socket options, file descriptors, and read/write buffers.
diff -ru -ruN apache_1.3.36_orig/src/main/util_script.c apache_1.3.36/src/main/util_script.c
--- apache_1.3.36_orig/src/main/util_script.c	2006-05-18 17:16:13.710335480 +0200
+++ apache_1.3.36/src/main/util_script.c	2006-05-18 17:16:13.871311008 +0200
@@ -277,6 +277,10 @@
     }
 
     ap_overlap_tables(r->subprocess_env, e, AP_OVERLAP_TABLES_SET);
+
+#ifdef APACHE_SSL
+    ap_add_common_vars2(r);
+#endif
 }
 
 /* This "cute" little function comes about because the path info on
diff -ru -ruN apache_1.3.36_orig/src/modules/ssl/Makefile.libdir apache_1.3.36/src/modules/ssl/Makefile.libdir
--- apache_1.3.36_orig/src/modules/ssl/Makefile.libdir	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/src/modules/ssl/Makefile.libdir	2006-05-18 17:16:13.797322256 +0200
@@ -0,0 +1,4 @@
+This is a place-holder which indicates to Configure that it shouldn't
+provide the default targets when building the Makefile in this directory.
+Instead it'll just prepend all the important variable definitions, and
+copy the Makefile.tmpl onto the end.
diff -ru -ruN apache_1.3.36_orig/src/modules/ssl/Makefile.tmpl apache_1.3.36/src/modules/ssl/Makefile.tmpl
--- apache_1.3.36_orig/src/modules/ssl/Makefile.tmpl	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/src/modules/ssl/Makefile.tmpl	2006-05-18 17:16:13.797322256 +0200
@@ -0,0 +1,102 @@
+SPLASH=/home/ben/work/anoncvs.aldigital.co.uk-splash
+SPREAD=/usr/local/lib
+
+LIB=libssl.$(LIBEXT)
+
+OBJS=\
+     apache_ssl.o gcacheclient.o gcachecommon.o
+OBJS_PIC=\
+     apache_ssl.lo gcacheclient.lo gcachecommon.lo
+
+all: lib
+
+lib: $(LIB) gcache
+
+libssl.a: $(OBJS)
+	rm -f $@
+	ar cr $@ $(OBJS)
+	$(RANLIB) $@
+
+libssl.so: $(OBJS_PIC)
+	rm -f $@
+	$(LD_SHLIB) $(LDFLAGS_SHLIB) -o $@ $(OBJS_PIC) $(LIBS)
+
+crlutil: crlutil.o
+	$(CC) $(CFLAGS) $(LDFLAGS) -o crlutil crlutil.o $(LIBS)
+
+gcache: gcache.o gcachecommon.o
+	$(CC) $(CFLAGS) $(LDFLAGS) -o gcache gcache.o gcachecommon.o $(LIBS)
+
+splashcache: splashcache.o gcachecommon.o
+	$(CC) $(CFLAGS) $(LDFLAGS) -o splashcache splashcache.o gcachecommon.o $(LIBS) -L$(SPLASH)/src -lsplash -L$(SPREAD) -lspread
+
+splashcache.o: splashcache.c
+	$(CC) $(CFLAGS) $(INCLUDES) -I$(SPLASH)/src -c splashcache.c
+
+.SUFFIXES: .o .lo
+
+.c.o:
+	$(CC) -c $(INCLUDES) $(CFLAGS) $<
+
+.c.lo:
+	$(CC) -c $(INCLUDES) $(CFLAGS) $(CFLAGS_SHLIB) $< && mv $*.o $*.lo
+
+clean:
+	rm -f $(OBJS) $(OBJS_PIC) $(LIB) gcache
+
+distclean: clean
+	-rm -f Makefile
+
+# We really don't expect end users to use this rule.  It works only with
+# gcc, and rebuilds Makefile.tmpl.  You have to re-run Configure after
+# using it.
+depend:
+	cp Makefile.tmpl Makefile.tmpl.bak \
+	    && sed -ne '1,/^# DO NOT REMOVE/p' Makefile.tmpl > Makefile.new \
+	    && gcc -MM $(INCLUDES) $(CFLAGS) *.c >> Makefile.new \
+	    && sed -e '1,$$s: $(INCDIR)/: $$(INCDIR)/:g' \
+	           -e '1,$$s: $(OSDIR)/: $$(OSDIR)/:g' Makefile.new \
+		> Makefile.tmpl \
+	    && rm Makefile.new
+
+# Version for Ben - the above may or may not work, I haven't tested it.
+xdepend:
+	cp Makefile.tmpl Makefile.tmpl.bak \
+	&& cp Makefile.tmpl Makefile.new \
+	&& makedepend -DAPACHE_SSL -I../../include -I../../../../SSLeay-0.9.0-ben/include -I../../os/unix -f Makefile.new *.c \
+	&& sed -e '/^# DO NOT REMOVE/,$$s: ../../../../SSLeay-0.9.0-ben/include/[^ ]*::g' \
+		-e '/^# DO NOT REMOVE/,$$s: /usr/include/[^ ]*::g' \
+		-e '/^# DO NOT REMOVE/,$$s/[^:]*:$$//' \
+		-e '/^# DO NOT REMOVE/,$$s:../../include:$$(INCDIR):g' \
+		-e '/^# DO NOT REMOVE/,$$s:../../os/unix:$$(OSDIR):g' \
+		Makefile.new \
+	| sed -e '1,/^# DO NOT REMOVE/b xx' -e '/^$$/d' -e ':xx' > Makefile.tmpl \
+	&& rm Makefile.new
+
+#Dependencies
+
+$(OBJS) $(OBJS_PIC): Makefile
+
+# DO NOT REMOVE
+apache_ssl.o: apache_ssl.c $(INCDIR)/httpd.h \
+ $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+ $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+ $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+ $(INCDIR)/http_log.h $(INCDIR)/http_main.h \
+ $(INCDIR)/gcache.h
+gcache.o: gcache.c $(INCDIR)/gcache.h $(INCDIR)/httpd.h \
+ $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+ $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+ $(INCDIR)/util_uri.h
+gcacheclient.o: gcacheclient.c $(INCDIR)/gcache.h
+gcachecommon.o: gcachecommon.c $(INCDIR)/gcache.h
+splashcache.o: splashcache.c $(INCDIR)/gcache.h \
+ $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
+ $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
+ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+ $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+ $(INCDIR)/util_uri.h
diff -ru -ruN apache_1.3.36_orig/src/modules/ssl/apache_ssl.c apache_1.3.36/src/modules/ssl/apache_ssl.c
--- apache_1.3.36_orig/src/modules/ssl/apache_ssl.c	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/src/modules/ssl/apache_ssl.c	2006-05-18 17:16:13.798322104 +0200
@@ -0,0 +1,2384 @@
+/* ====================================================================
+ * Copyright (c) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002 Ben Laurie.
+ *  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer. 
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. All advertising materials mentioning features or use of this
+ *    software must display the following acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * 4. The name "Apache-SSL Server" must not be used to
+ *    endorse or promote products derived from this software without
+ *    prior written permission.
+ *
+ * 5. Redistributions of any form whatsoever must retain the following
+ *    acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * THIS SOFTWARE IS PROVIDED BY BEN LAURIE ``AS IS'' AND ANY
+ * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL BEN LAURIE OR
+ * HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of patches to the Apache HTTP server interfacing it
+ * to SSLeay.
+ * For more information on Apache-SSL see http://www.apache-ssl.org.
+ *
+ * For more information on Apache see http://www.apache.org.
+ *
+ * For more information on SSLeay see http://www.psy.uq.oz.au/~ftp/Crypto/.
+ *
+ * Ben Laurie <ben@algroup.co.uk>.
+ *
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdarg.h>
+#include <assert.h>
+
+#include <openssl/ssl.h>
+#include <openssl/err.h>
+#include <openssl/x509.h>
+#include <openssl/pem.h>
+#include <openssl/crypto.h>
+#include <openssl/rand.h>
+
+#include "httpd.h"
+#include "http_config.h"
+#include "http_log.h"
+#include "http_main.h"
+
+
+/* Note that APACHE_SSL_EXPORT_CERTS is defined in buff.h */
+
+/* Temp */
+#define RENEG		FALSE
+#define DEBUG_RENEG	FALSE
+#define DEBUG_SSL_STATE FALSE
+#define ENGINE_SUPPORT	FALSE
+
+#if ENGINE_SUPPORT
+#include <openssl/engine.h>
+#endif
+
+#define USE_OLD_ENVIRONMENT	FALSE	/* Set to TRUE to use the old SSL_{CLIENT,SERVER}_I* instead of SSL_{CLIENT,SERVER}_I_* */
+
+#define SSL_IS_OPTIONAL		TRUE	/* Set to TRUE if you want to allow SSL to be disabled on a per-request basis (useful for subrequests) */
+
+#define USE_EXTENDED_ENVIRONMENT      TRUE    /* Set to TRUE to use the SSL_{CLIENT,SERVER}_{I,S}_DN* */
+
+#if SSLEAY_VERSION_NUMBER >= 0x0800
+/* Do session caching - only available with SSLeay 0.8.x */
+# define CACHE_SESSIONS		TRUE
+#endif
+
+#if SSL_IS_OPTIONAL
+# define OPTIONAL_SSL	(!r->connection->client->ssl)
+#else
+# define OPTIONAL_SSL	FALSE
+#endif
+
+#if SSLEAY_VERSION_NUMBER < 0x0800
+# error "SSLeay versions below 0.8.x are no longer supported"
+/* But note, they nearly are, if anyone cares */
+#endif
+
+#if SSLEAY_VERSION_NUMBER < 0x0900 && APACHE_SSL_EXPORT_CERTS
+# error "Can't export certificates with SSLeay before 0.9.0"
+#endif
+
+#if SSLEAY_VERSION_NUMBER < 0x0908000
+# define DECRYPTFINAL	EVP_F_EVP_DECRYPTFINAL
+#else
+# define DECRYPTFINAL	EVP_F_EVP_DECRYPTFINAL_EX
+#endif
+
+#define FREE_SESSION	TRUE	/* Don't set this FALSE! */
+
+/* define this to debug the verification stuff */
+#define DEBUG_VERIFY	TRUE
+
+#if CACHE_SESSIONS
+# include "gcache.h"
+static const char *s_szCacheServerPort;
+static const char *s_szCacheServerDir;
+static char *s_szCacheServerPath;
+static char *s_szCacheServerArg1;
+static char *s_szCacheServerArg2;
+static char *s_szSplashUnicast;
+
+# define DEBUG_SESSIONS	FALSE
+
+#endif
+
+#if ENGINE_SUPPORT
+static const char *s_szEngineID = NULL;
+#endif
+
+#if APACHE_SSL_EXPORT_CERTS && !CACHE_SESSIONS
+# error "CACHE_SESSIONS must be TRUE if APACHE_SSL_EXPORT_CERTS is"
+#endif
+
+#if SSLEAY_VERSION_NUMBER < 0x900
+/* correct for a typo */
+# define SSL3_TXT_ADH_DES_192_CBC_SHA SSL3_TXT_ADH_DES_196_CBC_SHA
+#endif
+
+#if SSLEAY_VERSION_NUMBER < 0x600
+# define ERR_print_errors_fp	ERR_print_errors
+#endif
+
+#if SSLEAY_VERSION_NUMBER < 0x0800
+# define X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY \
+		VERIFY_ERR_UNABLE_TO_GET_ISSUER
+# define X509_V_OK VERIFY_OK
+# define SSL_CTX_set_default_verify_paths(ctx)	\
+		SSL_set_default_verify_paths(ctx)
+# define SSL_CTX_load_verify_locations(ctx,cafile,capath) \
+		 SSL_load_verify_locations(ctx,cafile,capath)
+# define X509_verify_cert_error_string(error) X509_cert_verify_error_string(error)
+#endif
+
+#if OPENSSL_VERSION_NUMBER >= 0x00904000L
+# define localPEM_read_RSAPrivateKey(f,k,x) PEM_read_RSAPrivateKey(f,k,x,NULL)
+# define localPEM_read_X509(f,c,x)	    PEM_read_X509(f,c,x,NULL)
+#else
+# define localPEM_read_RSAPrivateKey(f,k,x) PEM_read_RSAPrivateKey(f,k,x)
+# define localPEM_read_X509(f,c,x)	    PEM_read_X509(f,c,x)
+#endif
+
+#define ENV_CERT_CHAIN		"SSL_CLIENT_CERT_CHAIN_"
+
+#define UNSET	-1
+
+/* Offsets for data stored in SSL structures */
+#define EX_DATA_CONN_REC	0
+#define EX_DATA_SERVER_REC	1
+#if RENEG
+# define EX_DATA_DIR_CONFIG	2
+#endif
+
+typedef enum
+    {
+    VERIFY_UNSET=-1,
+    VERIFY_NONE=0,
+    VERIFY_OPTIONAL=1,
+    VERIFY_REQUIRE=2,
+    VERIFY_OPTIONAL_NO_CA=3
+    } VerifyType;
+
+typedef enum
+    {
+    SSLREQ_UNSET=-1,
+    SSLREQ_REQUIRED=0,
+    SSLREQ_DENIED=1
+    } RequireType;
+
+typedef struct
+    {
+    BOOL bDisabled;
+
+    char *szCertificateFile;
+    char *szKeyFile;
+    char *szCACertificatePath;
+    char *szCACertificateFile;
+    char *szReqCiphers;
+    char *szDNCheckFile;
+#if !RENEG
+    int nVerifyDepth;
+    VerifyType nVerifyClient;
+#endif
+
+    X509 *px509Certificate;
+    RSA *prsaKey;
+
+    SSL_CTX *pSSLCtx;
+
+    BOOL bFakeBasicAuth;
+    BOOL bNoCAList;
+    BOOL bUseCRL;
+    BOOL bCRLCheckAll;
+    BOOL bNoV2;
+
+    char *szOnRevocationSetEnv;
+    char *szOnCRLExpirySetEnv;
+    char *szOnNoCRLSetEnv;
+
+    time_t tSessionCacheTimeout;
+
+    array_header *aRandomFiles;
+    } SSLConfigRec;
+
+typedef struct
+    {
+    /* 1) If cipher is banned, refuse */
+    /* 2) If RequiredCiphers is NULL, accept */
+    /* 3) If the cipher isn't required, refuse */
+
+    table *tbRequiredCiphers;
+    table *tbBannedCiphers;
+    RequireType nSSLRequired;
+#if APACHE_SSL_EXPORT_CERTS
+    BOOL bExportCerts;
+#endif
+#if RENEG
+    int nVerifyDepth;
+    VerifyType nVerifyClient;
+#endif
+    } SSLDirConfigRec;
+
+MODULE_VAR_EXPORT module apache_ssl_module;
+
+static pool *s_pPermanentPool;
+
+static const char six2pr[64+1]=
+  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
+
+static void uuencoden(unsigned char *szTo,const unsigned char *szFrom,
+                     int nLength,BOOL bPad)
+    {
+    const unsigned char *s;
+    int nPad=0;
+
+    for(s=(const unsigned char *)szFrom ; nLength > 0 ; s+=3)
+	{
+	*szTo++=six2pr[s[0] >> 2];
+	*szTo++=six2pr[(s[0] << 4 | s[1] >> 4)&0x3f];
+	if(!--nLength)
+	    {
+	    nPad=2;
+	    break;
+	    }
+	*szTo++=six2pr[(s[1] << 2 | s[2] >> 6)&0x3f];
+	if(!--nLength)
+	    {
+	    nPad=1;
+	    break;
+	    }
+	*szTo++=six2pr[s[2]&0x3f];
+	--nLength;
+	}
+    while(bPad && nPad--)
+	*szTo++='=';
+    *szTo++='\0';
+    }
+
+static void uuencode(char *szTo,const char *szFrom,BOOL bPad)
+    {
+    uuencoden((unsigned char *)szTo,(const unsigned char *)szFrom,
+	      strlen(szFrom),bPad);
+    }
+
+static void SSLLogError(server_rec *s,int nLevel,const char *szErr)
+    {
+    unsigned long l;
+    char buf[MAX_STRING_LEN];
+
+    if(szErr)
+	ap_log_error(APLOG_MARK,nLevel|APLOG_NOERRNO,s,"%s",szErr);
+    while((l=ERR_get_error()))
+	{
+	ERR_error_string(l,buf);
+	ap_log_error(APLOG_MARK,nLevel|APLOG_NOERRNO,s,"%s",buf);
+	}
+    }
+
+/* for debugging */
+static void SSLLogErrorToFile(FILE *f)
+    {
+    unsigned long l;
+    char buf[MAX_STRING_LEN];
+
+    /* Print out error messages */
+
+    while((l=ERR_get_error()))
+	{
+	ERR_error_string(l,buf);
+	fputs(buf,f);
+	fputc('\n',f);
+	}
+    }
+
+#if DEBUG_SSL_STATE
+
+static void InfoCallback(SSL *s,int where,int ret)
+    {
+    char *str;
+    int w;
+    server_rec *pServer=SSL_get_ex_data(s,EX_DATA_SERVER_REC);
+
+    w=where&~SSL_ST_MASK;
+
+    if(w & SSL_ST_CONNECT)
+	str="SSL_connect";
+    else if(w & SSL_ST_ACCEPT)
+	str="SSL_accept";
+    else
+	str="undefined";
+
+    if(where & SSL_CB_LOOP)
+	ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,pServer,"%s:%s (%s)",
+		     str,SSL_state_string_long(s),SSL_get_cipher(s));
+    else if(where & SSL_CB_ALERT)
+	{
+	str=(where & SSL_CB_READ)?"read":"write";
+	ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,pServer,
+		     "SSL3 alert %s:%s:%s",
+		     str,
+		     SSL_alert_type_string_long(ret),
+		     SSL_alert_desc_string_long(ret));
+	}
+    else if(where & SSL_CB_EXIT)
+	{
+	if(ret == 0)
+	    ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,pServer,
+			 "%s:failed in %s",
+			 str,SSL_state_string_long(s));
+	else if (ret < 0)
+	    {
+	    ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,pServer,
+			 "%s:error in %s",
+			 str,SSL_state_string_long(s));
+	    }
+	}
+    }
+
+#endif /* DEBUG_SSL_STATE */
+
+typedef enum
+    {
+    RAND_EGD,
+    RAND_FILE
+    } RFType;
+
+typedef struct
+    {
+    RFType eType;
+    const char *szFile;
+    int nBytes;
+    } RandomFile;
+
+static void ReadRandomFiles(server_rec *pServer,RandomFile *pRF,int nRF)
+    {
+    int n;
+
+    for(n=0 ; n < nRF ; ++n,++pRF)
+	{
+	int r=pRF->eType == RAND_EGD
+	  ? RAND_egd_bytes(pRF->szFile,pRF->nBytes)
+	  : RAND_load_file(pRF->szFile,pRF->nBytes);
+	ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,pServer,
+		     "Random input %s(%d) -> %d",pRF->szFile,pRF->nBytes,r);
+	}
+    }
+
+#if APACHE_SSL_EXPORT_CERTS
+/* szEnv must have been pool allocated, or be static */
+static void AddCertToEnv(pool *p,table *e,char *szEnv,X509 *xs)
+    {
+    int n;
+    unsigned char *s,*d;
+
+    n=i2d_X509(xs,NULL);
+    d=s=ap_palloc(p,n);
+    i2d_X509(xs,&d);
+    d=ap_palloc(p,(n*4)/3+2+2);
+    uuencoden(d,s,n,TRUE);
+    ap_table_setn(e,szEnv,(char *)d);
+    }
+#endif
+
+#if SSLEAY_VERSION_NUMBER >= 0x0800
+static int ApacheSSLVerifyCallback(int ok,X509_STORE_CTX *ctx)
+    {
+    X509 *xs=X509_STORE_CTX_get_current_cert(ctx);
+    int depth=X509_STORE_CTX_get_error_depth(ctx);
+    int error=X509_STORE_CTX_get_error(ctx);
+    SSL *pSSL=X509_STORE_CTX_get_ex_data(ctx,
+					 SSL_get_ex_data_X509_STORE_CTX_idx());
+    conn_rec *pCurrentConnection=SSL_get_ex_data(pSSL,EX_DATA_CONN_REC);
+#else
+static int ApacheSSLVerifyCallback(int ok,X509 *xs,X509 *xi,int depth,
+				   int error)
+    {
+#endif
+
+#if RENEG
+    SSLDirConfigRec *pConfig=SSL_get_ex_data(pSSL,EX_DATA_DIR_CONFIG);
+    SSLConfigRec *pSConfig=
+      ap_get_module_config(pCurrentConnection->server->module_config,
+			   &apache_ssl_module);
+#else
+    SSLConfigRec *pConfig=
+      ap_get_module_config(pCurrentConnection->server->module_config,
+			   &apache_ssl_module);
+    SSLConfigRec *pSConfig=pConfig;
+#endif
+    server_rec *pServer=pCurrentConnection->server;
+
+#if DEBUG_VERIFY
+      {
+      char *s,*s2;
+      char s3[512];
+      BIO *bio;
+
+      s=X509_NAME_oneline(X509_get_subject_name(xs),NULL,0);
+      s2=X509_NAME_oneline(X509_get_issuer_name(xs),NULL,0);
+      bio=BIO_new(BIO_s_mem());
+      i2a_ASN1_INTEGER(bio,X509_get_serialNumber(xs));
+      BIO_gets(bio,s3,sizeof s3);
+      BIO_free(bio);
+
+      if(s == NULL)
+	  {
+	  SSLLogError(pServer,APLOG_ERR,"can't get subject name");
+	  return(0);
+	  }
+
+      ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,pServer,
+		   "depth=%d serial=%s subject=%s issuer=%s",depth,s3,s,s2);
+      free(s);
+      }
+#endif
+    
+#if APACHE_SSL_KEEP_CERTS
+    if(depth)
+	{
+	char *t;
+	pool *p=pCurrentConnection->client->pool;
+
+	if(!pCurrentConnection->client->tableCertChain)
+	    pCurrentConnection->client->tableCertChain=ap_make_table(p,5);
+
+	t=ap_psprintf(p,ENV_CERT_CHAIN "%d",depth);
+	AddCertToEnv(p,pCurrentConnection->client->tableCertChain,t,xs);
+	}
+#endif
+
+    if(error == X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
+       || error == X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
+       || error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
+       || error == X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
+#if OPENSSL_VERSION_NUMBER >= 0x00905000L
+       || error == X509_V_ERR_CERT_UNTRUSTED
+#endif
+       )
+	{
+	char *s;
+
+	if(pConfig->nVerifyClient == VERIFY_OPTIONAL_NO_CA)
+	    {
+	    ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,pServer,
+			 "no issuer, returning OK");
+	    return TRUE;
+	    }
+#if SSLEAY_VERSION_NUMBER < 0x0800
+	s=X509_NAME_oneline(X509_get_issuer_name(xs));
+#else
+	s=X509_NAME_oneline(X509_get_issuer_name(xs),NULL,0);
+#endif
+	if(s == NULL)
+	    {
+	    SSLLogError(pServer,APLOG_ERR,"verify error");
+	    return FALSE;
+	    }
+	ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,pServer,"issuer=%s",
+		     s);
+	free(s);
+	}
+    if(error == X509_V_ERR_CERT_REVOKED && pSConfig->szOnRevocationSetEnv)
+	{
+	ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,pServer,
+		     "certificate revoked, setting env var and returning OK");
+	pCurrentConnection->client->bRevoked=TRUE;
+	return TRUE;
+	}
+    if(error == X509_V_ERR_CRL_HAS_EXPIRED && pSConfig->szOnCRLExpirySetEnv)
+	{
+	ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,pServer,
+		     "CRL expired, setting env var and returning OK");
+	pCurrentConnection->client->bCRLExpired=TRUE;
+	return TRUE;
+	}
+    if(error == X509_V_ERR_UNABLE_TO_GET_CRL && pSConfig->szOnNoCRLSetEnv)
+	{
+	ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,pServer,
+		     "No CRL, setting env var and returning OK");
+	pCurrentConnection->client->bNoCRL=TRUE;
+	return TRUE;
+	}
+
+
+    if(!ok)
+	{
+	ap_log_error(APLOG_MARK,APLOG_ERR|APLOG_NOERRNO,pServer,
+		      "verify error:num=%d:%s",error,
+		      X509_verify_cert_error_string(error));
+	SSLLogError(pCurrentConnection->server,APLOG_ERR,NULL);
+	pCurrentConnection->client->szClientX509=NULL;
+	}
+    if(depth >= pConfig->nVerifyDepth)
+	{
+	ap_log_error(APLOG_MARK,APLOG_ERR|APLOG_NOERRNO,
+		     pServer,"Verify depth exceeded");
+	ok=0;
+	}
+    ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,pServer,
+		 "verify error=%d return=%d",error,ok);
+    return ok;
+    }
+
+#if RENEG
+static int VerifyFlags(SSLDirConfigRec *pConfig)
+#else
+static int VerifyFlags(SSLConfigRec *pConfig)
+#endif
+    {
+    int nVerify=0;
+
+    switch(pConfig->nVerifyClient)
+	{
+    case VERIFY_REQUIRE:
+	nVerify|=SSL_VERIFY_PEER|SSL_VERIFY_FAIL_IF_NO_PEER_CERT;
+	break;
+
+    case VERIFY_OPTIONAL:
+    case VERIFY_OPTIONAL_NO_CA:
+	nVerify|=SSL_VERIFY_PEER;
+	break;
+
+    default: break; /* avoid warnings from gcc */
+	}
+
+    return nVerify;
+    }
+
+static int SSLCheckCipher(request_rec *r)
+    {
+    const char *cipher;
+    SSLDirConfigRec *rec=(SSLDirConfigRec *)
+      ap_get_module_config(r->per_dir_config,&apache_ssl_module);
+    SSLConfigRec *pConfig=(SSLConfigRec *)
+      ap_get_module_config(r->server->module_config,&apache_ssl_module);
+
+    if(rec->nSSLRequired == SSLREQ_DENIED && r->connection->client->ssl)
+	{
+	ap_log_reason("SSL denied",r->filename,r);
+	return FORBIDDEN;
+	}
+
+    if(rec->nSSLRequired == SSLREQ_REQUIRED && !r->connection->client->ssl)
+	{
+	ap_log_reason("SSL required",r->filename,r);
+	return FORBIDDEN;
+	}
+
+    /* Check to see if SSL is on */
+    if(pConfig->bDisabled || OPTIONAL_SSL)
+	return DECLINED;
+
+    if (r->connection->client->ssl == NULL) return DECLINED;
+
+#if RENEG
+# if DEBUG_RENEG
+    fprintf(stderr,"Renegotiated for %s (%x)!\n",r->filename,VerifyFlags(rec));
+# endif
+    if(1)
+	{
+	SSL_set_ex_data(r->connection->client->ssl,EX_DATA_DIR_CONFIG,rec);
+	SSL_set_verify(r->connection->client->ssl,VerifyFlags(rec),
+		       ApacheSSLVerifyCallback);
+	/* Set the context. This is probably not optimal (but nor is the whole,
+	   of renegotiation. But it certainly should avoid inappropriate
+	   session reuse. */
+	SSL_set_session_id_context(r->connection->client->ssl,
+				   (unsigned char *)&rec,sizeof rec);
+	SSL_renegotiate(r->connection->client->ssl);
+	SSL_do_handshake(r->connection->client->ssl);
+
+	r->connection->client->ssl->state=SSL_ST_ACCEPT;
+	SSL_do_handshake(r->connection->client->ssl);
+	}
+
+    if(rec->nVerifyClient != VERIFY_NONE && rec->nVerifyClient != VERIFY_UNSET)
+	{
+	char *s;
+	X509 *xs;
+	xs=SSL_get_peer_certificate(r->connection->client->ssl);
+	if(xs)
+	    {
+	    s=X509_NAME_oneline(X509_get_subject_name(xs),NULL,0);
+	    r->connection->client->szClientX509=ap_pstrdup(r->connection->pool,
+							   s);
+	    free(s);
+	    }
+	}
+
+    if(rec->nVerifyClient == VERIFY_REQUIRE
+       && !r->connection->client->szClientX509)
+	{
+	SSLLogError(r->connection->server,APLOG_ERR,"No client certificate");
+	return FORBIDDEN;
+	}
+#endif
+
+    cipher=SSL_get_cipher(r->connection->client->ssl);
+
+    if(ap_table_get(rec->tbBannedCiphers,cipher))
+	{
+	char *buf;
+
+	buf=ap_pstrcat(r->pool,"Cipher ",cipher," is forbidden",NULL);
+	ap_log_reason(buf,r->filename,r);
+	return FORBIDDEN;
+	}
+
+    if(ap_table_get(rec->tbRequiredCiphers,cipher))
+	return OK;
+
+    if(ap_is_empty_table(rec->tbRequiredCiphers))
+	return OK;
+    else
+	{
+	char *buf;
+	
+	buf=ap_pstrcat(r->pool,"Cipher ",cipher,
+		       " is not on the permitted list",NULL);
+	ap_log_reason(buf,r->filename,r);
+	return FORBIDDEN;
+	}
+    }
+
+static int CheckDN(request_rec *r)
+    {
+    SSLConfigRec *pConfig=ap_get_module_config(r->server->module_config,
+					       &apache_ssl_module);
+    FILE *f;
+  
+    if(OPTIONAL_SSL)
+	return DECLINED;
+    if(!pConfig->szDNCheckFile)
+	return DECLINED;
+    if(r->connection->user)
+	return DECLINED;
+    if(!r->connection->client->szClientX509)
+	return DECLINED;
+
+    f=fopen(pConfig->szDNCheckFile,"r");
+    if(!f)
+        {
+	ap_log_error(APLOG_MARK,APLOG_CRIT,r->server,
+		     "Can't open DN check file: %s",pConfig->szDNCheckFile);
+	return FORBIDDEN;
+	}
+
+    for( ; ; )
+        {
+	char buf[MAX_STRING_LEN];
+	int n;
+
+	if(!fgets(buf,sizeof buf,f))
+	    break;
+	n=strlen(buf);
+	if(n && buf[n-1] == '\n')
+	    buf[n-1]='\0';
+
+	ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,r->server,
+		     "Comparing '%s' to '%s'",buf,
+		     r->connection->client->szClientX509);
+
+	if(!strcmp(buf,r->connection->client->szClientX509))
+	    {
+	    fclose(f);
+	    return OK;
+	    }
+	}
+    fclose(f);
+
+    ap_log_error(APLOG_MARK,APLOG_ERR|APLOG_NOERRNO,r->server,
+		 "DN '%s' not found in %s",r->connection->client->szClientX509,
+		 pConfig->szDNCheckFile);
+
+    return FORBIDDEN;
+    }
+
+static int CheckAccess(request_rec *r)
+    {
+    int ret;
+
+    ret=SSLCheckCipher(r);
+    if(ret != OK)
+        return ret;
+    return CheckDN(r);
+    }
+
+static void StrUpper(char *s)
+    {
+    for( ; *s ; ++s)
+	*s=toupper(*s);
+    }
+
+#if USE_EXTENDED_ENVIRONMENT
+static void get_serial(pool *p,table *pEnv,char *name, X509 *xs)
+{
+    BIO *bio;
+    char *result;
+    int n;
+
+    if ((bio = BIO_new(BIO_s_mem())) == NULL) return;
+    i2a_ASN1_INTEGER(bio, X509_get_serialNumber(xs));
+    n = BIO_pending(bio);
+    result = ap_pcalloc(p, n+1);
+    n = BIO_read(bio, result, n);
+    result[n] = 0;
+    ap_table_setn(pEnv,name, result);
+    BIO_free(bio);
+}
+
+static void get_valid(pool *p, table *pEnv, char *name, ASN1_UTCTIME *tm)
+{
+    BIO *bio;
+    char *result;
+    int n;
+
+    if ((bio = BIO_new(BIO_s_mem())) == NULL) return;
+    ASN1_UTCTIME_print(bio, tm);
+    n = BIO_pending(bio);
+    result = ap_pcalloc(p, n+1);
+    n = BIO_read(bio, result, n);
+    result[n] = 0;
+    ap_table_setn(pEnv, name, result);
+    BIO_free(bio);
+}
+
+#endif
+
+static void ExpandCert(pool *p,table *pEnv,char *szPrefix, char *szDN, char *szCert)
+    {
+    char buf[HUGE_STRING_LEN];
+    char *s,*t;
+    /* Expand a X509_oneline entry into it's base components and register
+       them as environment variables. Needed if you want to pass certificate
+       information to CGI's. The naming convention SHOULD be fairly compatible
+       with CGI's written for stronghold's certificate info  - Q */
+    /* FIXME - strtok() and strcspn() may cause problems on some systems - Q */
+
+    ap_table_setn(pEnv,szDN,ap_pstrdup(p,szCert));
+    
+    ap_cpystrn(buf,szCert,sizeof buf);
+    for(s=strtok(buf,"/") ; s != NULL ; s=strtok(NULL,"/"))
+	{
+	int n=strcspn(s,"=");
+	s[n]='\0';
+	StrUpper(s);
+	t=ap_pstrcat(p,szPrefix,s,NULL);
+	ap_table_setn(pEnv,t,ap_pstrdup(p,s+n+1));
+	}
+    }
+
+static struct
+    {
+    char *szName;
+    int nKeySize;
+    int nSecretKeySize;
+    } aCipherspecs[]=
+    {
+#if OPENSSL_VERSION_NUMBER >= 0x00907000L
+    { TLS1_TXT_RSA_WITH_AES_128_SHA /*"AES128-SHA"*/, 128, 128 },
+    { TLS1_TXT_DH_DSS_WITH_AES_128_SHA /*"DH-DSS-AES128-SHA"*/, 128, 128 },
+    { TLS1_TXT_DH_RSA_WITH_AES_128_SHA /*"DH-RSA-AES128-SHA"*/, 128, 128 },
+    { TLS1_TXT_DHE_DSS_WITH_AES_128_SHA /*"DHE-DSS-AES128-SHA"*/, 128, 128 },
+    { TLS1_TXT_DHE_RSA_WITH_AES_128_SHA /*"DHE-RSA-AES128-SHA"*/, 128, 128 },
+    { TLS1_TXT_ADH_WITH_AES_128_SHA /*"ADH-AES128-SHA"*/, 128, 128 },
+    { TLS1_TXT_RSA_WITH_AES_256_SHA /*"AES256-SHA"*/, 256, 256 },
+    { TLS1_TXT_DH_DSS_WITH_AES_256_SHA /*"DH-DSS-AES256-SHA"*/, 256, 256 },
+    { TLS1_TXT_DH_RSA_WITH_AES_256_SHA /*"DH-RSA-AES256-SHA"*/, 256, 256 },
+    { TLS1_TXT_DHE_DSS_WITH_AES_256_SHA /*"DHE-DSS-AES256-SHA"*/, 256, 256 },
+    { TLS1_TXT_DHE_RSA_WITH_AES_256_SHA /*"DHE-RSA-AES256-SHA"*/, 256, 256 },
+    { TLS1_TXT_ADH_WITH_AES_256_SHA /*"ADH-AES256-SHA"*/, 256, 256 },
+#endif
+    { TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5 /*"EXP1024-RC4-MD5"*/, 128, 56 },
+    { TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5 /*"EXP1024-RC2-CBC-MD5"*/, 128, 56 },
+    { TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA /*"EXP1024-DES-CBC-SHA"*/, 56, 56 },
+    { TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA /*"EXP1024-DHE-DSS-DES-CBC-SHA"*/, 56, 56 },
+    { TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA /*"EXP1024-RC4-SHA"*/, 128, 56 },
+    { TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA /*"EXP1024-DHE-DSS-RC4-SHA"*/, 128, 56 },
+    { TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA /*"DHE-DSS-RC4-SHA"*/, 128, 128 },
+#if SSLEAY_VERSION_NUMBER >= 0x0900
+    { SSL3_TXT_RSA_IDEA_128_SHA		/*"IDEA-CBC-SHA"*/,	128, 128 },
+#endif
+    { SSL3_TXT_RSA_NULL_MD5		/*"NULL-MD5"*/, 	0, 0 },
+    { SSL3_TXT_RSA_NULL_SHA	 	/*"NULL-SHA"*/, 	0, 0 },
+    { SSL3_TXT_RSA_RC4_40_MD5		/*"EXP-RC4-MD5"*/,	128, 40 },
+    { SSL3_TXT_RSA_RC4_128_MD5		/*"RC4-MD5"*/,		128, 128 },
+    { SSL3_TXT_RSA_RC4_128_SHA		/*"RC4-SHA"*/,		128, 128 },
+    { SSL3_TXT_RSA_RC2_40_MD5		/*"EXP-RC2-CBC-MD5"*/,	128, 40 },
+    { SSL3_TXT_RSA_IDEA_128_SHA		/*"IDEA-CBC-MD5"*/,	128, 128 },
+    { SSL3_TXT_RSA_DES_40_CBC_SHA	/*"EXP-DES-CBC-SHA"*/,	56, 40 },
+    { SSL3_TXT_RSA_DES_64_CBC_SHA	/*"DES-CBC-SHA"*/,	56, 56 },
+    { SSL3_TXT_RSA_DES_192_CBC3_SHA	/*"DES-CBC3-SHA"*/,	168, 168 },
+    { SSL3_TXT_DH_DSS_DES_40_CBC_SHA	/*"EXP-DH-DSS-DES-CBC-SHA"*/, 56, 40 },
+    { SSL3_TXT_DH_DSS_DES_64_CBC_SHA	/*"DH-DSS-DES-CBC-SHA"*/, 56, 56 },
+    { SSL3_TXT_DH_DSS_DES_192_CBC3_SHA 	/*"DH-DSS-DES-CBC3-SHA"*/, 168, 168 },
+    { SSL3_TXT_DH_RSA_DES_40_CBC_SHA	/*"EXP-DH-RSA-DES-CBC-SHA"*/, 56, 40 },
+    { SSL3_TXT_DH_RSA_DES_64_CBC_SHA	/*"DH-RSA-DES-CBC-SHA"*/, 56, 56 },
+    { SSL3_TXT_DH_RSA_DES_192_CBC3_SHA 	/*"DH-RSA-DES-CBC3-SHA"*/, 168, 168 },
+    { SSL3_TXT_EDH_DSS_DES_40_CBC_SHA	/*"EXP-EDH-DSS-DES-CBC-SHA"*/, 56, 40 },
+    { SSL3_TXT_EDH_DSS_DES_64_CBC_SHA	/*"EDH-DSS-DES-CBC-SHA"*/, 56, 56 },
+    { SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA	/*"EDH-DSS-DES-CBC3-SHA"*/, 168, 168 },
+    { SSL3_TXT_EDH_RSA_DES_40_CBC_SHA	/*"EXP-EDH-RSA-DES-CBC"*/, 56, 40 },
+    { SSL3_TXT_EDH_RSA_DES_64_CBC_SHA	/*"EDH-RSA-DES-CBC-SHA"*/, 56, 56 },
+    { SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA	/*"EDH-RSA-DES-CBC3-SHA"*/, 168, 168 },
+    { SSL3_TXT_ADH_RC4_40_MD5		/*"EXP-ADH-RC4-MD5"*/,	128, 40 },
+    { SSL3_TXT_ADH_RC4_128_MD5		/*"ADH-RC4-MD5"*/,	128, 128 },
+    { SSL3_TXT_ADH_DES_40_CBC_SHA	/*"EXP-ADH-DES-CBC-SHA"*/, 128, 40 },
+    { SSL3_TXT_ADH_DES_64_CBC_SHA	/*"ADH-DES-CBC-SHA"*/,	56, 56 },
+    { SSL3_TXT_ADH_DES_192_CBC_SHA	/*"ADH-DES-CBC3-SHA"*/, 168, 168 },
+    { SSL3_TXT_FZA_DMS_NULL_SHA		/*"FZA-NULL-SHA"*/,	0, 0 },
+    { SSL3_TXT_FZA_DMS_FZA_SHA		/*"FZA-FZA-CBC-SHA"*/,	-1, -1 },
+    { SSL3_TXT_FZA_DMS_RC4_SHA		/*"FZA-RC4-SHA"*/,	 128, 128 },
+    { SSL2_TXT_DES_64_CFB64_WITH_MD5_1	/*"DES-CFB-M1"*/,	56, 56 },
+    { SSL2_TXT_RC2_128_CBC_WITH_MD5	/*"RC2-CBC-MD5"*/,	128, 128 },
+    { SSL2_TXT_DES_64_CBC_WITH_MD5	/*"DES-CBC-MD5"*/,	56, 56 },
+    { SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5/*"DES-CBC3-MD5"*/,	168, 168 },
+    { SSL2_TXT_RC4_64_WITH_MD5		/*"RC4-64-MD5"*/,	64, 64 },
+    { SSL2_TXT_NULL			/*"NULL"*/,		0, 0 },
+    { NULL, 0, 0 }
+    };
+
+static void SSLAddCommonVars(request_rec *r)
+    {
+    table *e=r->subprocess_env;
+    int keysize=0;
+    int secretkeysize=0;
+    char *t;
+    const char *cipher;
+    int n;
+    X509 *xs;
+#if APACHE_SSL_EXPORT_CERTS && !APACHE_SSL_KEEP_CERTS
+    STACK *pCertStack;
+#endif
+
+    SSLConfigRec *pConfig=(SSLConfigRec *)
+      ap_get_module_config(r->server->module_config,&apache_ssl_module);
+#if APACHE_SSL_EXPORT_CERTS
+    SSLDirConfigRec *pDirConfig=(SSLDirConfigRec *)
+      ap_get_module_config(r->per_dir_config,&apache_ssl_module);
+#endif
+
+    /* Check to see if SSL is on */
+    if(pConfig->bDisabled || OPTIONAL_SSL)
+	return;
+
+    if(r->connection->client->ssl == NULL)
+	return;
+
+    if(r->connection->client->bRevoked)
+	ap_table_set(e,pConfig->szOnRevocationSetEnv,"YES");
+    if(r->connection->client->bCRLExpired)
+	ap_table_set(e,pConfig->szOnCRLExpirySetEnv,"YES");
+    if(r->connection->client->bNoCRL)
+	ap_table_set(e,pConfig->szOnNoCRLSetEnv,"YES");
+
+    cipher=SSL_get_cipher(r->connection->client->ssl);
+    ap_table_set(e,"HTTPS","on");
+    ap_table_set(e,"HTTPS_CIPHER",cipher);
+    ap_table_set(e,"SSL_CIPHER",cipher);
+    ap_table_set(e,"SSL_PROTOCOL_VERSION",
+		 SSL_get_version(r->connection->client->ssl));
+    ap_table_set(e,"SSL_SSLEAY_VERSION", SSLeay_version(SSLEAY_VERSION));
+
+    for(n=0 ; aCipherspecs[n].szName ; ++n)
+	if(!strcmp(cipher,aCipherspecs[n].szName))
+	    {
+	    keysize=aCipherspecs[n].nKeySize;
+	    secretkeysize=aCipherspecs[n].nSecretKeySize;
+	    break;
+	    }
+
+    t=ap_psprintf(r->pool,"%d",keysize);
+    ap_table_setn(e,"HTTPS_KEYSIZE",t);
+
+    t=ap_psprintf(r->pool,"%d",secretkeysize);
+    ap_table_setn(e,"HTTPS_SECRETKEYSIZE",t);
+
+    if(r->connection->client->szClientX509)
+	{
+	ExpandCert(r->pool,e,"SSL_CLIENT_","SSL_CLIENT_DN",
+		   r->connection->client->szClientX509);
+#if USE_EXTENDED_ENVIRONMENT
+	ExpandCert(r->pool,e,"SSL_CLIENT_S_DN_","SSL_CLIENT_S_DN",
+		   r->connection->client->szClientX509);
+#endif
+	xs=SSL_get_peer_certificate(r->connection->client->ssl);
+	ExpandCert(r->pool,e,
+#if USE_OLD_ENVIRONMENT
+		   "SSL_CLIENT_I","SSL_CLIENT_I_DN",
+#else
+		   "SSL_CLIENT_I_","SSL_CLIENT_I_DN",
+#endif
+		   X509_NAME_oneline(X509_get_issuer_name(xs),NULL,0));
+#if USE_EXTENDED_ENVIRONMENT
+	ExpandCert(r->pool,e,"SSL_CLIENT_I_DN_","SSL_CLIENT_I_DN",
+		   X509_NAME_oneline(X509_get_issuer_name(xs),NULL,0));
+	get_serial(r->pool,e,"SSL_CLIENT_M_SERIAL",xs);
+        get_valid(r->pool,e,"SSL_CLIENT_V_START",X509_get_notBefore(xs));
+        get_valid(r->pool,e,"SSL_CLIENT_V_END",X509_get_notAfter(xs));
+        t=ap_psprintf(r->pool,"%lu",X509_get_version(xs)+1);
+        ap_table_setn(e,"SSL_CLIENT_M_VERSION",t);
+#endif
+#if APACHE_SSL_EXPORT_CERTS
+	if(pDirConfig->bExportCerts)
+	    AddCertToEnv(r->pool,e,"SSL_CLIENT_CERT",xs);
+#endif
+	}
+
+    xs=SSL_get_certificate(r->connection->client->ssl);
+    ExpandCert(r->pool,e,"SSL_SERVER_","SSL_SERVER_DN",
+	       X509_NAME_oneline(X509_get_subject_name(xs),NULL,0));
+#if USE_EXTENDED_ENVIRONMENT
+    ExpandCert(r->pool,e,"SSL_SERVER_S_","SSL_SERVER_S_DN",
+               X509_NAME_oneline(X509_get_subject_name(xs),NULL,0));
+#endif
+    ExpandCert(r->pool,e,
+#if USE_OLD_ENVIRONMENT
+	       "SSL_SERVER_I","SSL_SERVER_I_DN",
+#else
+	       "SSL_SERVER_I_","SSL_SERVER_I_DN",
+#endif
+	       X509_NAME_oneline(X509_get_issuer_name(xs),NULL,0));
+#if USE_EXTENDED_ENVIRONMENT
+    ExpandCert(r->pool,e,
+	       "SSL_SERVER_I_DN_","SSL_SERVER_I_DN",
+	       X509_NAME_oneline(X509_get_issuer_name(xs),NULL,0));
+    get_serial(r->pool,e,"SSL_SERVER_M_SERIAL",xs);
+    get_valid(r->pool,e,"SSL_SERVER_V_START",X509_get_notBefore(xs));
+    get_valid(r->pool,e,"SSL_SERVER_V_END",X509_get_notAfter(xs));
+    t=ap_psprintf(r->pool,"%lu",X509_get_version(xs)+1);
+    ap_table_setn(e,"SSL_SERVER_M_VERSION",t);
+#endif
+
+#if APACHE_SSL_EXPORT_CERTS
+# if !APACHE_SSL_KEEP_CERTS
+    pCertStack=SSL_get_peer_cert_chain(r->connection->client->ssl);
+    for(n=0 ; pCertStack && n < sk_num(pCertStack) ; ++n)
+	{
+	t=ap_psprintf(r->pool,ENV_CERT_CHAIN "%d",n+1);
+	AddCertToEnv(r->connection->client->pool,e,t,(X509 *)sk_value(pCertStack,n));
+	}
+# else
+    if(r->connection->client->tableCertChain && pDirConfig->bExportCerts)
+	r->subprocess_env=
+	  ap_overlay_tables(r->pool,r->subprocess_env,
+			    r->connection->client->tableCertChain);
+# endif
+#endif
+
+    return;
+    }
+
+/*
+static int SSLFixups(request_rec *r)
+    {
+    SSLAddCommonVars(r);
+    return DECLINED;
+    }
+*/
+
+static void *CreateSSLServerConfig(pool *p,server_rec *s)
+    {
+    SSLConfigRec *rec=ap_pcalloc(p,sizeof(SSLConfigRec));
+    
+    rec->bDisabled=UNSET;	/* Will become FALSE */
+    rec->szCertificateFile=NULL;
+    rec->szKeyFile=NULL;
+    rec->szCACertificatePath=NULL;
+    rec->szCACertificateFile=NULL;
+    rec->szReqCiphers=NULL;
+    rec->szDNCheckFile=NULL;
+#if !RENEG
+    rec->nVerifyDepth=0;
+    rec->nVerifyClient=VERIFY_UNSET;	/* Will become VERIFY_NONE */
+#endif
+    rec->px509Certificate=NULL;
+    rec->prsaKey=NULL;
+    rec->pSSLCtx=NULL;
+    rec->bFakeBasicAuth=UNSET;		/* Will become FALSE */
+    rec->bNoCAList=UNSET;
+    rec->tSessionCacheTimeout=0;
+    rec->aRandomFiles=ap_make_array(p,1,sizeof(RandomFile));
+
+    rec->bUseCRL=UNSET;
+    rec->bCRLCheckAll=UNSET;
+    rec->bNoV2=UNSET;
+    rec->szOnRevocationSetEnv=NULL;
+    rec->szOnCRLExpirySetEnv=NULL;
+    rec->szOnNoCRLSetEnv=NULL;
+
+    return rec;
+    }
+
+#define Merge(el,unset)		new->el=(add->el == unset ? base->el : add->el)
+#define MergeString(el)		Merge(el,NULL)
+#define MergeBool(el)		Merge(el,UNSET)
+#define MergeInt(el)		Merge(el,0)
+
+static void *MergeSSLServerConfig(pool *p,void *basev,void *addv)
+    {
+    SSLConfigRec *base=(SSLConfigRec *)basev;
+    SSLConfigRec *add=(SSLConfigRec *)addv;
+    SSLConfigRec *new=(SSLConfigRec *)ap_pcalloc(p,sizeof(SSLConfigRec));
+
+    MergeBool(bDisabled);
+    MergeString(szCertificateFile);
+    MergeString(szKeyFile);
+    MergeString(szCACertificatePath);
+    MergeString(szCACertificateFile);
+    MergeString(szDNCheckFile);
+    MergeString(szReqCiphers);
+#if !RENEG
+    MergeInt(nVerifyDepth);
+    Merge(nVerifyClient,VERIFY_UNSET);
+#endif
+    MergeBool(bFakeBasicAuth);
+    MergeBool(bNoCAList);
+    MergeInt(tSessionCacheTimeout);
+    new->aRandomFiles=ap_append_arrays(p,base->aRandomFiles,add->aRandomFiles);
+
+    MergeBool(bUseCRL);
+    MergeBool(bCRLCheckAll);
+    MergeBool(bNoV2);
+    MergeString(szOnRevocationSetEnv);
+    MergeString(szOnCRLExpirySetEnv);
+    MergeString(szOnNoCRLSetEnv);
+
+    return new;
+    }
+
+static void *CreateSSLDirConfig(pool *p,char *dummy)
+    {
+    SSLDirConfigRec *rec=ap_pcalloc(p,sizeof(SSLDirConfigRec));
+
+    rec->tbRequiredCiphers=ap_make_table(p,4);
+    rec->tbBannedCiphers=ap_make_table(p,4);
+    rec->nSSLRequired=SSLREQ_UNSET;
+#if APACHE_SSL_EXPORT_CERTS
+    rec->bExportCerts=FALSE;
+#endif
+#if RENEG
+    rec->nVerifyDepth=0;
+    rec->nVerifyClient=VERIFY_UNSET;	/* Won't become VERIFY_NONE */
+#endif
+
+    return rec;
+    }
+
+static void *MergeSSLDirConfig(pool *p,void *basev,void *addv)
+    {
+    SSLDirConfigRec *base=(SSLDirConfigRec *)basev;
+    SSLDirConfigRec *add=(SSLDirConfigRec *)addv;
+    SSLDirConfigRec *new=(SSLDirConfigRec *)
+      ap_palloc(p,sizeof(SSLDirConfigRec));
+
+    new->tbRequiredCiphers=ap_overlay_tables(p,add->tbRequiredCiphers,
+					     base->tbRequiredCiphers);
+    new->tbBannedCiphers=ap_overlay_tables(p,add->tbBannedCiphers,
+					   base->tbBannedCiphers);
+    Merge(nSSLRequired,SSLREQ_UNSET);
+#if APACHE_SSL_EXPORT_CERTS
+    new->bExportCerts=base->bExportCerts || add->bExportCerts;
+#endif
+#if RENEG
+    MergeInt(nVerifyDepth);
+    Merge(nVerifyClient,VERIFY_UNSET);
+#endif
+
+    return new;
+    }
+
+static void InitSSL(server_rec *s)
+    {
+#if CACHE_SESSIONS
+    if(!s_szCacheServerPort)
+	{
+	ap_log_error(APLOG_MARK,APLOG_CRIT|APLOG_NOERRNO,s,
+		"Required SSLCacheServerPort missing");
+	exit(1);
+	}
+    if(!s_szCacheServerPath)
+	{
+	ap_log_error(APLOG_MARK,APLOG_CRIT|APLOG_NOERRNO,s,
+		     "Required SSLCacheServerPath missing");
+	exit(1);
+	}
+#endif
+
+    SSL_load_error_strings();
+    ERR_load_crypto_strings();
+#if SSLEAY_VERSION_NUMBER >= 0x0800
+    SSLeay_add_ssl_algorithms();
+#else
+    /* only enable this with care: it can be used for /tmp symlink attacks.
+    SSL_debug("/tmp/ssldebug");*/
+#endif
+#if ENGINE_SUPPORT
+    if(s_szEngineID)
+        {
+        ENGINE *e = ENGINE_by_id(s_szEngineID);
+        if(!e)
+            {
+            ap_log_error(APLOG_MARK,APLOG_CRIT|APLOG_NOERRNO,s,
+                         "Supplied SSLEngineID is unrecognised");
+            exit(1);
+            }
+        /* Squeeze in a quick hack - nCipher "chil" units don't do this by
+         * default, which means that child processes could inherent the same
+         * file-descriptor and corrupt each other's I/O. :-( */
+        if(strcmp(s_szEngineID, "chil"))
+            ENGINE_ctrl(e, ENGINE_CTRL_CHIL_SET_FORKCHECK, 1, 0, 0);
+        if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
+            {
+            ap_log_error(APLOG_MARK,APLOG_CRIT|APLOG_NOERRNO,s,
+                         "Supplied SSLEngineID could not be initialised");
+            exit(1);
+            }
+        ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,s,
+                     "SSLEngineID (as supplied) initialised and running");
+        if(!ENGINE_get_RSA(e))
+            ap_log_error(APLOG_MARK,APLOG_WARNING|APLOG_NOERRNO,s,
+                         "Supplied SSLEngineID does not support RSA");
+        else
+            ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,s,
+                         "Supplied SSLEngineID supports RSA");
+        if(!ENGINE_get_DSA(e))
+            ap_log_error(APLOG_MARK,APLOG_WARNING|APLOG_NOERRNO,s,
+                         "Supplied SSLEngineID does not support DSA");
+        else
+            ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,s,
+                         "Supplied SSLEngineID supports DSA");
+        ENGINE_free(e);
+        }
+#endif
+    }
+
+#if SSLEAY_VERSION_NUMBER >= 0x0800 && SSLEAY_VERSION_NUMBER < 0x0920
+/* FIXME: This ought to generate a new key from time to time - why make the
+Feds' life easy? */
+static RSA *TmpRSACallback(SSL *pSSL,int nExport)
+    {
+    static RSA *pRSA=NULL;
+
+    if (pRSA == NULL)
+#if SSLEAY_VERSION_NUMBER >= 0x0900
+	pRSA=RSA_generate_key(512,RSA_F4,NULL,NULL);
+#else
+	pRSA=RSA_generate_key(512,RSA_F4,NULL);
+#endif
+    return pRSA;
+    }
+#endif
+
+#if SSLEAY_VERSION_NUMBER >= 0x0920
+/* FIXME: This ought to generate a new key from time to time - why make the
+Feds' life easy? */
+static RSA *TmpRSACallback(SSL *pSSL,int nExport,int nKeyLength)
+    {
+    static RSA *pRSA512=NULL;
+    static RSA *pRSA1024=NULL;
+
+    ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,
+		 SSL_get_ex_data(pSSL,EX_DATA_SERVER_REC),
+		 "Generating %d bit key",nKeyLength);
+    assert(nExport);  /* Otherwise it was a sign-only key and we should set our own keylength */
+    assert(nKeyLength == 512 || nKeyLength == 1024);
+    if (pRSA512 == NULL && nKeyLength == 512)
+	pRSA512=RSA_generate_key(512,RSA_F4,NULL,NULL);
+    if (pRSA1024 == NULL && nKeyLength == 1024)
+	pRSA1024=RSA_generate_key(1024,RSA_F4,NULL,NULL);
+    
+    return nKeyLength == 512 ? pRSA512 : pRSA1024;
+    }
+#endif
+
+#if CACHE_SESSIONS
+
+#define MAX_SESSION_DER	100000
+
+/*
+  If *pbLocal is TRUE, only do a local search. Also, set *pbLocal if the key
+  was found locally.
+  */
+static uchar *CacheFind(uchar *aucKey,int nKey,int *pnData,BOOL *pbLocal)
+    {
+    Cache *p;
+    uchar *t;
+
+    p=LocalCacheFind(aucKey,nKey);
+
+    if(!p)
+	{
+	uchar *t2;
+	time_t tExpiresAt;
+
+	if(*pbLocal)
+	    return NULL;
+
+	t=GlobalCacheGet(aucKey,nKey,pnData,&tExpiresAt);
+	if(!t)
+	    return NULL;
+#if DEBUG_SESSIONS
+	fprintf(stderr,"Session found in global cache, to=%ld\n", tExpiresAt);
+#endif
+
+	t2=malloc(nKey);
+	memcpy(t2,aucKey,nKey);
+	p=LocalCacheAdd(t2,nKey,tExpiresAt);
+	p->aucData=t;
+	p->nData=*pnData;
+	}
+    else
+	{
+	t=p->aucData;
+	*pnData=p->nData;
+	*pbLocal=TRUE;
+#if DEBUG_SESSIONS
+	fprintf(stderr,"Session found in local cache\n");
+#endif
+	}
+    return t;
+    }
+
+#if APACHE_SSL_KEEP_CERTS
+static uchar *MakeCertKey(Cache *pCache,const char *szKey,int *pnLength)
+    {
+    uchar *buf=malloc(*pnLength=pCache->nKey+strlen(szKey));
+    memcpy(buf,pCache->aucKey,pCache->nKey);
+    memcpy(buf+pCache->nKey,szKey,strlen(szKey));
+
+    return buf;
+    }
+
+static int SendCertToServer(void *extra,const char *szKey,const char *szValue)
+    {
+    Cache *pCache=extra;
+    int nKey;
+    uchar *aucKey;
+    Cache *pCertCache;
+
+    aucKey=MakeCertKey(pCache,szKey,&nKey);
+    pCertCache=LocalCacheAdd(aucKey,nKey,pCache->tExpiresAt);
+    pCertCache->aucData=(uchar *)strdup(szValue);
+    pCertCache->nData=strlen(szValue)+1;
+    GlobalCacheAdd(pCertCache->aucKey,pCertCache->nKey,pCertCache->aucData,
+		   pCertCache->nData,pCertCache->tExpiresAt);
+    return 1;
+    }
+
+static uchar *CacheFindS(char *aucKey,int nKey,int *pnData,BOOL *pbLocal)
+    { return CacheFind((uchar *)aucKey,nKey,pnData,pbLocal); }
+
+static void SendCertChainToServer(Cache *pCache,conn_rec *pCurrentConnection)
+    {
+    if(!pCurrentConnection->client->tableCertChain)
+	return;
+    ap_table_do(SendCertToServer,pCache,
+		pCurrentConnection->client->tableCertChain,NULL);
+    }
+
+static void GetCertChainFromServer(uchar *aucSessionID,int nLength,
+				   BOOL bLocal,conn_rec *pCurrentConnection)
+    {
+    int n;
+    char buf[MAX_SESSION_DER];
+
+    ap_assert(nLength < MAX_SESSION_DER);
+    memcpy(buf,aucSessionID,nLength);
+    for(n=1 ; ; ++n)
+	{
+	uchar *t;
+	int nData;
+	int l;
+
+	ap_snprintf(buf+nLength,sizeof buf-nLength,ENV_CERT_CHAIN "%d",n);
+	l=nLength+strlen(buf+nLength);
+
+	t=CacheFindS(buf,l,&nData,&bLocal);
+	if(!t)
+	    break;
+
+	if(!pCurrentConnection->client->tableCertChain)
+	    pCurrentConnection->client->tableCertChain=
+	      ap_make_table(pCurrentConnection->client->pool,5);
+
+	ap_table_set(pCurrentConnection->client->tableCertChain,
+		     buf+nLength,(char *)t);
+	}
+    }
+#endif /* APACHE_SSL_KEEP_CERTS */
+
+static void SendSessionToServer(SSL_SESSION *pSession,
+				conn_rec *pCurrentConnection)
+    {
+    Cache *p;
+    uchar *t;
+    int nLength;
+    SSLConfigRec *pConfig;
+    time_t tExpiresAt;
+
+    if(LocalCacheFind(pSession->session_id,pSession->session_id_length))
+	return;
+
+    pConfig=ap_get_module_config(pCurrentConnection->server->module_config,
+				 &apache_ssl_module);
+    tExpiresAt=time(NULL)+pConfig->tSessionCacheTimeout;
+    SSL_set_timeout(pSession, pConfig->tSessionCacheTimeout);
+
+    t=malloc(pSession->session_id_length);
+    memcpy(t,pSession->session_id,pSession->session_id_length);
+    p=LocalCacheAdd(t,pSession->session_id_length,tExpiresAt);
+
+    nLength=i2d_SSL_SESSION(pSession,NULL);
+    if(nLength <= 0)
+	SSLLogError(pCurrentConnection->server,APLOG_ERR,"Session pickle failed");
+    assert(nLength > 0);
+    assert(nLength <= MAX_SESSION_DER);
+
+    p->aucData=malloc(nLength);
+    t=p->aucData;
+    nLength=i2d_SSL_SESSION(pSession,&t);
+    p->nData=nLength;
+
+    GlobalCacheAdd(p->aucKey,p->nKey,p->aucData,p->nData,tExpiresAt);
+#if APACHE_SSL_KEEP_CERTS
+    SendCertChainToServer(p,pCurrentConnection);
+#endif
+    }
+
+static SSL_SESSION *GetSessionFromServer(uchar *aucSessionID,int nLength,
+					 conn_rec *pCurrentConnection)
+    {
+    SSL_SESSION *pSession;
+    const uchar *t;
+    int nData;
+    BOOL bLocal=FALSE;
+
+#if APACHE_SSL_KEEP_CERTS
+    GetCertChainFromServer(aucSessionID,nLength,bLocal,pCurrentConnection);
+#endif
+
+    t=CacheFind(aucSessionID,nLength,&nData,&bLocal);
+    if(!t)
+	{
+#if DEBUG_SESSIONS
+	fprintf(stderr,"Session not found\n");
+#endif
+	return NULL;
+	}
+
+    pSession=d2i_SSL_SESSION(NULL,&t,nData);
+    if(!pSession)
+	SSLLogErrorToFile(stderr);
+    assert(pSession);
+
+    return pSession;
+    }
+
+static int NewSessionCacheCallback(SSL *pSSL,SSL_SESSION *pNew)
+    {
+    conn_rec *pCurrentConnection=SSL_get_ex_data(pSSL,EX_DATA_CONN_REC);
+#if DEBUG_SESSIONS
+    int n;
+
+    fprintf(stderr,"NewSessionCacheCallback(");
+    for(n=0 ; n < pNew->session_id_length ; ++n)
+	fprintf(stderr,"%02x",pNew->session_id[n]);
+    fprintf(stderr,")\n");
+#endif
+
+    if(pCurrentConnection->client->bRevoked
+       || pCurrentConnection->client->bCRLExpired
+       || pCurrentConnection->client->bNoCRL)
+	{
+	SSL_CTX_remove_session(pSSL->ctx,pNew);
+	return 0;
+	}
+    SendSessionToServer(pNew,pCurrentConnection);
+    return 0;
+    }
+
+static SSL_SESSION *GetSessionCacheCallback(SSL *pSSL,
+					    unsigned char *aucSessionID,
+					    int nLength,int *pCopy)
+    {
+    SSL_SESSION *pSession;
+
+#if DEBUG_SESSIONS
+    int n;
+
+    fprintf(stderr,"GetSessionCacheCallback(");
+    for(n=0 ; n < nLength ; ++n)
+	fprintf(stderr,"%02x",aucSessionID[n]);
+    fprintf(stderr,")\n");
+#endif
+    *pCopy=0;
+    pSession=GetSessionFromServer(aucSessionID,nLength,
+				  SSL_get_ex_data(pSSL,EX_DATA_CONN_REC));
+
+    return pSession;
+    }
+
+#endif /* CACHE_SESSIONS */
+
+static void GetPrivateKey(server_rec *s,SSLConfigRec *pConfig,
+			  const char *szKeyFile)
+    {
+    static table *s_pKeyTable;
+    RSA *prsaKey;
+    FILE *f;
+    int nCount;
+
+    if(!s_pKeyTable)
+	{
+	s_pKeyTable=ap_make_table(s_pPermanentPool,10);
+	assert(s_pKeyTable);
+	}
+    prsaKey=(RSA *)ap_table_get(s_pKeyTable,szKeyFile);
+    if(prsaKey)
+	{
+	pConfig->prsaKey=prsaKey;
+	return;
+	}
+
+    fprintf(stderr,"Reading key for server %s:%d\n",s->server_hostname,
+	    s->port);
+
+    f=fopen(szKeyFile,"r");
+    if(!f)
+	{
+	ap_log_error(APLOG_MARK,APLOG_CRIT,s,"Can't open key file %s",
+		     szKeyFile);
+	exit(1);
+	}
+
+    pConfig->prsaKey=RSA_new();
+    for(nCount=0 ; !localPEM_read_RSAPrivateKey(f,&pConfig->prsaKey,NULL)
+	  ; ++nCount)
+	{
+	if(nCount < 3 && ERR_peek_error() == ERR_PACK(ERR_LIB_EVP,
+						      DECRYPTFINAL,
+						      EVP_R_BAD_DECRYPT))
+	    {
+	    fprintf(stderr,"Bad passphrase - try again\n");
+	    rewind(f);
+	    continue;
+	    }
+	ap_log_error(APLOG_MARK,APLOG_CRIT,s,
+		     "Error reading private key file %s: ",szKeyFile);
+	SSLLogError(s,APLOG_CRIT,NULL);
+	exit(1);
+	}
+    fclose(f);
+
+    ap_table_setn(s_pKeyTable,ap_pstrdup(s_pPermanentPool,szKeyFile),
+		  (const char *)pConfig->prsaKey);
+    }
+
+#if SSLEAY_VERSION_NUMBER < 0x0920
+static int X509NameCompare(X509_NAME **a,X509_NAME **b)
+    {
+    return X509_NAME_cmp(*a,*b);
+    }
+#endif
+
+static void InitCRL(SSLConfigRec *pConfig)
+    {
+    X509_STORE *pStore=SSL_CTX_get_cert_store(pConfig->pSSLCtx);
+    int vflags=0;
+
+    if(pConfig->bUseCRL)
+	vflags|=X509_V_FLAG_CRL_CHECK;
+    if(pConfig->bCRLCheckAll)
+	vflags|=X509_V_FLAG_CRL_CHECK_ALL;
+    X509_STORE_set_flags(pStore,vflags);
+    }
+
+static void GetCertificateAndKey(server_rec *s,pool *p,SSLConfigRec *pConfig)
+    {
+    FILE *f;
+    char szPath[MAX_STRING_LEN];
+#if SSLEAY_VERSION_NUMBER >= 0x0920
+    STACK_OF(X509_NAME) *stackCAs=NULL;
+#endif
+
+    if(pConfig->px509Certificate)
+	{
+	ap_log_error(APLOG_MARK,APLOG_NOERRNO|APLOG_CRIT,s,
+		     "Attempt to reinitialise SSL for server %s",
+		     s->server_hostname);
+	exit(1);
+	}
+
+#if SSLEAY_VERSION_NUMBER < 0x0800
+    pConfig->pSSLCtx=SSL_CTX_new();
+#else
+    pConfig->pSSLCtx=SSL_CTX_new(SSLv23_server_method());
+    if(pConfig->bNoV2)
+	SSL_CTX_set_options(pConfig->pSSLCtx,SSL_OP_NO_SSLv2);
+# if RENEG
+//    s_nVerifyClient=VERIFY_OPTIONAL_NO_CA;
+    SSL_CTX_set_verify(pConfig->pSSLCtx,0,ApacheSSLVerifyCallback);
+# else
+    SSL_CTX_set_verify(pConfig->pSSLCtx,VerifyFlags(pConfig),ApacheSSLVerifyCallback);
+# endif
+#endif
+
+    InitCRL(pConfig);
+
+#if CACHE_SESSIONS
+    SSL_CTX_sess_set_new_cb(pConfig->pSSLCtx,NewSessionCacheCallback);
+    SSL_CTX_sess_set_get_cb(pConfig->pSSLCtx,GetSessionCacheCallback);
+# if APACHE_SSL_EXPORT_CERTS
+    SSL_CTX_set_session_cache_mode(pConfig->pSSLCtx,
+				   SSL_CTX_get_session_cache_mode(pConfig
+								  ->pSSLCtx)
+				   |SSL_SESS_CACHE_NO_INTERNAL_LOOKUP);
+# endif
+#endif
+
+    if(pConfig->szReqCiphers != NULL)
+	{
+	if(!SSL_CTX_set_cipher_list(pConfig->pSSLCtx,pConfig->szReqCiphers))
+	    {
+	    SSLLogError(s,APLOG_CRIT,"unable to set ciphers");
+	    exit(1);
+	    }
+	}
+
+    if(((pConfig->szCACertificateFile || pConfig->szCACertificatePath)
+	&& !SSL_CTX_load_verify_locations(pConfig->pSSLCtx,
+					   pConfig->szCACertificateFile,
+					   pConfig->szCACertificatePath)
+	)
+       || !SSL_CTX_set_default_verify_paths(pConfig->pSSLCtx))
+	{
+	SSLLogError(s,APLOG_CRIT,"error setting verify locations");
+	exit(1);
+	}
+
+    f=fopen(pConfig->szCertificateFile,"r");
+    if(!f)
+	{
+	ap_snprintf(szPath,sizeof szPath,"%s/%s",X509_get_default_cert_dir(),
+		pConfig->szCertificateFile);
+	f=fopen(szPath,"r");
+	if(!f)
+	    {
+	    ap_log_error(APLOG_MARK,APLOG_CRIT|APLOG_NOERRNO,s,
+			 "Can't open certificate file %s, nor %s",
+			 pConfig->szCertificateFile,szPath);
+	    exit(1);
+	    }
+	}
+    else
+	strcpy(szPath,pConfig->szCertificateFile);  /* in case it also contains the key */
+
+    pConfig->px509Certificate=X509_new();
+
+    if(!localPEM_read_X509(f,&pConfig->px509Certificate,NULL))
+	{
+	ap_log_error(APLOG_MARK,APLOG_CRIT|APLOG_NOERRNO,s,
+		     "Error reading server certificate file %s",szPath);
+	SSLLogError(s,APLOG_CRIT,NULL);
+	exit(1);
+	}
+    fclose(f);
+
+    if(pConfig->szKeyFile)
+	if(*pConfig->szKeyFile == '/')
+	    strcpy(szPath,pConfig->szKeyFile);
+	else
+	    ap_snprintf(szPath,sizeof szPath,"%s/private/%s",
+			X509_get_default_cert_area(),pConfig->szKeyFile);
+
+/* Otherwise the path already contains the name of the certificate file */
+    GetPrivateKey(s,pConfig,szPath);
+
+#if SSLEAY_VERSION_NUMBER >= 0x0800
+    SSL_CTX_set_tmp_rsa_callback(pConfig->pSSLCtx,TmpRSACallback);
+#endif
+
+#if SSLEAY_VERSION_NUMBER >= 0x0920
+#if RENEG
+    if(!pConfig->bNoCAList)
+#else
+    if(pConfig->nVerifyClient != VERIFY_OPTIONAL_NO_CA && !pConfig->bNoCAList)
+#endif
+	{
+	if(pConfig->szCACertificateFile || pConfig->szCACertificatePath)
+	    stackCAs=sk_X509_NAME_new(NULL);
+
+	if(pConfig->szCACertificateFile
+	   && !SSL_add_file_cert_subjects_to_stack(stackCAs,
+					      pConfig->szCACertificateFile))
+	    {
+	    SSLLogError(s,APLOG_CRIT,"error reading CA certs");
+	    exit(1);
+	    }
+
+	if(pConfig->szCACertificatePath
+	   && !SSL_add_dir_cert_subjects_to_stack(stackCAs,
+					     pConfig->szCACertificatePath))
+	    {
+	    SSLLogError(s,APLOG_CRIT,"error reading CA certs");
+	    exit(1);
+	    }
+
+	if(stackCAs && sk_X509_NAME_num(stackCAs) > 0)
+	    SSL_CTX_set_client_CA_list(pConfig->pSSLCtx,stackCAs);
+	}
+#elif SSLEAY_VERSION_NUMBER >= 0x0800
+    if(pConfig->szCACertificateFile)
+	SSL_CTX_set_client_CA_list(pConfig->pSSLCtx,
+		SSL_load_client_CA_file(pConfig->szCACertificateFile));
+
+    if(pConfig->szCACertificatePath)
+	{
+	pool *p2=ap_make_sub_pool(p);
+	DIR *d=ap_popendir(p2,pConfig->szCACertificatePath);
+	struct DIR_TYPE *dstruct;
+	STACK *stackCAs;
+
+	/* Note that a side effect is that the CAs will be sorted by name */
+	stackCAs=sk_new(X509NameCompare);
+	if(!d)
+	    {
+	    ap_log_error(APLOG_MARK,APLOG_ERR,s,"Can't open directory %s",
+			 pConfig->szCACertificatePath);
+	    exit(1);
+	    }
+
+	while((dstruct=readdir(d)))
+	    {
+	    STACK *s;
+	    int n;
+	    char *szFile;
+	    
+	    szFile=ap_pstrcat(p2,pConfig->szCACertificatePath,"/",
+			      dstruct->d_name,NULL);
+	    s=SSL_load_client_CA_file(szFile);
+	    for(n=0 ; s && n < sk_num(s) ; ++n)
+		{
+		if(sk_find(stackCAs,sk_value(s,n)) >= 0)
+		    continue;
+	        sk_push(stackCAs,sk_value(s,n));
+		}
+	    }
+
+	sk_set_cmp_func(stackCAs,NULL);
+	SSL_CTX_set_client_CA_list(pConfig->pSSLCtx,stackCAs);
+	ap_pclosedir(p2,d);
+	ap_destroy_pool(p2);
+	}
+#endif
+    }
+
+#if CACHE_SESSIONS
+static server_rec *s_pServer;
+extern uid_t ap_user_id;
+
+static int CacheLauncher(void *cmd,child_info *pInfo)
+    {
+    char a1[1024];
+
+    ap_error_log2stderr(s_pServer);
+    dup2(STDERR_FILENO,STDOUT_FILENO);
+    ap_snprintf(a1,sizeof a1,"%d",ap_user_id);
+    ap_cleanup_for_exec();
+    if(s_szCacheServerDir)
+	{
+	if(chdir(s_szCacheServerDir) < 0)
+	    perror(s_szCacheServerDir);
+	}
+    ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,s_pServer,
+		 "gcache pid is %d",getpid());
+    execl(cmd,cmd,a1,s_szCacheServerPort,s_szSplashUnicast,s_szCacheServerArg1,
+	  s_szCacheServerArg2,NULL);
+    perror(cmd);
+    assert(0);
+    return 1;
+    }
+
+static void LaunchCache(server_rec *s,pool *pPool)
+    {
+    int pid;
+
+    s_pServer=s;
+    printf("Launching... %s\n",s_szCacheServerPath);
+    pid=ap_spawn_child(pPool,CacheLauncher,s_szCacheServerPath,kill_always,
+		       NULL,NULL,NULL);
+    printf("pid=%d\n",pid);
+    }
+#endif
+
+static void InitSSLServer(server_rec *s,pool *p)
+    {
+    int n;
+    server_rec *pMainServer=s;
+    int nSaveStderr;
+
+    /* If you were going to make Apache-SSL add a version string by the new
+       method, here's where to do it. However, it doesn't seem right to me to
+       do that, since if APACHE_SSL is defined, the server is modified,
+       regardless of whether this module is included. - Ben 3/8/98
+
+       ap_add_version_component(APACHE_SSL_VERSION);
+
+       */
+
+    if(!s_pPermanentPool)
+	{
+	s_pPermanentPool=ap_make_sub_pool(NULL);
+	assert(s_pPermanentPool);
+	}
+
+    nSaveStderr=dup(2);
+    close(2);
+    n=dup(1);
+    assert(n == 2);
+
+    InitSSL(s);
+    for ( ; s ; s=s->next)
+	{
+	SSLConfigRec *pConfig=ap_get_module_config(s->module_config,
+						   &apache_ssl_module);
+
+	/* Fix up stuff that may not have been set */
+
+	if(pConfig->bDisabled == UNSET)
+	    pConfig->bDisabled=FALSE;
+#if !RENEG
+	if(pConfig->nVerifyClient == VERIFY_UNSET)
+	    pConfig->nVerifyClient=VERIFY_NONE;
+#endif
+	if(pConfig->bFakeBasicAuth == UNSET)
+	    pConfig->bFakeBasicAuth=FALSE;
+	if(pConfig->bNoCAList == UNSET)
+	    pConfig->bNoCAList=FALSE;
+	if(pConfig->bUseCRL == UNSET)
+	    pConfig->bUseCRL=FALSE;
+	if(pConfig->bCRLCheckAll == UNSET)
+	    pConfig->bCRLCheckAll=FALSE;
+	if(pConfig->bNoV2 == UNSET)
+	    pConfig->bNoV2=FALSE;
+	/* End of fixups */
+
+	if(pConfig->bDisabled)
+	    {
+	    if(!s->port)
+		s->port=DEFAULT_HTTP_PORT;
+	    ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,s,
+			 "SSL disabled for server %s:%d\n",
+			 s->server_hostname,s->port);
+	    continue;
+	    }
+#if CACHE_SESSIONS
+	if(!pConfig->tSessionCacheTimeout)
+	    {
+	    ap_log_error(APLOG_MARK,APLOG_CRIT|APLOG_NOERRNO,s,
+			 "SSLSessionCacheTimeout not set");
+	    exit(1);
+	    }
+#endif
+	if(!s->port)
+	    s->port=DEFAULT_HTTPS_PORT;
+
+	if(!pConfig->szCertificateFile)
+	    {
+	    ap_log_error(APLOG_MARK,APLOG_CRIT|APLOG_NOERRNO,s,
+			 "No SSL Certificate set for server %s:%d",
+			 s->server_hostname,s->port);
+	    exit(1);
+	    }
+#if !RENEG
+	if(pConfig->nVerifyClient < 0
+	   || pConfig->nVerifyClient > VERIFY_OPTIONAL_NO_CA)
+	    {
+	    ap_log_error(APLOG_MARK,APLOG_CRIT|APLOG_NOERRNO,s,
+			 "Bad value for SSLVerifyClient (%d)",
+			 pConfig->nVerifyClient);
+	    exit(1);
+	    }
+#endif
+	GetCertificateAndKey(s,p,pConfig);
+	}
+#if CACHE_SESSIONS
+    LaunchCache(pMainServer,p);
+#endif
+    close(2);
+    n=dup(nSaveStderr);
+    assert(n == 2);
+    close(nSaveStderr);
+    }
+
+/*
+Fake a Basic authentication from the X509 client certificate.
+
+This must be run fairly early on to prevent a real authentication from
+occuring, in particular it must be run before anything else that authenticates
+a user.
+
+This means that the Module statement for this module should be LAST in the
+Configuration file.
+*/
+
+static int FakeBasicAuth(request_rec *r)
+    {
+    SSLConfigRec *pConfig=ap_get_module_config(r->server->module_config,
+					       &apache_ssl_module);
+    char b1[MAX_STRING_LEN],b2[MAX_STRING_LEN];
+    char *t;
+  
+    if(OPTIONAL_SSL)
+	return DECLINED;
+    if(!pConfig->bFakeBasicAuth)
+	return DECLINED;
+    if(r->connection->user)
+	return DECLINED;
+
+    /*
+      Fake a password - which one would be immaterial, as, it seems, an empty
+      password in the users file would match ALL incoming passwords, if only we
+      were using the standard crypt library routine. Unfortunately, SSLeay
+      "fixes" a "bug" in crypt and thus prevents blank passwords from working.
+      (IMHO what they really fix is a bug in the users of the code - failing to
+      program correctly for shadow passwords).
+      We need, therefore, to provide a password. This password can be matched
+      by adding the string "xxj31ZMTZzkVA" as the password in the user file.
+      */
+    ap_snprintf(b1,sizeof b1,"%s:password",
+		r->connection->client->szClientX509
+		? r->connection->client->szClientX509 : "");
+    uuencode(b2,b1,FALSE);
+    t=ap_psprintf(r->pool,"Basic %s",b2);
+    ap_table_setn(r->headers_in,"Authorization",t);
+    return DECLINED;
+    }
+
+static BOOL ApacheSSLSetCertStuff(conn_rec *conn)
+    {
+    SSLConfigRec *pConfig=ap_get_module_config(conn->server->module_config,
+					       &apache_ssl_module);
+    SSL *con=conn->client->ssl;
+    char *cert_file=pConfig->szCertificateFile;
+
+/*  PEM_set_getkey_callback(ApacheSSLKeyCallback); */
+    if(cert_file != NULL)
+	{
+	if(SSL_use_certificate(con,pConfig->px509Certificate) <= 0)
+	    {
+	    SSLLogError(conn->server,APLOG_CRIT,"unable to set certificate");
+	    return FALSE;
+	    }
+	if(SSL_use_RSAPrivateKey(con,pConfig->prsaKey) <= 0)
+	    {
+	    SSLLogError(conn->server,APLOG_CRIT,"unable to set private key");
+	    return FALSE;
+	    }
+	}
+    return TRUE;
+    }
+
+static void ApacheSSLSetupVerify(conn_rec *conn)
+    {
+#if SSLEAY_VERSION_NUMBER < 0x0800
+    SSLConfigRec *pConfig=ap_get_module_config(conn->server->module_config,
+					       &apache_ssl_module);
+    int nVerify=VerifyFlags(pConfig);
+#endif
+
+    conn->client->szClientX509=NULL;
+
+    /* FIXME: this is not ever set, it seems */
+    conn->client->nVerifyError=X509_V_OK;
+
+    conn->client->bRevoked=FALSE;
+    conn->client->bCRLExpired=FALSE;
+    conn->client->bNoCRL=FALSE;
+
+#if SSLEAY_VERSION_NUMBER < 0x0800
+/* Why call this twice?? Ben */  
+    SSL_set_verify(conn->client->ssl,nVerify,ApacheSSLVerifyCallback);
+#endif
+    if(!ApacheSSLSetCertStuff(conn))
+	{
+	ap_log_error(APLOG_MARK,APLOG_ERR|APLOG_NOERRNO,conn->server,
+		     "ApacheSSLSetCertStuff failed");
+	exit(1);
+	}
+#if SSLEAY_VERSION_NUMBER < 0x0800
+    SSL_set_verify(conn->client->ssl,nVerify,ApacheSSLVerifyCallback);
+#endif
+    }
+
+#if FREE_SESSION
+static void CloseSSL(void *_conn)
+    {
+    conn_rec *conn=_conn;
+    SSL *ssl=conn->client->ssl;
+
+    SSL_free(ssl);
+    /*    ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,conn->server,
+		 "Closed");*/
+    }
+#endif
+
+static int SSLSetupConnection(conn_rec *conn)
+    {
+    server_rec *srvr=conn->server;
+    BUFF *fb=conn->client;
+    SSLConfigRec *pConfig=ap_get_module_config(srvr->module_config,
+					       &apache_ssl_module);
+    int r;
+
+    if(pConfig->bDisabled)
+	{
+	fb->ssl=NULL;
+	return TRUE;
+	}
+
+    fb->bRevoked=fb->bCRLExpired=fb->bNoCRL=FALSE;
+
+    ap_conn_timeout("SSL accept timeout",conn);
+
+    ReadRandomFiles(srvr,(RandomFile *)pConfig->aRandomFiles->elts,
+		    pConfig->aRandomFiles->nelts);
+
+#if APACHE_SSL_KEEP_CERTS
+    fb->tableCertChain=NULL;
+#endif
+#if SSLEAY_VERSION_NUMBER >= 0x0920
+    /* Use our current configuration as the session ID context. Do this by
+       actually using its address, which should be invariant */
+    fb->ssl=SSL_new(pConfig->pSSLCtx);
+    r=SSL_set_session_id_context(fb->ssl,(unsigned char *)&pConfig,
+				 sizeof pConfig);
+    ap_assert(r);
+#else
+    fb->ssl=SSL_new(pConfig->pSSLCtx);
+#endif
+    SSL_set_fd(fb->ssl,fb->fd);
+#if FREE_SESSION
+    ap_register_cleanup(conn->pool,conn,CloseSSL,CloseSSL);
+#endif
+#if DEBUG_SSL_STATE
+    SSL_set_info_callback(fb->ssl,InfoCallback);
+    SSL_set_ex_data(fb->ssl,EX_DATA_SERVER_REC,srvr);
+#endif
+    SSL_set_ex_data(fb->ssl,EX_DATA_CONN_REC,conn);
+
+    ApacheSSLSetupVerify(conn);
+
+    while(!SSL_is_init_finished(fb->ssl))
+	{
+	int ret=SSL_accept(fb->ssl);
+	if(ret == 0)
+	    {
+	    /* This appears to happen when a connection is closed without any
+	       data being sent. Since Netscape does this all the time, don't
+	       log as an error.
+	       */
+	    SSLLogError(srvr,APLOG_DEBUG,"SSL_accept returned 0");
+	    fb->flags |= B_EOF | B_EOUT;
+	    return FALSE;
+	    }
+	if (ret < 0)
+	    {
+	    SSLLogError(srvr,APLOG_ERR,"SSL_accept failed");
+	    fb->flags |= B_EOF | B_EOUT;
+	    return FALSE;
+	    }
+
+	if(conn->client->nVerifyError != X509_V_OK)
+	    {
+	    SSLLogError(srvr,APLOG_ERR,"Verification failed");
+	    fb->flags |= B_EOF | B_EOUT;
+	    return FALSE;
+	    }
+
+#if !RENEG
+	if(pConfig->nVerifyClient != VERIFY_NONE)
+	    {
+	    char *s;
+	    X509 *xs;
+	    xs=SSL_get_peer_certificate(fb->ssl);
+	    if(xs)
+		{
+		s=X509_NAME_oneline(X509_get_subject_name(xs),NULL,0);
+		conn->client->szClientX509=ap_pstrdup(conn->pool,s);
+		free(s);
+		}
+	    }
+
+	if(pConfig->nVerifyClient == VERIFY_REQUIRE
+	   && !conn->client->szClientX509)
+	    {
+	    SSLLogError(conn->server,APLOG_ERR,"No client certificate");
+	    return 0;
+	    }
+#endif
+	ap_log_error(APLOG_MARK,APLOG_DEBUG|APLOG_NOERRNO,srvr,"CIPHER is %s",
+		     SSL_get_cipher(conn->client->ssl));
+	}
+
+#if !RENEG
+    /* This should be safe.... so I'll use it */
+    SSL_set_read_ahead(fb->ssl,1);
+#endif
+
+    return TRUE;
+    }
+
+static void SSLSetupConnection2(conn_rec *conn)
+    { SSLSetupConnection(conn); }
+
+static const char *SSLLogFile(cmd_parms *cmd,char *struct_ptr,char *arg)
+    {
+    return "The SSLLogFile directive is no longer used. All logging information now goes to the error log.";
+    }
+
+#if RENEG
+static const char *SSLVerifyClient(cmd_parms *cmd,SSLDirConfigRec *rec,
+				   char *level)
+    {
+    rec->nVerifyClient=atoi(level);
+    if(rec->nVerifyClient < 0 || rec->nVerifyClient > 3)
+	return "Bad value for SSLVerifyClient";
+    return NULL;
+    }
+#endif
+
+static const char *SSLRequireCipher(cmd_parms *cmd,SSLDirConfigRec *rec,
+				    char *cipher)
+    {
+    ap_table_set(rec->tbRequiredCiphers,cipher,"Required");
+    return NULL;
+    }
+
+static const char *SSLBanCipher(cmd_parms *cmd,SSLDirConfigRec *rec,
+				char *cipher)
+    {
+    ap_table_set(rec->tbBannedCiphers,cipher,"Banned");
+    return NULL;
+    }
+
+static const char *SSLRequireSSL(cmd_parms *cmd,SSLDirConfigRec *rec,
+				 char *cipher)
+    {
+    rec->nSSLRequired=SSLREQ_REQUIRED;
+    return NULL;
+    }
+
+static const char *SSLDenySSL(cmd_parms *cmd,SSLDirConfigRec *rec,
+				 char *cipher)
+    {
+    rec->nSSLRequired=SSLREQ_DENIED;
+    return NULL;
+    }
+
+#if APACHE_SSL_EXPORT_CERTS
+static const char *SSLExportCerts(cmd_parms *cmd,SSLDirConfigRec *rec,
+				  char *cipher)
+    {
+    rec->bExportCerts=TRUE;
+    return NULL;
+    }
+#endif
+
+#if CACHE_SESSIONS
+static const char *SSLCacheServerPort(cmd_parms *cmd,char *struct_ptr,
+				      char *arg)
+    {
+    if(strspn(arg,"0123456789") == strlen(arg))
+	s_szCacheServerPort=arg;
+    else
+	s_szCacheServerPort=ap_server_root_relative(cmd->pool,arg);
+    InitGlobalCache(s_szCacheServerPort);
+
+    return NULL;
+    }
+
+static const char *SSLCacheServerPath(cmd_parms *cmd,char *struct_ptr,
+				      char *arg,char *arg2,char *arg3)
+    {
+    s_szCacheServerPath=ap_server_root_relative(cmd->pool,arg);
+    s_szCacheServerArg1=arg2;
+    s_szCacheServerArg2=arg3;
+
+    return NULL;
+    }
+
+static const char *SSLCacheServerDir(cmd_parms *cmd,char *struct_ptr,
+				     char *arg)
+    {
+    s_szCacheServerDir=ap_server_root_relative(cmd->pool,arg);
+
+    return NULL;
+    }
+
+static const char *SSLSplashUnicast(cmd_parms *cmd,char *struct_ptr,
+				    char *arg)
+    {
+    s_szSplashUnicast=arg;
+
+    return NULL;
+    }
+#endif
+
+#if ENGINE_SUPPORT
+static const char *SSLEngineID(cmd_parms *cmd,char *struct_ptr,char *arg)
+    {
+    s_szEngineID=arg;
+    return NULL;
+    }
+#endif
+
+static void SetupRandomFile(RandomFile *prf,char *arg1,char *arg2,char *arg3)
+    {
+    if(!arg3)
+	{
+	arg3=arg2;
+	arg2=arg1;
+	arg1="file";
+	}
+
+    prf->eType=strcasecmp(arg1,"file") ? RAND_EGD : RAND_FILE;
+    prf->szFile=arg2;
+    prf->nBytes=atoi(arg3);
+    }
+
+static const char *SSLRandomFile(cmd_parms *cmd,char *struct_ptr,char *arg1,
+				 char *arg2,char *arg3)
+    {
+    RandomFile rf;
+
+    SetupRandomFile(&rf,arg1,arg2,arg3);
+    ReadRandomFiles(cmd->server,&rf,1);
+
+    return NULL;
+    }
+
+static const char *SSLRandomFilePerConnection(cmd_parms *cmd,char *struct_ptr,
+					      char *arg1,char *arg2,char *arg3)
+    {
+    SSLConfigRec *pConfig=ap_get_module_config(cmd->server->module_config,
+					       &apache_ssl_module);
+    RandomFile *prf=ap_push_array(pConfig->aRandomFiles);
+
+    SetupRandomFile(prf,arg1,arg2,arg3);
+
+    return NULL;
+    }
+
+static const char *set_server_string_slot (cmd_parms *cmd,char *struct_ptr,
+					   char *arg)
+    {
+    char *pConfig=ap_get_module_config(cmd->server->module_config,
+				       &apache_ssl_module);
+  
+    int offset=(int)(long)cmd->info; 
+    *(char **)(pConfig+offset)=arg;
+    return NULL;
+    }
+
+#if RENEG
+static const char *set_dir_int_slot(cmd_parms *cmd,char *pStruct,char *szValue)
+    {
+    int offset=(int)(long)cmd->info;
+    *(int *)(pStruct+offset)=atoi(szValue);
+    return NULL;
+    }
+#endif
+
+static const char *set_server_int_slot (cmd_parms *cmd,char *struct_ptr,
+					char *arg)
+    {
+    char *pConfig=ap_get_module_config(cmd->server->module_config,
+				       &apache_ssl_module);
+  
+    int offset=(int)(long)cmd->info; 
+    *(int *)(pConfig+offset)=atoi(arg);
+    return NULL;
+    }
+
+static const char *set_server_bool_slot (cmd_parms *cmd,char *struct_ptr)
+    {
+    char *pConfig=ap_get_module_config(cmd->server->module_config,
+				       &apache_ssl_module);
+  
+    int offset=(int)(long)cmd->info; 
+    *(BOOL *)(pConfig+offset)=TRUE;
+    return NULL;
+    }
+
+static const char *set_server_bool_slot_false (cmd_parms *cmd,char *struct_ptr)
+    {
+    char *pConfig=ap_get_module_config(cmd->server->module_config,
+				       &apache_ssl_module);
+  
+    int offset=(int)(long)cmd->info; 
+    *(BOOL *)(pConfig+offset)=FALSE;
+    return NULL;
+    }
+
+command_rec ssl_cmds[]=
+    {
+    { "SSLDisable",set_server_bool_slot,
+      (void *)XtOffsetOf(SSLConfigRec,bDisabled),RSRC_CONF,NO_ARGS,
+      "Disable SSL" },
+    { "SSLEnable",set_server_bool_slot_false,
+      (void *)XtOffsetOf(SSLConfigRec,bDisabled),RSRC_CONF,NO_ARGS,
+      "Enable SSL" },
+    { "SSLCertificateFile",set_server_string_slot,
+      (void *)XtOffsetOf(SSLConfigRec,szCertificateFile),RSRC_CONF,TAKE1,
+      "PEM certificate file" },
+    { "SSLCertificateKeyFile",set_server_string_slot,
+      (void *)XtOffsetOf(SSLConfigRec,szKeyFile),RSRC_CONF,TAKE1,
+      "Certificate private key file (assumed to be SSLCertificateFile if absent)" },
+    { "SSLCACertificatePath",set_server_string_slot,
+      (void *)XtOffsetOf(SSLConfigRec,szCACertificatePath),RSRC_CONF,TAKE1,
+      "CA Certificate path (taken from SSL_CERT_DIR if absent)" },
+    { "SSLCACertificateFile",set_server_string_slot,
+      (void *)XtOffsetOf(SSLConfigRec,szCACertificateFile),RSRC_CONF,TAKE1,
+      "CA Certificate file (taken from SSL_CERT_FILE if absent)" },
+    { "SSLNoCAList",set_server_bool_slot,
+      (void *)XtOffsetOf(SSLConfigRec,bNoCAList),RSRC_CONF,NO_ARGS,
+      "Don't send the CA list to the client" },
+#if RENEG
+    { "SSLVerifyDepth",set_dir_int_slot,
+      (void *)XtOffsetOf(SSLDirConfigRec,nVerifyDepth),OR_FILEINFO,TAKE1,
+      "Verify depth (default 0)" },
+    { "SSLVerifyClient",SSLVerifyClient,NULL,OR_FILEINFO,TAKE1,
+      "Verify client (0=no,1=optional,2=required,3=required (CA optional)" },
+#else
+    { "SSLVerifyDepth",set_server_int_slot,
+      (void *)XtOffsetOf(SSLConfigRec,nVerifyDepth),RSRC_CONF,TAKE1,
+      "Verify depth (default 0)" },
+    { "SSLVerifyClient",set_server_int_slot,
+      (void *)XtOffsetOf(SSLConfigRec,nVerifyClient),RSRC_CONF,TAKE1,
+      "Verify client (0=no,1=optional,2=required" },
+#endif
+    { "SSLFakeBasicAuth",set_server_bool_slot,
+      (void *)XtOffsetOf(SSLConfigRec,bFakeBasicAuth),RSRC_CONF,NO_ARGS,
+      "Translate client X509 into a user name" },
+    { "SSLCheckClientDN",set_server_string_slot,
+      (void *)XtOffsetOf(SSLConfigRec,szDNCheckFile),RSRC_CONF,TAKE1,
+      "Check client DN against a list in a file" },
+    { "SSLRequiredCiphers",set_server_string_slot,
+      (void *)XtOffsetOf(SSLConfigRec,szReqCiphers),RSRC_CONF,TAKE1,
+      "Colon-delimited list of required ciphers" },
+    /* Per Directory */
+    { "SSLRequireCipher",SSLRequireCipher,NULL,OR_FILEINFO,ITERATE,
+      "Add a cipher to the per directory list of required ciphers" },
+    { "SSLBanCipher",SSLBanCipher,NULL,OR_FILEINFO,ITERATE,
+      "Add a cipher to the per directory list of banned ciphers" },
+    { "SSLRequireSSL",SSLRequireSSL,NULL,OR_FILEINFO,NO_ARGS,
+      "Require SSL (use to protect directories that should not be served unencrypted)" },
+    { "SSLDenySSL",SSLDenySSL,NULL,OR_FILEINFO,NO_ARGS,
+      "Deny SSL (use to constrain directories that should be served unencrypted)" },
+#if APACHE_SSL_EXPORT_CERTS
+    { "SSLExportClientCertificates",SSLExportCerts,NULL,OR_FILEINFO,NO_ARGS,
+      "Export client certificates and their certificate chain" },
+#endif
+#if CACHE_SESSIONS
+    { "SSLCacheServerPort",SSLCacheServerPort,NULL,RSRC_CONF,TAKE1,
+      "Cache server TCP port number" },
+    { "SSLSessionCacheTimeout",set_server_int_slot,
+      (void *)XtOffsetOf(SSLConfigRec,tSessionCacheTimeout),RSRC_CONF,TAKE1,
+      "Lifetime in seconds of session cache objects" },
+    { "SSLCacheServerPath",SSLCacheServerPath,NULL,RSRC_CONF,TAKE123,
+      "Path of the global cache server and up to two arguments" },
+    { "SSLCacheServerRunDir",SSLCacheServerDir,NULL,RSRC_CONF,TAKE1,
+      "Path for the server to run in (in case of coredumps)" },
+    { "SSLSplashUnicast",SSLSplashUnicast,NULL,RSRC_CONF,TAKE1,
+      "Unicast IP address for Splash! (only needed with splashcache)" },
+#endif
+#if ENGINE_SUPPORT
+    { "SSLEngineID",SSLEngineID,NULL,RSRC_CONF,TAKE1,
+      "Alternative OpenSSL `ENGINE id' to use" },
+#endif
+    { "SSLRandomFile",SSLRandomFile,NULL,RSRC_CONF,TAKE23,
+      "A type (file or EGD), a file to read randomness from and a maximum number of bytes to read" },
+    { "SSLRandomFilePerConnection", SSLRandomFilePerConnection,NULL,RSRC_CONF,
+      TAKE23,
+      "A type (file or EGD), a file to read randomness from and a maximim number of bytes to read on each request" },
+    { "SSLLogFile",SSLLogFile,NULL,RSRC_CONF,TAKE1,
+      "Defunct SSL log file - DO NOT USE" },
+    { "SSLUseCRL",set_server_bool_slot,
+      (void *)XtOffsetOf(SSLConfigRec,bUseCRL),RSRC_CONF,NO_ARGS,
+      "Use a CRL file (found in SSLCACertificatePath)" },
+    { "SSLCRLCheckAll",set_server_bool_slot,
+      (void *)XtOffsetOf(SSLConfigRec,bCRLCheckAll),RSRC_CONF,NO_ARGS,
+      "When using a CRL (see SSLUseCRL), check the entire chain" },
+    { "SSLOnRevocationSetEnv",set_server_string_slot,
+      (void *)XtOffsetOf(SSLConfigRec,szOnRevocationSetEnv),RSRC_CONF,TAKE1,
+      "Set an environment variable on certificate revocation" },
+    { "SSLOnCRLExpirySetEnv",set_server_string_slot,
+      (void *)XtOffsetOf(SSLConfigRec,szOnCRLExpirySetEnv),RSRC_CONF,TAKE1,
+      "Set an environment variable on CRL expiry" },
+    { "SSLOnNoCRLSetEnv",set_server_string_slot,
+      (void *)XtOffsetOf(SSLConfigRec,szOnNoCRLSetEnv),RSRC_CONF,TAKE1,
+      "Set an environment variable if there is no CRL for the client certificate" },
+    { "SSLNoV2",set_server_bool_slot,
+      (void *)XtOffsetOf(SSLConfigRec,bNoV2),RSRC_CONF,NO_ARGS,
+      "Don't use SSL version 2 (highly recommended)" },
+    { NULL }
+    };
+
+module MODULE_VAR_EXPORT apache_ssl_module =
+    {
+    SSL_MODULE_STUFF,
+    InitSSLServer,		/* initializer */
+    CreateSSLDirConfig,		/* dir config creater */
+    MergeSSLDirConfig,		/* dir merger --- default is to override */
+    CreateSSLServerConfig,	/* server config */
+    MergeSSLServerConfig,	/* merge server config */
+    ssl_cmds,			/* command table */
+    NULL,			/* handlers */
+    NULL,			/* filename translation */
+    FakeBasicAuth,		/* check_user_id */
+    NULL,			/* check auth */
+    CheckAccess,		/* check access */
+    NULL,			/* type_checker */
+    /*    SSLFixups,			fixups */
+    NULL,			/* fixups */
+    NULL,			/* logger */
+    NULL,			/* header_parser */
+    NULL,			/* child_init */
+    NULL,			/* child_exit */
+    NULL,			/* post_read_request */
+    SSLSetupConnection2,	/* setup_connection */
+    SSLAddCommonVars		/* add_common_vars */
+    };
diff -ru -ruN apache_1.3.36_orig/src/modules/ssl/crlutil.c apache_1.3.36/src/modules/ssl/crlutil.c
--- apache_1.3.36_orig/src/modules/ssl/crlutil.c	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/src/modules/ssl/crlutil.c	2006-05-18 17:16:13.798322104 +0200
@@ -0,0 +1,101 @@
+#include <openssl/x509.h>
+
+static X509_CRL *load_crl(const char * const infile)
+    {
+    X509_CRL *x=NULL;
+    BIO *in=NULL;
+
+    in=BIO_new(BIO_s_file());
+    if (in == NULL)
+	{
+	ERR_print_errors_fp(stderr);
+	goto end;
+	}
+
+    if (infile == NULL)
+	BIO_set_fp(in,stdin,BIO_NOCLOSE);
+    else if (BIO_read_filename(in,infile) <= 0)
+	{
+	perror(infile);
+	goto end;
+	}
+    x=d2i_X509_CRL_bio(in,NULL);
+    if (x == NULL)
+	{
+	fprintf(stderr,"unable to load CRL\n");
+	ERR_print_errors_fp(stderr);
+	goto end;
+	}
+	
+end:
+    BIO_free(in);
+    return(x);
+    }
+
+static time_t ASN1_GENERALIZEDTIME_get(const ASN1_GENERALIZEDTIME * const s)
+	{
+	struct tm tm;
+	int offset;
+
+	memset(&tm,'\0',sizeof tm);
+
+#define g1(n) ((n)-'0')
+#define g2(p) (g1((p)[0])*10+g1((p)[1]))
+#define g4(p) g1((p)[0])*1000+g1((p)[1])*100+g2(p+2)
+
+	tm.tm_year=g4(s->data)-1900;
+	tm.tm_mon=g2(s->data+4)-1;
+	tm.tm_mday=g2(s->data+6);
+	tm.tm_hour=g2(s->data+8);
+	tm.tm_min=g2(s->data+10);
+	tm.tm_sec=g2(s->data+12);
+	if(s->data[14] == 'Z')
+		offset=0;
+	else
+		{
+		offset=g2(s->data+15)*60+g2(s->data+17);
+		if(s->data[14] == '-')
+			offset= -offset;
+		}
+#undef g1
+#undef g2
+#undef g4
+
+	return timegm(&tm)-offset*60;
+	}
+
+static void next_update(const X509_CRL * const crl)
+    {
+    const ASN1_TIME * const t=X509_CRL_get_nextUpdate(crl);
+    const ASN1_GENERALIZEDTIME * const gt=ASN1_TIME_to_generalizedtime(t,NULL);
+    const time_t tt=ASN1_GENERALIZEDTIME_get(gt);
+    const time_t now=time(NULL);
+
+    printf("%ld\n",tt-now);
+    }
+
+int main(int argc,char **argv)
+    {
+    const char *crlfile;
+    const char *function;
+    X509_CRL *crl;
+
+    if(argc < 3)
+	{
+	fprintf(stderr,"%s <crl> [nextupdate]\n",argv[0]);
+	exit(1);
+	}
+    crlfile=argv[1];
+    function=argv[2];
+
+    crl=load_crl(crlfile);
+    if(!strcmp(function,"nextupdate"))
+	next_update(crl);
+    else
+	{
+	fprintf(stderr,"unknown function: %s\n",function);
+	exit(2);
+	}
+
+    return 0;
+    }
diff -ru -ruN apache_1.3.36_orig/src/modules/ssl/gcache.c apache_1.3.36/src/modules/ssl/gcache.c
--- apache_1.3.36_orig/src/modules/ssl/gcache.c	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/src/modules/ssl/gcache.c	2006-05-18 17:16:13.797322256 +0200
@@ -0,0 +1,285 @@
+/* ====================================================================
+ * Copyright (c) 1995, 1996, 1997, 1998 Ben Laurie.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer. 
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. All advertising materials mentioning features or use of this
+ *    software must display the following acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * 4. The name "Apache-SSL Server" must not be used to
+ *    endorse or promote products derived from this software without
+ *    prior written permission.
+ *
+ * 5. Redistributions of any form whatsoever must retain the following
+ *    acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * THIS SOFTWARE IS PROVIDED BY BEN LAURIE ``AS IS'' AND ANY
+ * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL BEN LAURIE OR
+ * HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of patches to the Apache HTTP server interfacing it
+ * to SSLeay.
+ * For more information on Apache-SSL see http://www.apache-ssl.org.
+ *
+ * For more information on Apache see http://www.apache.org.
+ *
+ * For more information on SSLeay see http://www.psy.uq.oz.au/~ftp/Crypto/.
+ *
+ * Ben Laurie <ben@algroup.co.uk>.
+ *
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <sys/un.h>
+#include <memory.h>
+#include <unistd.h>
+#include <assert.h>
+#include "gcache.h"
+#include "httpd.h"
+
+/* ap_config.h defines signal to be ap_signal... */
+#undef signal
+
+#define DEBUG		0
+
+#if DEBUG
+
+void Dump(const char *szName,uchar *p,int n)
+    {
+    fprintf(stderr,"%s(",szName);
+    for( ; n-- > 0 ; ++p)
+	fprintf(stderr,"%02x",*p);
+    fprintf(stderr,")\n");
+    }
+
+#else
+
+#define Dump(a,b,c)
+
+#endif
+
+/*
+  In an ideal world, this would come from some Apache supplied library, but...
+  well ... just try it :-)
+*/
+char *get_time() {
+    time_t t;
+    char *time_string;
+
+    t=time(NULL);
+    time_string = ctime(&t);
+    time_string[strlen(time_string) - 1] = '\0';
+    return (time_string);
+}
+
+static void HandleAdd(int nFD)
+    {
+    uchar *aucKey;
+    int nKey;
+    Cache *p;
+
+    aucKey=ReadThing(nFD,&nKey);
+    Dump("Add",aucKey,nKey);
+    p=LocalCacheFind(aucKey,nKey);
+    if(p)
+	{
+	free(p->aucData);
+	free(aucKey);
+	}
+    else
+	p=LocalCacheAdd(aucKey,nKey,0);
+    p->aucData=ReadThing(nFD,&p->nData);
+    read(nFD,&p->tExpiresAt,sizeof p->tExpiresAt);
+    }
+
+void HandleGet(int nFD)
+    {
+    uchar *aucKey;
+    int nKey;
+    Cache *p;
+
+    aucKey=ReadThing(nFD,&nKey);
+    Dump("Get",aucKey,nKey);
+    p=LocalCacheFind(aucKey,nKey);
+    if(!p)
+	{
+	WriteThing(nFD,NULL,0);
+#if DEBUG
+	fprintf(stderr,"Miss!\n");
+#endif
+	}
+    else
+	{
+	WriteThing(nFD,p->aucData,p->nData);
+	write(nFD,&p->tExpiresAt,sizeof p->tExpiresAt);
+	}
+    }
+	
+void HandleClient(int nFD)
+    {
+    static char c;
+    int n;
+
+    n=read(nFD,&c,1);
+    assert(n == 1);
+    switch(c)
+	{
+    case ADD_TO_CACHE:
+	HandleAdd(nFD);
+	break;
+
+    case GET_FROM_CACHE:
+	HandleGet(nFD);
+	break;
+
+    default:
+	fprintf(stderr,"request was %d\n",c);
+	assert(!"Unknown request");
+	}
+    }
+
+typedef union
+    {
+    struct sockaddr_in in;
+    struct sockaddr_un un;
+    } SockAddr;
+
+int main(int argc,char **argv)
+    {
+    const char *szPort;
+    int nUserID;
+    int nPort;
+    int nSocket;
+    SockAddr saServer;
+    int one=1;
+    int nSize;
+
+    if(argc != 3)
+	{
+	fprintf(stderr,"%s <user id> <port>\n",argv[0]);
+	exit(1);
+	}
+
+    /* Some systems unhelpfully kill us with this... */
+    signal(SIGPIPE,SIG_IGN);
+
+    fprintf(stderr,"[%s] %s started\n",get_time(),argv[0]);
+
+    nUserID=atoi(argv[1]);
+    szPort=argv[2];
+
+    nPort=atoi(szPort);
+
+    if(nPort)
+	nSocket=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
+    else
+	nSocket=socket(AF_UNIX,SOCK_STREAM,0);
+    if(nSocket < 0)
+	{
+	perror("socket");
+	exit(2);
+	}
+
+    if(nPort
+       && setsockopt(nSocket,SOL_SOCKET,SO_REUSEADDR,(char *)&one,sizeof one) < 0)
+	{
+	perror("setsockopt");
+        exit(7);
+	}
+
+    memset(&saServer,0,sizeof saServer);
+    if(nPort)
+	{
+	saServer.in.sin_family=AF_INET;
+	saServer.in.sin_port=htons(nPort);
+	nSize=sizeof saServer.in;
+	}
+    else
+	{
+	if(strlen(szPort) >= sizeof saServer.un.sun_path)
+	    exit(6);
+	saServer.un.sun_family=AF_UNIX;
+	unlink(szPort);
+	strcpy(saServer.un.sun_path,szPort);
+	nSize=sizeof saServer.un;
+	}
+
+    if(bind(nSocket,(struct sockaddr *)&saServer,nSize) < 0)
+	{
+	perror("bind");
+	exit(3);
+	}
+
+    if(listen(nSocket,512) < 0)
+	{
+	perror("listen");
+	exit(4);
+	}
+
+    if(!nPort)
+	{
+	chmod(szPort,0700);
+	chown(szPort,nUserID,-1);
+	}
+
+    if(!geteuid() && setuid(nUserID) == -1)
+	{
+	fprintf(stderr,"[%s] gcache: user id=%d: ",get_time(),nUserID);
+	perror("setuid");
+	exit(5);
+	}
+
+    for( ; ; )
+	{
+	int nFD;
+	int nLen;
+	SockAddr saClient;
+
+	nLen=nSize;
+	nFD=accept(nSocket,(struct sockaddr *)&saClient,&nLen);
+	if(nFD < 0)
+	    {
+	    fprintf(stderr,"[%s] gcache: accept failed, error=%d\n",get_time(),
+		    errno);
+	    continue;
+	    }
+	if(!nPort || ntohl(saClient.in.sin_addr.s_addr) == 0x7f000001)
+	    HandleClient(nFD);
+	else
+	    fprintf(stderr,
+		    "[%s] gcache: unexpected connect from %s, ignored\n",
+		    get_time(),inet_ntoa(saClient.in.sin_addr));
+	    
+	close(nFD);
+	}
+
+    return 0;
+    }
diff -ru -ruN apache_1.3.36_orig/src/modules/ssl/gcacheclient.c apache_1.3.36/src/modules/ssl/gcacheclient.c
--- apache_1.3.36_orig/src/modules/ssl/gcacheclient.c	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/src/modules/ssl/gcacheclient.c	2006-05-18 17:16:13.798322104 +0200
@@ -0,0 +1,155 @@
+/* ====================================================================
+ * Copyright (c) 1995, 1996, 1997, 1998 Ben Laurie.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer. 
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. All advertising materials mentioning features or use of this
+ *    software must display the following acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * 4. The name "Apache-SSL Server" must not be used to
+ *    endorse or promote products derived from this software without
+ *    prior written permission.
+ *
+ * 5. Redistributions of any form whatsoever must retain the following
+ *    acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * THIS SOFTWARE IS PROVIDED BY BEN LAURIE ``AS IS'' AND ANY
+ * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL BEN LAURIE OR
+ * HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of patches to the Apache HTTP server interfacing it
+ * to SSLeay.
+ * For more information on Apache-SSL see http://www.apache-ssl.org.
+ *
+ * For more information on Apache see http://www.apache.org.
+ *
+ * For more information on SSLeay see http://www.psy.uq.oz.au/~ftp/Crypto/.
+ *
+ * Ben Laurie <ben@algroup.co.uk>.
+ *
+ */
+
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <sys/un.h>
+#include <stdlib.h>
+#include <memory.h>
+#include <assert.h>
+#include <unistd.h>
+#include <string.h>
+#include "gcache.h"
+
+static const char *s_szServerPort;
+
+void InitGlobalCache(const char *szPort)
+    {
+    s_szServerPort=szPort;
+    }
+
+typedef union
+    {
+    struct sockaddr_in in;
+    struct sockaddr_un un;
+    } SockAddr;
+
+static int OpenServer()
+    {
+    int nSize;
+    int nSocket;
+    SockAddr saServer;
+    int nServerPort=atoi(s_szServerPort);
+
+    if(nServerPort)
+	nSocket=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
+    else
+	nSocket=socket(AF_UNIX,SOCK_STREAM,0);
+    if(nSocket < 0)
+	{
+	perror("socket");
+	exit(2);
+	}
+
+    memset(&saServer,0,sizeof saServer);
+    if(nServerPort)
+	{
+	saServer.in.sin_family=AF_INET;
+	saServer.in.sin_addr.s_addr=htonl(0x7f000001);
+	saServer.in.sin_port=htons(nServerPort);
+	nSize=sizeof saServer.in;
+	}
+    else
+	{
+	assert(strlen(s_szServerPort) < sizeof saServer.un.sun_path);
+	saServer.un.sun_family=AF_UNIX;
+	strcpy(saServer.un.sun_path,s_szServerPort);
+	nSize=sizeof saServer.un;
+	}
+
+    if(connect(nSocket,(struct sockaddr *)&saServer,nSize))
+       {
+       fprintf(stderr,"Failed to connect to socket: %s\n",s_szServerPort);
+       perror("connect");
+       assert(!"couldn't connect to socket");
+       }
+    return nSocket;
+    }
+
+static void WriteCommand(int nFD,enum Command eCommand)
+    {
+    static char c;
+
+    c=eCommand;
+    write(nFD,&c,1);
+    }
+
+void GlobalCacheAdd(uchar *aucKey,int nKey,uchar *aucData,
+		int nData,time_t tExpiresAt)
+    {
+    int nFD=OpenServer();
+
+    WriteCommand(nFD,ADD_TO_CACHE);
+    WriteThing(nFD,aucKey,nKey);
+    WriteThing(nFD,aucData,nData);
+    write(nFD,&tExpiresAt,sizeof tExpiresAt);
+    close(nFD);
+    }
+
+uchar *GlobalCacheGet(uchar *aucKey,int nKey,int *pnData,time_t *ptExpiresAt)
+    {
+    int nFD=OpenServer();
+    uchar *ret;
+
+    WriteCommand(nFD,GET_FROM_CACHE);
+    WriteThing(nFD,aucKey,nKey);
+    ret=ReadThing(nFD,pnData);
+    if(ret)
+	read(nFD,ptExpiresAt,sizeof *ptExpiresAt);
+    close(nFD);
+    return ret;
+    }
diff -ru -ruN apache_1.3.36_orig/src/modules/ssl/gcachecommon.c apache_1.3.36/src/modules/ssl/gcachecommon.c
--- apache_1.3.36_orig/src/modules/ssl/gcachecommon.c	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/src/modules/ssl/gcachecommon.c	2006-05-18 17:16:13.797322256 +0200
@@ -0,0 +1,185 @@
+/* ====================================================================
+ * Copyright (c) 1995, 1996, 1997, 1998 Ben Laurie.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer. 
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. All advertising materials mentioning features or use of this
+ *    software must display the following acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * 4. The name "Apache-SSL Server" must not be used to
+ *    endorse or promote products derived from this software without
+ *    prior written permission.
+ *
+ * 5. Redistributions of any form whatsoever must retain the following
+ *    acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * THIS SOFTWARE IS PROVIDED BY BEN LAURIE ``AS IS'' AND ANY
+ * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL BEN LAURIE OR
+ * HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of patches to the Apache HTTP server interfacing it
+ * to SSLeay.
+ * For more information on Apache-SSL see http://www.apache-ssl.org.
+ *
+ * For more information on Apache see http://www.apache.org.
+ *
+ * For more information on SSLeay see http://www.psy.uq.oz.au/~ftp/Crypto/.
+ *
+ * Ben Laurie <ben@algroup.co.uk>.
+ *
+ */
+
+#include <unistd.h>
+#include <assert.h>
+#include <stdlib.h>
+#include <memory.h>
+#include <time.h>
+#include <stdio.h>
+#include "gcache.h"
+
+#define INIT_CACHE_SIZE	1000
+
+void WriteThing(int nFD,uchar *aucThing,int nLength)
+    {
+    static unsigned short usLength;
+
+    usLength=(unsigned short)nLength;
+    write(nFD,&usLength,sizeof usLength);
+    write(nFD,aucThing,usLength);
+    }
+
+static int saferead(int nFD,void *pBuf,int nLength)
+    {
+    int n;
+    char *acBuf=pBuf;
+
+    for(n=0 ; n < nLength ; )
+	{
+	int r;
+
+	r=read(nFD,acBuf+n,nLength-n);
+	if(r < 0)
+	    {
+	    perror("read in saferead");
+	    return r;
+	    }
+	if(r == 0)
+	    {
+	    fprintf(stderr,"EOF in saferead after %d bytes\n",n);
+	    return n;
+	    }
+	n+=r;
+	}
+
+    return n;
+    }
+
+uchar *ReadThing(int nFD,int *pnLength)
+    {
+    static unsigned short usLength;
+    uchar *aucThing;
+    int nRead;
+
+    nRead=saferead(nFD,&usLength,sizeof usLength);
+    assert(nRead == sizeof usLength);
+    if(!usLength)
+	{
+	*pnLength=0;
+	return NULL;
+	}
+    aucThing=malloc(usLength);
+    assert(aucThing);
+    nRead=saferead(nFD,aucThing,usLength);
+    assert(nRead == usLength);
+
+    *pnLength=usLength;
+    return aucThing;
+    }
+
+static Cache *pCache;
+static int nCache;
+static int nCacheMax;
+
+static void ExpireCache()
+    {
+    int n,m;
+    time_t tNow=time(NULL);
+
+    for(n=m=0 ; n < nCache ; ++m)
+	if(pCache[m].tExpiresAt >= tNow)
+	    {
+	    pCache[n]=pCache[m];
+	    ++n;
+	    }
+	else
+	    {
+	    --nCache;
+	    free(pCache[m].aucKey);
+	    free(pCache[m].aucData);
+	    }
+    }
+
+Cache *LocalCacheFind(uchar *aucKey,int nLength)
+    {
+    int n;
+
+    ExpireCache();
+
+    for(n=0 ; n < nCache ; ++n)
+	if(pCache[n].nKey == nLength
+	   && !memcmp(pCache[n].aucKey,aucKey,nLength))
+	    return &pCache[n];
+    return NULL;
+    }
+
+Cache *LocalCacheAdd(uchar *aucKey,int nKey,time_t tExpiresAt)
+    {
+    int n;
+
+    ExpireCache();
+    n=nCache++;
+    if(n >= nCacheMax)
+	{
+	if(nCacheMax)
+	    {
+	    nCacheMax*=2;
+	    pCache=realloc(pCache,nCacheMax*sizeof *pCache);
+	    }
+	else
+	    {
+	    nCacheMax=INIT_CACHE_SIZE;
+	    pCache=malloc(nCacheMax*sizeof *pCache);
+	    }
+	assert(pCache);
+	}
+	    
+    pCache[n].aucKey=aucKey;
+    pCache[n].nKey=nKey;
+    pCache[n].tExpiresAt=tExpiresAt;
+
+    return &pCache[n];
+    }
diff -ru -ruN apache_1.3.36_orig/src/modules/ssl/splashcache.c apache_1.3.36/src/modules/ssl/splashcache.c
--- apache_1.3.36_orig/src/modules/ssl/splashcache.c	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/src/modules/ssl/splashcache.c	2006-05-18 17:16:13.797322256 +0200
@@ -0,0 +1,339 @@
+/* ====================================================================
+ * Copyright (c) 1995, 1996, 1997, 1998, 2000 Ben Laurie.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer. 
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. All advertising materials mentioning features or use of this
+ *    software must display the following acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * 4. The name "Apache-SSL Server" must not be used to
+ *    endorse or promote products derived from this software without
+ *    prior written permission.
+ *
+ * 5. Redistributions of any form whatsoever must retain the following
+ *    acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * THIS SOFTWARE IS PROVIDED BY BEN LAURIE ``AS IS'' AND ANY
+ * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL BEN LAURIE OR
+ * HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of patches to the Apache HTTP server interfacing it
+ * to SSLeay.
+ * For more information on Apache-SSL see http://www.apache-ssl.org.
+ *
+ * For more information on Apache see http://www.apache.org.
+ *
+ * For more information on SSLeay see http://www.psy.uq.oz.au/~ftp/Crypto/.
+ *
+ * Ben Laurie <ben@algroup.co.uk>.
+ *
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <sys/un.h>
+#include <memory.h>
+#include <unistd.h>
+#include <assert.h>
+#include "gcache.h"
+#include "httpd.h"
+#include <splash.h>
+
+/* ap_config.h defines signal to be ap_signal... */
+#undef signal
+
+#define DEBUG		1
+
+#if DEBUG
+
+void Dump(const char *szName,uchar *p,int n)
+    {
+    fprintf(stderr,"%s(",szName);
+    for( ; n-- > 0 ; ++p)
+	fprintf(stderr,"%02x",*p);
+    fprintf(stderr,")\n");
+    }
+
+#else
+
+#define Dump(a,b,c)
+
+#endif
+
+/*
+  In an ideal world, this would come from some Apache supplied library, but...
+  well ... just try it :-)
+*/
+char *get_time() {
+    time_t t;
+    char *time_string;
+
+    t=time(NULL);
+    time_string = ctime(&t);
+    time_string[strlen(time_string) - 1] = '\0';
+    return (time_string);
+}
+
+static void HandleAdd(int nFD,SplashDB *pDB)
+    {
+    uchar *aucKey;
+    int nKey;
+    int nData;
+    uchar *aucData;
+    Cache *p;
+    time_t tExpiresAt;
+
+    aucKey=ReadThing(nFD,&nKey);
+    Dump("Add",aucKey,nKey);
+    
+    aucData=ReadThing(nFD,&nData);
+    read(nFD,&tExpiresAt,sizeof tExpiresAt);
+
+    splashSet(pDB,nKey,aucKey,nData,aucData,tExpiresAt);
+
+    free(aucData);
+    free(aucKey);
+    }
+
+void HandleGet(int nFD,SplashDB *pDB)
+    {
+    uchar *aucKey;
+    int nKey;
+    char *acData;
+    int nData;
+    time_t tExpiresAt;
+
+    aucKey=ReadThing(nFD,&nKey);
+    Dump("Get",aucKey,nKey);
+    
+    if(!splashGet(pDB,nKey,aucKey,&nData,&acData,&tExpiresAt))
+	{
+	WriteThing(nFD,NULL,0);
+#if DEBUG
+	fprintf(stderr,"Miss!\n");
+#endif
+	}
+    else
+	{
+	WriteThing(nFD,acData,nData);
+	write(nFD,&tExpiresAt,sizeof tExpiresAt);
+	free(acData);
+	}
+    free(aucKey);
+    }
+	
+void HandleClient(int nFD,SplashDB *pDB)
+    {
+    static char c;
+    int n;
+
+    n=read(nFD,&c,1);
+    assert(n == 1);
+    switch(c)
+	{
+    case ADD_TO_CACHE:
+	HandleAdd(nFD,pDB);
+	break;
+
+    case GET_FROM_CACHE:
+	HandleGet(nFD,pDB);
+	break;
+
+    default:
+	fprintf(stderr,"request was %d\n",c);
+	assert(!"Unknown request");
+	}
+    }
+
+typedef union
+    {
+    struct sockaddr_in in;
+    struct sockaddr_un un;
+    } SockAddr;
+
+static int s_nSize;
+static int s_nPort;
+
+static void Acceptor(int nSocket,int nDummy,void *pDB_)
+    {
+    SplashDB *pDB=pDB_;
+    int nFD;
+    int nLen;
+    SockAddr saClient;
+
+    nLen=s_nSize;
+    nFD=accept(nSocket,(struct sockaddr *)&saClient,&nLen);
+    if(nFD < 0)
+	{
+	fprintf(stderr,"[%s] splashcache: accept failed, error=%d\n",
+		get_time(),errno);
+	return;
+	}
+    if(!s_nPort || ntohl(saClient.in.sin_addr.s_addr) == 0x7f000001)
+	HandleClient(nFD,pDB);
+    else
+	fprintf(stderr,
+		"[%s] splashcache: unexpected connect from %s, ignored\n",
+		get_time(),inet_ntoa(saClient.in.sin_addr));
+	    
+    close(nFD);
+    }
+
+void run(char **argv)
+    {
+    int nUserID;
+    const char *szPort;
+    const char *szUnicast;
+    const char *szSplashPort;
+    const char *szSplashDB;
+    SplashContext *pSplashCtx;
+    SplashError eError;
+    SplashDB *pSplashDB;
+    int nSocket;
+    int one=1;
+    SockAddr saServer;
+
+    /* Some systems unhelpfully kill us with this... */
+    signal(SIGPIPE,SIG_IGN);
+
+    fprintf(stderr,"[%s] %s started\n",get_time(),argv[0]);
+
+    nUserID=atoi(argv[1]);
+    szPort=argv[2];
+    szUnicast=argv[3];
+    szSplashPort=argv[4];
+    szSplashDB=argv[5];
+
+    pSplashCtx=splashInit(szSplashPort,&eError);
+    if(!pSplashCtx)
+	{
+	fprintf(stderr,"splashInit failed, error %d\n",eError);
+	exit(7);
+	}
+    pSplashDB=splashOpenDB(pSplashCtx,szSplashDB,szUnicast,60);
+    if(!pSplashDB)
+	{
+	fprintf(stderr,"splashOpenDB failed\n");
+	exit(8);
+	}
+
+    s_nPort=atoi(szPort);
+
+    if(s_nPort)
+	nSocket=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
+    else
+	nSocket=socket(AF_UNIX,SOCK_STREAM,0);
+    if(nSocket < 0)
+	{
+	perror("socket");
+	exit(2);
+	}
+
+    if(s_nPort
+       && setsockopt(nSocket,SOL_SOCKET,SO_REUSEADDR,(char *)&one,
+		     sizeof one) < 0)
+	{
+	perror("setsockopt");
+        exit(7);
+	}
+
+    memset(&saServer,0,sizeof saServer);
+    if(s_nPort)
+	{
+	saServer.in.sin_family=AF_INET;
+	saServer.in.sin_port=htons(s_nPort);
+	s_nSize=sizeof saServer.in;
+	}
+    else
+	{
+	if(strlen(szPort) >= sizeof saServer.un.sun_path)
+	    exit(6);
+	saServer.un.sun_family=AF_UNIX;
+	unlink(szPort);
+	strcpy(saServer.un.sun_path,szPort);
+	s_nSize=sizeof saServer.un;
+	}
+
+    if(bind(nSocket,(struct sockaddr *)&saServer,s_nSize) < 0)
+	{
+	perror("bind");
+	exit(3);
+	}
+
+    if(listen(nSocket,512) < 0)
+	{
+	perror("listen");
+	exit(4);
+	}
+
+    if(!s_nPort)
+	{
+	chmod(szPort,0700);
+	chown(szPort,nUserID,-1);
+	}
+
+    if(!geteuid() && setuid(nUserID) == -1)
+	{
+	fprintf(stderr,"[%s] gcache: user id=%d: ",get_time(),nUserID);
+	perror("setuid");
+	exit(5);
+	}
+
+    splashAttachFD(nSocket,SPLASH_READ_FD,Acceptor,0,pSplashDB);
+
+    splashHandleEvents(0);
+    }
+
+
+int main(int argc,char **argv)
+    {
+    if(argc != 6)
+	{
+	fprintf(stderr,"%s <user id> <port> <unicast address> <splash port> <database>\n",
+		argv[0]);
+	exit(1);
+	}
+
+    for( ; ; )
+	{
+	int status;
+	pid_t pid;
+	pid_t child;
+
+	pid=fork();
+	if(!pid)
+	    {
+	    run(argv);
+	    exit(1);
+	    }
+	child=wait(&status);
+	assert(child == pid);
+	}
+    }
diff -ru -ruN apache_1.3.36_orig/src/modules/ssl-keynote/Makefile.tmpl apache_1.3.36/src/modules/ssl-keynote/Makefile.tmpl
--- apache_1.3.36_orig/src/modules/ssl-keynote/Makefile.tmpl	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/src/modules/ssl-keynote/Makefile.tmpl	2006-05-18 17:16:13.796322408 +0200
@@ -0,0 +1,10 @@
+# Directories
+#-I$(KEYNOTE_BASE)
+#-L$(KEYNOTE_BASE) -lkeynote
+
+INCLUDES=$(INCLUDES1) $(INCLUDES0) $(EXTRA_INCLUDES) -I$(KEYNOTE_BASE)
+
+#Dependencies
+
+$(OBJS) $(OBJS_PIC): Makefile
+
diff -ru -ruN apache_1.3.36_orig/src/modules/ssl-keynote/apache_ssl_keynote.c apache_1.3.36/src/modules/ssl-keynote/apache_ssl_keynote.c
--- apache_1.3.36_orig/src/modules/ssl-keynote/apache_ssl_keynote.c	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/src/modules/ssl-keynote/apache_ssl_keynote.c	2006-05-18 17:16:13.797322256 +0200
@@ -0,0 +1,315 @@
+/* ====================================================================
+ * Copyright (c) 1999 Ben Laurie.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer. 
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. All advertising materials mentioning features or use of this
+ *    software must display the following acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * 4. The name "Apache-SSL Server" must not be used to
+ *    endorse or promote products derived from this software without
+ *    prior written permission.
+ *
+ * 5. Redistributions of any form whatsoever must retain the following
+ *    acknowledgment:
+ *    "This product includes software developed by Ben Laurie
+ *    for use in the Apache-SSL HTTP server project."
+ *
+ * THIS SOFTWARE IS PROVIDED BY BEN LAURIE ``AS IS'' AND ANY
+ * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL BEN LAURIE OR
+ * HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of patches to the Apache HTTP server interfacing it
+ * to SSLeay.
+ * For more information on Apache-SSL see http://www.apache-ssl.org.
+ *
+ * For more information on Apache see http://www.apache.org.
+ *
+ * For more information on SSLeay see http://www.psy.uq.oz.au/~ftp/Crypto/.
+ *
+ * Ben Laurie <ben@algroup.co.uk>.
+ *
+ */
+
+#include "httpd.h"
+#include "http_config.h"
+#include "http_log.h"
+#include "util_script.h"
+#include <keynote.h>
+
+MODULE_VAR_EXPORT module apache_ssl_keynote_module;
+
+typedef struct
+    {
+    array_header *aszTrustedAssertions;
+    array_header *aszIssuerTemplates;
+    } KeyNoteDirConfig;
+
+static void *CreateKeyNoteDirConfig(pool *p,char *dummy)
+    {
+    KeyNoteDirConfig *pConfig=ap_pcalloc(p,sizeof(KeyNoteDirConfig));
+
+    pConfig->aszTrustedAssertions=
+      ap_make_array(p,1,sizeof *pConfig->aszTrustedAssertions);
+    pConfig->aszIssuerTemplates=
+      ap_make_array(p,1,sizeof *pConfig->aszIssuerTemplates);
+
+    return pConfig;
+    }
+
+#define MergeArray(member)	new->member=ap_append_arrays(p,base->member, \
+							     add->member)
+
+static void *MergeKeyNoteDirConfig(pool *p,void *basev,void *addv)
+    {
+    KeyNoteDirConfig *base=(KeyNoteDirConfig *)basev;
+    KeyNoteDirConfig *add=(KeyNoteDirConfig *)addv;
+    KeyNoteDirConfig *new=
+      (KeyNoteDirConfig *)ap_palloc(p,sizeof(KeyNoteDirConfig));
+
+    MergeArray(aszTrustedAssertions);
+    MergeArray(aszIssuerTemplates);
+
+    return new;
+    }
+
+static void SetKeyNoteEnvironment(int nSession,request_rec *r)
+    {
+    array_header *pArray;
+    table_entry *pElts;
+    int n;
+
+    ap_add_common_vars(r);
+    ap_add_cgi_vars(r);
+
+    pArray=ap_table_elts(r->subprocess_env);
+    pElts=(table_entry *)pArray->elts;
+
+    for(n=0 ; n < pArray->nelts ; ++n)
+	{
+	if(!pElts[n].key)
+	    continue;
+printf("env: CGI_%s=%s\n",pElts[n].key,pElts[n].val);
+	kn_add_action(nSession,ap_pstrcat(r->pool,"CGI_",pElts[n].key,NULL),
+		      pElts[n].val,0);
+	}
+    kn_add_action(nSession,"app_domain","Apache-SSL",0);
+    }
+
+// Not a very efficient at this stage, but wtf, eh?
+static char *Substitute(pool *p,const char *szSource,const char *szTag,
+			const char *szValue)
+    {
+    const char *s,*t;
+    char *szResult="";
+
+    for(s=t=szSource ; (s=strstr(s,szTag)) ; s+=strlen(szTag),t=s)
+	{
+	char *tmp=ap_pstrndup(p,t,s-t);
+	szResult=ap_pstrcat(p,szResult,tmp,szValue,NULL);
+	}
+    szResult=ap_pstrcat(p,szResult,t,NULL);
+
+    return szResult;
+    }
+
+static int AddIssuerAssertions(pool *p,KeyNoteDirConfig *pConfig,int nSession,
+			       request_rec *r)
+    {
+    int n;
+    char **aszIssuerTemplates=(char **)pConfig->aszIssuerTemplates->elts;
+    int nIssuerTemplates=pConfig->aszIssuerTemplates->nelts;
+    table *t=r->subprocess_env;
+
+    for(n=0 ; n < nIssuerTemplates ; ++n)
+	{
+	int nRet;
+	char *szAssertion=Substitute(p,aszIssuerTemplates[n],"@@ISSUER@@",
+				     ap_table_get(t,"SSL_CLIENT_I_DN"));
+	szAssertion=Substitute(p,szAssertion,"@@SUBJECT@@",
+			       ap_table_get(t,"SSL_CLIENT_DN"));
+	nRet=kn_add_assertion(nSession,szAssertion,strlen(szAssertion),
+				  ASSERT_FLAG_LOCAL);
+printf("Adding issuer assertion: %s\n",szAssertion);
+	if(keynote_errno)
+	    {
+	    ap_log_error(APLOG_MARK,APLOG_ERR|APLOG_NOERRNO,
+			 r->connection->server,
+			 "Can't add KeyNote assertion (keynote_errno=%d): %s",
+			 keynote_errno,szAssertion);
+	    return FORBIDDEN;
+	    }
+	}
+
+    return OK;
+    }
+
+static int AddTrustedAssertions(KeyNoteDirConfig *pConfig,int nSession,
+				request_rec *r)
+    {
+    int n;
+    char **aszTrustedAssertions=(char **)pConfig->aszTrustedAssertions->elts;
+    int nTrustedAssertions=pConfig->aszTrustedAssertions->nelts;
+
+    for(n=0 ; n < nTrustedAssertions ; ++n)
+	{
+	int nRet=kn_add_assertion(nSession,aszTrustedAssertions[n],
+				  strlen(aszTrustedAssertions[n]),
+				  ASSERT_FLAG_LOCAL);
+printf("Adding assertion: %s\n",aszTrustedAssertions[n]);
+	if(keynote_errno)
+	    {
+	    ap_log_error(APLOG_MARK,APLOG_ERR|APLOG_NOERRNO,
+			 r->connection->server,
+			 "Can't add KeyNote assertion (keynote_errno=%d): %s",
+			 keynote_errno,aszTrustedAssertions[n]);
+	    return FORBIDDEN;
+	    }
+	}
+
+    return OK;
+    }
+
+static int CheckKeyNoteAssertions(request_rec *r)
+    {
+    static BOOL bChecking;
+    KeyNoteDirConfig *pConfig=(KeyNoteDirConfig *)
+      ap_get_module_config(r->per_dir_config,&apache_ssl_keynote_module);
+    // NB: this currently pointlessly eats randomness
+    int nSession=kn_init();
+    static const char *aszResults[]={"deny","permit"};
+    int nResult;
+    //    char *szAuthorizer=ap_pstrcat(r->pool,"x509-dn:",
+    //				  r->connection->client->szClientX509,NULL);
+    char *szAuthorizer=r->connection->client->szClientX509;
+    int nRet=OK;
+
+    if(bChecking)
+	return OK;
+
+    bChecking=TRUE;	// we can reenter because we call cgi_add_vars, which does a sub_req_lookup, which calls check_access
+
+    SetKeyNoteEnvironment(nSession,r);
+
+    keynote_errno=0;
+
+    //    kn_add_authorizer(nSession,"dummy");	// for now...
+
+printf("auth=\"%s\"\n",szAuthorizer);
+    kn_add_authorizer(nSession,szAuthorizer);
+
+    nRet=AddTrustedAssertions(pConfig,nSession,r);
+    if(nRet != OK)
+	goto done;
+
+    nRet=AddIssuerAssertions(r->pool,pConfig,nSession,r);
+    if(nRet != OK)
+	goto done;
+
+    nResult=kn_do_query(nSession,aszResults,2);
+printf("result=%d/%d\n",nResult,keynote_errno);
+    if(keynote_errno)
+	{
+	ap_log_error(APLOG_MARK,APLOG_ERR|APLOG_NOERRNO,
+		     r->connection->server,
+		     "Can't evaluate KeyNote query (keynote_errno=%d)",
+		     keynote_errno);
+	nRet=FORBIDDEN;
+	}
+    else if(nResult == 0)
+	nRet=FORBIDDEN;
+    else if(nResult == 1)
+	nRet=OK;
+    else
+	{
+	ap_log_error(APLOG_MARK,APLOG_ERR|APLOG_NOERRNO,
+		     r->connection->server,
+		     "Weird KeyNote result=%d",nResult);
+	nRet=FORBIDDEN;
+	}
+
+done:
+    kn_close(nSession);
+    bChecking=FALSE;
+
+    return nRet;
+    }
+
+static const char *push_dir_string_array_from_file(cmd_parms *cmd,
+						   char *pStruct,
+						   char *szFile)
+    {
+    int nFD;
+    struct stat sb;
+    //    KeyNoteDirConfig *pConfig=(KeyNoteDirConfig *)pStruct;
+    int offset=(int)(long)cmd->info;
+    char **pszAssertion=ap_push_array(*(array_header **)(pStruct+offset));
+
+    szFile=ap_server_root_relative(cmd->pool,szFile);
+
+    nFD=open(szFile,O_RDONLY);
+    if(nFD < 0)
+	return ap_psprintf(cmd->pool,"Can't open %s: errno=%d",szFile,errno);
+
+    if(fstat(nFD,&sb) < 0)
+	return ap_psprintf(cmd->pool,"Can't stat %s: errno=%d",szFile,errno);
+    
+    *pszAssertion=ap_pcalloc(cmd->pool,sb.st_size+1);
+    if(read(nFD,*pszAssertion,sb.st_size) != sb.st_size)
+	return ap_psprintf(cmd->pool,"Can't read %s: errno=%d",szFile,errno);
+    (*pszAssertion)[sb.st_size]='\0';
+
+    return NULL;
+    }
+
+static command_rec keynote_cmds[]=
+    {
+    { "SSLKeyNoteTrustedAssertion",push_dir_string_array_from_file,
+      (void *)XtOffsetOf(KeyNoteDirConfig,aszTrustedAssertions),OR_FILEINFO,
+      ITERATE,"Add a trusted KeyNote assertion" },
+    { "SSLKeyNoteTrustedIssuerTemplate",push_dir_string_array_from_file,
+      (void *)XtOffsetOf(KeyNoteDirConfig,aszIssuerTemplates),OR_FILEINFO,
+      ITERATE,"Add a trusted KeyNote assertion template for delegating from the issuer" },
+    { NULL }
+    };
+
+module MODULE_VAR_EXPORT apache_ssl_keynote_module =
+    {
+    STANDARD_MODULE_STUFF,
+    NULL,			/* initializer */
+    CreateKeyNoteDirConfig,	/* dir config creater */
+    MergeKeyNoteDirConfig,	/* dir merger --- default is to override */
+    NULL,			/* server config */
+    NULL,			/* merge server config */
+    keynote_cmds,		/* command table */
+    NULL,			/* handlers */
+    NULL,			/* filename translation */
+    NULL,			/* check_user_id */
+    NULL,			/* check auth */
+    CheckKeyNoteAssertions,	/* check access */
+    NULL,			/* type_checker */
+    NULL,			/* fixups */
+    NULL,			/* logger */
+    };
diff -ru -ruN apache_1.3.36_orig/src/modules/ssl-keynote/apache_ssl_keynote.module apache_1.3.36/src/modules/ssl-keynote/apache_ssl_keynote.module
--- apache_1.3.36_orig/src/modules/ssl-keynote/apache_ssl_keynote.module	1970-01-01 01:00:00.000000000 +0100
+++ apache_1.3.36/src/modules/ssl-keynote/apache_ssl_keynote.module	2006-05-18 17:16:13.797322256 +0200
@@ -0,0 +1 @@
+Libs: -L$(KEYNOTE_BASE) -lkeynote
diff -ru -ruN apache_1.3.36_orig/src/modules/standard/Makefile.tmpl apache_1.3.36/src/modules/standard/Makefile.tmpl
--- apache_1.3.36_orig/src/modules/standard/Makefile.tmpl	2006-05-18 17:16:13.728332744 +0200
+++ apache_1.3.36/src/modules/standard/Makefile.tmpl	2006-05-18 17:16:13.873310704 +0200
@@ -7,7 +7,7 @@
 mod_access.o: mod_access.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_core.h \
  $(INCDIR)/http_config.h $(INCDIR)/http_log.h \
@@ -15,7 +15,7 @@
 mod_actions.o: mod_actions.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
@@ -24,12 +24,13 @@
 mod_alias.o: mod_alias.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
- $(INCDIR)/util_uri.h $(INCDIR)/http_config.h
+ $(INCDIR)/util_uri.h $(INCDIR)/http_core.h \
+ $(INCDIR)/http_config.h $(INCDIR)/http_log.h
 mod_asis.o: mod_asis.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_protocol.h $(INCDIR)/http_log.h \
@@ -37,7 +38,7 @@
  $(INCDIR)/http_request.h
 mod_auth.o: mod_auth.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
@@ -45,7 +46,7 @@
 mod_auth_anon.o: mod_auth_anon.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
@@ -53,7 +54,7 @@
 mod_auth_db.o: mod_auth_db.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
@@ -61,7 +62,7 @@
 mod_auth_dbm.o: mod_auth_dbm.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
@@ -69,23 +70,24 @@
 mod_autoindex.o: mod_autoindex.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h $(INCDIR)/http_request.h \
  $(INCDIR)/http_protocol.h $(INCDIR)/http_log.h \
- $(INCDIR)/http_main.h $(INCDIR)/util_script.h
+ $(INCDIR)/http_main.h $(INCDIR)/util_script.h \
+ $(INCDIR)/fnmatch.h
 mod_cern_meta.o: mod_cern_meta.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/util_script.h $(INCDIR)/http_log.h \
  $(INCDIR)/http_request.h
 mod_cgi.o: mod_cgi.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
@@ -95,7 +97,7 @@
 mod_digest.o: mod_digest.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
@@ -103,7 +105,7 @@
  $(INCDIR)/ap_md5.h
 mod_dir.o: mod_dir.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h $(INCDIR)/http_request.h \
@@ -111,25 +113,25 @@
  $(INCDIR)/http_main.h $(INCDIR)/util_script.h
 mod_env.o: mod_env.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h
 mod_expires.o: mod_expires.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_log.h
 mod_headers.o: mod_headers.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h
 mod_imap.o: mod_imap.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
@@ -138,7 +140,7 @@
 mod_include.o: mod_include.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
@@ -146,7 +148,7 @@
  $(INCDIR)/http_main.h $(INCDIR)/util_script.h
 mod_info.o: mod_info.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
@@ -155,34 +157,34 @@
 mod_log_agent.o: mod_log_agent.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_log.h
 mod_log_config.o: mod_log_config.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h $(INCDIR)/http_log.h
 mod_log_referer.o: mod_log_referer.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_log.h
 mod_mime.o: mod_mime.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_log.h
 mod_mime_magic.o: mod_mime_magic.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
@@ -190,15 +192,16 @@
 mod_negotiation.o: mod_negotiation.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
- $(INCDIR)/http_request.h $(INCDIR)/http_core.h \
- $(INCDIR)/http_log.h $(INCDIR)/util_script.h
+ $(INCDIR)/http_request.h $(INCDIR)/http_protocol.h \
+ $(INCDIR)/http_core.h $(INCDIR)/http_log.h \
+ $(INCDIR)/util_script.h
 mod_rewrite.o: mod_rewrite.c mod_rewrite.h $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_conf_globals.h $(INCDIR)/http_request.h \
@@ -207,27 +210,27 @@
 mod_setenvif.o: mod_setenvif.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h $(INCDIR)/http_log.h
 mod_so.o: mod_so.c $(INCDIR)/httpd.h $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os.h $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_log.h
 mod_speling.o: mod_speling.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_core.h \
  $(INCDIR)/http_config.h $(INCDIR)/http_log.h
 mod_status.o: mod_status.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h $(INCDIR)/http_protocol.h \
@@ -237,20 +240,27 @@
 mod_unique_id.o: mod_unique_id.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_log.h $(INCDIR)/multithread.h
 mod_userdir.o: mod_userdir.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h
 mod_usertrack.o: mod_usertrack.c $(INCDIR)/httpd.h \
  $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
+ $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
+ $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
+ $(INCDIR)/http_core.h
+mod_vhost_alias.o: mod_vhost_alias.c $(INCDIR)/httpd.h \
+ $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
+ $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h \
  $(INCDIR)/ap_alloc.h $(INCDIR)/buff.h $(INCDIR)/ap.h \
  $(INCDIR)/util_uri.h $(INCDIR)/http_config.h \
  $(INCDIR)/http_core.h
diff -ru -ruN apache_1.3.36_orig/src/modules/standard/mod_log_config.c apache_1.3.36/src/modules/standard/mod_log_config.c
--- apache_1.3.36_orig/src/modules/standard/mod_log_config.c	2006-05-18 17:16:13.727332896 +0200
+++ apache_1.3.36/src/modules/standard/mod_log_config.c	2006-05-18 17:16:13.874310552 +0200
@@ -94,6 +94,15 @@
  * %...m:  the request method
  * %...{Foobar}n:  The contents of note "Foobar" from another module.
  * %...{Foobar}o:  The contents of Foobar: header line(s) in the reply.
+ *
+ * Additional SSL directives:
+ *
+ * %...{cipher}c:  cipher used (SSL_get_cipher)
+ * %...{clientcert}c: client certificate information
+ * %...{errcode}c: X509 verify error code
+ * %...{errstr}c: X509 verify error string
+ * %...{version}c: SSL version (SSLeay 0.8.0 and above)
+ *
  * %...p:  the port the request was served to
  * %...P:  the process ID of the child that serviced the request.
  * %...q:  the query string prepended by "?", or empty if no query string
@@ -143,6 +152,10 @@
 #include "http_log.h"
 #include <limits.h>
 
+#ifdef APACHE_SSL
+# include <openssl/crypto.h>
+#endif
+
 module MODULE_VAR_EXPORT config_log_module;
 
 static int xfer_flags = (O_WRONLY | O_APPEND | O_CREAT);
@@ -452,6 +465,10 @@
  * Parsing the log format string
  */
 
+#ifdef APACHE_SSL
+extern const char *log_ssl_info(request_rec *r, char *a);
+#endif
+
 static struct log_item_list {
     char ch;
     item_key_func func;
@@ -515,6 +532,9 @@
     {
         's', log_status, 1
     },
+#ifdef APACHE_SSL
+    { 'c', log_ssl_info, 0 },
+#endif
     {
         't', log_request_time, 0
     },
@@ -983,6 +1003,71 @@
     return err_string;
 }
 
+#ifdef APACHE_SSL
+const char *log_ssl_info(request_rec *r, char *a)
+    {
+    char str[MAX_STRING_LEN];
+
+    if(!r->connection->client->ssl)
+	return NULL;
+
+    if(!strcmp(a, "cipher"))
+	return SSL_get_cipher(r->connection->client->ssl);
+
+    if(!strcmp(a, "clientcert"))
+	return r->connection->client->szClientX509;
+
+    if(!strcmp(a, "errcode"))
+	if(r->connection->client->nVerifyError)
+	    {
+	    sprintf(str, "%d", r->connection->client->nVerifyError);
+	    return ap_pstrdup(r->pool,str);
+	    }
+	else
+	    return NULL;
+
+    if(!strcmp(a, "errstr"))
+	if(r->connection->client->nVerifyError)
+#if SSLEAY_VERSION_NUMBER < 0x0800
+	    return X509_cert_verify_error_string(r->connection->client->nVerifyError);
+#else
+	    return X509_verify_cert_error_string(r->connection->client->nVerifyError);
+#endif
+	else
+	    return NULL;
+
+#if SSLEAY_VERSION_NUMBER >= 0x0800
+    if(!strcmp(a, "version"))
+	{
+#if SSLEAY_VERSION_NUMBER >= 0x0900
+	switch(r->connection->client->ssl->session->ssl_version)
+	    {
+	case TLS1_VERSION:
+	    return "TLS1";
+
+	case SSL3_VERSION:
+	    return "SSL3";
+
+	case SSL2_VERSION:
+	    return "SSL2";
+
+	default:
+	    return "?";
+	    }
+#else
+	static char v[2];
+
+	v[0]='0'+r->connection->client->ssl->session->ssl_version;
+	v[1]='\0';
+	return v;
+#endif
+	}
+#endif
+    
+    return NULL;
+}
+#endif
+
 static const char *set_transfer_log(cmd_parms *cmd, void *dummy, char *fn)
 {
     return add_custom_log(cmd, dummy, fn, NULL, NULL);
diff -ru -ruN apache_1.3.36_orig/src/modules/standard/mod_so.c apache_1.3.36/src/modules/standard/mod_so.c
--- apache_1.3.36_orig/src/modules/standard/mod_so.c	2006-05-18 17:16:13.734331832 +0200
+++ apache_1.3.36/src/modules/standard/mod_so.c	2006-05-18 17:16:13.875310400 +0200
@@ -266,7 +266,8 @@
      * Make sure the found module structure is really a module structure
      * 
      */
-    if (modp->magic != MODULE_MAGIC_COOKIE) {
+    if (modp->magic != MODULE_MAGIC_COOKIE
+	&& modp->magic != SSL_MAGIC_COOKIE) {
         return ap_pstrcat(cmd->pool, "API module structure `", modname,
                           "' in file ", szModuleFile, " is garbled -"
                           " perhaps this is not an Apache module DSO?", NULL);
diff -ru -ruN apache_1.3.36_orig/src/os/unix/Makefile.tmpl apache_1.3.36/src/os/unix/Makefile.tmpl
--- apache_1.3.36_orig/src/os/unix/Makefile.tmpl	2006-05-18 17:16:13.772326056 +0200
+++ apache_1.3.36/src/os/unix/Makefile.tmpl	2006-05-18 17:16:13.876310248 +0200
@@ -41,7 +41,7 @@
 os-aix-dso.o: os-aix-dso.c
 os-inline.o: os-inline.c $(INCDIR)/ap_config.h \
  $(INCDIR)/ap_mmn.h $(INCDIR)/ap_config_auto.h \
- $(OSDIR)/os.h $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h
+ $(OSDIR)/os.h $(INCDIR)/ap_ctype.h
 os.o: os.c $(INCDIR)/ap_config.h $(INCDIR)/ap_mmn.h \
  $(INCDIR)/ap_config_auto.h $(OSDIR)/os.h \
- $(INCDIR)/ap_ctype.h $(INCDIR)/hsregex.h os.h
+ $(OSDIR)/os-inline.c $(INCDIR)/ap_ctype.h os.h
diff -ru -ruN apache_1.3.36_orig/src/support/apachectl apache_1.3.36/src/support/apachectl
--- apache_1.3.36_orig/src/support/apachectl	2006-05-18 17:16:13.778325144 +0200
+++ apache_1.3.36/src/support/apachectl	2006-05-18 17:16:13.877310096 +0200
@@ -22,11 +22,11 @@
 #	0 - operation completed successfully
 #	1 - 
 #	2 - usage error
-#	3 - httpd could not be started
-#	4 - httpd could not be stopped
-#	5 - httpd could not be started during a restart
-#	6 - httpd could not be restarted during a restart
-#	7 - httpd could not be restarted during a graceful restart
+#	3 - httpsd could not be started
+#	4 - httpsd could not be stopped
+#	5 - httpsd could not be started during a restart
+#	6 - httpsd could not be restarted during a restart
+#	7 - httpsd could not be restarted during a graceful restart
 #	8 - configuration syntax error
 #
 # When multiple arguments are given, only the error from the _last_
@@ -39,8 +39,8 @@
 # the path to your PID file
 PIDFILE=/usr/local/apache/logs/httpd.pid
 #
-# the path to your httpd binary, including options if necessary
-HTTPD='/usr/local/apache/src/httpd'
+# the path to your httpsd binary, including options if necessary
+HTTPD='/usr/local/apache/src/httpsd'
 #
 # a command that outputs a formatted text version of the HTML at the
 # url given on the command line.  Designed for lynx, however other
@@ -66,27 +66,27 @@
     if [ -f $PIDFILE ] ; then
 	PID=`cat $PIDFILE`
 	if [ "x$PID" != "x" ] && kill -0 $PID 2>/dev/null ; then
-	    STATUS="httpd (pid $PID) running"
+	    STATUS="httpsd (pid $PID) running"
 	    RUNNING=1
 	else
-	    STATUS="httpd (pid $PID?) not running"
+	    STATUS="httpsd (pid $PID?) not running"
 	    RUNNING=0
 	fi
     else
-	STATUS="httpd (no pid file) not running"
+	STATUS="httpsd (no pid file) not running"
 	RUNNING=0
     fi
 
     case $ARG in
     start)
 	if [ $RUNNING -eq 1 ]; then
-	    echo "$0 $ARG: httpd (pid $PID) already running"
+	    echo "$0 $ARG: httpsd (pid $PID) already running"
 	    continue
 	fi
 	if $HTTPD ; then
-	    echo "$0 $ARG: httpd started"
+	    echo "$0 $ARG: httpsd started"
 	else
-	    echo "$0 $ARG: httpd could not be started"
+	    echo "$0 $ARG: httpsd could not be started"
 	    ERROR=3
 	fi
 	;;
@@ -96,27 +96,27 @@
 	    continue
 	fi
 	if kill $PID ; then
-	    echo "$0 $ARG: httpd stopped"
+	    echo "$0 $ARG: httpsd stopped"
 	else
-	    echo "$0 $ARG: httpd could not be stopped"
+	    echo "$0 $ARG: httpsd could not be stopped"
 	    ERROR=4
 	fi
 	;;
     restart)
 	if [ $RUNNING -eq 0 ]; then
-	    echo "$0 $ARG: httpd not running, trying to start"
+	    echo "$0 $ARG: httpsd not running, trying to start"
 	    if $HTTPD ; then
-		echo "$0 $ARG: httpd started"
+		echo "$0 $ARG: httpsd started"
 	    else
-		echo "$0 $ARG: httpd could not be started"
+		echo "$0 $ARG: httpsd could not be started"
 		ERROR=5
 	    fi
 	else
 	    if $HTTPD -t >/dev/null 2>&1; then
 		if kill -HUP $PID ; then
-		    echo "$0 $ARG: httpd restarted"
+		    echo "$0 $ARG: httpsd restarted"
 		else
-		    echo "$0 $ARG: httpd could not be restarted"
+		    echo "$0 $ARG: httpsd could not be restarted"
 		    ERROR=6
 		fi
 	    else
@@ -128,19 +128,19 @@
 	;;
     graceful)
 	if [ $RUNNING -eq 0 ]; then
-	    echo "$0 $ARG: httpd not running, trying to start"
+	    echo "$0 $ARG: httpsd not running, trying to start"
 	    if $HTTPD ; then
-		echo "$0 $ARG: httpd started"
+		echo "$0 $ARG: httpsd started"
 	    else
-		echo "$0 $ARG: httpd could not be started"
+		echo "$0 $ARG: httpsd could not be started"
 		ERROR=5
 	    fi
 	else
 	    if $HTTPD -t >/dev/null 2>&1; then
 		if kill -USR1 $PID ; then
-		    echo "$0 $ARG: httpd gracefully restarted"
+		    echo "$0 $ARG: httpsd gracefully restarted"
 		else
-		    echo "$0 $ARG: httpd could not be restarted"
+		    echo "$0 $ARG: httpsd could not be restarted"
 		    ERROR=7
 		fi
 	    else
@@ -167,9 +167,9 @@
 	echo "usage: $0 (start|stop|restart|fullstatus|status|graceful|configtest|help)"
 	cat <<EOF
 
-start      - start httpd
-stop       - stop httpd
-restart    - restart httpd if running by sending a SIGHUP or start if 
+start      - start httpsd
+stop       - stop httpsd
+restart    - restart httpsd if running by sending a SIGHUP or start if 
              not running
 fullstatus - dump a full status screen; requires lynx and mod_status enabled
 status     - dump a short status screen; requires lynx and mod_status enabled
diff -ru -ruN apache_1.3.36_orig/src/support/suexec.c apache_1.3.36/src/support/suexec.c
--- apache_1.3.36_orig/src/support/suexec.c	2006-05-18 17:16:13.777325296 +0200
+++ apache_1.3.36/src/support/suexec.c	2006-05-18 17:16:13.878309944 +0200
@@ -90,6 +90,8 @@
 {
     /* variable name starts with */
     "HTTP_",
+    "HTTPS",
+    "SSL_",
 
     /* variable name is */
     "AUTH_TYPE=",
