###########################################################################
#
# snmpd.conf
#
#   - created by the snmpconf configuration program
#
###########################################################################
# SECTION: Access Control Setup
#
#   This section defines who is allowed to talk to your running
#   snmp agent.

# rwuser: Define SNMPv3 read-write users
#   arguments:  user [noauth|auth|priv] [restriction_oid]

#rwuser username priv oid

# rouser: Define SNMPv3 read-only users
#   arguments:  user [noauth|auth|priv] [restriction_oid]

#rouser username noauth oid

# rocommunity: Define SNMPv1/SNMPv2c read-only access communities
#   arguments:  community [default|hostname|network/bits] [oid]

#rocommunity communityname 10.10.0.0/24 oid

# rwcommunity: Define SNMPv1/SNMPv2c read-write access communities
#   arguments:  community [default|hostname|network/bits] [oid]

#rwcommunity communityname 10.10.0.0/24 oid


###########################################################################
# SECTION: Extending the Agent
#
#   You can extend the snmp agent to have it return information
#   that you yourself define.

# exec: run a simple command using exec()
#   arguments:  [oid] name /path/to/executable arguments

#exec oid cmdname /usr/local/bin/command arguments

# pass: Run a command that intepretes the request for an entire tree.
#   The pass program defined here will get called for all
#   requests below a certain point in the mib tree.  It is then
#   responsible for returning the right data beyond that point.
#   
#   arguments: miboid program
#   
#   example: pass .1.3.6.1.4.1.2021.255 /path/to/local/passtest
#   
#   See the snmpd.conf manual page for further information.
#   
#   Consider using "pass_persist" for a performance increase.

#pass oid /usr/local/bin/command

# pass_persist: Run a persistant process that intepretes the request for an entire tree.
#   The pass program defined here will get called for all
#   requests below a certain point in the mib tree.  It is then
#   responsible for returning the right data beyond that point.
#   The pass_persist scripts must be able to stay running and accept input
#   from stdin.
#   
#   arguments: miboid program
#   
#   example: pass_persist .1.3.6.1.4.1.2021.255 /path/to/local/pass_persisttest
#   
#   See the snmpd.conf manual page for further information.

#pass_persist oid 1 /usr/local/bin/command

# proxy: Proxy requests to an external agent running somewhere else
#   This passes all requests for a certain point of the mib tree to
#   an external agent using snmp requests and then returning the
#   results to the caller that spoke to our agent.
#   arguments: [snmpcmd args] host oid [remoteoid]

#proxy  "snmpcommand arguments" 10.10.0.1 oid remoteoid

# sh: run a simple command using system()
#   arguments:  [oid] name command arguments
#   similar to exec, but implemented using system() instead of exec()
#   
#   For security reasons, exec should be preferred.

#sh oid cmdname /usr/local/bin/command arguments

# dlmod: dynamically extend the agent using a shared-object
#   arguments:  module-name module-path

#dlmod modulename modulepath


###########################################################################
# SECTION: Monitor Various Aspects of the Running Host
#
#   The following check up on various aspects of a host.

# proc: Check for processes that should be running.
#     proc NAME [MAX=0] [MIN=0]
#   
#     NAME:  the name of the process to check for.  It must match
#            exactly (ie, http will not find httpd processes).
#     MAX:   the maximum number allowed to be running.  Defaults to 0.
#     MIN:   the minimum number to be running.  Defaults to 0.
#   
#   The results are reported in the prTable section of the UCD-SNMP-MIB tree
#   Special Case:  When the min and max numbers are both 0, it assumes
#   you want a max of infinity and a min of 1.

#proc processname 0 0

# disk: Check for disk space usage of a partition.
#   The agent can check the amount of available disk space, and make
#   sure it is above a set limit.  
#   
#    disk PATH [MIN=100000]
#   
#    PATH:  mount path to the disk in question.
#    MIN:   Disks with space below this value will have the Mib's errorFlag set.
#           Can be a raw byte value or a percentage followed by the %
#           symbol.  Default value = 100000.
#   
#   The results are reported in the dskTable section of the UCD-SNMP-MIB tree

#disk /mountpoint 100000

# load: Check for unreasonable load average values.
#   Watch the load average levels on the machine.
#   
#    load [1MAX=12.0] [5MAX=12.0] [15MAX=12.0]
#   
#    1MAX:   If the 1 minute load average is above this limit at query
#            time, the errorFlag will be set.
#    5MAX:   Similar, but for 5 min average.
#    15MAX:  Similar, but for 15 min average.
#   
#   The results are reported in the laTable section of the UCD-SNMP-MIB tree

#load 3 6 9

# file: Check on the size of a file.
#   Display a files size statistics.
#   If it grows to be too large, report an error about it.
#   
#    file /path/to/file [maxsize_in_bytes]
#   
#      if maxsize is not specified, assume only size reporting is needed.
#   
#   The results are reported in the fileTable section of the UCD-SNMP-MIB tree

#file /usr/local/var/file 1073741824

###########################################################################
# SECTION: Agent Operating Mode
#
#   This section defines how the agent will operate when it
#   is running.

# master: Should the agent operate as a master agent or not.
#   Currently, the only supported master agent type for this token
#   is "agentx".
#   
#   arguments: (on|yes|agentx|all|off|no)

#master agentx

# agentuser: The system user that the agent runs as.
#   arguments: name|#uid

#agentuser nobody

# agentgroup: The system group that the agent runs as.
#   arguments: group|#GID

#agentgroup snmp

# agentaddress: The IP address and port number that the agent will listen on.
#   By default the agent listens to any and all traffic from any
#   interface on the default SNMP port (161).  This allows you to
#   specify which address, interface, transport type and port(s) that you
#   want the agent to listen on.  Multiple definitions of this token
#   are concatenated together (using ':'s).
#   arguments: [transport:]port[@interface/address],...

#agentaddress 127.0.0.1:161

###########################################################################
# SECTION: System Information Setup
#
#   This section defines some of the information reported in
#   the "system" mib group in the mibII tree.

# syslocation: The [typically physical] location of the system.
#   Note that setting this value here means that when trying to
#   perform an snmp SET operation to the sysLocation.0 variable will make
#   the agent return the "notWritable" error code.  IE, including
#   this token in the snmpd.conf file will disable write access to
#   the variable.
#   arguments:  location_string

#syslocation  "nexbyte gmbh, bälliz 24, 3600 thun"

# syscontact: The contact information for the administrator
#   Note that setting this value here means that when trying to
#   perform an snmp SET operation to the sysContact.0 variable will make
#   the agent return the "notWritable" error code.  IE, including
#   this token in the snmpd.conf file will disable write access to
#   the variable.
#   arguments:  contact_string

#syscontact  admin@nexbyte.com

# sysservices: The proper value for the sysServices object.
#   arguments:  sysservices_number

#sysservices 12

###########################################################################
# SECTION: Trap Destinations
#
#   Here we define who the agent will send traps to.

# trapsink: A SNMPv1 trap receiver
#   arguments: host [community] [portnum]

#trapsink 10.10.0.1 trapcommunity 161

# trap2sink: A SNMPv2c trap receiver
#   arguments: host [community] [portnum]

#trap2sink 10.10.0.1 trapcommunity 161

# informsink: A SNMPv2c inform (acknowledged trap) receiver
#   arguments: host [community] [portnum]

#informsink 10.10.0.1 trapreceiver trapcommunity 161

# trapsess: A generic trap receiver defined using snmpcmd style arguments.
#   Read the snmpcmd manual page for further information.
#   arguments: [snmpcmdargs] host

#trapsess 10.10.0.1 snmpcmdoptions snmphost

# trapcommunity: Default trap sink community to use
#   arguments: community-string

#trapcommunity 10.10.0.1 trapsinkcommunity

# authtrapenable: Should we send traps when authentication failures occur
#   arguments: 1 | 2   (1 = yes, 2 = no)

#authtrapenable 1



