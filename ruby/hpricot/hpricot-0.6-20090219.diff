diff -ruN hpricot-0.6/Rakefile hpricot/Rakefile
--- hpricot-0.6/Rakefile	2007-06-16 00:28:48.000000000 +0200
+++ hpricot/Rakefile	2009-02-19 19:39:17.000000000 +0100
@@ -6,19 +6,32 @@
 require 'fileutils'
 include FileUtils
 
+RbConfig = Config unless defined?(RbConfig)
+
 NAME = "hpricot"
-REV = `svn info`[/Revision: (\d+)/, 1] rescue nil
+REV = (`#{ENV['GIT'] || "git"} rev-list HEAD`.split.length + 1).to_s
 VERS = ENV['VERSION'] || "0.6" + (REV ? ".#{REV}" : "")
 PKG = "#{NAME}-#{VERS}"
-BIN = "*.{bundle,jar,so,obj,pdb,lib,def,exp}"
-ARCHLIB = "lib/#{::Config::CONFIG['arch']}"
-CLEAN.include ["ext/hpricot_scan/#{BIN}", "lib/**/#{BIN}", 'ext/hpricot_scan/Makefile', 
-               '**/.*.sw?', '*.gem', '.config']
+BIN = "*.{bundle,jar,so,o,obj,pdb,lib,def,exp,class}"
+CLEAN.include ["ext/hpricot_scan/#{BIN}", "ext/fast_xs/#{BIN}", "lib/**/#{BIN}",
+               'ext/fast_xs/Makefile', 'ext/hpricot_scan/Makefile', 
+               '**/.*.sw?', '*.gem', '.config', 'pkg']
 RDOC_OPTS = ['--quiet', '--title', 'The Hpricot Reference', '--main', 'README', '--inline-source']
 PKG_FILES = %w(CHANGELOG COPYING README Rakefile) +
       Dir.glob("{bin,doc,test,lib,extras}/**/*") + 
       Dir.glob("ext/**/*.{h,java,c,rb,rl}") + 
-      %w[ext/hpricot_scan/hpricot_scan.c] # needed because it's generated later
+      %w[ext/hpricot_scan/hpricot_scan.c ext/hpricot_scan/hpricot_css.c ext/hpricot_scan/HpricotScanService.java] # needed because they are generated later
+RAGEL_C_CODE_GENERATION_STYLES = {
+  "table_driven" => 'T0',
+  "faster_table_driven" => 'T1',
+  "flat_table_driven" => 'F0',
+  "faster_flat_table_driven" => 'F1',
+  "goto_driven" => 'G0',
+  "faster_goto_driven" => 'G1',
+  "really_fast goto_driven" => 'G2'
+  # "n_way_split_really_fast_goto_driven" => 'P<N>'
+}
+DEFAULT_RAGEL_C_CODE_GENERATION = "really_fast goto_driven"
 SPEC =
   Gem::Specification.new do |s|
     s.name = NAME
@@ -32,12 +45,20 @@
     s.author = "why the lucky stiff"
     s.email = 'why@ruby-lang.org'
     s.homepage = 'http://code.whytheluckystiff.net/hpricot/'
+    s.rubyforge_project = 'hobix'
     s.files = PKG_FILES
-    s.require_paths = [ARCHLIB, "lib"] 
+    s.require_paths = ["lib"] 
     s.extensions = FileList["ext/**/extconf.rb"].to_a
     s.bindir = "bin"
   end
 
+Win32Spec = SPEC.dup
+Win32Spec.platform = 'mswin32'
+Win32Spec.files = PKG_FILES + ["lib/hpricot_scan.so", "lib/fast_xs.so"]
+Win32Spec.extensions = []
+  
+WIN32_PKG_DIR = "#{PKG}-mswin32"
+
 desc "Does a full compile, test run"
 task :default => [:compile, :test]
 
@@ -49,7 +70,7 @@
 
 desc "Run all the tests"
 Rake::TestTask.new do |t|
-    t.libs << "test" << ARCHLIB
+    t.libs << "test"
     t.test_files = FileList['test/test_*.rb']
     t.verbose = true
 end
@@ -66,25 +87,47 @@
     p.gem_spec = SPEC
 end
 
-extension = "hpricot_scan"
-ext = "ext/hpricot_scan"
-ext_so = "#{ext}/#{extension}.#{Config::CONFIG['DLEXT']}"
-ext_files = FileList[
-  "#{ext}/*.c",
-  "#{ext}/*.h",
-  "#{ext}/*.rl",
-  "#{ext}/extconf.rb",
-  "#{ext}/Makefile",
-  "lib"
-] 
+['hpricot_scan', 'fast_xs'].each do |extension|
+  ext = "ext/#{extension}"
+  ext_so = "#{ext}/#{extension}.#{Config::CONFIG['DLEXT']}"
+  ext_files = FileList[
+    "#{ext}/*.c",
+    "#{ext}/*.h",
+    "#{ext}/*.rl",
+    "#{ext}/extconf.rb",
+    "#{ext}/Makefile",
+    "lib"
+  ] 
+
+  desc "Builds just the #{extension} extension"
+  task extension.to_sym => [:ragel, "#{ext}/Makefile", ext_so ]
+
+  file "#{ext}/Makefile" => ["#{ext}/extconf.rb"] do
+    Dir.chdir(ext) do ruby "extconf.rb" end
+  end
+
+  file ext_so => ext_files do
+    Dir.chdir(ext) do
+      sh(RUBY_PLATFORM =~ /win32/ ? 'nmake' : 'make')
+    end
+    cp ext_so, "lib"
+  end
+
+  desc "Cross-compile the #{extension} extension for win32"
+  file "#{extension}_win32" => [WIN32_PKG_DIR] do
+    cp "extras/mingw-rbconfig.rb", "#{WIN32_PKG_DIR}/ext/#{extension}/rbconfig.rb"
+    sh "cd #{WIN32_PKG_DIR}/ext/#{extension}/ && ruby -I. extconf.rb && make"
+    mv "#{WIN32_PKG_DIR}/ext/#{extension}/#{extension}.so", "#{WIN32_PKG_DIR}/lib"
+  end
+end
 
 task "lib" do
   directory "lib"
 end
 
 desc "Compiles the Ruby extension"
-task :compile => [:hpricot_scan] do
-  if Dir.glob(File.join(ARCHLIB,"hpricot_scan.*")).length == 0
+task :compile => [:hpricot_scan, :fast_xs] do
+  if Dir.glob(File.join("lib","hpricot_scan.*")).length == 0
     STDERR.puts "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
     STDERR.puts "Gem actually failed to build.  Your system is"
     STDERR.puts "NOT configured properly to build hpricot."
@@ -92,62 +135,48 @@
     exit(1)
   end
 end
-task :hpricot_scan => [:ragel]
-
-desc "Builds just the #{extension} extension"
-task extension.to_sym => ["#{ext}/Makefile", ext_so ]
-
-file "#{ext}/Makefile" => ["#{ext}/extconf.rb"] do
-  Dir.chdir(ext) do ruby "extconf.rb" end
-end
-
-file ext_so => ext_files do
-  Dir.chdir(ext) do
-    sh(PLATFORM =~ /win32/ ? 'nmake' : 'make')
-  end
-  mkdir_p ARCHLIB
-  cp ext_so, ARCHLIB
-end
 
-desc "returns the ragel version"
+desc "Determines the Ragel version and displays it on the console along with the location of the Ragel binary."
 task :ragel_version do
   @ragel_v = `ragel -v`[/(version )(\S*)/,2].to_f
+  puts "Using ragel version: #{@ragel_v}, location: #{`which ragel`}"
+  @ragel_v
 end
 
 desc "Generates the C scanner code with Ragel."
 task :ragel => [:ragel_version] do
-  sh %{ragel ext/hpricot_scan/hpricot_scan.rl | #{@ragel_v >= 5.18 ? 'rlgen-cd' : 'rlcodegen'} -G2 -o ext/hpricot_scan/hpricot_scan.c}
+  if @ragel_v >= 6.1
+    @ragel_c_code_generation_style = RAGEL_C_CODE_GENERATION_STYLES[DEFAULT_RAGEL_C_CODE_GENERATION]
+    sh %{cd ext/hpricot_scan; ragel hpricot_scan.rl -#{@ragel_c_code_generation_style} -o hpricot_scan.c && ragel hpricot_css.rl -#{@ragel_c_code_generation_style} -o hpricot_css.c}
+  else
+    STDERR.puts "Ragel 6.1 or greater is required."
+    exit(1)
+  end
 end
 
-desc "Generates the Java scanner code with Ragel."
+# Java only supports the table-driven code 
+# generation style at this point. 
+desc "Generates the Java scanner code using the Ragel table-driven code generation style."
 task :ragel_java => [:ragel_version] do
-  sh %{ragel -J ext/hpricot_scan/hpricot_scan.java.rl | #{@ragel_v >= 5.18 ? 'rlgen-java' : 'rlcodegen'} -o  ext/hpricot_scan/HpricotScanService.java}
+  if @ragel_v >= 6.1
+    puts "compiling with ragel version #{@ragel_v}"
+    sh %{ragel -J -o ext/hpricot_scan/HpricotScanService.java ext/hpricot_scan/hpricot_scan.java.rl}    
+  else
+    STDERR.puts "Ragel 6.1 or greater is required."
+    exit(1)
+  end
 end
 
 ### Win32 Packages ###
 
-Win32Spec = SPEC.dup
-Win32Spec.platform = Gem::Platform::WIN32
-Win32Spec.files = PKG_FILES + ["#{ARCHLIB}/hpricot_scan.so"]
-Win32Spec.extensions = []
-  
-WIN32_PKG_DIR = "#{PKG}-mswin32"
-
 desc "Package up the Win32 distribution."
 file WIN32_PKG_DIR => [:package] do
   sh "tar zxf pkg/#{PKG}.tgz"
   mv PKG, WIN32_PKG_DIR
 end
 
-desc "Cross-compile the hpricot_scan extension for win32"
-file "hpricot_scan_win32" => [WIN32_PKG_DIR] do
-  cp "extras/mingw-rbconfig.rb", "#{WIN32_PKG_DIR}/ext/hpricot_scan/rbconfig.rb"
-  sh "cd #{WIN32_PKG_DIR}/ext/hpricot_scan/ && ruby -I. extconf.rb && make"
-  mv "#{WIN32_PKG_DIR}/ext/hpricot_scan/hpricot_scan.so", "#{WIN32_PKG_DIR}/#{ARCHLIB}"
-end
-
 desc "Build the binary RubyGems package for win32"
-task :package_win32 => ["hpricot_scan_win32"] do
+task :package_win32 => ["fast_xs_win32", "hpricot_scan_win32"] do
   Dir.chdir("#{WIN32_PKG_DIR}") do
     Gem::Builder.new(Win32Spec).build
     verbose(true) {
@@ -160,19 +189,43 @@
 
 ### JRuby Packages ###
 
-compile_java = proc do
-  sh %{javac -source 1.4 -target 1.4 -classpath $JRUBY_HOME/lib/jruby.jar HpricotScanService.java}
-  sh %{jar cf hpricot_scan.jar HpricotScanService.class}
+def java_classpath_arg 
+  # A myriad of ways to discover the JRuby classpath
+  classpath = begin
+    require 'java' 
+    # Already running in a JRuby JVM
+    Java::java.lang.System.getProperty('java.class.path')
+  rescue LoadError
+    ENV['JRUBY_PARENT_CLASSPATH'] || ENV['JRUBY_HOME'] && FileList["#{ENV['JRUBY_HOME']}/lib/*.jar"].join(File::PATH_SEPARATOR)
+  end
+  classpath ? "-cp #{classpath}" : ""
+end
+
+def compile_java(filename, jarname)
+  sh %{javac -source 1.4 -target 1.4 #{java_classpath_arg} #{filename}}
+  sh %{jar cf #{jarname} *.class}
 end
 
-desc "Compiles the JRuby extension"
 task :hpricot_scan_java => [:ragel_java] do
-  Dir.chdir("ext/hpricot_scan", &compile_java)
+  Dir.chdir "ext/hpricot_scan" do
+    compile_java("HpricotScanService.java", "hpricot_scan.jar")
+  end
+end
+
+task :fast_xs_java do
+  Dir.chdir "ext/fast_xs" do
+    compile_java("FastXsService.java", "fast_xs.jar")
+  end
+end
+
+desc "Compiles the JRuby extensions"
+task :hpricot_java => [:hpricot_scan_java, :fast_xs_java] do
+  %w(hpricot_scan fast_xs).each {|ext| mv "ext/#{ext}/#{ext}.jar", "lib"}
 end
 
 JRubySpec = SPEC.dup
 JRubySpec.platform = 'jruby'
-JRubySpec.files = PKG_FILES + ["#{ARCHLIB}/hpricot_scan.jar"]
+JRubySpec.files = PKG_FILES + ["lib/hpricot_scan.jar", "lib/fast_xs.jar"]
 JRubySpec.extensions = []
 
 JRUBY_PKG_DIR = "#{PKG}-jruby"
@@ -183,15 +236,10 @@
   mv PKG, JRUBY_PKG_DIR
 end
 
-desc "Cross-compile the hpricot_scan extension for JRuby"
-file "hpricot_scan_jruby" => [JRUBY_PKG_DIR] do
-  Dir.chdir("#{JRUBY_PKG_DIR}/ext/hpricot_scan", &compile_java)
-  mv "#{JRUBY_PKG_DIR}/ext/hpricot_scan/hpricot_scan.jar", "#{JRUBY_PKG_DIR}/#{ARCHLIB}"
-end
-
 desc "Build the RubyGems package for JRuby"
-task :package_jruby => ["hpricot_scan_jruby"] do
+task :package_jruby => JRUBY_PKG_DIR do
   Dir.chdir("#{JRUBY_PKG_DIR}") do
+    Rake::Task[:hpricot_java].invoke
     Gem::Builder.new(JRubySpec).build
     verbose(true) {
       mv Dir["*.gem"].first, "../pkg/#{JRUBY_PKG_DIR}.gem"
diff -ruN hpricot-0.6/ext/fast_xs/FastXsService.java hpricot/ext/fast_xs/FastXsService.java
--- hpricot-0.6/ext/fast_xs/FastXsService.java	1970-01-01 01:00:00.000000000 +0100
+++ hpricot/ext/fast_xs/FastXsService.java	2009-02-19 19:39:17.000000000 +0100
@@ -0,0 +1,1018 @@
+
+import java.io.IOException;
+import java.io.StringWriter;
+import java.io.Writer;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.TreeMap;
+import org.jruby.Ruby;
+import org.jruby.RubyModule;
+import org.jruby.runtime.CallbackFactory;
+import org.jruby.runtime.builtin.IRubyObject;
+import org.jruby.runtime.load.BasicLibraryService;
+import org.jruby.util.collections.IntHashMap;
+
+public class FastXsService implements BasicLibraryService {
+
+    public boolean basicLoad(final Ruby runtime) throws IOException {
+        RubyModule string = runtime.getModule("String");
+        CallbackFactory fact = runtime.callbackFactory(FastXsService.class);
+        string.defineMethod("fast_xs",fact.getFastSingletonMethod("fast_xs"));
+        return true;
+    }
+
+    public static IRubyObject fast_xs(IRubyObject recv) {
+        String string = recv.convertToString().getUnicodeValue();
+        StringWriter writer = new StringWriter ((int)(string.length() * 1.5));
+        try {
+            Entities.XML.escape(writer, string);
+            return recv.getRuntime().newString(writer.toString());
+        } catch (IOException e) {
+            throw recv.getRuntime().newIOErrorFromException(e);
+        }
+    }
+}
+
+// From Apache commons-lang,
+// http://svn.apache.org/viewvc/commons/proper/lang/trunk/src/java/org/apache/commons/lang/Entities.java?revision=560660&view=markup
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * <p>
+ * Provides HTML and XML entity utilities.
+ * </p>
+ * 
+ * @see <a href="http://hotwired.lycos.com/webmonkey/reference/special_characters/">ISO Entities</a>
+ * @see <a href="http://www.w3.org/TR/REC-html32#latin1">HTML 3.2 Character Entities for ISO Latin-1</a>
+ * @see <a href="http://www.w3.org/TR/REC-html40/sgml/entities.html">HTML 4.0 Character entity references</a>
+ * @see <a href="http://www.w3.org/TR/html401/charset.html#h-5.3">HTML 4.01 Character References</a>
+ * @see <a href="http://www.w3.org/TR/html401/charset.html#code-position">HTML 4.01 Code positions</a>
+ * 
+ * @author <a href="mailto:alex@purpletech.com">Alexander Day Chaffee</a>
+ * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a>
+ * @since 2.0
+ * @version $Id$
+ */
+class Entities {
+
+    private static final String[][] BASIC_ARRAY = {{"quot", "34"}, // " - double-quote
+        {"amp", "38"}, // & - ampersand
+        {"lt", "60"}, // < - less-than
+        {"gt", "62"}, // > - greater-than
+    };
+
+    private static final String[][] APOS_ARRAY = {{"apos", "39"}, // XML apostrophe
+    };
+
+    // package scoped for testing
+    static final String[][] ISO8859_1_ARRAY = {{"nbsp", "160"}, // non-breaking space
+        {"iexcl", "161"}, // inverted exclamation mark
+        {"cent", "162"}, // cent sign
+        {"pound", "163"}, // pound sign
+        {"curren", "164"}, // currency sign
+        {"yen", "165"}, // yen sign = yuan sign
+        {"brvbar", "166"}, // broken bar = broken vertical bar
+        {"sect", "167"}, // section sign
+        {"uml", "168"}, // diaeresis = spacing diaeresis
+        {"copy", "169"}, // © - copyright sign
+        {"ordf", "170"}, // feminine ordinal indicator
+        {"laquo", "171"}, // left-pointing double angle quotation mark = left pointing guillemet
+        {"not", "172"}, // not sign
+        {"shy", "173"}, // soft hyphen = discretionary hyphen
+        {"reg", "174"}, // ® - registered trademark sign
+        {"macr", "175"}, // macron = spacing macron = overline = APL overbar
+        {"deg", "176"}, // degree sign
+        {"plusmn", "177"}, // plus-minus sign = plus-or-minus sign
+        {"sup2", "178"}, // superscript two = superscript digit two = squared
+        {"sup3", "179"}, // superscript three = superscript digit three = cubed
+        {"acute", "180"}, // acute accent = spacing acute
+        {"micro", "181"}, // micro sign
+        {"para", "182"}, // pilcrow sign = paragraph sign
+        {"middot", "183"}, // middle dot = Georgian comma = Greek middle dot
+        {"cedil", "184"}, // cedilla = spacing cedilla
+        {"sup1", "185"}, // superscript one = superscript digit one
+        {"ordm", "186"}, // masculine ordinal indicator
+        {"raquo", "187"}, // right-pointing double angle quotation mark = right pointing guillemet
+        {"frac14", "188"}, // vulgar fraction one quarter = fraction one quarter
+        {"frac12", "189"}, // vulgar fraction one half = fraction one half
+        {"frac34", "190"}, // vulgar fraction three quarters = fraction three quarters
+        {"iquest", "191"}, // inverted question mark = turned question mark
+        {"Agrave", "192"}, // À - uppercase A, grave accent
+        {"Aacute", "193"}, // Á - uppercase A, acute accent
+        {"Acirc", "194"}, // Â - uppercase A, circumflex accent
+        {"Atilde", "195"}, // Ã - uppercase A, tilde
+        {"Auml", "196"}, // Ä - uppercase A, umlaut
+        {"Aring", "197"}, // Å - uppercase A, ring
+        {"AElig", "198"}, // Æ - uppercase AE
+        {"Ccedil", "199"}, // Ç - uppercase C, cedilla
+        {"Egrave", "200"}, // È - uppercase E, grave accent
+        {"Eacute", "201"}, // É - uppercase E, acute accent
+        {"Ecirc", "202"}, // Ê - uppercase E, circumflex accent
+        {"Euml", "203"}, // Ë - uppercase E, umlaut
+        {"Igrave", "204"}, // Ì - uppercase I, grave accent
+        {"Iacute", "205"}, // Í - uppercase I, acute accent
+        {"Icirc", "206"}, // Î - uppercase I, circumflex accent
+        {"Iuml", "207"}, // Ï - uppercase I, umlaut
+        {"ETH", "208"}, // Ð - uppercase Eth, Icelandic
+        {"Ntilde", "209"}, // Ñ - uppercase N, tilde
+        {"Ograve", "210"}, // Ò - uppercase O, grave accent
+        {"Oacute", "211"}, // Ó - uppercase O, acute accent
+        {"Ocirc", "212"}, // Ô - uppercase O, circumflex accent
+        {"Otilde", "213"}, // Õ - uppercase O, tilde
+        {"Ouml", "214"}, // Ö - uppercase O, umlaut
+        {"times", "215"}, // multiplication sign
+        {"Oslash", "216"}, // Ø - uppercase O, slash
+        {"Ugrave", "217"}, // Ù - uppercase U, grave accent
+        {"Uacute", "218"}, // Ú - uppercase U, acute accent
+        {"Ucirc", "219"}, // Û - uppercase U, circumflex accent
+        {"Uuml", "220"}, // Ü - uppercase U, umlaut
+        {"Yacute", "221"}, // Ý - uppercase Y, acute accent
+        {"THORN", "222"}, // Þ - uppercase THORN, Icelandic
+        {"szlig", "223"}, // ß - lowercase sharps, German
+        {"agrave", "224"}, // à - lowercase a, grave accent
+        {"aacute", "225"}, // á - lowercase a, acute accent
+        {"acirc", "226"}, // â - lowercase a, circumflex accent
+        {"atilde", "227"}, // ã - lowercase a, tilde
+        {"auml", "228"}, // ä - lowercase a, umlaut
+        {"aring", "229"}, // å - lowercase a, ring
+        {"aelig", "230"}, // æ - lowercase ae
+        {"ccedil", "231"}, // ç - lowercase c, cedilla
+        {"egrave", "232"}, // è - lowercase e, grave accent
+        {"eacute", "233"}, // é - lowercase e, acute accent
+        {"ecirc", "234"}, // ê - lowercase e, circumflex accent
+        {"euml", "235"}, // ë - lowercase e, umlaut
+        {"igrave", "236"}, // ì - lowercase i, grave accent
+        {"iacute", "237"}, // í - lowercase i, acute accent
+        {"icirc", "238"}, // î - lowercase i, circumflex accent
+        {"iuml", "239"}, // ï - lowercase i, umlaut
+        {"eth", "240"}, // ð - lowercase eth, Icelandic
+        {"ntilde", "241"}, // ñ - lowercase n, tilde
+        {"ograve", "242"}, // ò - lowercase o, grave accent
+        {"oacute", "243"}, // ó - lowercase o, acute accent
+        {"ocirc", "244"}, // ô - lowercase o, circumflex accent
+        {"otilde", "245"}, // õ - lowercase o, tilde
+        {"ouml", "246"}, // ö - lowercase o, umlaut
+        {"divide", "247"}, // division sign
+        {"oslash", "248"}, // ø - lowercase o, slash
+        {"ugrave", "249"}, // ù - lowercase u, grave accent
+        {"uacute", "250"}, // ú - lowercase u, acute accent
+        {"ucirc", "251"}, // û - lowercase u, circumflex accent
+        {"uuml", "252"}, // ü - lowercase u, umlaut
+        {"yacute", "253"}, // ý - lowercase y, acute accent
+        {"thorn", "254"}, // þ - lowercase thorn, Icelandic
+        {"yuml", "255"}, // ÿ - lowercase y, umlaut
+    };
+
+    // http://www.w3.org/TR/REC-html40/sgml/entities.html
+    // package scoped for testing
+    static final String[][] HTML40_ARRAY = {
+    // <!-- Latin Extended-B -->
+        {"fnof", "402"}, // latin small f with hook = function= florin, U+0192 ISOtech -->
+        // <!-- Greek -->
+        {"Alpha", "913"}, // greek capital letter alpha, U+0391 -->
+        {"Beta", "914"}, // greek capital letter beta, U+0392 -->
+        {"Gamma", "915"}, // greek capital letter gamma,U+0393 ISOgrk3 -->
+        {"Delta", "916"}, // greek capital letter delta,U+0394 ISOgrk3 -->
+        {"Epsilon", "917"}, // greek capital letter epsilon, U+0395 -->
+        {"Zeta", "918"}, // greek capital letter zeta, U+0396 -->
+        {"Eta", "919"}, // greek capital letter eta, U+0397 -->
+        {"Theta", "920"}, // greek capital letter theta,U+0398 ISOgrk3 -->
+        {"Iota", "921"}, // greek capital letter iota, U+0399 -->
+        {"Kappa", "922"}, // greek capital letter kappa, U+039A -->
+        {"Lambda", "923"}, // greek capital letter lambda,U+039B ISOgrk3 -->
+        {"Mu", "924"}, // greek capital letter mu, U+039C -->
+        {"Nu", "925"}, // greek capital letter nu, U+039D -->
+        {"Xi", "926"}, // greek capital letter xi, U+039E ISOgrk3 -->
+        {"Omicron", "927"}, // greek capital letter omicron, U+039F -->
+        {"Pi", "928"}, // greek capital letter pi, U+03A0 ISOgrk3 -->
+        {"Rho", "929"}, // greek capital letter rho, U+03A1 -->
+        // <!-- there is no Sigmaf, and no U+03A2 character either -->
+        {"Sigma", "931"}, // greek capital letter sigma,U+03A3 ISOgrk3 -->
+        {"Tau", "932"}, // greek capital letter tau, U+03A4 -->
+        {"Upsilon", "933"}, // greek capital letter upsilon,U+03A5 ISOgrk3 -->
+        {"Phi", "934"}, // greek capital letter phi,U+03A6 ISOgrk3 -->
+        {"Chi", "935"}, // greek capital letter chi, U+03A7 -->
+        {"Psi", "936"}, // greek capital letter psi,U+03A8 ISOgrk3 -->
+        {"Omega", "937"}, // greek capital letter omega,U+03A9 ISOgrk3 -->
+        {"alpha", "945"}, // greek small letter alpha,U+03B1 ISOgrk3 -->
+        {"beta", "946"}, // greek small letter beta, U+03B2 ISOgrk3 -->
+        {"gamma", "947"}, // greek small letter gamma,U+03B3 ISOgrk3 -->
+        {"delta", "948"}, // greek small letter delta,U+03B4 ISOgrk3 -->
+        {"epsilon", "949"}, // greek small letter epsilon,U+03B5 ISOgrk3 -->
+        {"zeta", "950"}, // greek small letter zeta, U+03B6 ISOgrk3 -->
+        {"eta", "951"}, // greek small letter eta, U+03B7 ISOgrk3 -->
+        {"theta", "952"}, // greek small letter theta,U+03B8 ISOgrk3 -->
+        {"iota", "953"}, // greek small letter iota, U+03B9 ISOgrk3 -->
+        {"kappa", "954"}, // greek small letter kappa,U+03BA ISOgrk3 -->
+        {"lambda", "955"}, // greek small letter lambda,U+03BB ISOgrk3 -->
+        {"mu", "956"}, // greek small letter mu, U+03BC ISOgrk3 -->
+        {"nu", "957"}, // greek small letter nu, U+03BD ISOgrk3 -->
+        {"xi", "958"}, // greek small letter xi, U+03BE ISOgrk3 -->
+        {"omicron", "959"}, // greek small letter omicron, U+03BF NEW -->
+        {"pi", "960"}, // greek small letter pi, U+03C0 ISOgrk3 -->
+        {"rho", "961"}, // greek small letter rho, U+03C1 ISOgrk3 -->
+        {"sigmaf", "962"}, // greek small letter final sigma,U+03C2 ISOgrk3 -->
+        {"sigma", "963"}, // greek small letter sigma,U+03C3 ISOgrk3 -->
+        {"tau", "964"}, // greek small letter tau, U+03C4 ISOgrk3 -->
+        {"upsilon", "965"}, // greek small letter upsilon,U+03C5 ISOgrk3 -->
+        {"phi", "966"}, // greek small letter phi, U+03C6 ISOgrk3 -->
+        {"chi", "967"}, // greek small letter chi, U+03C7 ISOgrk3 -->
+        {"psi", "968"}, // greek small letter psi, U+03C8 ISOgrk3 -->
+        {"omega", "969"}, // greek small letter omega,U+03C9 ISOgrk3 -->
+        {"thetasym", "977"}, // greek small letter theta symbol,U+03D1 NEW -->
+        {"upsih", "978"}, // greek upsilon with hook symbol,U+03D2 NEW -->
+        {"piv", "982"}, // greek pi symbol, U+03D6 ISOgrk3 -->
+        // <!-- General Punctuation -->
+        {"bull", "8226"}, // bullet = black small circle,U+2022 ISOpub -->
+        // <!-- bullet is NOT the same as bullet operator, U+2219 -->
+        {"hellip", "8230"}, // horizontal ellipsis = three dot leader,U+2026 ISOpub -->
+        {"prime", "8242"}, // prime = minutes = feet, U+2032 ISOtech -->
+        {"Prime", "8243"}, // double prime = seconds = inches,U+2033 ISOtech -->
+        {"oline", "8254"}, // overline = spacing overscore,U+203E NEW -->
+        {"frasl", "8260"}, // fraction slash, U+2044 NEW -->
+        // <!-- Letterlike Symbols -->
+        {"weierp", "8472"}, // script capital P = power set= Weierstrass p, U+2118 ISOamso -->
+        {"image", "8465"}, // blackletter capital I = imaginary part,U+2111 ISOamso -->
+        {"real", "8476"}, // blackletter capital R = real part symbol,U+211C ISOamso -->
+        {"trade", "8482"}, // trade mark sign, U+2122 ISOnum -->
+        {"alefsym", "8501"}, // alef symbol = first transfinite cardinal,U+2135 NEW -->
+        // <!-- alef symbol is NOT the same as hebrew letter alef,U+05D0 although the
+        // same glyph could be used to depict both characters -->
+        // <!-- Arrows -->
+        {"larr", "8592"}, // leftwards arrow, U+2190 ISOnum -->
+        {"uarr", "8593"}, // upwards arrow, U+2191 ISOnum-->
+        {"rarr", "8594"}, // rightwards arrow, U+2192 ISOnum -->
+        {"darr", "8595"}, // downwards arrow, U+2193 ISOnum -->
+        {"harr", "8596"}, // left right arrow, U+2194 ISOamsa -->
+        {"crarr", "8629"}, // downwards arrow with corner leftwards= carriage return, U+21B5 NEW -->
+        {"lArr", "8656"}, // leftwards double arrow, U+21D0 ISOtech -->
+        // <!-- ISO 10646 does not say that lArr is the same as the 'is implied by'
+        // arrow but also does not have any other character for that function.
+        // So ? lArr canbe used for 'is implied by' as ISOtech suggests -->
+        {"uArr", "8657"}, // upwards double arrow, U+21D1 ISOamsa -->
+        {"rArr", "8658"}, // rightwards double arrow,U+21D2 ISOtech -->
+        // <!-- ISO 10646 does not say this is the 'implies' character but does not
+        // have another character with this function so ?rArr can be used for
+        // 'implies' as ISOtech suggests -->
+        {"dArr", "8659"}, // downwards double arrow, U+21D3 ISOamsa -->
+        {"hArr", "8660"}, // left right double arrow,U+21D4 ISOamsa -->
+        // <!-- Mathematical Operators -->
+        {"forall", "8704"}, // for all, U+2200 ISOtech -->
+        {"part", "8706"}, // partial differential, U+2202 ISOtech -->
+        {"exist", "8707"}, // there exists, U+2203 ISOtech -->
+        {"empty", "8709"}, // empty set = null set = diameter,U+2205 ISOamso -->
+        {"nabla", "8711"}, // nabla = backward difference,U+2207 ISOtech -->
+        {"isin", "8712"}, // element of, U+2208 ISOtech -->
+        {"notin", "8713"}, // not an element of, U+2209 ISOtech -->
+        {"ni", "8715"}, // contains as member, U+220B ISOtech -->
+        // <!-- should there be a more memorable name than 'ni'? -->
+        {"prod", "8719"}, // n-ary product = product sign,U+220F ISOamsb -->
+        // <!-- prod is NOT the same character as U+03A0 'greek capital letter pi'
+        // though the same glyph might be used for both -->
+        {"sum", "8721"}, // n-ary summation, U+2211 ISOamsb -->
+        // <!-- sum is NOT the same character as U+03A3 'greek capital letter sigma'
+        // though the same glyph might be used for both -->
+        {"minus", "8722"}, // minus sign, U+2212 ISOtech -->
+        {"lowast", "8727"}, // asterisk operator, U+2217 ISOtech -->
+        {"radic", "8730"}, // square root = radical sign,U+221A ISOtech -->
+        {"prop", "8733"}, // proportional to, U+221D ISOtech -->
+        {"infin", "8734"}, // infinity, U+221E ISOtech -->
+        {"ang", "8736"}, // angle, U+2220 ISOamso -->
+        {"and", "8743"}, // logical and = wedge, U+2227 ISOtech -->
+        {"or", "8744"}, // logical or = vee, U+2228 ISOtech -->
+        {"cap", "8745"}, // intersection = cap, U+2229 ISOtech -->
+        {"cup", "8746"}, // union = cup, U+222A ISOtech -->
+        {"int", "8747"}, // integral, U+222B ISOtech -->
+        {"there4", "8756"}, // therefore, U+2234 ISOtech -->
+        {"sim", "8764"}, // tilde operator = varies with = similar to,U+223C ISOtech -->
+        // <!-- tilde operator is NOT the same character as the tilde, U+007E,although
+        // the same glyph might be used to represent both -->
+        {"cong", "8773"}, // approximately equal to, U+2245 ISOtech -->
+        {"asymp", "8776"}, // almost equal to = asymptotic to,U+2248 ISOamsr -->
+        {"ne", "8800"}, // not equal to, U+2260 ISOtech -->
+        {"equiv", "8801"}, // identical to, U+2261 ISOtech -->
+        {"le", "8804"}, // less-than or equal to, U+2264 ISOtech -->
+        {"ge", "8805"}, // greater-than or equal to,U+2265 ISOtech -->
+        {"sub", "8834"}, // subset of, U+2282 ISOtech -->
+        {"sup", "8835"}, // superset of, U+2283 ISOtech -->
+        // <!-- note that nsup, 'not a superset of, U+2283' is not covered by the
+        // Symbol font encoding and is not included. Should it be, for symmetry?
+        // It is in ISOamsn --> <!ENTITY nsub", "8836"},
+        // not a subset of, U+2284 ISOamsn -->
+        {"sube", "8838"}, // subset of or equal to, U+2286 ISOtech -->
+        {"supe", "8839"}, // superset of or equal to,U+2287 ISOtech -->
+        {"oplus", "8853"}, // circled plus = direct sum,U+2295 ISOamsb -->
+        {"otimes", "8855"}, // circled times = vector product,U+2297 ISOamsb -->
+        {"perp", "8869"}, // up tack = orthogonal to = perpendicular,U+22A5 ISOtech -->
+        {"sdot", "8901"}, // dot operator, U+22C5 ISOamsb -->
+        // <!-- dot operator is NOT the same character as U+00B7 middle dot -->
+        // <!-- Miscellaneous Technical -->
+        {"lceil", "8968"}, // left ceiling = apl upstile,U+2308 ISOamsc -->
+        {"rceil", "8969"}, // right ceiling, U+2309 ISOamsc -->
+        {"lfloor", "8970"}, // left floor = apl downstile,U+230A ISOamsc -->
+        {"rfloor", "8971"}, // right floor, U+230B ISOamsc -->
+        {"lang", "9001"}, // left-pointing angle bracket = bra,U+2329 ISOtech -->
+        // <!-- lang is NOT the same character as U+003C 'less than' or U+2039 'single left-pointing angle quotation
+        // mark' -->
+        {"rang", "9002"}, // right-pointing angle bracket = ket,U+232A ISOtech -->
+        // <!-- rang is NOT the same character as U+003E 'greater than' or U+203A
+        // 'single right-pointing angle quotation mark' -->
+        // <!-- Geometric Shapes -->
+        {"loz", "9674"}, // lozenge, U+25CA ISOpub -->
+        // <!-- Miscellaneous Symbols -->
+        {"spades", "9824"}, // black spade suit, U+2660 ISOpub -->
+        // <!-- black here seems to mean filled as opposed to hollow -->
+        {"clubs", "9827"}, // black club suit = shamrock,U+2663 ISOpub -->
+        {"hearts", "9829"}, // black heart suit = valentine,U+2665 ISOpub -->
+        {"diams", "9830"}, // black diamond suit, U+2666 ISOpub -->
+
+        // <!-- Latin Extended-A -->
+        {"OElig", "338"}, // -- latin capital ligature OE,U+0152 ISOlat2 -->
+        {"oelig", "339"}, // -- latin small ligature oe, U+0153 ISOlat2 -->
+        // <!-- ligature is a misnomer, this is a separate character in some languages -->
+        {"Scaron", "352"}, // -- latin capital letter S with caron,U+0160 ISOlat2 -->
+        {"scaron", "353"}, // -- latin small letter s with caron,U+0161 ISOlat2 -->
+        {"Yuml", "376"}, // -- latin capital letter Y with diaeresis,U+0178 ISOlat2 -->
+        // <!-- Spacing Modifier Letters -->
+        {"circ", "710"}, // -- modifier letter circumflex accent,U+02C6 ISOpub -->
+        {"tilde", "732"}, // small tilde, U+02DC ISOdia -->
+        // <!-- General Punctuation -->
+        {"ensp", "8194"}, // en space, U+2002 ISOpub -->
+        {"emsp", "8195"}, // em space, U+2003 ISOpub -->
+        {"thinsp", "8201"}, // thin space, U+2009 ISOpub -->
+        {"zwnj", "8204"}, // zero width non-joiner,U+200C NEW RFC 2070 -->
+        {"zwj", "8205"}, // zero width joiner, U+200D NEW RFC 2070 -->
+        {"lrm", "8206"}, // left-to-right mark, U+200E NEW RFC 2070 -->
+        {"rlm", "8207"}, // right-to-left mark, U+200F NEW RFC 2070 -->
+        {"ndash", "8211"}, // en dash, U+2013 ISOpub -->
+        {"mdash", "8212"}, // em dash, U+2014 ISOpub -->
+        {"lsquo", "8216"}, // left single quotation mark,U+2018 ISOnum -->
+        {"rsquo", "8217"}, // right single quotation mark,U+2019 ISOnum -->
+        {"sbquo", "8218"}, // single low-9 quotation mark, U+201A NEW -->
+        {"ldquo", "8220"}, // left double quotation mark,U+201C ISOnum -->
+        {"rdquo", "8221"}, // right double quotation mark,U+201D ISOnum -->
+        {"bdquo", "8222"}, // double low-9 quotation mark, U+201E NEW -->
+        {"dagger", "8224"}, // dagger, U+2020 ISOpub -->
+        {"Dagger", "8225"}, // double dagger, U+2021 ISOpub -->
+        {"permil", "8240"}, // per mille sign, U+2030 ISOtech -->
+        {"lsaquo", "8249"}, // single left-pointing angle quotation mark,U+2039 ISO proposed -->
+        // <!-- lsaquo is proposed but not yet ISO standardized -->
+        {"rsaquo", "8250"}, // single right-pointing angle quotation mark,U+203A ISO proposed -->
+        // <!-- rsaquo is proposed but not yet ISO standardized -->
+        {"euro", "8364"}, // -- euro sign, U+20AC NEW -->
+    };
+
+    /**
+     * <p>
+     * The set of entities supported by standard XML.
+     * </p>
+     */
+    public static final Entities XML;
+
+    /**
+     * <p>
+     * The set of entities supported by HTML 3.2.
+     * </p>
+     */
+    public static final Entities HTML32;
+
+    /**
+     * <p>
+     * The set of entities supported by HTML 4.0.
+     * </p>
+     */
+    public static final Entities HTML40;
+
+    static {
+        XML = new Entities();
+        XML.addEntities(BASIC_ARRAY);
+        XML.addEntities(APOS_ARRAY);
+    }
+
+    static {
+        HTML32 = new Entities();
+        HTML32.addEntities(BASIC_ARRAY);
+        HTML32.addEntities(ISO8859_1_ARRAY);
+    }
+
+    static {
+        HTML40 = new Entities();
+        fillWithHtml40Entities(HTML40);
+    }
+
+    /**
+     * <p>
+     * Fills the specified entities instance with HTML 40 entities.
+     * </p>
+     * 
+     * @param entities
+     *            the instance to be filled.
+     */
+    static void fillWithHtml40Entities(Entities entities) {
+        entities.addEntities(BASIC_ARRAY);
+        entities.addEntities(ISO8859_1_ARRAY);
+        entities.addEntities(HTML40_ARRAY);
+    }
+
+    static interface EntityMap {
+        /**
+         * <p>
+         * Add an entry to this entity map.
+         * </p>
+         * 
+         * @param name
+         *            the entity name
+         * @param value
+         *            the entity value
+         */
+        void add(String name, int value);
+
+        /**
+         * <p>
+         * Returns the name of the entity identified by the specified value.
+         * </p>
+         * 
+         * @param value
+         *            the value to locate
+         * @return entity name associated with the specified value
+         */
+        String name(int value);
+
+        /**
+         * <p>
+         * Returns the value of the entity identified by the specified name.
+         * </p>
+         * 
+         * @param name
+         *            the name to locate
+         * @return entity value associated with the specified name
+         */
+        int value(String name);
+    }
+
+    static class PrimitiveEntityMap implements EntityMap {
+        private Map mapNameToValue = new HashMap();
+
+        private IntHashMap mapValueToName = new IntHashMap();
+
+        /**
+         * {@inheritDoc}
+         */
+        public void add(String name, int value) {
+            mapNameToValue.put(name, new Integer(value));
+            mapValueToName.put(value, name);
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public String name(int value) {
+            return (String) mapValueToName.get(value);
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public int value(String name) {
+            Object value = mapNameToValue.get(name);
+            if (value == null) {
+                return -1;
+            }
+            return ((Integer) value).intValue();
+        }
+    }
+
+    static abstract class MapIntMap implements Entities.EntityMap {
+        protected Map mapNameToValue;
+
+        protected Map mapValueToName;
+
+        /**
+         * {@inheritDoc}
+         */
+        public void add(String name, int value) {
+            mapNameToValue.put(name, new Integer(value));
+            mapValueToName.put(new Integer(value), name);
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public String name(int value) {
+            return (String) mapValueToName.get(new Integer(value));
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public int value(String name) {
+            Object value = mapNameToValue.get(name);
+            if (value == null) {
+                return -1;
+            }
+            return ((Integer) value).intValue();
+        }
+    }
+
+    static class HashEntityMap extends MapIntMap {
+        /**
+         * Constructs a new instance of <code>HashEntityMap</code>.
+         */
+        public HashEntityMap() {
+            mapNameToValue = new HashMap();
+            mapValueToName = new HashMap();
+        }
+    }
+
+    static class TreeEntityMap extends MapIntMap {
+        /**
+         * Constructs a new instance of <code>TreeEntityMap</code>.
+         */
+        public TreeEntityMap() {
+            mapNameToValue = new TreeMap();
+            mapValueToName = new TreeMap();
+        }
+    }
+
+    static class LookupEntityMap extends PrimitiveEntityMap {
+        private String[] lookupTable;
+
+        private int LOOKUP_TABLE_SIZE = 256;
+
+        /**
+         * {@inheritDoc}
+         */
+        public String name(int value) {
+            if (value < LOOKUP_TABLE_SIZE) {
+                return lookupTable()[value];
+            }
+            return super.name(value);
+        }
+
+        /**
+         * <p>
+         * Returns the lookup table for this entity map. The lookup table is created if it has not been previously.
+         * </p>
+         * 
+         * @return the lookup table
+         */
+        private String[] lookupTable() {
+            if (lookupTable == null) {
+                createLookupTable();
+            }
+            return lookupTable;
+        }
+
+        /**
+         * <p>
+         * Creates an entity lookup table of LOOKUP_TABLE_SIZE elements, initialized with entity names.
+         * </p>
+         */
+        private void createLookupTable() {
+            lookupTable = new String[LOOKUP_TABLE_SIZE];
+            for (int i = 0; i < LOOKUP_TABLE_SIZE; ++i) {
+                lookupTable[i] = super.name(i);
+            }
+        }
+    }
+
+    static class ArrayEntityMap implements EntityMap {
+        protected int growBy = 100;
+
+        protected int size = 0;
+
+        protected String[] names;
+
+        protected int[] values;
+
+        /**
+         * Constructs a new instance of <code>ArrayEntityMap</code>.
+         */
+        public ArrayEntityMap() {
+            names = new String[growBy];
+            values = new int[growBy];
+        }
+
+        /**
+         * Constructs a new instance of <code>ArrayEntityMap</code> specifying the size by which the array should
+         * grow.
+         * 
+         * @param growBy
+         *            array will be initialized to and will grow by this amount
+         */
+        public ArrayEntityMap(int growBy) {
+            this.growBy = growBy;
+            names = new String[growBy];
+            values = new int[growBy];
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public void add(String name, int value) {
+            ensureCapacity(size + 1);
+            names[size] = name;
+            values[size] = value;
+            size++;
+        }
+
+        /**
+         * Verifies the capacity of the entity array, adjusting the size if necessary.
+         * 
+         * @param capacity
+         *            size the array should be
+         */
+        protected void ensureCapacity(int capacity) {
+            if (capacity > names.length) {
+                int newSize = Math.max(capacity, size + growBy);
+                String[] newNames = new String[newSize];
+                System.arraycopy(names, 0, newNames, 0, size);
+                names = newNames;
+                int[] newValues = new int[newSize];
+                System.arraycopy(values, 0, newValues, 0, size);
+                values = newValues;
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public String name(int value) {
+            for (int i = 0; i < size; ++i) {
+                if (values[i] == value) {
+                    return names[i];
+                }
+            }
+            return null;
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public int value(String name) {
+            for (int i = 0; i < size; ++i) {
+                if (names[i].equals(name)) {
+                    return values[i];
+                }
+            }
+            return -1;
+        }
+    }
+
+    static class BinaryEntityMap extends ArrayEntityMap {
+
+        /**
+         * Constructs a new instance of <code>BinaryEntityMap</code>.
+         */
+        public BinaryEntityMap() {
+            super();
+        }
+
+        /**
+         * Constructs a new instance of <code>ArrayEntityMap</code> specifying the size by which the underlying array
+         * should grow.
+         * 
+         * @param growBy
+         *            array will be initialized to and will grow by this amount
+         */
+        public BinaryEntityMap(int growBy) {
+            super(growBy);
+        }
+
+        /**
+         * Performs a binary search of the entity array for the specified key. This method is based on code in
+         * {@link java.util.Arrays}.
+         * 
+         * @param key
+         *            the key to be found
+         * @return the index of the entity array matching the specified key
+         */
+        private int binarySearch(int key) {
+            int low = 0;
+            int high = size - 1;
+
+            while (low <= high) {
+                int mid = (low + high) >> 1;
+                int midVal = values[mid];
+
+                if (midVal < key) {
+                    low = mid + 1;
+                } else if (midVal > key) {
+                    high = mid - 1;
+                } else {
+                    return mid; // key found
+                }
+            }
+            return -(low + 1); // key not found.
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public void add(String name, int value) {
+            ensureCapacity(size + 1);
+            int insertAt = binarySearch(value);
+            if (insertAt > 0) {
+                return; // note: this means you can't insert the same value twice
+            }
+            insertAt = -(insertAt + 1); // binarySearch returns it negative and off-by-one
+            System.arraycopy(values, insertAt, values, insertAt + 1, size - insertAt);
+            values[insertAt] = value;
+            System.arraycopy(names, insertAt, names, insertAt + 1, size - insertAt);
+            names[insertAt] = name;
+            size++;
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public String name(int value) {
+            int index = binarySearch(value);
+            if (index < 0) {
+                return null;
+            }
+            return names[index];
+        }
+    }
+
+    // package scoped for testing
+    EntityMap map = new Entities.LookupEntityMap();
+
+    /**
+     * <p>
+     * Adds entities to this entity.
+     * </p>
+     * 
+     * @param entityArray
+     *            array of entities to be added
+     */
+    public void addEntities(String[][] entityArray) {
+        for (int i = 0; i < entityArray.length; ++i) {
+            addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));
+        }
+    }
+
+    /**
+     * <p>
+     * Add an entity to this entity.
+     * </p>
+     * 
+     * @param name
+     *            name of the entity
+     * @param value
+     *            vale of the entity
+     */
+    public void addEntity(String name, int value) {
+        map.add(name, value);
+    }
+
+    /**
+     * <p>
+     * Returns the name of the entity identified by the specified value.
+     * </p>
+     * 
+     * @param value
+     *            the value to locate
+     * @return entity name associated with the specified value
+     */
+    public String entityName(int value) {
+        return map.name(value);
+    }
+
+    /**
+     * <p>
+     * Returns the value of the entity identified by the specified name.
+     * </p>
+     * 
+     * @param name
+     *            the name to locate
+     * @return entity value associated with the specified name
+     */
+    public int entityValue(String name) {
+        return map.value(name);
+    }
+
+    /**
+     * <p>
+     * Escapes the characters in a <code>String</code>.
+     * </p>
+     * 
+     * <p>
+     * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), escape(&quot;\u00A1&quot;) will return
+     * &quot;&amp;foo;&quot;
+     * </p>
+     * 
+     * @param str
+     *            The <code>String</code> to escape.
+     * @return A new escaped <code>String</code>.
+     */
+    public String escape(String str) {
+        StringWriter stringWriter = createStringWriter(str);
+        try {
+            this.escape(stringWriter, str);
+        } catch (IOException e) {
+            // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not
+            // throw IOExceptions.
+            throw new RuntimeException(e);
+        }
+        return stringWriter.toString();
+    }
+
+    /**
+     * <p>
+     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
+     * passed.
+     * </p>
+     * 
+     * @param writer
+     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
+     * @param str
+     *            The <code>String</code> to escape. Assumed to be a non-null value.
+     * @throws IOException
+     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
+     *             methods.
+     * 
+     * @see #escape(String)
+     * @see Writer
+     */
+    public void escape(Writer writer, String str) throws IOException {
+        int len = str.length();
+        for (int i = 0; i < len; i++) {
+            char c = str.charAt(i);
+            String entityName = this.entityName(c);
+            if (entityName == null) {
+                if (c > 0x7F) {
+                    writer.write("&#");
+                    writer.write(Integer.toString(c, 10));
+                    writer.write(';');
+                } else {
+                    writer.write(c);
+                }
+            } else {
+                writer.write('&');
+                writer.write(entityName);
+                writer.write(';');
+            }
+        }
+    }
+
+    /**
+     * <p>
+     * Unescapes the entities in a <code>String</code>.
+     * </p>
+     * 
+     * <p>
+     * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), unescape(&quot;&amp;foo;&quot;) will return
+     * &quot;\u00A1&quot;
+     * </p>
+     * 
+     * @param str
+     *            The <code>String</code> to escape.
+     * @return A new escaped <code>String</code>.
+     */
+    public String unescape(String str) {
+        int firstAmp = str.indexOf('&');
+        if (firstAmp < 0) {
+            return str;
+        } else {
+            StringWriter stringWriter = createStringWriter(str);
+            try {
+                this.doUnescape(stringWriter, str, firstAmp);
+            } catch (IOException e) {
+                // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) 
+                // do not throw IOExceptions.
+                throw new RuntimeException(e);
+            }
+            return stringWriter.toString();
+        }
+    }
+
+    /**
+     * Make the StringWriter 10% larger than the source String to avoid growing the writer
+     *
+     * @param str The source string
+     * @return A newly created StringWriter
+     */
+    private StringWriter createStringWriter(String str) {
+        return new StringWriter((int) (str.length() + (str.length() * 0.1)));
+    }
+
+    /**
+     * <p>
+     * Unescapes the escaped entities in the <code>String</code> passed and writes the result to the
+     * <code>Writer</code> passed.
+     * </p>
+     * 
+     * @param writer
+     *            The <code>Writer</code> to write the results to; assumed to be non-null.
+     * @param str
+     *            The source <code>String</code> to unescape; assumed to be non-null.
+     * @throws IOException
+     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
+     *             methods.
+     * 
+     * @see #escape(String)
+     * @see Writer
+     */
+    public void unescape(Writer writer, String str) throws IOException {
+        int firstAmp = str.indexOf('&');
+        if (firstAmp < 0) {
+            writer.write(str);
+            return;
+        } else {
+            doUnescape(writer, str, firstAmp);
+        }
+    }
+
+    /**
+     * Underlying unescape method that allows the optimisation of not starting from the 0 index again.
+     *
+     * @param writer
+     *            The <code>Writer</code> to write the results to; assumed to be non-null.
+     * @param str
+     *            The source <code>String</code> to unescape; assumed to be non-null.
+     * @param firstAmp
+     *            The <code>int</code> index of the first ampersand in the source String.
+     * @throws IOException
+     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
+     *             methods.
+     */
+    private void doUnescape(Writer writer, String str, int firstAmp) throws IOException {
+        writer.write(str, 0, firstAmp);
+        int len = str.length();
+        for (int i = firstAmp; i < len; i++) {
+            char c = str.charAt(i);
+            if (c == '&') {
+                int nextIdx = i + 1;
+                int semiColonIdx = str.indexOf(';', nextIdx);
+                if (semiColonIdx == -1) {
+                    writer.write(c);
+                    continue;
+                }
+                int amphersandIdx = str.indexOf('&', i + 1);
+                if (amphersandIdx != -1 && amphersandIdx < semiColonIdx) {
+                    // Then the text looks like &...&...;
+                    writer.write(c);
+                    continue;
+                }
+                String entityContent = str.substring(nextIdx, semiColonIdx);
+                int entityValue = -1;
+                int entityContentLen = entityContent.length();
+                if (entityContentLen > 0) {
+                    if (entityContent.charAt(0) == '#') { // escaped value content is an integer (decimal or
+                        // hexidecimal)
+                        if (entityContentLen > 1) {
+                            char isHexChar = entityContent.charAt(1);
+                            try {
+                                switch (isHexChar) {
+                                    case 'X' :
+                                    case 'x' : {
+                                        entityValue = Integer.parseInt(entityContent.substring(2), 16);
+                                        break;
+                                    }
+                                    default : {
+                                        entityValue = Integer.parseInt(entityContent.substring(1), 10);
+                                    }
+                                }
+                                if (entityValue > 0xFFFF) {
+                                    entityValue = -1;
+                                }
+                            } catch (NumberFormatException e) {
+                                entityValue = -1;
+                            }
+                        }
+                    } else { // escaped value content is an entity name
+                        entityValue = this.entityValue(entityContent);
+                    }
+                }
+
+                if (entityValue == -1) {
+                    writer.write('&');
+                    writer.write(entityContent);
+                    writer.write(';');
+                } else {
+                    writer.write(entityValue);
+                }
+                i = semiColonIdx; // move index up to the semi-colon
+            } else {
+                writer.write(c);
+            }
+        }
+    }
+
+}
diff -ruN hpricot-0.6/ext/fast_xs/extconf.rb hpricot/ext/fast_xs/extconf.rb
--- hpricot-0.6/ext/fast_xs/extconf.rb	1970-01-01 01:00:00.000000000 +0100
+++ hpricot/ext/fast_xs/extconf.rb	2009-02-19 19:39:17.000000000 +0100
@@ -0,0 +1,4 @@
+require 'mkmf'
+have_header('stdio.h') or exit
+dir_config('fast_xs')
+create_makefile('fast_xs')
diff -ruN hpricot-0.6/ext/fast_xs/fast_xs.c hpricot/ext/fast_xs/fast_xs.c
--- hpricot-0.6/ext/fast_xs/fast_xs.c	1970-01-01 01:00:00.000000000 +0100
+++ hpricot/ext/fast_xs/fast_xs.c	2009-02-19 19:39:17.000000000 +0100
@@ -0,0 +1,200 @@
+#define VERSION	"0.1"
+
+#include <ruby.h>
+#include <assert.h>
+/* #include <stdio.h> */
+
+#ifndef RARRAY_LEN
+#define RARRAY_LEN(arr)  RARRAY(arr)->len
+#define RSTRING_LEN(str) RSTRING(str)->len
+#define RSTRING_PTR(str) RSTRING(str)->ptr
+#endif
+
+static ID unpack_id;
+static VALUE U_fmt, C_fmt;
+
+/* give GCC hints for better branch prediction
+ * (we layout branches so that ASCII characters are handled faster) */
+#if defined(__GNUC__) && (__GNUC__ >= 3)
+#  define likely(x)		__builtin_expect (!!(x), 1)
+#  define unlikely(x)		__builtin_expect (!!(x), 0)
+#else
+#  define unlikely(x)		(x)
+#  define likely(x)		(x)
+#endif
+
+/* pass-through certain characters for CP-1252 */
+#define p(x) (x-128)
+
+static const int cp_1252[] = {
+	8364,		/* 128 => 8364, euro sign */
+	p(129),		/* 129 => 129,  pass-through */
+	8218,		/* 130 => 8218, single low-9 quotation mark */
+	402,		/* 131 =>  402, latin small letter f with hook */
+	8222,		/* 132 => 8222, double low-9 quotation mark */
+	8230,		/* 133 => 8230, horizontal ellipsis */
+	8224,		/* 134 => 8224, dagger */
+	8225,		/* 135 => 8225, double dagger */
+	710,		/* 136 =>  710, modifier letter circumflex accent */
+	8240,		/* 137 => 8240, per mille sign */
+	352,		/* 138 =>  352, latin capital letter s with caron */
+	8249,		/* 139 => 8249, single left-pointing angle quotation mark */
+	338,		/* 140 =>  338, latin capital ligature oe */
+	p(141),		/* 141 =>  141, pass-through */
+	381,		/* 142 =>  381, latin capital letter z with caron */
+	p(143),		/* 143 =>  143, pass-through */
+	p(144),		/* 144 =>  144, pass-through */
+	8216,		/* 145 => 8216, left single quotation mark */
+	8217,		/* 146 => 8217, right single quotation mark */
+	8220,		/* 147 => 8220, left double quotation mark */
+	8221,		/* 148 => 8221, right double quotation mark */
+	8226,		/* 149 => 8226, bullet */
+	8211,		/* 150 => 8211, en dash */
+	8212,		/* 151 => 8212, em dash */
+	732,		/* 152 =>  732, small tilde */
+	8482,		/* 153 => 8482, trade mark sign */
+	353,		/* 154 =>  353, latin small letter s with caron */
+	8250,		/* 155 => 8250, single right-pointing angle quotation mark */
+	339,		/* 156 =>  339, latin small ligature oe */
+	p(157),		/* 157 =>  157, pass-through */
+	382,		/* 158 =>  382, latin small letter z with caron */
+	376		/* 159 =>  376} latin capital letter y with diaeresis */
+};
+
+#define VALID_VALUE(n) \
+	(n >= 0x20 && n <= 0xD7FF) || \
+	    (n >= 0xE000 && n <= 0xFFFD) || \
+	    (n >= 0x10000 && n <= 0x10FFFF)
+
+#define CP_1252_ESCAPE(n) do { \
+	if (n >= 128 && n <= 159) \
+		n = cp_1252[n - 128]; \
+	} while(0)
+
+#define return_const_len(x) do { \
+	memcpy(buf, x, sizeof(x) - 1); \
+	return (sizeof(x) - 1); \
+} while (0)
+
+static inline size_t bytes_for(int n)
+{
+	if (n < 1000)
+		return sizeof("&#999;") - 1;
+	if (n < 10000)
+		return sizeof("&#9999;") - 1;
+	if (n < 100000)
+		return sizeof("&#99999;") - 1;
+	if (n < 1000000)
+		return sizeof("&#999999;") - 1;
+	/* if (n < 10000000), we won't have cases above 0x10FFFF */
+	return sizeof("&#9999999;") - 1;
+}
+
+static long escape(char *buf, int n)
+{
+	/* handle ASCII first */
+	if (likely(n < 128)) {
+		if (likely(n >= 0x20 || n == 0x9 || n == 0xA || n == 0xD)) {
+			if (unlikely(n == 34))
+				return_const_len("&quot;");
+			if (unlikely(n == 38))
+				return_const_len("&amp;");
+			if (unlikely(n == 60))
+				return_const_len("&lt;");
+			if (unlikely(n == 62))
+				return_const_len("&gt;");
+			buf[0] = (char)n;
+			return 1;
+		}
+
+		buf[0] = '*';
+		return 1;
+	}
+
+	CP_1252_ESCAPE(n);
+
+	if (VALID_VALUE(n)) {
+		/* return snprintf(buf, sizeof("&#1114111;"), "&#%i;", n); */
+		extern const char ruby_digitmap[];
+		int rv = 3; /* &#; */
+		buf += bytes_for(n);
+		*--buf = ';';
+		do {
+			*--buf = ruby_digitmap[(int)(n % 10)];
+			++rv;
+		} while (n /= 10);
+		*--buf = '#';
+		*--buf = '&';
+		return rv;
+	}
+	buf[0] = '*';
+	return 1;
+}
+
+#undef return_const_len
+
+static long escaped_len(int n)
+{
+	if (likely(n < 128)) {
+		if (unlikely(n == 34))
+			return (sizeof("&quot;") - 1);
+		if (unlikely(n == 38))
+			return (sizeof("&amp;") - 1);
+		if (unlikely(n == 60 || n == 62))
+			return (sizeof("&gt;") - 1);
+		return 1;
+	}
+
+	CP_1252_ESCAPE(n);
+
+	if (VALID_VALUE(n))
+		return bytes_for(n);
+	return 1;
+}
+
+static VALUE unpack_utf8(VALUE self)
+{
+	return rb_funcall(self, unpack_id, 1, U_fmt);
+}
+
+static VALUE unpack_uchar(VALUE self)
+{
+	return rb_funcall(self, unpack_id, 1, C_fmt);
+}
+
+VALUE fast_xs(VALUE self)
+{
+	long i;
+	struct RArray *array;
+	char *s, *c;
+	long s_len = 0;
+	VALUE *tmp;
+
+	array = RARRAY(rb_rescue(unpack_utf8, self, unpack_uchar, self));
+
+	tmp = RARRAY_PTR(array);
+	for (i = RARRAY_LEN(array); --i >= 0; tmp++)
+		s_len += escaped_len(NUM2INT(*tmp));
+
+	c = s = alloca(s_len + 1);
+
+	tmp = RARRAY_PTR(array);
+	for (i = RARRAY_LEN(array); --i >= 0; tmp++)
+		c += escape(c, NUM2INT(*tmp));
+
+	*c = '\0';
+	return rb_str_new(s, s_len);
+}
+
+void Init_fast_xs(void)
+{
+	assert(cp_1252[159 - 128] == 376); /* just in case I skipped a line */
+
+	unpack_id = rb_intern("unpack");
+	U_fmt = rb_str_new("U*", 2);
+	C_fmt = rb_str_new("C*", 2);
+	rb_global_variable(&U_fmt);
+	rb_global_variable(&C_fmt);
+
+	rb_define_method(rb_cString, "fast_xs", fast_xs, 0);
+}
diff -ruN hpricot-0.6/ext/hpricot_scan/HpricotScanService.java hpricot/ext/hpricot_scan/HpricotScanService.java
--- hpricot-0.6/ext/hpricot_scan/HpricotScanService.java	2007-06-16 00:30:02.000000000 +0200
+++ hpricot/ext/hpricot_scan/HpricotScanService.java	2009-02-19 19:39:17.000000000 +0100
@@ -1,3 +1,4 @@
+// line 1 "ext/hpricot_scan/hpricot_scan.java.rl"
 
 import java.io.IOException;
 
@@ -6,7 +7,9 @@
 import org.jruby.RubyHash;
 import org.jruby.RubyModule;
 import org.jruby.RubyNumeric;
+import org.jruby.RubyObjectAdapter;
 import org.jruby.RubyString;
+import org.jruby.javasupport.JavaEmbedUtils;
 import org.jruby.runtime.Block;
 import org.jruby.runtime.CallbackFactory;
 import org.jruby.runtime.builtin.IRubyObject;
@@ -15,13 +18,14 @@
 
 public class HpricotScanService implements BasicLibraryService {
        public static String NO_WAY_SERIOUSLY="*** This should not happen, please send a bug report with the HTML you're parsing to why@whytheluckystiff.net.  So sorry!";
+       private static RubyObjectAdapter rubyApi;
 
        public void ELE(IRubyObject N) {
-         if (tokend > tokstart || text) {
+         if (te > ts || text) {
            IRubyObject raw_string = runtime.getNil();
            ele_open = false; text = false;
-           if (tokstart != -1 && N != cdata && N != sym_text && N != procins && N != comment) { 
-             raw_string = runtime.newString(new String(buf,tokstart,tokend-tokstart));
+           if (ts != -1 && N != cdata && N != sym_text && N != procins && N != comment) { 
+             raw_string = runtime.newString(new String(buf,ts,te-ts));
            } 
            rb_yield_tokens(N, tag[0], attr, raw_string, taint);
          }
@@ -75,13 +79,13 @@
            } else if(N == aval) {
              mark = mark_aval;
            }
-           if(mark > tokstart) {
+           if(mark > ts) {
              if(N == tag) {
-               mark_tag  -= tokstart;
+               mark_tag  -= ts;
              } else if(N == akey) {
-               mark_akey -= tokstart;
+               mark_akey -= ts;
              } else if(N == aval) {
-               mark_aval -= tokstart;
+               mark_aval -= ts;
              }
            }
        }
@@ -91,7 +95,8 @@
            if(attr.isNil()) {
              attr = RubyHash.newHash(runtime);
            }
-           ((RubyHash)attr).aset(K,V);
+           ((RubyHash)attr).op_aset(runtime.getCurrentContext(),K,V);
+           // ((RubyHash)attr).aset(K,V);
          }
        }
 
@@ -111,8 +116,8 @@
          if(!text) { 
            if(ele_open) { 
              ele_open = false; 
-             if(tokstart > -1) { 
-               mark_tag = tokstart; 
+             if(ts > -1) { 
+               mark_tag = ts; 
              } 
            } else {
              mark_tag = p; 
@@ -137,743 +142,617 @@
               return runtime.newString(s);
        }
 
+// line 189 "ext/hpricot_scan/hpricot_scan.java.rl"
 
 
 
-static final byte[] _hpricot_scan_actions = {
-	0, 1, 1, 1, 2, 1, 4, 1, 
-	5, 1, 6, 1, 7, 1, 8, 1, 
-	9, 1, 10, 1, 11, 1, 12, 1, 
-	14, 1, 16, 1, 20, 1, 21, 1, 
-	22, 1, 24, 1, 25, 1, 26, 1, 
-	28, 1, 29, 1, 30, 1, 32, 1, 
-	33, 1, 38, 1, 39, 1, 40, 1, 
-	41, 1, 42, 1, 43, 1, 44, 1, 
-	45, 1, 46, 1, 47, 1, 48, 1, 
-	49, 1, 50, 2, 2, 5, 2, 2, 
-	6, 2, 2, 11, 2, 2, 12, 2, 
-	2, 14, 2, 4, 39, 2, 4, 40, 
-	2, 4, 41, 2, 5, 2, 2, 6, 
-	14, 2, 7, 6, 2, 7, 14, 2, 
-	11, 12, 2, 13, 3, 2, 14, 6, 
-	2, 14, 40, 2, 15, 24, 2, 15, 
-	28, 2, 15, 32, 2, 15, 45, 2, 
-	17, 23, 2, 18, 27, 2, 19, 31, 
-	2, 22, 34, 2, 22, 36, 3, 2, 
-	6, 14, 3, 2, 14, 6, 3, 6, 
-	7, 14, 3, 6, 14, 40, 3, 7, 
-	14, 40, 3, 14, 6, 40, 3, 14, 
-	13, 3, 3, 22, 0, 37, 3, 22, 
-	2, 34, 3, 22, 14, 35, 4, 2, 
-	14, 13, 3, 4, 6, 7, 14, 40, 
-	4, 22, 2, 14, 35, 4, 22, 6, 
-	14, 35, 4, 22, 7, 14, 35, 4, 
-	22, 14, 6, 35, 5, 22, 2, 6, 
-	14, 35, 5, 22, 2, 14, 6, 35, 
-	5, 22, 6, 7, 14, 35
-};
-
-static final short[] _hpricot_scan_key_offsets = {
-	0, 3, 4, 5, 6, 7, 8, 9, 
-	10, 13, 22, 37, 44, 45, 46, 47, 
-	48, 49, 52, 57, 69, 81, 86, 93, 
-	94, 95, 100, 101, 105, 106, 107, 121, 
-	135, 152, 169, 186, 203, 210, 212, 214, 
-	220, 222, 227, 232, 238, 240, 245, 251, 
-	265, 266, 267, 268, 269, 270, 271, 272, 
-	273, 274, 275, 276, 282, 296, 300, 313, 
-	326, 340, 354, 355, 366, 375, 388, 405, 
-	423, 441, 450, 461, 480, 499, 510, 521, 
-	536, 538, 540, 556, 572, 575, 587, 599, 
-	619, 639, 658, 677, 697, 717, 728, 739, 
-	751, 763, 775, 791, 794, 809, 811, 813, 
-	829, 845, 848, 860, 871, 890, 910, 930, 
-	941, 952, 964, 984, 1004, 1016, 1036, 1057, 
-	1074, 1091, 1095, 1098, 1110, 1122, 1142, 1162, 
-	1182, 1194, 1206, 1226, 1242, 1258, 1270, 1291, 
-	1310, 1313, 1328, 1340, 1355, 1358, 1369, 1371, 
-	1373, 1384, 1391, 1404, 1418, 1432, 1445, 1446, 
-	1447, 1448, 1449, 1450, 1451, 1455, 1460, 1469, 
-	1479, 1484, 1491, 1492, 1493, 1494, 1495, 1496, 
-	1497, 1498, 1499, 1503, 1508, 1512, 1522, 1527, 
-	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 
-	1541, 1542, 1546, 1551, 1553, 1554, 1555, 1560, 
-	1561, 1562, 1564, 1565, 1566, 1567, 1568, 1572, 
-	1582, 1591, 1601, 1602, 1603, 1605, 1614, 1615, 
-	1616, 1617, 1619, 1621, 1624, 1627, 1631, 1633, 
-	1634, 1636, 1637, 1640
-};
-
-static final char[] _hpricot_scan_trans_keys = {
-	45, 68, 91, 45, 79, 67, 84, 89, 
-	80, 69, 32, 9, 13, 32, 58, 95, 
-	9, 13, 65, 90, 97, 122, 32, 62, 
-	63, 91, 95, 9, 13, 45, 46, 48, 
-	58, 65, 90, 97, 122, 32, 62, 80, 
-	83, 91, 9, 13, 85, 66, 76, 73, 
-	67, 32, 9, 13, 32, 34, 39, 9, 
-	13, 9, 34, 61, 95, 32, 37, 39, 
-	59, 63, 90, 97, 122, 9, 34, 61, 
-	95, 32, 37, 39, 59, 63, 90, 97, 
-	122, 32, 62, 91, 9, 13, 32, 34, 
-	39, 62, 91, 9, 13, 34, 34, 32, 
-	62, 91, 9, 13, 93, 32, 62, 9, 
-	13, 39, 39, 9, 39, 61, 95, 32, 
-	33, 35, 37, 40, 59, 63, 90, 97, 
-	122, 9, 39, 61, 95, 32, 33, 35, 
-	37, 40, 59, 63, 90, 97, 122, 9, 
-	32, 33, 39, 62, 91, 95, 10, 13, 
-	35, 37, 40, 59, 61, 90, 97, 122, 
-	9, 32, 34, 39, 62, 91, 95, 10, 
-	13, 33, 37, 40, 59, 61, 90, 97, 
-	122, 9, 32, 33, 39, 62, 91, 95, 
-	10, 13, 35, 37, 40, 59, 61, 90, 
-	97, 122, 9, 32, 34, 39, 62, 91, 
-	95, 10, 13, 33, 37, 40, 59, 61, 
-	90, 97, 122, 32, 34, 39, 62, 91, 
-	9, 13, 34, 39, 34, 39, 32, 39, 
-	62, 91, 9, 13, 39, 93, 32, 62, 
-	93, 9, 13, 32, 39, 62, 9, 13, 
-	32, 34, 62, 91, 9, 13, 34, 93, 
-	32, 34, 62, 9, 13, 32, 39, 62, 
-	91, 9, 13, 9, 39, 61, 95, 32, 
-	33, 35, 37, 40, 59, 63, 90, 97, 
-	122, 89, 83, 84, 69, 77, 67, 68, 
-	65, 84, 65, 91, 58, 95, 65, 90, 
-	97, 122, 32, 62, 63, 95, 9, 13, 
-	45, 46, 48, 58, 65, 90, 97, 122, 
-	32, 62, 9, 13, 32, 47, 62, 63, 
-	95, 9, 13, 45, 58, 65, 90, 97, 
-	122, 32, 47, 62, 63, 95, 9, 13, 
-	45, 58, 65, 90, 97, 122, 32, 47, 
-	61, 62, 63, 95, 9, 13, 45, 58, 
-	65, 90, 97, 122, 32, 47, 61, 62, 
-	63, 95, 9, 13, 45, 58, 65, 90, 
-	97, 122, 62, 13, 32, 34, 39, 47, 
-	60, 62, 9, 10, 11, 12, 13, 32, 
-	47, 60, 62, 9, 10, 11, 12, 32, 
-	47, 62, 63, 95, 9, 13, 45, 58, 
-	65, 90, 97, 122, 13, 32, 47, 60, 
-	62, 63, 95, 9, 10, 11, 12, 45, 
-	58, 65, 90, 97, 122, 13, 32, 47, 
-	60, 61, 62, 63, 95, 9, 10, 11, 
-	12, 45, 58, 65, 90, 97, 122, 13, 
-	32, 47, 60, 61, 62, 63, 95, 9, 
-	10, 11, 12, 45, 58, 65, 90, 97, 
-	122, 13, 32, 47, 60, 62, 9, 10, 
-	11, 12, 13, 32, 34, 39, 47, 60, 
-	62, 9, 10, 11, 12, 13, 32, 34, 
-	39, 47, 60, 62, 63, 95, 9, 10, 
-	11, 12, 45, 58, 65, 90, 97, 122, 
-	13, 32, 34, 39, 47, 60, 62, 63, 
-	95, 9, 10, 11, 12, 45, 58, 65, 
-	90, 97, 122, 13, 32, 34, 47, 60, 
-	62, 92, 9, 10, 11, 12, 13, 32, 
-	34, 47, 60, 62, 92, 9, 10, 11, 
-	12, 32, 34, 47, 62, 63, 92, 95, 
-	9, 13, 45, 58, 65, 90, 97, 122, 
-	34, 92, 34, 92, 32, 34, 47, 61, 
-	62, 63, 92, 95, 9, 13, 45, 58, 
-	65, 90, 97, 122, 32, 34, 47, 61, 
-	62, 63, 92, 95, 9, 13, 45, 58, 
-	65, 90, 97, 122, 34, 62, 92, 13, 
-	32, 34, 39, 47, 60, 62, 92, 9, 
-	10, 11, 12, 13, 32, 34, 39, 47, 
-	60, 62, 92, 9, 10, 11, 12, 13, 
-	32, 34, 39, 47, 60, 62, 63, 92, 
-	95, 9, 10, 11, 12, 45, 58, 65, 
-	90, 97, 122, 13, 32, 34, 39, 47, 
-	60, 62, 63, 92, 95, 9, 10, 11, 
-	12, 45, 58, 65, 90, 97, 122, 13, 
-	32, 34, 47, 60, 62, 63, 92, 95, 
-	9, 10, 11, 12, 45, 58, 65, 90, 
-	97, 122, 13, 32, 34, 47, 60, 62, 
-	63, 92, 95, 9, 10, 11, 12, 45, 
-	58, 65, 90, 97, 122, 13, 32, 34, 
-	47, 60, 61, 62, 63, 92, 95, 9, 
-	10, 11, 12, 45, 58, 65, 90, 97, 
-	122, 13, 32, 34, 47, 60, 61, 62, 
-	63, 92, 95, 9, 10, 11, 12, 45, 
-	58, 65, 90, 97, 122, 13, 32, 34, 
-	47, 60, 62, 92, 9, 10, 11, 12, 
-	13, 32, 34, 47, 60, 62, 92, 9, 
-	10, 11, 12, 13, 32, 34, 39, 47, 
-	60, 62, 92, 9, 10, 11, 12, 13, 
-	32, 34, 39, 47, 60, 62, 92, 9, 
-	10, 11, 12, 13, 32, 34, 39, 47, 
-	60, 62, 92, 9, 10, 11, 12, 32, 
-	34, 39, 47, 62, 63, 92, 95, 9, 
-	13, 45, 58, 65, 90, 97, 122, 34, 
-	39, 92, 32, 39, 47, 62, 63, 92, 
-	95, 9, 13, 45, 58, 65, 90, 97, 
-	122, 39, 92, 39, 92, 32, 39, 47, 
-	61, 62, 63, 92, 95, 9, 13, 45, 
-	58, 65, 90, 97, 122, 32, 39, 47, 
-	61, 62, 63, 92, 95, 9, 13, 45, 
-	58, 65, 90, 97, 122, 39, 62, 92, 
-	13, 32, 34, 39, 47, 60, 62, 92, 
-	9, 10, 11, 12, 13, 32, 39, 47, 
-	60, 62, 92, 9, 10, 11, 12, 13, 
-	32, 39, 47, 60, 62, 63, 92, 95, 
-	9, 10, 11, 12, 45, 58, 65, 90, 
-	97, 122, 13, 32, 39, 47, 60, 61, 
-	62, 63, 92, 95, 9, 10, 11, 12, 
-	45, 58, 65, 90, 97, 122, 13, 32, 
-	39, 47, 60, 61, 62, 63, 92, 95, 
-	9, 10, 11, 12, 45, 58, 65, 90, 
-	97, 122, 13, 32, 39, 47, 60, 62, 
-	92, 9, 10, 11, 12, 13, 32, 39, 
-	47, 60, 62, 92, 9, 10, 11, 12, 
-	13, 32, 34, 39, 47, 60, 62, 92, 
-	9, 10, 11, 12, 13, 32, 34, 39, 
-	47, 60, 62, 63, 92, 95, 9, 10, 
-	11, 12, 45, 58, 65, 90, 97, 122, 
-	13, 32, 34, 39, 47, 60, 62, 63, 
-	92, 95, 9, 10, 11, 12, 45, 58, 
-	65, 90, 97, 122, 13, 32, 34, 39, 
-	47, 60, 62, 92, 9, 10, 11, 12, 
-	13, 32, 34, 39, 47, 60, 62, 63, 
-	92, 95, 9, 10, 11, 12, 45, 58, 
-	65, 90, 97, 122, 13, 32, 34, 39, 
-	47, 60, 61, 62, 63, 92, 95, 9, 
-	10, 11, 12, 45, 58, 65, 90, 97, 
-	122, 32, 34, 39, 47, 61, 62, 63, 
-	92, 95, 9, 13, 45, 58, 65, 90, 
-	97, 122, 32, 34, 39, 47, 61, 62, 
-	63, 92, 95, 9, 13, 45, 58, 65, 
-	90, 97, 122, 34, 39, 62, 92, 34, 
-	39, 92, 13, 32, 34, 39, 47, 60, 
-	62, 92, 9, 10, 11, 12, 13, 32, 
-	34, 39, 47, 60, 62, 92, 9, 10, 
-	11, 12, 13, 32, 34, 39, 47, 60, 
-	62, 63, 92, 95, 9, 10, 11, 12, 
-	45, 58, 65, 90, 97, 122, 13, 32, 
-	34, 39, 47, 60, 62, 63, 92, 95, 
-	9, 10, 11, 12, 45, 58, 65, 90, 
-	97, 122, 13, 32, 34, 39, 47, 60, 
-	62, 63, 92, 95, 9, 10, 11, 12, 
-	45, 58, 65, 90, 97, 122, 13, 32, 
-	34, 39, 47, 60, 62, 92, 9, 10, 
-	11, 12, 13, 32, 34, 39, 47, 60, 
-	62, 92, 9, 10, 11, 12, 13, 32, 
-	34, 39, 47, 60, 62, 63, 92, 95, 
-	9, 10, 11, 12, 45, 58, 65, 90, 
-	97, 122, 32, 34, 39, 47, 62, 63, 
-	92, 95, 9, 13, 45, 58, 65, 90, 
-	97, 122, 32, 34, 39, 47, 62, 63, 
-	92, 95, 9, 13, 45, 58, 65, 90, 
-	97, 122, 13, 32, 34, 39, 47, 60, 
-	62, 92, 9, 10, 11, 12, 13, 32, 
-	34, 39, 47, 60, 61, 62, 63, 92, 
-	95, 9, 10, 11, 12, 45, 58, 65, 
-	90, 97, 122, 13, 32, 39, 47, 60, 
-	62, 63, 92, 95, 9, 10, 11, 12, 
-	45, 58, 65, 90, 97, 122, 34, 39, 
-	92, 32, 39, 47, 62, 63, 92, 95, 
-	9, 13, 45, 58, 65, 90, 97, 122, 
-	13, 32, 34, 39, 47, 60, 62, 92, 
-	9, 10, 11, 12, 32, 34, 47, 62, 
-	63, 92, 95, 9, 13, 45, 58, 65, 
-	90, 97, 122, 34, 39, 92, 13, 32, 
-	39, 47, 60, 62, 92, 9, 10, 11, 
-	12, 34, 92, 39, 92, 13, 32, 34, 
-	39, 47, 60, 62, 9, 10, 11, 12, 
-	58, 95, 120, 65, 90, 97, 122, 32, 
-	63, 95, 9, 13, 45, 46, 48, 58, 
-	65, 90, 97, 122, 32, 63, 95, 109, 
-	9, 13, 45, 46, 48, 58, 65, 90, 
-	97, 122, 32, 63, 95, 108, 9, 13, 
-	45, 46, 48, 58, 65, 90, 97, 122, 
-	32, 63, 95, 9, 13, 45, 46, 48, 
-	58, 65, 90, 97, 122, 101, 114, 115, 
-	105, 111, 110, 32, 61, 9, 13, 32, 
-	34, 39, 9, 13, 95, 45, 46, 48, 
-	58, 65, 90, 97, 122, 34, 95, 45, 
-	46, 48, 58, 65, 90, 97, 122, 32, 
-	62, 63, 9, 13, 32, 62, 63, 101, 
-	115, 9, 13, 62, 110, 99, 111, 100, 
-	105, 110, 103, 32, 61, 9, 13, 32, 
-	34, 39, 9, 13, 65, 90, 97, 122, 
-	34, 95, 45, 46, 48, 57, 65, 90, 
-	97, 122, 32, 62, 63, 9, 13, 32, 
-	62, 63, 115, 9, 13, 116, 97, 110, 
-	100, 97, 108, 111, 110, 101, 32, 61, 
-	9, 13, 32, 34, 39, 9, 13, 110, 
-	121, 111, 34, 32, 62, 63, 9, 13, 
-	101, 115, 110, 121, 111, 39, 101, 115, 
-	65, 90, 97, 122, 39, 95, 45, 46, 
-	48, 57, 65, 90, 97, 122, 95, 45, 
-	46, 48, 58, 65, 90, 97, 122, 39, 
-	95, 45, 46, 48, 58, 65, 90, 97, 
-	122, 62, 62, 10, 60, 33, 47, 58, 
-	63, 95, 65, 90, 97, 122, 39, 93, 
-	34, 34, 92, 39, 92, 34, 39, 92, 
-	32, 9, 13, 32, 118, 9, 13, 10, 
-	45, 45, 10, 93, 93, 10, 62, 63, 
-	62, 0
-};
-
-static final byte[] _hpricot_scan_single_lengths = {
-	3, 1, 1, 1, 1, 1, 1, 1, 
-	1, 3, 5, 5, 1, 1, 1, 1, 
-	1, 1, 3, 4, 4, 3, 5, 1, 
-	1, 3, 1, 2, 1, 1, 4, 4, 
-	7, 7, 7, 7, 5, 2, 2, 4, 
-	2, 3, 3, 4, 2, 3, 4, 4, 
-	1, 1, 1, 1, 1, 1, 1, 1, 
-	1, 1, 1, 2, 4, 2, 5, 5, 
-	6, 6, 1, 7, 5, 5, 7, 8, 
-	8, 5, 7, 9, 9, 7, 7, 7, 
-	2, 2, 8, 8, 3, 8, 8, 10, 
-	10, 9, 9, 10, 10, 7, 7, 8, 
-	8, 8, 8, 3, 7, 2, 2, 8, 
-	8, 3, 8, 7, 9, 10, 10, 7, 
-	7, 8, 10, 10, 8, 10, 11, 9, 
-	9, 4, 3, 8, 8, 10, 10, 10, 
-	8, 8, 10, 8, 8, 8, 11, 9, 
-	3, 7, 8, 7, 3, 7, 2, 2, 
-	7, 3, 3, 4, 4, 3, 1, 1, 
-	1, 1, 1, 1, 2, 3, 1, 2, 
-	3, 5, 1, 1, 1, 1, 1, 1, 
-	1, 1, 2, 3, 0, 2, 3, 4, 
-	1, 1, 1, 1, 1, 1, 1, 1, 
-	1, 2, 3, 2, 1, 1, 3, 1, 
-	1, 2, 1, 1, 1, 1, 0, 2, 
-	1, 2, 1, 1, 2, 5, 1, 1, 
-	1, 2, 2, 3, 1, 2, 2, 1, 
-	2, 1, 3, 1
-};
-
-static final byte[] _hpricot_scan_range_lengths = {
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	1, 3, 5, 1, 0, 0, 0, 0, 
-	0, 1, 1, 4, 4, 1, 1, 0, 
-	0, 1, 0, 1, 0, 0, 5, 5, 
-	5, 5, 5, 5, 1, 0, 0, 1, 
-	0, 1, 1, 1, 0, 1, 1, 5, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 2, 5, 1, 4, 4, 
-	4, 4, 0, 2, 2, 4, 5, 5, 
-	5, 2, 2, 5, 5, 2, 2, 4, 
-	0, 0, 4, 4, 0, 2, 2, 5, 
-	5, 5, 5, 5, 5, 2, 2, 2, 
-	2, 2, 4, 0, 4, 0, 0, 4, 
-	4, 0, 2, 2, 5, 5, 5, 2, 
-	2, 2, 5, 5, 2, 5, 5, 4, 
-	4, 0, 0, 2, 2, 5, 5, 5, 
-	2, 2, 5, 4, 4, 2, 5, 5, 
-	0, 4, 2, 4, 0, 2, 0, 0, 
-	2, 2, 5, 5, 5, 5, 0, 0, 
-	0, 0, 0, 0, 1, 1, 4, 4, 
-	1, 1, 0, 0, 0, 0, 0, 0, 
-	0, 0, 1, 1, 2, 4, 1, 1, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 1, 1, 0, 0, 0, 1, 0, 
-	0, 0, 0, 0, 0, 0, 2, 4, 
-	4, 4, 0, 0, 0, 2, 0, 0, 
-	0, 0, 0, 0, 1, 1, 0, 0, 
-	0, 0, 0, 0
-};
-
-static final short[] _hpricot_scan_index_offsets = {
-	0, 4, 6, 8, 10, 12, 14, 16, 
-	18, 21, 28, 39, 46, 48, 50, 52, 
-	54, 56, 59, 64, 73, 82, 87, 94, 
-	96, 98, 103, 105, 109, 111, 113, 123, 
-	133, 146, 159, 172, 185, 192, 195, 198, 
-	204, 207, 212, 217, 223, 226, 231, 237, 
-	247, 249, 251, 253, 255, 257, 259, 261, 
-	263, 265, 267, 269, 274, 284, 288, 298, 
-	308, 319, 330, 332, 342, 350, 360, 373, 
-	387, 401, 409, 419, 434, 449, 459, 469, 
-	481, 484, 487, 500, 513, 517, 528, 539, 
-	555, 571, 586, 601, 617, 633, 643, 653, 
-	664, 675, 686, 699, 703, 715, 718, 721, 
-	734, 747, 751, 762, 772, 787, 803, 819, 
-	829, 839, 850, 866, 882, 893, 909, 926, 
-	940, 954, 959, 963, 974, 985, 1001, 1017, 
-	1033, 1044, 1055, 1071, 1084, 1097, 1108, 1125, 
-	1140, 1144, 1156, 1167, 1179, 1183, 1193, 1196, 
-	1199, 1209, 1215, 1224, 1234, 1244, 1253, 1255, 
-	1257, 1259, 1261, 1263, 1265, 1269, 1274, 1280, 
-	1287, 1292, 1299, 1301, 1303, 1305, 1307, 1309, 
-	1311, 1313, 1315, 1319, 1324, 1327, 1334, 1339, 
-	1345, 1347, 1349, 1351, 1353, 1355, 1357, 1359, 
-	1361, 1363, 1367, 1372, 1375, 1377, 1379, 1384, 
-	1386, 1388, 1391, 1393, 1395, 1397, 1399, 1402, 
-	1409, 1415, 1422, 1424, 1426, 1429, 1437, 1439, 
-	1441, 1443, 1446, 1449, 1453, 1456, 1460, 1463, 
-	1465, 1468, 1470, 1474
-};
-
-static final short[] _hpricot_scan_indicies = {
-	335, 336, 337, 296, 356, 296, 349, 296, 
-	399, 296, 401, 296, 354, 296, 350, 296, 
-	400, 296, 308, 308, 296, 308, 309, 309, 
-	308, 309, 309, 296, 328, 330, 329, 331, 
-	329, 328, 329, 329, 329, 329, 296, 310, 
-	302, 311, 312, 0, 310, 296, 353, 296, 
-	342, 296, 347, 296, 346, 296, 343, 296, 
-	304, 304, 296, 304, 305, 306, 304, 296, 
-	321, 320, 321, 321, 321, 321, 321, 321, 
-	296, 319, 320, 319, 319, 319, 319, 319, 
-	319, 296, 298, 302, 0, 298, 296, 298, 
-	300, 307, 302, 0, 298, 296, 6, 222, 
-	6, 13, 358, 302, 0, 358, 69, 1, 
-	0, 1, 302, 1, 69, 6, 182, 6, 
-	5, 322, 323, 322, 322, 322, 322, 322, 
-	322, 322, 296, 299, 303, 299, 299, 299, 
-	299, 299, 299, 299, 296, 297, 297, 299, 
-	303, 302, 0, 299, 298, 299, 299, 299, 
-	299, 296, 297, 297, 300, 301, 302, 0, 
-	299, 298, 299, 299, 299, 299, 296, 186, 
-	186, 188, 42, 184, 185, 188, 187, 188, 
-	188, 188, 188, 182, 43, 43, 38, 44, 
-	40, 34, 41, 37, 41, 41, 41, 41, 
-	5, 37, 38, 39, 40, 34, 37, 5, 
-	63, 224, 223, 63, 64, 62, 371, 6, 
-	40, 34, 371, 5, 35, 36, 34, 26, 
-	27, 1, 26, 0, 36, 6, 40, 36, 
-	5, 60, 6, 61, 58, 60, 13, 35, 
-	59, 58, 59, 6, 61, 59, 13, 183, 
-	6, 184, 185, 183, 182, 41, 42, 41, 
-	41, 41, 41, 41, 41, 41, 5, 403, 
-	296, 351, 296, 352, 296, 345, 296, 348, 
-	296, 398, 296, 344, 296, 341, 296, 402, 
-	296, 397, 296, 355, 296, 338, 338, 338, 
-	338, 296, 332, 334, 333, 333, 332, 333, 
-	333, 333, 333, 296, 313, 314, 313, 296, 
-	324, 326, 327, 325, 325, 324, 325, 325, 
-	325, 296, 315, 317, 318, 316, 316, 315, 
-	316, 316, 316, 296, 364, 366, 367, 368, 
-	365, 365, 364, 365, 365, 365, 69, 359, 
-	361, 362, 162, 360, 360, 359, 360, 360, 
-	360, 69, 369, 69, 157, 157, 159, 160, 
-	161, 69, 162, 157, 158, 156, 66, 66, 
-	68, 69, 70, 66, 67, 65, 363, 361, 
-	162, 360, 360, 363, 360, 360, 360, 69, 
-	66, 66, 74, 69, 76, 73, 73, 66, 
-	67, 73, 73, 73, 65, 132, 132, 135, 
-	69, 136, 137, 134, 134, 132, 133, 134, 
-	134, 134, 65, 71, 71, 74, 69, 75, 
-	76, 73, 73, 71, 72, 73, 73, 73, 
-	65, 66, 66, 68, 69, 70, 66, 67, 
-	65, 226, 226, 228, 229, 230, 69, 70, 
-	226, 227, 156, 163, 163, 159, 160, 161, 
-	69, 162, 165, 165, 163, 164, 165, 165, 
-	165, 156, 226, 226, 228, 229, 231, 69, 
-	76, 165, 165, 226, 227, 165, 165, 165, 
-	156, 248, 248, 84, 246, 199, 250, 195, 
-	248, 249, 189, 92, 92, 84, 95, 7, 
-	96, 97, 92, 93, 91, 372, 3, 48, 
-	50, 47, 8, 47, 372, 47, 47, 47, 
-	7, 3, 8, 7, 11, 8, 7, 122, 
-	3, 124, 125, 126, 123, 8, 123, 122, 
-	123, 123, 123, 7, 46, 3, 48, 49, 
-	50, 47, 8, 47, 46, 47, 47, 47, 
-	7, 3, 45, 8, 7, 190, 190, 192, 
-	193, 194, 7, 50, 195, 190, 191, 189, 
-	196, 196, 192, 193, 194, 7, 50, 195, 
-	196, 197, 189, 196, 196, 192, 193, 194, 
-	7, 50, 198, 195, 198, 196, 197, 198, 
-	198, 198, 189, 242, 242, 244, 245, 247, 
-	7, 103, 198, 195, 198, 242, 243, 198, 
-	198, 198, 189, 248, 248, 84, 247, 199, 
-	251, 198, 195, 198, 248, 249, 198, 198, 
-	198, 189, 92, 92, 84, 101, 7, 103, 
-	100, 97, 100, 92, 93, 100, 100, 100, 
-	91, 144, 144, 84, 147, 7, 148, 149, 
-	146, 97, 146, 144, 145, 146, 146, 146, 
-	91, 98, 98, 84, 101, 7, 102, 103, 
-	100, 97, 100, 98, 99, 100, 100, 100, 
-	91, 92, 92, 84, 95, 7, 96, 97, 
-	92, 93, 91, 92, 92, 94, 95, 7, 
-	96, 97, 92, 93, 91, 242, 242, 244, 
-	245, 246, 7, 96, 195, 242, 243, 189, 
-	258, 258, 263, 94, 256, 215, 261, 211, 
-	258, 259, 205, 105, 105, 80, 94, 108, 
-	9, 109, 110, 105, 106, 104, 373, 10, 
-	11, 55, 57, 54, 12, 54, 373, 54, 
-	54, 54, 9, 10, 11, 12, 9, 370, 
-	3, 31, 33, 30, 4, 30, 370, 30, 
-	30, 30, 2, 3, 4, 2, 10, 4, 
-	2, 117, 3, 119, 120, 121, 118, 4, 
-	118, 117, 118, 118, 118, 2, 29, 3, 
-	31, 32, 33, 30, 4, 30, 29, 30, 
-	30, 30, 2, 3, 28, 4, 2, 167, 
-	167, 169, 170, 171, 2, 33, 172, 167, 
-	168, 166, 78, 78, 84, 81, 2, 82, 
-	83, 78, 79, 77, 78, 78, 84, 88, 
-	2, 90, 87, 83, 87, 78, 79, 87, 
-	87, 87, 77, 138, 138, 84, 141, 2, 
-	142, 143, 140, 83, 140, 138, 139, 140, 
-	140, 140, 77, 85, 85, 84, 88, 2, 
-	89, 90, 87, 83, 87, 85, 86, 87, 
-	87, 87, 77, 78, 78, 84, 81, 2, 
-	82, 83, 78, 79, 77, 78, 78, 80, 
-	81, 2, 82, 83, 78, 79, 77, 232, 
-	232, 234, 235, 236, 2, 82, 172, 232, 
-	233, 166, 173, 173, 169, 170, 171, 2, 
-	33, 175, 172, 175, 173, 174, 175, 175, 
-	175, 166, 232, 232, 234, 235, 237, 2, 
-	90, 175, 172, 175, 232, 233, 175, 175, 
-	175, 166, 258, 258, 80, 260, 256, 215, 
-	261, 211, 258, 259, 205, 105, 105, 80, 
-	94, 114, 9, 116, 113, 110, 113, 105, 
-	106, 113, 113, 113, 104, 150, 150, 80, 
-	94, 153, 9, 154, 155, 152, 110, 152, 
-	150, 151, 152, 152, 152, 104, 53, 10, 
-	11, 55, 56, 57, 54, 12, 54, 53, 
-	54, 54, 54, 9, 127, 10, 11, 129, 
-	130, 131, 128, 12, 128, 127, 128, 128, 
-	128, 9, 10, 11, 52, 12, 9, 51, 
-	51, 12, 9, 206, 206, 208, 209, 210, 
-	9, 57, 211, 206, 207, 205, 212, 212, 
-	208, 209, 210, 9, 57, 211, 212, 213, 
-	205, 212, 212, 208, 209, 210, 9, 57, 
-	214, 211, 214, 212, 213, 214, 214, 214, 
-	205, 252, 252, 254, 255, 257, 9, 116, 
-	214, 211, 214, 252, 253, 214, 214, 214, 
-	205, 258, 258, 80, 260, 257, 215, 262, 
-	214, 211, 214, 258, 259, 214, 214, 214, 
-	205, 105, 105, 80, 94, 108, 9, 109, 
-	110, 105, 106, 104, 105, 105, 107, 107, 
-	108, 9, 109, 110, 105, 106, 104, 258, 
-	258, 263, 94, 257, 215, 262, 214, 211, 
-	214, 258, 259, 214, 214, 214, 205, 218, 
-	10, 216, 220, 221, 219, 217, 219, 218, 
-	219, 219, 219, 215, 218, 225, 11, 220, 
-	221, 219, 217, 219, 218, 219, 219, 219, 
-	215, 252, 252, 254, 255, 256, 9, 109, 
-	211, 252, 253, 205, 111, 111, 80, 94, 
-	114, 9, 115, 116, 113, 110, 113, 111, 
-	112, 113, 113, 113, 104, 238, 238, 84, 
-	237, 176, 241, 175, 172, 175, 238, 239, 
-	175, 175, 175, 166, 10, 216, 217, 215, 
-	178, 3, 180, 181, 179, 177, 179, 178, 
-	179, 179, 179, 176, 173, 173, 169, 170, 
-	171, 2, 33, 172, 173, 174, 166, 201, 
-	3, 203, 204, 202, 200, 202, 201, 202, 
-	202, 202, 199, 225, 11, 217, 215, 238, 
-	238, 84, 236, 176, 240, 172, 238, 239, 
-	166, 3, 200, 199, 3, 177, 176, 163, 
-	163, 159, 160, 161, 69, 162, 163, 164, 
-	156, 339, 339, 340, 339, 339, 296, 15, 
-	357, 357, 15, 357, 357, 357, 357, 296, 
-	15, 357, 357, 408, 15, 357, 357, 357, 
-	357, 296, 15, 357, 357, 404, 15, 357, 
-	357, 357, 357, 296, 16, 357, 357, 16, 
-	357, 357, 357, 357, 296, 287, 264, 294, 
-	264, 396, 264, 387, 264, 393, 264, 268, 
-	264, 268, 265, 268, 264, 265, 266, 267, 
-	265, 264, 282, 282, 282, 282, 282, 264, 
-	275, 276, 276, 276, 276, 276, 264, 269, 
-	270, 271, 269, 264, 269, 270, 271, 272, 
-	273, 269, 264, 270, 264, 388, 264, 285, 
-	264, 394, 264, 385, 264, 289, 264, 390, 
-	264, 288, 264, 288, 374, 288, 264, 374, 
-	375, 376, 374, 264, 283, 283, 264, 277, 
-	278, 278, 278, 278, 278, 264, 274, 270, 
-	271, 274, 264, 274, 270, 271, 273, 274, 
-	264, 295, 264, 384, 264, 389, 264, 286, 
-	264, 284, 264, 290, 264, 395, 264, 391, 
-	264, 380, 264, 380, 377, 380, 264, 377, 
-	378, 379, 377, 264, 291, 292, 264, 293, 
-	264, 279, 264, 381, 270, 271, 381, 264, 
-	386, 264, 293, 264, 405, 406, 264, 392, 
-	264, 279, 264, 407, 264, 392, 264, 383, 
-	383, 264, 277, 281, 281, 281, 281, 281, 
-	264, 382, 382, 382, 382, 382, 264, 275, 
-	280, 280, 280, 280, 280, 264, 415, 414, 
-	422, 421, 24, 25, 23, 19, 20, 21, 
-	22, 21, 21, 21, 18, 6, 5, 1, 
-	0, 6, 13, 3, 8, 7, 3, 4, 
-	2, 10, 11, 12, 9, 15, 15, 14, 
-	16, 17, 16, 14, 412, 413, 411, 410, 
-	409, 419, 420, 418, 417, 416, 426, 424, 
-	427, 425, 424, 423, 0
-};
-
-static final short[] _hpricot_scan_trans_targs_wi = {
-	26, 27, 101, 69, 102, 29, 25, 80, 
-	81, 99, 100, 79, 122, 24, 204, 212, 
-	213, 150, 204, 0, 59, 62, 145, 204, 
-	204, 205, 41, 207, 210, 104, 103, 105, 
-	106, 210, 40, 41, 42, 36, 37, 46, 
-	206, 47, 32, 35, 34, 209, 83, 82, 
-	84, 85, 209, 98, 211, 119, 120, 121, 
-	123, 211, 44, 45, 43, 208, 38, 39, 
-	43, 68, 69, 70, 73, 204, 204, 65, 
-	72, 71, 73, 74, 204, 107, 100, 108, 
-	108, 111, 210, 112, 70, 104, 110, 109, 
-	111, 113, 210, 78, 79, 90, 90, 93, 
-	209, 94, 83, 92, 91, 93, 95, 209, 
-	97, 98, 117, 117, 128, 211, 129, 119, 
-	134, 118, 128, 133, 211, 104, 103, 105, 
-	106, 210, 83, 82, 84, 85, 209, 119, 
-	120, 121, 123, 211, 65, 72, 71, 73, 
-	74, 204, 104, 110, 109, 111, 113, 210, 
-	83, 92, 91, 93, 95, 209, 119, 134, 
-	118, 128, 133, 211, 68, 144, 74, 142, 
-	143, 73, 204, 75, 76, 71, 107, 138, 
-	113, 136, 137, 111, 112, 114, 115, 109, 
-	101, 102, 100, 103, 105, 210, 29, 39, 
-	206, 40, 35, 36, 47, 78, 86, 95, 
-	139, 140, 93, 94, 87, 88, 91, 80, 
-	81, 79, 82, 84, 209, 97, 124, 133, 
-	131, 132, 128, 129, 125, 126, 118, 99, 
-	79, 122, 98, 120, 121, 211, 24, 38, 
-	43, 100, 75, 76, 77, 141, 73, 73, 
-	114, 115, 116, 135, 111, 111, 100, 108, 
-	210, 210, 87, 88, 89, 96, 93, 93, 
-	79, 90, 209, 209, 125, 126, 127, 130, 
-	128, 128, 98, 117, 90, 211, 211, 108, 
-	204, 157, 158, 200, 156, 161, 204, 162, 
-	163, 176, 175, 160, 159, 174, 173, 190, 
-	201, 199, 159, 173, 181, 165, 180, 151, 
-	170, 168, 182, 188, 191, 189, 152, 177, 
-	204, 33, 22, 31, 23, 34, 204, 32, 
-	18, 19, 30, 28, 9, 10, 11, 12, 
-	48, 61, 204, 63, 64, 66, 204, 20, 
-	21, 20, 31, 32, 63, 62, 66, 204, 
-	11, 10, 204, 26, 61, 60, 204, 1, 
-	2, 53, 60, 146, 147, 56, 14, 17, 
-	55, 52, 16, 15, 21, 3, 7, 50, 
-	51, 13, 6, 204, 204, 146, 25, 65, 
-	64, 66, 67, 69, 65, 64, 66, 67, 
-	204, 204, 100, 39, 79, 98, 171, 172, 
-	198, 186, 187, 193, 185, 190, 201, 199, 
-	178, 167, 192, 154, 164, 179, 169, 184, 
-	195, 155, 166, 183, 153, 58, 54, 4, 
-	8, 5, 57, 49, 149, 194, 196, 197, 
-	148, 214, 202, 214, 214, 215, 214, 214, 
-	216, 203, 216, 216, 217, 216, 216, 218, 
-	218, 218, 218, 219
-};
-
-static final short[] _hpricot_scan_trans_actions_wi = {
-	0, 0, 0, 7, 0, 0, 21, 0, 
-	0, 0, 7, 7, 0, 0, 65, 0, 
-	31, 0, 67, 0, 0, 1, 0, 63, 
-	132, 178, 0, 144, 147, 0, 174, 23, 
-	0, 186, 0, 21, 0, 0, 0, 21, 
-	144, 0, 111, 0, 111, 147, 0, 174, 
-	23, 0, 186, 7, 147, 0, 174, 23, 
-	0, 186, 0, 0, 0, 144, 0, 21, 
-	21, 0, 9, 9, 102, 73, 162, 9, 
-	9, 174, 117, 0, 170, 0, 9, 9, 
-	7, 102, 205, 0, 7, 9, 9, 174, 
-	117, 0, 215, 0, 9, 9, 7, 102, 
-	205, 0, 9, 9, 174, 117, 0, 215, 
-	0, 9, 9, 7, 102, 205, 0, 9, 
-	9, 174, 117, 0, 215, 11, 0, 108, 
-	11, 210, 11, 0, 108, 11, 210, 11, 
-	0, 108, 11, 210, 105, 105, 0, 158, 
-	11, 195, 105, 105, 0, 158, 11, 232, 
-	105, 105, 0, 158, 11, 232, 105, 105, 
-	0, 158, 11, 232, 3, 3, 3, 0, 
-	0, 87, 120, 3, 3, 190, 3, 3, 
-	3, 0, 7, 87, 3, 3, 3, 190, 
-	3, 3, 3, 190, 87, 200, 3, 3, 
-	182, 3, 3, 3, 3, 3, 3, 3, 
-	7, 0, 87, 3, 3, 3, 190, 3, 
-	3, 3, 190, 87, 200, 3, 3, 3, 
-	7, 7, 87, 3, 3, 3, 190, 3, 
-	75, 3, 3, 190, 87, 200, 3, 3, 
-	84, 99, 78, 78, 0, 0, 150, 154, 
-	78, 78, 0, 7, 150, 154, 78, 78, 
-	220, 226, 78, 78, 7, 0, 150, 154, 
-	78, 78, 220, 226, 78, 78, 7, 7, 
-	150, 154, 78, 78, 75, 220, 226, 99, 
-	69, 0, 0, 0, 0, 0, 49, 0, 
-	0, 0, 0, 13, 0, 15, 0, 17, 
-	0, 0, 3, 3, 0, 0, 0, 0, 
-	0, 0, 0, 3, 3, 0, 0, 0, 
-	71, 0, 0, 0, 0, 19, 51, 19, 
-	0, 0, 0, 0, 0, 1, 0, 0, 
-	0, 0, 55, 0, 114, 0, 53, 0, 
-	19, 3, 3, 81, 5, 0, 5, 93, 
-	5, 0, 90, 5, 5, 0, 96, 0, 
-	0, 0, 1, 25, 25, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 61, 59, 0, 0, 0, 
-	174, 23, 0, 0, 11, 0, 108, 11, 
-	166, 57, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 3, 3, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 3, 3, 0, 
-	0, 35, 0, 33, 123, 31, 37, 135, 
-	41, 0, 39, 126, 31, 43, 138, 47, 
-	141, 45, 129, 0
-};
-
-static final short[] _hpricot_scan_to_state_actions = {
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 27, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 27, 0, 
-	27, 0, 27, 0
-};
-
-static final short[] _hpricot_scan_from_state_actions = {
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 0, 0, 
-	0, 0, 0, 0, 29, 0, 0, 0, 
-	0, 0, 0, 0, 0, 0, 29, 0, 
-	29, 0, 29, 0
-};
+// line 150 "ext/hpricot_scan/HpricotScanService.java"
+private static byte[] init__hpricot_scan_actions_0()
+{
+	return new byte [] {
+	    0,    1,    1,    1,    2,    1,    4,    1,    5,    1,    6,    1,
+	    7,    1,    8,    1,    9,    1,   10,    1,   11,    1,   12,    1,
+	   14,    1,   16,    1,   20,    1,   21,    1,   22,    1,   24,    1,
+	   25,    1,   26,    1,   28,    1,   29,    1,   30,    1,   32,    1,
+	   33,    1,   38,    1,   39,    1,   40,    1,   41,    1,   42,    1,
+	   43,    1,   44,    1,   45,    1,   46,    1,   47,    1,   48,    1,
+	   49,    1,   50,    1,   51,    2,    2,    5,    2,    2,    6,    2,
+	    2,   11,    2,    2,   12,    2,    2,   14,    2,    4,   39,    2,
+	    4,   40,    2,    4,   41,    2,    5,    2,    2,    6,   14,    2,
+	    7,    6,    2,    7,   14,    2,   11,   12,    2,   13,    3,    2,
+	   14,    6,    2,   14,   40,    2,   15,   24,    2,   15,   28,    2,
+	   15,   32,    2,   15,   45,    2,   17,   23,    2,   18,   27,    2,
+	   19,   31,    2,   22,   34,    2,   22,   36,    3,    2,    6,   14,
+	    3,    2,   14,    6,    3,    6,    7,   14,    3,    6,   14,   40,
+	    3,    7,   14,   40,    3,   11,    2,   12,    3,   14,    6,   40,
+	    3,   14,   13,    3,    3,   22,    0,   37,    3,   22,    2,   34,
+	    3,   22,   14,   35,    4,    2,   14,   13,    3,    4,    6,    7,
+	   14,   40,    4,   22,    2,   14,   35,    4,   22,    6,   14,   35,
+	    4,   22,    7,   14,   35,    4,   22,   14,    6,   35,    5,   22,
+	    2,    6,   14,   35,    5,   22,    2,   14,    6,   35,    5,   22,
+	    6,    7,   14,   35
+	};
+}
+
+private static final byte _hpricot_scan_actions[] = init__hpricot_scan_actions_0();
+
+
+private static short[] init__hpricot_scan_key_offsets_0()
+{
+	return new short [] {
+	    0,    3,    4,    5,    6,    7,    8,    9,   10,   13,   22,   37,
+	   44,   45,   46,   47,   48,   49,   52,   57,   69,   81,   86,   93,
+	   94,   95,  100,  101,  105,  106,  107,  121,  135,  152,  169,  186,
+	  203,  210,  212,  214,  220,  222,  227,  232,  238,  240,  245,  251,
+	  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
+	  282,  296,  300,  313,  326,  340,  354,  355,  366,  375,  388,  405,
+	  423,  441,  450,  461,  480,  499,  510,  521,  536,  538,  540,  556,
+	  572,  575,  587,  599,  619,  639,  658,  677,  697,  717,  728,  739,
+	  751,  763,  775,  791,  794,  809,  811,  813,  829,  845,  848,  860,
+	  871,  890,  910,  930,  941,  952,  964,  984, 1004, 1016, 1036, 1057,
+	 1074, 1091, 1095, 1098, 1110, 1122, 1142, 1162, 1182, 1194, 1206, 1226,
+	 1242, 1258, 1270, 1291, 1310, 1313, 1328, 1340, 1355, 1358, 1369, 1371,
+	 1373, 1384, 1391, 1404, 1418, 1432, 1445, 1446, 1447, 1448, 1449, 1450,
+	 1451, 1455, 1460, 1469, 1479, 1484, 1491, 1492, 1493, 1494, 1495, 1496,
+	 1497, 1498, 1499, 1503, 1508, 1512, 1522, 1527, 1533, 1534, 1535, 1536,
+	 1537, 1538, 1539, 1540, 1541, 1542, 1546, 1551, 1553, 1554, 1555, 1560,
+	 1561, 1562, 1564, 1565, 1566, 1567, 1568, 1572, 1582, 1591, 1601, 1602,
+	 1603, 1605, 1614, 1615, 1616, 1617, 1619, 1621, 1624, 1627, 1631, 1633,
+	 1634, 1636, 1637, 1640
+	};
+}
+
+private static final short _hpricot_scan_key_offsets[] = init__hpricot_scan_key_offsets_0();
+
+
+private static char[] init__hpricot_scan_trans_keys_0()
+{
+	return new char [] {
+	   45,   68,   91,   45,   79,   67,   84,   89,   80,   69,   32,    9,
+	   13,   32,   58,   95,    9,   13,   65,   90,   97,  122,   32,   62,
+	   63,   91,   95,    9,   13,   45,   46,   48,   58,   65,   90,   97,
+	  122,   32,   62,   80,   83,   91,    9,   13,   85,   66,   76,   73,
+	   67,   32,    9,   13,   32,   34,   39,    9,   13,    9,   34,   61,
+	   95,   32,   37,   39,   59,   63,   90,   97,  122,    9,   34,   61,
+	   95,   32,   37,   39,   59,   63,   90,   97,  122,   32,   62,   91,
+	    9,   13,   32,   34,   39,   62,   91,    9,   13,   34,   34,   32,
+	   62,   91,    9,   13,   93,   32,   62,    9,   13,   39,   39,    9,
+	   39,   61,   95,   32,   33,   35,   37,   40,   59,   63,   90,   97,
+	  122,    9,   39,   61,   95,   32,   33,   35,   37,   40,   59,   63,
+	   90,   97,  122,    9,   32,   33,   39,   62,   91,   95,   10,   13,
+	   35,   37,   40,   59,   61,   90,   97,  122,    9,   32,   34,   39,
+	   62,   91,   95,   10,   13,   33,   37,   40,   59,   61,   90,   97,
+	  122,    9,   32,   33,   39,   62,   91,   95,   10,   13,   35,   37,
+	   40,   59,   61,   90,   97,  122,    9,   32,   34,   39,   62,   91,
+	   95,   10,   13,   33,   37,   40,   59,   61,   90,   97,  122,   32,
+	   34,   39,   62,   91,    9,   13,   34,   39,   34,   39,   32,   39,
+	   62,   91,    9,   13,   39,   93,   32,   62,   93,    9,   13,   32,
+	   39,   62,    9,   13,   32,   34,   62,   91,    9,   13,   34,   93,
+	   32,   34,   62,    9,   13,   32,   39,   62,   91,    9,   13,    9,
+	   39,   61,   95,   32,   33,   35,   37,   40,   59,   63,   90,   97,
+	  122,   89,   83,   84,   69,   77,   67,   68,   65,   84,   65,   91,
+	   58,   95,   65,   90,   97,  122,   32,   62,   63,   95,    9,   13,
+	   45,   46,   48,   58,   65,   90,   97,  122,   32,   62,    9,   13,
+	   32,   47,   62,   63,   95,    9,   13,   45,   58,   65,   90,   97,
+	  122,   32,   47,   62,   63,   95,    9,   13,   45,   58,   65,   90,
+	   97,  122,   32,   47,   61,   62,   63,   95,    9,   13,   45,   58,
+	   65,   90,   97,  122,   32,   47,   61,   62,   63,   95,    9,   13,
+	   45,   58,   65,   90,   97,  122,   62,   13,   32,   34,   39,   47,
+	   60,   62,    9,   10,   11,   12,   13,   32,   47,   60,   62,    9,
+	   10,   11,   12,   32,   47,   62,   63,   95,    9,   13,   45,   58,
+	   65,   90,   97,  122,   13,   32,   47,   60,   62,   63,   95,    9,
+	   10,   11,   12,   45,   58,   65,   90,   97,  122,   13,   32,   47,
+	   60,   61,   62,   63,   95,    9,   10,   11,   12,   45,   58,   65,
+	   90,   97,  122,   13,   32,   47,   60,   61,   62,   63,   95,    9,
+	   10,   11,   12,   45,   58,   65,   90,   97,  122,   13,   32,   47,
+	   60,   62,    9,   10,   11,   12,   13,   32,   34,   39,   47,   60,
+	   62,    9,   10,   11,   12,   13,   32,   34,   39,   47,   60,   62,
+	   63,   95,    9,   10,   11,   12,   45,   58,   65,   90,   97,  122,
+	   13,   32,   34,   39,   47,   60,   62,   63,   95,    9,   10,   11,
+	   12,   45,   58,   65,   90,   97,  122,   13,   32,   34,   47,   60,
+	   62,   92,    9,   10,   11,   12,   13,   32,   34,   47,   60,   62,
+	   92,    9,   10,   11,   12,   32,   34,   47,   62,   63,   92,   95,
+	    9,   13,   45,   58,   65,   90,   97,  122,   34,   92,   34,   92,
+	   32,   34,   47,   61,   62,   63,   92,   95,    9,   13,   45,   58,
+	   65,   90,   97,  122,   32,   34,   47,   61,   62,   63,   92,   95,
+	    9,   13,   45,   58,   65,   90,   97,  122,   34,   62,   92,   13,
+	   32,   34,   39,   47,   60,   62,   92,    9,   10,   11,   12,   13,
+	   32,   34,   39,   47,   60,   62,   92,    9,   10,   11,   12,   13,
+	   32,   34,   39,   47,   60,   62,   63,   92,   95,    9,   10,   11,
+	   12,   45,   58,   65,   90,   97,  122,   13,   32,   34,   39,   47,
+	   60,   62,   63,   92,   95,    9,   10,   11,   12,   45,   58,   65,
+	   90,   97,  122,   13,   32,   34,   47,   60,   62,   63,   92,   95,
+	    9,   10,   11,   12,   45,   58,   65,   90,   97,  122,   13,   32,
+	   34,   47,   60,   62,   63,   92,   95,    9,   10,   11,   12,   45,
+	   58,   65,   90,   97,  122,   13,   32,   34,   47,   60,   61,   62,
+	   63,   92,   95,    9,   10,   11,   12,   45,   58,   65,   90,   97,
+	  122,   13,   32,   34,   47,   60,   61,   62,   63,   92,   95,    9,
+	   10,   11,   12,   45,   58,   65,   90,   97,  122,   13,   32,   34,
+	   47,   60,   62,   92,    9,   10,   11,   12,   13,   32,   34,   47,
+	   60,   62,   92,    9,   10,   11,   12,   13,   32,   34,   39,   47,
+	   60,   62,   92,    9,   10,   11,   12,   13,   32,   34,   39,   47,
+	   60,   62,   92,    9,   10,   11,   12,   13,   32,   34,   39,   47,
+	   60,   62,   92,    9,   10,   11,   12,   32,   34,   39,   47,   62,
+	   63,   92,   95,    9,   13,   45,   58,   65,   90,   97,  122,   34,
+	   39,   92,   32,   39,   47,   62,   63,   92,   95,    9,   13,   45,
+	   58,   65,   90,   97,  122,   39,   92,   39,   92,   32,   39,   47,
+	   61,   62,   63,   92,   95,    9,   13,   45,   58,   65,   90,   97,
+	  122,   32,   39,   47,   61,   62,   63,   92,   95,    9,   13,   45,
+	   58,   65,   90,   97,  122,   39,   62,   92,   13,   32,   34,   39,
+	   47,   60,   62,   92,    9,   10,   11,   12,   13,   32,   39,   47,
+	   60,   62,   92,    9,   10,   11,   12,   13,   32,   39,   47,   60,
+	   62,   63,   92,   95,    9,   10,   11,   12,   45,   58,   65,   90,
+	   97,  122,   13,   32,   39,   47,   60,   61,   62,   63,   92,   95,
+	    9,   10,   11,   12,   45,   58,   65,   90,   97,  122,   13,   32,
+	   39,   47,   60,   61,   62,   63,   92,   95,    9,   10,   11,   12,
+	   45,   58,   65,   90,   97,  122,   13,   32,   39,   47,   60,   62,
+	   92,    9,   10,   11,   12,   13,   32,   39,   47,   60,   62,   92,
+	    9,   10,   11,   12,   13,   32,   34,   39,   47,   60,   62,   92,
+	    9,   10,   11,   12,   13,   32,   34,   39,   47,   60,   62,   63,
+	   92,   95,    9,   10,   11,   12,   45,   58,   65,   90,   97,  122,
+	   13,   32,   34,   39,   47,   60,   62,   63,   92,   95,    9,   10,
+	   11,   12,   45,   58,   65,   90,   97,  122,   13,   32,   34,   39,
+	   47,   60,   62,   92,    9,   10,   11,   12,   13,   32,   34,   39,
+	   47,   60,   62,   63,   92,   95,    9,   10,   11,   12,   45,   58,
+	   65,   90,   97,  122,   13,   32,   34,   39,   47,   60,   61,   62,
+	   63,   92,   95,    9,   10,   11,   12,   45,   58,   65,   90,   97,
+	  122,   32,   34,   39,   47,   61,   62,   63,   92,   95,    9,   13,
+	   45,   58,   65,   90,   97,  122,   32,   34,   39,   47,   61,   62,
+	   63,   92,   95,    9,   13,   45,   58,   65,   90,   97,  122,   34,
+	   39,   62,   92,   34,   39,   92,   13,   32,   34,   39,   47,   60,
+	   62,   92,    9,   10,   11,   12,   13,   32,   34,   39,   47,   60,
+	   62,   92,    9,   10,   11,   12,   13,   32,   34,   39,   47,   60,
+	   62,   63,   92,   95,    9,   10,   11,   12,   45,   58,   65,   90,
+	   97,  122,   13,   32,   34,   39,   47,   60,   62,   63,   92,   95,
+	    9,   10,   11,   12,   45,   58,   65,   90,   97,  122,   13,   32,
+	   34,   39,   47,   60,   62,   63,   92,   95,    9,   10,   11,   12,
+	   45,   58,   65,   90,   97,  122,   13,   32,   34,   39,   47,   60,
+	   62,   92,    9,   10,   11,   12,   13,   32,   34,   39,   47,   60,
+	   62,   92,    9,   10,   11,   12,   13,   32,   34,   39,   47,   60,
+	   62,   63,   92,   95,    9,   10,   11,   12,   45,   58,   65,   90,
+	   97,  122,   32,   34,   39,   47,   62,   63,   92,   95,    9,   13,
+	   45,   58,   65,   90,   97,  122,   32,   34,   39,   47,   62,   63,
+	   92,   95,    9,   13,   45,   58,   65,   90,   97,  122,   13,   32,
+	   34,   39,   47,   60,   62,   92,    9,   10,   11,   12,   13,   32,
+	   34,   39,   47,   60,   61,   62,   63,   92,   95,    9,   10,   11,
+	   12,   45,   58,   65,   90,   97,  122,   13,   32,   39,   47,   60,
+	   62,   63,   92,   95,    9,   10,   11,   12,   45,   58,   65,   90,
+	   97,  122,   34,   39,   92,   32,   39,   47,   62,   63,   92,   95,
+	    9,   13,   45,   58,   65,   90,   97,  122,   13,   32,   34,   39,
+	   47,   60,   62,   92,    9,   10,   11,   12,   32,   34,   47,   62,
+	   63,   92,   95,    9,   13,   45,   58,   65,   90,   97,  122,   34,
+	   39,   92,   13,   32,   39,   47,   60,   62,   92,    9,   10,   11,
+	   12,   34,   92,   39,   92,   13,   32,   34,   39,   47,   60,   62,
+	    9,   10,   11,   12,   58,   95,  120,   65,   90,   97,  122,   32,
+	   63,   95,    9,   13,   45,   46,   48,   58,   65,   90,   97,  122,
+	   32,   63,   95,  109,    9,   13,   45,   46,   48,   58,   65,   90,
+	   97,  122,   32,   63,   95,  108,    9,   13,   45,   46,   48,   58,
+	   65,   90,   97,  122,   32,   63,   95,    9,   13,   45,   46,   48,
+	   58,   65,   90,   97,  122,  101,  114,  115,  105,  111,  110,   32,
+	   61,    9,   13,   32,   34,   39,    9,   13,   95,   45,   46,   48,
+	   58,   65,   90,   97,  122,   34,   95,   45,   46,   48,   58,   65,
+	   90,   97,  122,   32,   62,   63,    9,   13,   32,   62,   63,  101,
+	  115,    9,   13,   62,  110,   99,  111,  100,  105,  110,  103,   32,
+	   61,    9,   13,   32,   34,   39,    9,   13,   65,   90,   97,  122,
+	   34,   95,   45,   46,   48,   57,   65,   90,   97,  122,   32,   62,
+	   63,    9,   13,   32,   62,   63,  115,    9,   13,  116,   97,  110,
+	  100,   97,  108,  111,  110,  101,   32,   61,    9,   13,   32,   34,
+	   39,    9,   13,  110,  121,  111,   34,   32,   62,   63,    9,   13,
+	  101,  115,  110,  121,  111,   39,  101,  115,   65,   90,   97,  122,
+	   39,   95,   45,   46,   48,   57,   65,   90,   97,  122,   95,   45,
+	   46,   48,   58,   65,   90,   97,  122,   39,   95,   45,   46,   48,
+	   58,   65,   90,   97,  122,   62,   62,   10,   60,   33,   47,   58,
+	   63,   95,   65,   90,   97,  122,   39,   93,   34,   34,   92,   39,
+	   92,   34,   39,   92,   32,    9,   13,   32,  118,    9,   13,   10,
+	   45,   45,   10,   93,   93,   10,   62,   63,   62,    0
+	};
+}
+
+private static final char _hpricot_scan_trans_keys[] = init__hpricot_scan_trans_keys_0();
+
+
+private static byte[] init__hpricot_scan_single_lengths_0()
+{
+	return new byte [] {
+	    3,    1,    1,    1,    1,    1,    1,    1,    1,    3,    5,    5,
+	    1,    1,    1,    1,    1,    1,    3,    4,    4,    3,    5,    1,
+	    1,    3,    1,    2,    1,    1,    4,    4,    7,    7,    7,    7,
+	    5,    2,    2,    4,    2,    3,    3,    4,    2,    3,    4,    4,
+	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
+	    4,    2,    5,    5,    6,    6,    1,    7,    5,    5,    7,    8,
+	    8,    5,    7,    9,    9,    7,    7,    7,    2,    2,    8,    8,
+	    3,    8,    8,   10,   10,    9,    9,   10,   10,    7,    7,    8,
+	    8,    8,    8,    3,    7,    2,    2,    8,    8,    3,    8,    7,
+	    9,   10,   10,    7,    7,    8,   10,   10,    8,   10,   11,    9,
+	    9,    4,    3,    8,    8,   10,   10,   10,    8,    8,   10,    8,
+	    8,    8,   11,    9,    3,    7,    8,    7,    3,    7,    2,    2,
+	    7,    3,    3,    4,    4,    3,    1,    1,    1,    1,    1,    1,
+	    2,    3,    1,    2,    3,    5,    1,    1,    1,    1,    1,    1,
+	    1,    1,    2,    3,    0,    2,    3,    4,    1,    1,    1,    1,
+	    1,    1,    1,    1,    1,    2,    3,    2,    1,    1,    3,    1,
+	    1,    2,    1,    1,    1,    1,    0,    2,    1,    2,    1,    1,
+	    2,    5,    1,    1,    1,    2,    2,    3,    1,    2,    2,    1,
+	    2,    1,    3,    1
+	};
+}
+
+private static final byte _hpricot_scan_single_lengths[] = init__hpricot_scan_single_lengths_0();
+
+
+private static byte[] init__hpricot_scan_range_lengths_0()
+{
+	return new byte [] {
+	    0,    0,    0,    0,    0,    0,    0,    0,    1,    3,    5,    1,
+	    0,    0,    0,    0,    0,    1,    1,    4,    4,    1,    1,    0,
+	    0,    1,    0,    1,    0,    0,    5,    5,    5,    5,    5,    5,
+	    1,    0,    0,    1,    0,    1,    1,    1,    0,    1,    1,    5,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
+	    5,    1,    4,    4,    4,    4,    0,    2,    2,    4,    5,    5,
+	    5,    2,    2,    5,    5,    2,    2,    4,    0,    0,    4,    4,
+	    0,    2,    2,    5,    5,    5,    5,    5,    5,    2,    2,    2,
+	    2,    2,    4,    0,    4,    0,    0,    4,    4,    0,    2,    2,
+	    5,    5,    5,    2,    2,    2,    5,    5,    2,    5,    5,    4,
+	    4,    0,    0,    2,    2,    5,    5,    5,    2,    2,    5,    4,
+	    4,    2,    5,    5,    0,    4,    2,    4,    0,    2,    0,    0,
+	    2,    2,    5,    5,    5,    5,    0,    0,    0,    0,    0,    0,
+	    1,    1,    4,    4,    1,    1,    0,    0,    0,    0,    0,    0,
+	    0,    0,    1,    1,    2,    4,    1,    1,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    1,    1,    0,    0,    0,    1,    0,
+	    0,    0,    0,    0,    0,    0,    2,    4,    4,    4,    0,    0,
+	    0,    2,    0,    0,    0,    0,    0,    0,    1,    1,    0,    0,
+	    0,    0,    0,    0
+	};
+}
+
+private static final byte _hpricot_scan_range_lengths[] = init__hpricot_scan_range_lengths_0();
+
+
+private static short[] init__hpricot_scan_index_offsets_0()
+{
+	return new short [] {
+	    0,    4,    6,    8,   10,   12,   14,   16,   18,   21,   28,   39,
+	   46,   48,   50,   52,   54,   56,   59,   64,   73,   82,   87,   94,
+	   96,   98,  103,  105,  109,  111,  113,  123,  133,  146,  159,  172,
+	  185,  192,  195,  198,  204,  207,  212,  217,  223,  226,  231,  237,
+	  247,  249,  251,  253,  255,  257,  259,  261,  263,  265,  267,  269,
+	  274,  284,  288,  298,  308,  319,  330,  332,  342,  350,  360,  373,
+	  387,  401,  409,  419,  434,  449,  459,  469,  481,  484,  487,  500,
+	  513,  517,  528,  539,  555,  571,  586,  601,  617,  633,  643,  653,
+	  664,  675,  686,  699,  703,  715,  718,  721,  734,  747,  751,  762,
+	  772,  787,  803,  819,  829,  839,  850,  866,  882,  893,  909,  926,
+	  940,  954,  959,  963,  974,  985, 1001, 1017, 1033, 1044, 1055, 1071,
+	 1084, 1097, 1108, 1125, 1140, 1144, 1156, 1167, 1179, 1183, 1193, 1196,
+	 1199, 1209, 1215, 1224, 1234, 1244, 1253, 1255, 1257, 1259, 1261, 1263,
+	 1265, 1269, 1274, 1280, 1287, 1292, 1299, 1301, 1303, 1305, 1307, 1309,
+	 1311, 1313, 1315, 1319, 1324, 1327, 1334, 1339, 1345, 1347, 1349, 1351,
+	 1353, 1355, 1357, 1359, 1361, 1363, 1367, 1372, 1375, 1377, 1379, 1384,
+	 1386, 1388, 1391, 1393, 1395, 1397, 1399, 1402, 1409, 1415, 1422, 1424,
+	 1426, 1429, 1437, 1439, 1441, 1443, 1446, 1449, 1453, 1456, 1460, 1463,
+	 1465, 1468, 1470, 1474
+	};
+}
+
+private static final short _hpricot_scan_index_offsets[] = init__hpricot_scan_index_offsets_0();
+
+
+private static short[] init__hpricot_scan_indicies_0()
+{
+	return new short [] {
+	    1,    2,    3,    0,    4,    0,    5,    0,    6,    0,    7,    0,
+	    8,    0,    9,    0,   10,    0,   11,   11,    0,   11,   12,   12,
+	   11,   12,   12,    0,   13,   15,   14,   16,   14,   13,   14,   14,
+	   14,   14,    0,   17,   18,   19,   20,   21,   17,    0,   22,    0,
+	   23,    0,   24,    0,   25,    0,   26,    0,   27,   27,    0,   27,
+	   28,   29,   27,    0,   30,   31,   30,   30,   30,   30,   30,   30,
+	    0,   32,   33,   32,   32,   32,   32,   32,   32,    0,   34,   18,
+	   21,   34,    0,   34,   35,   36,   18,   21,   34,    0,   38,   37,
+	   41,   40,   42,   18,   21,   42,   39,   43,   21,   43,   18,   43,
+	   39,   38,   44,   41,   45,   46,   47,   46,   46,   46,   46,   46,
+	   46,   46,    0,   48,   49,   48,   48,   48,   48,   48,   48,   48,
+	    0,   50,   50,   48,   49,   18,   21,   48,   34,   48,   48,   48,
+	   48,    0,   50,   50,   35,   51,   18,   21,   48,   34,   48,   48,
+	   48,   48,    0,   52,   52,   54,   55,   56,   57,   54,   53,   54,
+	   54,   54,   54,   44,   58,   58,   61,   62,   63,   64,   60,   59,
+	   60,   60,   60,   60,   45,   59,   61,   65,   63,   64,   59,   45,
+	   67,   68,   66,   70,   71,   69,   72,   41,   63,   64,   72,   45,
+	   73,   74,   64,   75,   76,   43,   75,   21,   74,   41,   63,   74,
+	   45,   77,   41,   78,   79,   77,   40,   73,   80,   79,   80,   41,
+	   78,   80,   40,   81,   38,   56,   57,   81,   44,   60,   82,   60,
+	   60,   60,   60,   60,   60,   60,   45,   83,    0,   84,    0,   85,
+	    0,   86,    0,   87,    0,   88,    0,   89,    0,   90,    0,   91,
+	    0,   92,    0,   93,    0,   94,   94,   94,   94,    0,   95,   97,
+	   96,   96,   95,   96,   96,   96,   96,    0,   98,   99,   98,    0,
+	  100,  102,  103,  101,  101,  100,  101,  101,  101,    0,  104,  106,
+	  107,  105,  105,  104,  105,  105,  105,    0,  108,  110,  111,  112,
+	  109,  109,  108,  109,  109,  109,   39,  113,  115,  116,  117,  114,
+	  114,  113,  114,  114,  114,   39,  118,   39,  120,  120,  122,  123,
+	  124,   39,  117,  120,  121,  119,  126,  126,  128,   39,  129,  126,
+	  127,  125,  130,  115,  117,  114,  114,  130,  114,  114,  114,   39,
+	  126,  126,  132,   39,  133,  131,  131,  126,  127,  131,  131,  131,
+	  125,  134,  134,  137,   39,  138,  139,  136,  136,  134,  135,  136,
+	  136,  136,  125,  140,  140,  132,   39,  142,  133,  131,  131,  140,
+	  141,  131,  131,  131,  125,  126,  126,  128,   39,  129,  126,  127,
+	  125,  143,  143,  145,  146,  147,   39,  129,  143,  144,  119,  148,
+	  148,  122,  123,  124,   39,  117,  150,  150,  148,  149,  150,  150,
+	  150,  119,  143,  143,  145,  146,  151,   39,  133,  150,  150,  143,
+	  144,  150,  150,  150,  119,  153,  153,  155,  156,  157,  158,  159,
+	  153,  154,  152,  161,  161,  163,  164,  165,  166,  167,  161,  162,
+	  160,  168,  169,  171,  172,  170,  173,  170,  168,  170,  170,  170,
+	  165,  169,  173,  165,  174,  173,  165,  175,  169,  177,  178,  179,
+	  176,  173,  176,  175,  176,  176,  176,  165,  180,  169,  171,  181,
+	  172,  170,  173,  170,  180,  170,  170,  170,  165,  169,  182,  173,
+	  165,  183,  183,  185,  186,  187,  165,  172,  159,  183,  184,  152,
+	  188,  188,  185,  186,  187,  165,  172,  159,  188,  189,  152,  188,
+	  188,  185,  186,  187,  165,  172,  190,  159,  190,  188,  189,  190,
+	  190,  190,  152,  191,  191,  193,  194,  195,  165,  196,  190,  159,
+	  190,  191,  192,  190,  190,  190,  152,  153,  153,  155,  195,  157,
+	  197,  190,  159,  190,  153,  154,  190,  190,  190,  152,  161,  161,
+	  163,  199,  165,  196,  198,  167,  198,  161,  162,  198,  198,  198,
+	  160,  200,  200,  163,  203,  165,  204,  205,  202,  167,  202,  200,
+	  201,  202,  202,  202,  160,  206,  206,  163,  199,  165,  208,  196,
+	  198,  167,  198,  206,  207,  198,  198,  198,  160,  161,  161,  163,
+	  164,  165,  166,  167,  161,  162,  160,  161,  161,  209,  164,  165,
+	  166,  167,  161,  162,  160,  191,  191,  193,  194,  156,  165,  166,
+	  159,  191,  192,  152,  211,  211,  213,  214,  215,  216,  217,  218,
+	  211,  212,  210,  220,  220,  222,  209,  223,  224,  225,  226,  220,
+	  221,  219,  227,  228,  174,  230,  231,  229,  232,  229,  227,  229,
+	  229,  229,  224,  228,  174,  232,  224,  234,  169,  236,  237,  235,
+	  238,  235,  234,  235,  235,  235,  233,  169,  238,  233,  228,  238,
+	  233,  239,  169,  241,  242,  243,  240,  238,  240,  239,  240,  240,
+	  240,  233,  244,  169,  236,  245,  237,  235,  238,  235,  244,  235,
+	  235,  235,  233,  169,  246,  238,  233,  248,  248,  250,  251,  252,
+	  233,  237,  253,  248,  249,  247,  255,  255,  163,  257,  233,  258,
+	  259,  255,  256,  254,  255,  255,  163,  261,  233,  262,  260,  259,
+	  260,  255,  256,  260,  260,  260,  254,  263,  263,  163,  266,  233,
+	  267,  268,  265,  259,  265,  263,  264,  265,  265,  265,  254,  269,
+	  269,  163,  261,  233,  271,  262,  260,  259,  260,  269,  270,  260,
+	  260,  260,  254,  255,  255,  163,  257,  233,  258,  259,  255,  256,
+	  254,  255,  255,  222,  257,  233,  258,  259,  255,  256,  254,  272,
+	  272,  274,  275,  276,  233,  258,  253,  272,  273,  247,  277,  277,
+	  250,  251,  252,  233,  237,  279,  253,  279,  277,  278,  279,  279,
+	  279,  247,  272,  272,  274,  275,  280,  233,  262,  279,  253,  279,
+	  272,  273,  279,  279,  279,  247,  211,  211,  281,  214,  215,  216,
+	  217,  218,  211,  212,  210,  220,  220,  222,  209,  283,  224,  284,
+	  282,  226,  282,  220,  221,  282,  282,  282,  219,  285,  285,  222,
+	  209,  288,  224,  289,  290,  287,  226,  287,  285,  286,  287,  287,
+	  287,  219,  291,  228,  174,  230,  292,  231,  229,  232,  229,  291,
+	  229,  229,  229,  224,  293,  228,  174,  295,  296,  297,  294,  232,
+	  294,  293,  294,  294,  294,  224,  228,  174,  298,  232,  224,  299,
+	  299,  232,  224,  300,  300,  302,  303,  304,  224,  231,  218,  300,
+	  301,  210,  305,  305,  302,  303,  304,  224,  231,  218,  305,  306,
+	  210,  305,  305,  302,  303,  304,  224,  231,  307,  218,  307,  305,
+	  306,  307,  307,  307,  210,  308,  308,  310,  311,  312,  224,  284,
+	  307,  218,  307,  308,  309,  307,  307,  307,  210,  211,  211,  281,
+	  214,  312,  216,  313,  307,  218,  307,  211,  212,  307,  307,  307,
+	  210,  220,  220,  222,  209,  223,  224,  225,  226,  220,  221,  219,
+	  220,  220,  314,  314,  223,  224,  225,  226,  220,  221,  219,  211,
+	  211,  213,  214,  312,  216,  313,  307,  218,  307,  211,  212,  307,
+	  307,  307,  210,  315,  316,  317,  319,  320,  318,  321,  318,  315,
+	  318,  318,  318,  216,  315,  322,  317,  319,  320,  318,  321,  318,
+	  315,  318,  318,  318,  216,  308,  308,  310,  311,  215,  224,  225,
+	  218,  308,  309,  210,  323,  323,  222,  209,  283,  224,  325,  284,
+	  282,  226,  282,  323,  324,  282,  282,  282,  219,  326,  326,  155,
+	  280,  328,  329,  279,  253,  279,  326,  327,  279,  279,  279,  247,
+	  316,  317,  321,  216,  330,  331,  333,  334,  332,  335,  332,  330,
+	  332,  332,  332,  328,  277,  277,  250,  251,  252,  233,  237,  253,
+	  277,  278,  247,  336,  331,  338,  339,  337,  340,  337,  336,  337,
+	  337,  337,  157,  322,  317,  321,  216,  326,  326,  155,  276,  328,
+	  341,  253,  326,  327,  247,  331,  340,  157,  331,  335,  328,  148,
+	  148,  122,  123,  124,   39,  117,  148,  149,  119,  342,  342,  343,
+	  342,  342,    0,  344,  345,  345,  344,  345,  345,  345,  345,    0,
+	  344,  345,  345,  346,  344,  345,  345,  345,  345,    0,  344,  345,
+	  345,  347,  344,  345,  345,  345,  345,    0,  348,  345,  345,  348,
+	  345,  345,  345,  345,    0,  350,  349,  351,  349,  352,  349,  353,
+	  349,  354,  349,  355,  349,  355,  356,  355,  349,  356,  357,  358,
+	  356,  349,  359,  359,  359,  359,  359,  349,  360,  361,  361,  361,
+	  361,  361,  349,  362,  363,  364,  362,  349,  362,  363,  364,  365,
+	  366,  362,  349,  363,  349,  367,  349,  368,  349,  369,  349,  370,
+	  349,  371,  349,  372,  349,  373,  349,  373,  374,  373,  349,  374,
+	  375,  376,  374,  349,  377,  377,  349,  378,  379,  379,  379,  379,
+	  379,  349,  380,  363,  364,  380,  349,  380,  363,  364,  366,  380,
+	  349,  381,  349,  382,  349,  383,  349,  384,  349,  385,  349,  386,
+	  349,  387,  349,  388,  349,  389,  349,  389,  390,  389,  349,  390,
+	  391,  392,  390,  349,  393,  394,  349,  395,  349,  396,  349,  397,
+	  363,  364,  397,  349,  398,  349,  395,  349,  399,  400,  349,  401,
+	  349,  396,  349,  402,  349,  401,  349,  403,  403,  349,  378,  404,
+	  404,  404,  404,  404,  349,  405,  405,  405,  405,  405,  349,  360,
+	  406,  406,  406,  406,  406,  349,  408,  407,  410,  409,  412,  413,
+	  411,  415,  416,  417,  418,  417,  417,  417,  414,   41,   45,   43,
+	   21,   41,   40,  169,  173,  165,  169,  238,  233,  228,  174,  232,
+	  224,  344,  344,  420,  348,  421,  348,  420,  423,  424,  422,  426,
+	  425,  428,  429,  427,  431,  430,  433,  434,  435,  432,  434,  436,
+	    0
+	};
+}
+
+private static final short _hpricot_scan_indicies[] = init__hpricot_scan_indicies_0();
+
+
+private static short[] init__hpricot_scan_trans_targs_0()
+{
+	return new short [] {
+	  204,    1,    2,   53,  204,    3,    4,    5,    6,    7,    8,    9,
+	   10,   11,   10,  204,   26,   11,  204,   12,   48,   26,   13,   14,
+	   15,   16,   17,   18,   19,   30,   20,   21,   20,   21,   22,   23,
+	   28,   24,   25,  204,   24,   25,   25,   27,   29,   29,   31,   32,
+	   31,   32,   33,   34,   35,   36,   47,   32,  206,   40,   35,   36,
+	   47,   37,   34,  206,   40,   46,   38,   39,   43,   38,   39,   43,
+	   39,   41,   42,   41,  207,   43,  208,   44,   45,   39,   32,   49,
+	   50,   51,   52,   21,   54,   55,   56,   57,   58,  204,   60,   61,
+	   60,  204,   61,  204,   63,   62,   66,  204,   63,   64,   66,  204,
+	   65,   64,   66,   67,  204,   65,   64,   66,   67,  204,  204,   68,
+	  144,   74,  142,  143,   73,   68,   69,   70,   73,  204,   69,   71,
+	   73,  204,   65,   72,   71,   73,   74,  204,   65,   72,   74,   75,
+	   76,   77,  141,   73,   75,   76,   71,   73,   78,   79,   90,   70,
+	   93,   80,  209,   94,   78,   79,   90,   70,   93,   80,  209,   94,
+	   79,   69,   82,   84,  209,   81,   79,   83,   82,   84,   85,  209,
+	   83,   85,  209,   86,   95,  139,  140,   93,   87,   88,   91,   87,
+	   88,   89,   96,   93,  209,  209,   91,   93,   83,   92,   91,   93,
+	   95,  209,   83,   92,   95,   90,   97,   98,  117,  108,   90,  128,
+	   99,  211,  129,   97,   98,  117,  108,  128,   99,  211,  129,   98,
+	  100,  120,  121,  211,  122,  101,  100,  103,  105,  210,  102,  104,
+	  103,  105,  106,  210,  104,  106,  210,  107,  138,  113,  136,  137,
+	  111,  112,  107,  100,  108,  111,  210,  112,  109,  111,  210,  104,
+	  110,  109,  111,  113,  210,  104,  110,  113,  114,  115,  116,  135,
+	  111,  114,  115,  109,  111,  108,  118,  128,  211,  119,  134,  118,
+	  128,  133,  211,  119,  123,  119,  120,  121,  123,  211,  211,   98,
+	  124,  133,  131,  132,  128,  125,  126,  118,  125,  126,  127,  130,
+	  128,  211,  117,   98,  100,   79,  120,  121,  211,  122,  100,  119,
+	  134,  133,  100,  108,  101,  210,  100,   69,  103,  105,  210,  102,
+	   79,   82,   84,  209,   81,  210,  146,  147,  212,  146,  148,  149,
+	  213,  204,  151,  152,  153,  154,  155,  156,  157,  158,  200,  159,
+	  160,  159,  161,  204,  162,  163,  176,  164,  165,  166,  167,  168,
+	  169,  170,  171,  172,  198,  173,  174,  173,  175,  177,  178,  179,
+	  180,  181,  182,  183,  184,  185,  186,  187,  193,  188,  191,  189,
+	  190,  190,  192,  194,  196,  195,  197,  199,  199,  201,  201,  214,
+	  214,  216,  216,  204,  204,  205,  204,    0,   59,   62,  145,  204,
+	  204,  150,  214,  214,  215,  214,  202,  216,  216,  217,  216,  203,
+	  218,  218,  218,  219,  218
+	};
+}
+
+private static final short _hpricot_scan_trans_targs[] = init__hpricot_scan_trans_targs_0();
 
-static final int hpricot_scan_start = 204;
 
+private static short[] init__hpricot_scan_trans_actions_0()
+{
+	return new short [] {
+	   73,    0,    0,    0,   59,    0,    0,    0,    0,    0,    0,    0,
+	    1,    5,    0,   92,    5,    0,   51,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    3,   83,    0,   19,    0,    0,
+	    0,    3,   86,   75,    0,   21,    0,    0,    3,    0,    3,   83,
+	    0,   19,    0,   19,    3,    3,    3,  172,  188,    3,    0,    0,
+	    0,    0,  113,  146,    0,   21,    3,   86,   86,    0,   21,   21,
+	    0,   21,    0,    0,  146,    0,  146,    0,    0,    3,  113,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,   61,    1,    5,
+	    0,   98,    0,   55,    5,    0,    5,   95,    0,  116,    0,   53,
+	   11,    0,  110,   11,  168,    0,  180,   23,    0,  122,   57,    3,
+	    3,    3,    0,    0,   89,    0,    9,    9,  104,  164,    0,  180,
+	  119,  176,  107,  107,    0,  160,   11,  201,    9,    9,    0,   80,
+	   80,    0,    0,  152,    3,    3,  196,  156,    3,   80,   80,   77,
+	  152,    3,  226,    3,    0,    9,    9,    7,  104,    0,  211,    0,
+	    0,    7,  180,   23,  192,    0,    7,   11,    0,  110,   11,  216,
+	    0,    0,  149,    3,    3,    7,    0,   89,    3,    3,  196,   80,
+	   80,    7,    0,  156,  221,  232,  180,  119,  107,  107,    0,  160,
+	   11,  238,    9,    9,    0,    7,    3,   80,   80,  101,   77,  152,
+	    3,  226,    3,    0,    9,    9,    7,  104,    0,  211,    0,    0,
+	    7,  180,   23,  192,    0,    0,    0,  180,   23,  192,    0,   11,
+	    0,  110,   11,  216,    0,    0,  149,    3,    3,    3,    0,    7,
+	   89,    3,    0,    9,    9,  104,  211,    0,  180,  119,  221,  107,
+	  107,    0,  160,   11,  238,    9,    9,    0,   80,   80,    0,    7,
+	  152,    3,    3,  196,  156,   77,  180,  119,  221,  107,  107,    0,
+	  160,   11,  238,    0,    0,   11,    0,  110,   11,  216,  149,    7,
+	    3,    3,    7,    7,   89,    3,    3,  196,   80,   80,    7,    7,
+	  156,  232,    7,    3,   77,   77,  196,   89,  206,    3,  101,    9,
+	    9,    0,   80,   80,    3,  232,    3,   77,  196,   89,  206,    3,
+	    3,  196,   89,  206,    3,  226,   25,   25,    0,    0,    0,    0,
+	   31,   71,    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
+	   13,    0,    0,   49,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    3,   15,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,    3,    0,
+	   17,    0,    0,    3,    3,    0,    0,    3,    0,    3,    0,   37,
+	  137,   43,  140,   63,  134,  184,   69,    0,    0,    1,    0,   65,
+	   67,    0,   33,  125,   31,   35,    0,   39,  128,   31,   41,    0,
+	   45,  131,  143,    0,   47
+	};
+}
+
+private static final short _hpricot_scan_trans_actions[] = init__hpricot_scan_trans_actions_0();
+
+
+private static short[] init__hpricot_scan_to_state_actions_0()
+{
+	return new short [] {
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	   27,    0,    0,    0,    0,    0,    0,    0,    0,    0,   27,    0,
+	   27,    0,   27,    0
+	};
+}
+
+private static final short _hpricot_scan_to_state_actions[] = init__hpricot_scan_to_state_actions_0();
+
+
+private static short[] init__hpricot_scan_from_state_actions_0()
+{
+	return new short [] {
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+	   29,    0,    0,    0,    0,    0,    0,    0,    0,    0,   29,    0,
+	   29,    0,   29,    0
+	};
+}
+
+private static final short _hpricot_scan_from_state_actions[] = init__hpricot_scan_from_state_actions_0();
+
+
+private static short[] init__hpricot_scan_eof_trans_0()
+{
+	return new short [] {
+	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+	   40,   40,   40,   40,    1,   40,    1,    1,    1,    1,    1,    1,
+	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+	    1,    1,    1,    1,   40,   40,   40,   40,   40,   40,   40,   40,
+	   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
+	   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
+	   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
+	   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
+	   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
+	   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
+	   40,    1,    1,    1,    1,    1,  350,  350,  350,  350,  350,  350,
+	  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
+	  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
+	  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
+	  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  408,  410,
+	    0,  415,  420,  420,  420,   40,   40,   40,  421,  421,    0,  426,
+	    0,  431,    0,  437
+	};
+}
+
+private static final short _hpricot_scan_eof_trans[] = init__hpricot_scan_eof_trans_0();
+
+
+static final int hpricot_scan_start = 204;
 static final int hpricot_scan_error = -1;
 
+static final int hpricot_scan_en_html_comment = 214;
+static final int hpricot_scan_en_html_cdata = 216;
+static final int hpricot_scan_en_html_procins = 218;
+static final int hpricot_scan_en_main = 204;
+
+// line 192 "ext/hpricot_scan/hpricot_scan.java.rl"
 
 public final static int BUFSIZE=16384;
 
@@ -895,7 +774,8 @@
 
 int cs, act, have = 0, nread = 0, curline = 1, p=-1;
 boolean text = false;
-int tokstart=-1, tokend;
+int ts=-1, te;
+int eof=-1;
 char[] buf;
 Ruby runtime;
 IRubyObject attr, bufsize;
@@ -928,8 +808,8 @@
   }
 
   buffer_size = BUFSIZE;
-  if (recv.getInstanceVariable("@buffer_size") != null) {
-    bufsize = recv.getInstanceVariable("@buffer_size");
+  if (rubyApi.getInstanceVariable(recv, "@buffer_size") != null) {
+    bufsize = rubyApi.getInstanceVariable(recv, "@buffer_size");
     if (!bufsize.isNil()) {
       buffer_size = RubyNumeric.fix2int(bufsize);
     }
@@ -937,12 +817,14 @@
   buf = new char[buffer_size];
 
   
+// line 821 "ext/hpricot_scan/HpricotScanService.java"
 	{
 	cs = hpricot_scan_start;
-	tokstart = -1;
-	tokend = -1;
+	ts = -1;
+	te = -1;
 	act = 0;
 	}
+// line 256 "ext/hpricot_scan/hpricot_scan.java.rl"
 
   while( !done ) {
     IRubyObject str;
@@ -954,7 +836,11 @@
       /* We've used up the entire buffer storing an already-parsed token
        * prefix that must be preserved.  Likely caused by super-long attributes.
        * See ticket #13. */
-      rb_raise(rb_eHpricotParseError, "ran out of buffer space on element <" + tag.toString() + ">, starting on line "+curline+".");
+       buffer_size += BUFSIZE;
+       char[] new_buf = new char[buffer_size];
+       System.arraycopy(buf, 0, new_buf, 0, buf.length);
+       buf = new_buf;
+       space = buffer_size - have;
     }
 
     if (port.respondsTo("read")) {
@@ -980,23 +866,32 @@
     char[] data = buf;
 
     
+// line 870 "ext/hpricot_scan/HpricotScanService.java"
 	{
 	int _klen;
-	int _trans;
+	int _trans = 0;
 	int _acts;
 	int _nacts;
 	int _keys;
+	int _goto_targ = 0;
 
-	if ( p != pe ) {
-	_resume: while ( true ) {
-	_again: do {
+	_goto: while (true) {
+	switch ( _goto_targ ) {
+	case 0:
+	if ( p == pe ) {
+		_goto_targ = 4;
+		continue _goto;
+	}
+case 1:
 	_acts = _hpricot_scan_from_state_actions[cs];
 	_nacts = (int) _hpricot_scan_actions[_acts++];
 	while ( _nacts-- > 0 ) {
 		switch ( _hpricot_scan_actions[_acts++] ) {
 	case 21:
-	{tokstart = p;}
+// line 1 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{ts = p;}
 	break;
+// line 895 "ext/hpricot_scan/HpricotScanService.java"
 		}
 	}
 
@@ -1050,18 +945,18 @@
 	} while (false);
 
 	_trans = _hpricot_scan_indicies[_trans];
-	cs = _hpricot_scan_trans_targs_wi[_trans];
+case 3:
+	cs = _hpricot_scan_trans_targs[_trans];
 
-	if ( _hpricot_scan_trans_actions_wi[_trans] == 0 )
-		break _again;
-
-	_acts = _hpricot_scan_trans_actions_wi[_trans];
-	_nacts = (int) _hpricot_scan_actions[_acts++];
-	while ( _nacts-- > 0 )
+	if ( _hpricot_scan_trans_actions[_trans] != 0 ) {
+		_acts = _hpricot_scan_trans_actions[_trans];
+		_nacts = (int) _hpricot_scan_actions[_acts++];
+		while ( _nacts-- > 0 )
 	{
-		switch ( _hpricot_scan_actions[_acts++] )
-		{
+			switch ( _hpricot_scan_actions[_acts++] )
+			{
 	case 0:
+// line 147 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{
     if (text) {
       CAT(tag, p);
@@ -1075,45 +970,58 @@
   }
 	break;
 	case 1:
+// line 159 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ mark_tag = p; }
 	break;
 	case 2:
+// line 160 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ mark_aval = p; }
 	break;
 	case 3:
+// line 161 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ mark_akey = p; }
 	break;
 	case 4:
+// line 162 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ SET(tag, p); }
 	break;
 	case 5:
+// line 164 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ SET(aval, p); }
 	break;
 	case 6:
+// line 165 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ 
     if (buf[p-1] == '"' || buf[p-1] == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	break;
 	case 7:
+// line 169 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ SET(akey, p); }
 	break;
 	case 8:
+// line 170 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ SET(aval, p); ATTR(rb_str_new2("version"), aval); }
 	break;
 	case 9:
+// line 171 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ SET(aval, p); ATTR(rb_str_new2("encoding"), aval); }
 	break;
 	case 10:
+// line 172 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ SET(aval, p); ATTR(rb_str_new2("standalone"), aval); }
 	break;
 	case 11:
+// line 173 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ SET(aval, p); ATTR(rb_str_new2("public_id"), aval); }
 	break;
 	case 12:
+// line 174 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ SET(aval, p); ATTR(rb_str_new2("system_id"), aval); }
 	break;
 	case 13:
+// line 176 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ 
     akey[0] = runtime.getNil();
     aval[0] = runtime.getNil();
@@ -1122,146 +1030,202 @@
   }
 	break;
 	case 14:
+// line 183 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ 
     ATTR(akey, aval);
   }
 	break;
 	case 15:
+// line 9 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{curline += 1;}
 	break;
 	case 16:
+// line 46 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{ TEXT_PASS(); }
 	break;
 	case 17:
-	{ EBLK(comment, 3); {cs = 204; if (true) break _again;} }
+// line 50 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{ EBLK(comment, 3); {cs = 204; _goto_targ = 2; if (true) continue _goto;} }
 	break;
 	case 18:
-	{ EBLK(cdata, 3); {cs = 204; if (true) break _again;} }
+// line 55 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{ EBLK(cdata, 3); {cs = 204; _goto_targ = 2; if (true) continue _goto;} }
 	break;
 	case 19:
-	{ EBLK(procins, 2); {cs = 204; if (true) break _again;} }
+// line 60 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{ EBLK(procins, 2); {cs = 204; _goto_targ = 2; if (true) continue _goto;} }
 	break;
 	case 22:
-	{tokend = p+1;}
+// line 1 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;}
 	break;
 	case 23:
-	{tokend = p+1;{p = ((tokend))-1;}}
+// line 50 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;}
 	break;
 	case 24:
-	{tokend = p+1;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+// line 51 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;{ TEXT_PASS(); }}
 	break;
 	case 25:
-	{tokend = p;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+// line 51 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p;p--;{ TEXT_PASS(); }}
 	break;
 	case 26:
-	{{ TEXT_PASS(); }{p = ((tokend))-1;}}
+// line 51 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{{p = ((te))-1;}{ TEXT_PASS(); }}
 	break;
 	case 27:
-	{tokend = p+1;{p = ((tokend))-1;}}
+// line 55 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;}
 	break;
 	case 28:
-	{tokend = p+1;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+// line 56 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;{ TEXT_PASS(); }}
 	break;
 	case 29:
-	{tokend = p;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+// line 56 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p;p--;{ TEXT_PASS(); }}
 	break;
 	case 30:
-	{{ TEXT_PASS(); }{p = ((tokend))-1;}}
+// line 56 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{{p = ((te))-1;}{ TEXT_PASS(); }}
 	break;
 	case 31:
-	{tokend = p+1;{p = ((tokend))-1;}}
+// line 60 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;}
 	break;
 	case 32:
-	{tokend = p+1;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+// line 61 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;{ TEXT_PASS(); }}
 	break;
 	case 33:
-	{tokend = p;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+// line 61 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p;p--;{ TEXT_PASS(); }}
 	break;
 	case 34:
+// line 66 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{act = 8;}
 	break;
 	case 35:
+// line 68 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{act = 10;}
 	break;
 	case 36:
+// line 70 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{act = 12;}
 	break;
 	case 37:
+// line 73 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{act = 15;}
 	break;
 	case 38:
-	{tokend = p+1;{ ELE(xmldecl); }{p = ((tokend))-1;}}
+// line 65 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;{ ELE(xmldecl); }}
 	break;
 	case 39:
-	{tokend = p+1;{ ELE(doctype); }{p = ((tokend))-1;}}
+// line 66 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;{ ELE(doctype); }}
 	break;
 	case 40:
-	{tokend = p+1;{ ELE(stag); }{p = ((tokend))-1;}}
+// line 68 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;{ ELE(stag); }}
 	break;
 	case 41:
-	{tokend = p+1;{ ELE(etag); }{p = ((tokend))-1;}}
+// line 69 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;{ ELE(etag); }}
 	break;
 	case 42:
-	{tokend = p+1;{ ELE(emptytag); }{p = ((tokend))-1;}}
+// line 70 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;{ ELE(emptytag); }}
 	break;
 	case 43:
-	{tokend = p+1;{ {{p = ((tokend))-1;}{cs = 214; if (true) break _again;}} }{p = ((tokend))-1;}}
+// line 71 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;{ {cs = 214; _goto_targ = 2; if (true) continue _goto;} }}
 	break;
 	case 44:
-	{tokend = p+1;{ {{p = ((tokend))-1;}{cs = 216; if (true) break _again;}} }{p = ((tokend))-1;}}
+// line 72 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;{ {cs = 216; _goto_targ = 2; if (true) continue _goto;} }}
 	break;
 	case 45:
-	{tokend = p+1;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+// line 73 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p+1;{ TEXT_PASS(); }}
 	break;
 	case 46:
-	{tokend = p;{ {{p = ((tokend))-1;}{cs = 218; if (true) break _again;}} }{p = ((tokend))-1;}}
+// line 66 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p;p--;{ ELE(doctype); }}
 	break;
 	case 47:
-	{tokend = p;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+// line 67 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p;p--;{ {cs = 218; _goto_targ = 2; if (true) continue _goto;} }}
 	break;
 	case 48:
-	{{ {{p = ((tokend))-1;}{cs = 218; if (true) break _again;}} }{p = ((tokend))-1;}}
+// line 73 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{te = p;p--;{ TEXT_PASS(); }}
 	break;
 	case 49:
-	{{ TEXT_PASS(); }{p = ((tokend))-1;}}
+// line 67 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{{p = ((te))-1;}{ {cs = 218; _goto_targ = 2; if (true) continue _goto;} }}
 	break;
 	case 50:
+// line 73 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{{p = ((te))-1;}{ TEXT_PASS(); }}
+	break;
+	case 51:
+// line 1 "ext/hpricot_scan/hpricot_scan.java.rl"
 	{	switch( act ) {
 	case 8:
-	{ ELE(doctype); }
+	{{p = ((te))-1;} ELE(doctype); }
 	break;
 	case 10:
-	{ ELE(stag); }
+	{{p = ((te))-1;} ELE(stag); }
 	break;
 	case 12:
-	{ ELE(emptytag); }
+	{{p = ((te))-1;} ELE(emptytag); }
 	break;
 	case 15:
-	{ TEXT_PASS(); }
+	{{p = ((te))-1;} TEXT_PASS(); }
 	break;
-	default: break;
 	}
-	{p = ((tokend))-1;}}
+	}
 	break;
+// line 1193 "ext/hpricot_scan/HpricotScanService.java"
+			}
 		}
 	}
 
-	} while (false);
+case 2:
 	_acts = _hpricot_scan_to_state_actions[cs];
 	_nacts = (int) _hpricot_scan_actions[_acts++];
 	while ( _nacts-- > 0 ) {
 		switch ( _hpricot_scan_actions[_acts++] ) {
 	case 20:
-	{tokstart = -1;}
+// line 1 "ext/hpricot_scan/hpricot_scan.java.rl"
+	{ts = -1;}
 	break;
+// line 1207 "ext/hpricot_scan/HpricotScanService.java"
 		}
 	}
 
-	if ( ++p == pe )
-		break _resume;
+	if ( ++p != pe ) {
+		_goto_targ = 1;
+		continue _goto;
 	}
+case 4:
+	if ( p == eof )
+	{
+	if ( _hpricot_scan_eof_trans[cs] > 0 ) {
+		_trans = _hpricot_scan_eof_trans[cs] - 1;
+		_goto_targ = 3;
+		continue _goto;
+	}
+	}
+
+case 5:
 	}
+	break; }
 	}
+// line 297 "ext/hpricot_scan/hpricot_scan.java.rl"
     
     if ( cs == hpricot_scan_error ) {
       if(!tag[0].isNil()) {
@@ -1273,16 +1237,16 @@
     
     if ( done && ele_open ) {
       ele_open = false;
-      if(tokstart > -1) {
-        mark_tag = tokstart;
-        tokstart = -1;
+      if(ts > -1) {
+        mark_tag = ts;
+        ts = -1;
         text = true;
       }
     }
 
-    if(tokstart == -1) {
+    if(ts == -1) {
       have = 0;
-      /* text nodes have no tokstart because each byte is parsed alone */
+      /* text nodes have no ts because each byte is parsed alone */
       if(mark_tag != -1 && text) {
         if (done) {
           if(mark_tag < p-1) {
@@ -1295,13 +1259,13 @@
       }
       mark_tag = 0;
     } else {
-      have = pe - tokstart;
-      System.arraycopy(buf,tokstart,buf,0,have);
+      have = pe - ts;
+      System.arraycopy(buf,ts,buf,0,have);
       SLIDE(tag);
       SLIDE(akey);
       SLIDE(aval);
-      tokend = (tokend - tokstart);
-      tokstart = 0;
+      te = (te - ts);
+      ts = 0;
     }
   }
   return runtime.getNil();
@@ -1332,9 +1296,10 @@
 
 public static void Init_hpricot_scan(Ruby runtime) {
   RubyModule mHpricot = runtime.defineModule("Hpricot");
-  mHpricot.getMetaClass().attr_accessor(new IRubyObject[]{runtime.newSymbol("buffer_size")});
+  mHpricot.getMetaClass().attr_accessor(runtime.getCurrentContext(),new IRubyObject[]{runtime.newSymbol("buffer_size")});
   CallbackFactory fact = runtime.callbackFactory(HpricotScanService.class);
   mHpricot.getMetaClass().defineMethod("scan",fact.getSingletonMethod("__hpricot_scan",IRubyObject.class));
-  mHpricot.defineClassUnder("ParseError",runtime.getClass("Exception"),runtime.getClass("Exception").getAllocator());
+  mHpricot.defineClassUnder("ParseError",runtime.getClass("StandardError"),runtime.getClass("StandardError").getAllocator());
+  rubyApi = JavaEmbedUtils.newObjectAdapter();
 }
 }
diff -ruN hpricot-0.6/ext/hpricot_scan/hpricot_css.c hpricot/ext/hpricot_scan/hpricot_css.c
--- hpricot-0.6/ext/hpricot_scan/hpricot_css.c	1970-01-01 01:00:00.000000000 +0100
+++ hpricot/ext/hpricot_scan/hpricot_css.c	2009-02-19 19:39:17.000000000 +0100
@@ -0,0 +1,3506 @@
+#line 1 "hpricot_css.rl"
+/*
+ * hpricot_css.rl
+ * ragel -C hpricot_css.rl -o hpricot_css.c
+ *
+ * Copyright (C) 2008 why the lucky stiff
+ */
+#include <ruby.h>
+
+#define FILTER(id) \
+  rb_funcall2(mod, rb_intern("" # id), fargs, fvals); \
+  rb_ary_clear(tmpt); \
+  fargs = 1
+#define FILTERAUTO() \
+  char filt[10]; \
+  sprintf(filt, "%.*s", te - ts, ts); \
+  rb_funcall2(mod, rb_intern(filt), fargs, fvals); \
+  rb_ary_clear(tmpt); \
+  fargs = 1
+#define PUSH(aps, ape) rb_ary_push(tmpt, fvals[fargs++] = rb_str_new(aps, ape - aps))
+#define P(id) printf(id ": %.*s\n", te - ts, ts);
+
+
+#line 25 "hpricot_css.c"
+static const int hpricot_css_start = 85;
+static const int hpricot_css_error = 0;
+
+static const int hpricot_css_en_main = 85;
+
+#line 87 "hpricot_css.rl"
+
+
+VALUE hpricot_css(VALUE self, VALUE mod, VALUE str, VALUE node)
+{
+  int cs, act, eof;
+  char *p, *pe, *ts, *te, *aps, *ape, *aps2, *ape2;
+
+  int fargs = 1;
+  VALUE fvals[6];
+  VALUE focus = rb_ary_new3(1, node);
+  VALUE tmpt = rb_ary_new();
+  rb_gc_register_address(&focus);
+  rb_gc_register_address(&tmpt);
+  fvals[0] = focus;
+
+  if (TYPE(str) != T_STRING)
+    rb_raise(rb_eArgError, "bad CSS selector, String only please.");
+ 
+  StringValue(str);
+  p = RSTRING_PTR(str);
+  pe = p + RSTRING_LEN(str);
+
+  
+#line 55 "hpricot_css.c"
+	{
+	cs = hpricot_css_start;
+	ts = 0;
+	te = 0;
+	act = 0;
+	}
+#line 110 "hpricot_css.rl"
+  
+#line 64 "hpricot_css.c"
+	{
+	if ( p == pe )
+		goto _test_eof;
+	switch ( cs )
+	{
+tr0:
+#line 83 "hpricot_css.rl"
+	{{p = ((te))-1;}}
+	goto st85;
+tr10:
+#line 1 "hpricot_css.rl"
+	{	switch( act ) {
+	case 0:
+	{{goto st0;}}
+	break;
+	case 1:
+	{{p = ((te))-1;} FILTER(ID); }
+	break;
+	case 2:
+	{{p = ((te))-1;} FILTER(CLASS); }
+	break;
+	case 5:
+	{{p = ((te))-1;} FILTER(TAG); }
+	break;
+	case 7:
+	{{p = ((te))-1;} FILTER(CHILD); }
+	break;
+	case 8:
+	{{p = ((te))-1;} FILTER(POS); }
+	break;
+	case 9:
+	{{p = ((te))-1;} FILTER(PSUEDO); }
+	break;
+	}
+	}
+	goto st85;
+tr38:
+#line 80 "hpricot_css.rl"
+	{{p = ((te))-1;}{ FILTER(PSUEDO); }}
+	goto st85;
+tr43:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 80 "hpricot_css.rl"
+	{te = p+1;{ FILTER(PSUEDO); }}
+	goto st85;
+tr45:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 80 "hpricot_css.rl"
+	{te = p+1;{ FILTER(PSUEDO); }}
+	goto st85;
+tr62:
+#line 79 "hpricot_css.rl"
+	{{p = ((te))-1;}{ FILTER(POS); }}
+	goto st85;
+tr64:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 79 "hpricot_css.rl"
+	{te = p+1;{ FILTER(POS); }}
+	goto st85;
+tr66:
+#line 78 "hpricot_css.rl"
+	{{p = ((te))-1;}{ FILTER(CHILD); }}
+	goto st85;
+tr67:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 78 "hpricot_css.rl"
+	{te = p+1;{ FILTER(CHILD); }}
+	goto st85;
+tr71:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 78 "hpricot_css.rl"
+	{te = p+1;{ FILTER(CHILD); }}
+	goto st85;
+tr99:
+#line 75 "hpricot_css.rl"
+	{te = p+1;{ FILTER(ATTR); }}
+	goto st85;
+tr104:
+#line 75 "hpricot_css.rl"
+	{{p = ((te))-1;}{ FILTER(ATTR); }}
+	goto st85;
+tr126:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 74 "hpricot_css.rl"
+	{te = p+1;{ FILTER(NAME); }}
+	goto st85;
+tr139:
+#line 82 "hpricot_css.rl"
+	{te = p+1;{ FILTERAUTO(); }}
+	goto st85;
+tr149:
+#line 83 "hpricot_css.rl"
+	{te = p;p--;}
+	goto st85;
+tr150:
+#line 81 "hpricot_css.rl"
+	{te = p;p--;{ focus = rb_ary_new3(1, node); }}
+	goto st85;
+tr151:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 72 "hpricot_css.rl"
+	{te = p;p--;{ FILTER(ID); }}
+	goto st85;
+tr155:
+#line 77 "hpricot_css.rl"
+	{te = p;p--;{ FILTER(MOD); }}
+	goto st85;
+tr156:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 76 "hpricot_css.rl"
+	{te = p;p--;{ FILTER(TAG); }}
+	goto st85;
+tr162:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 73 "hpricot_css.rl"
+	{te = p;p--;{ FILTER(CLASS); }}
+	goto st85;
+tr166:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 80 "hpricot_css.rl"
+	{te = p;p--;{ FILTER(PSUEDO); }}
+	goto st85;
+tr173:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 79 "hpricot_css.rl"
+	{te = p;p--;{ FILTER(POS); }}
+	goto st85;
+tr188:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 78 "hpricot_css.rl"
+	{te = p;p--;{ FILTER(CHILD); }}
+	goto st85;
+tr196:
+#line 75 "hpricot_css.rl"
+	{te = p;p--;{ FILTER(ATTR); }}
+	goto st85;
+st85:
+#line 1 "hpricot_css.rl"
+	{ts = 0;}
+#line 1 "hpricot_css.rl"
+	{act = 0;}
+	if ( ++p == pe )
+		goto _test_eof85;
+case 85:
+#line 1 "hpricot_css.rl"
+	{ts = p;}
+#line 267 "hpricot_css.c"
+	switch( (*p) ) {
+		case 32: goto tr133;
+		case 35: goto st2;
+		case 43: goto st89;
+		case 44: goto st87;
+		case 45: goto tr136;
+		case 46: goto st13;
+		case 58: goto st19;
+		case 62: goto tr139;
+		case 91: goto st52;
+		case 92: goto tr142;
+		case 95: goto tr140;
+		case 101: goto tr143;
+		case 110: goto tr136;
+		case 111: goto tr144;
+		case 126: goto tr139;
+		case 4294967236: goto tr145;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) < 48 ) {
+			if ( 9 <= (*p) && (*p) <= 13 )
+				goto tr133;
+		} else if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr140;
+		} else
+			goto tr136;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto tr146;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto tr148;
+		} else
+			goto tr147;
+	} else
+		goto tr140;
+	goto st0;
+st0:
+cs = 0;
+	goto _out;
+tr133:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+	goto st86;
+st86:
+	if ( ++p == pe )
+		goto _test_eof86;
+case 86:
+#line 318 "hpricot_css.c"
+	switch( (*p) ) {
+		case 32: goto st1;
+		case 44: goto st87;
+	}
+	if ( 9 <= (*p) && (*p) <= 13 )
+		goto st1;
+	goto tr149;
+st1:
+	if ( ++p == pe )
+		goto _test_eof1;
+case 1:
+	switch( (*p) ) {
+		case 32: goto st1;
+		case 44: goto st87;
+	}
+	if ( 9 <= (*p) && (*p) <= 13 )
+		goto st1;
+	goto tr0;
+st87:
+	if ( ++p == pe )
+		goto _test_eof87;
+case 87:
+	if ( (*p) == 32 )
+		goto st87;
+	if ( 9 <= (*p) && (*p) <= 13 )
+		goto st87;
+	goto tr150;
+st2:
+	if ( ++p == pe )
+		goto _test_eof2;
+case 2:
+	switch( (*p) ) {
+		case 45: goto tr3;
+		case 92: goto tr5;
+		case 95: goto tr3;
+		case 4294967236: goto tr6;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr3;
+		} else if ( (*p) >= 48 )
+			goto tr3;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto tr7;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto tr9;
+		} else
+			goto tr8;
+	} else
+		goto tr3;
+	goto st0;
+tr3:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 72 "hpricot_css.rl"
+	{act = 1;}
+	goto st88;
+tr11:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 72 "hpricot_css.rl"
+	{act = 1;}
+	goto st88;
+st88:
+	if ( ++p == pe )
+		goto _test_eof88;
+case 88:
+#line 394 "hpricot_css.c"
+	switch( (*p) ) {
+		case 45: goto tr11;
+		case 92: goto st3;
+		case 95: goto tr11;
+		case 4294967236: goto st4;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr11;
+		} else if ( (*p) >= 48 )
+			goto tr11;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st5;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st7;
+		} else
+			goto st6;
+	} else
+		goto tr11;
+	goto tr151;
+tr5:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st3;
+st3:
+	if ( ++p == pe )
+		goto _test_eof3;
+case 3:
+#line 429 "hpricot_css.c"
+	if ( (*p) == 46 )
+		goto tr11;
+	goto tr10;
+tr6:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st4;
+st4:
+	if ( ++p == pe )
+		goto _test_eof4;
+case 4:
+#line 443 "hpricot_css.c"
+	if ( 4294967208 <= (*p) && (*p) <= 4294967231 )
+		goto tr11;
+	goto tr10;
+tr7:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st5;
+st5:
+	if ( ++p == pe )
+		goto _test_eof5;
+case 5:
+#line 457 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto tr11;
+	goto tr10;
+tr8:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st6;
+st6:
+	if ( ++p == pe )
+		goto _test_eof6;
+case 6:
+#line 471 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st5;
+	goto tr10;
+tr9:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st7;
+st7:
+	if ( ++p == pe )
+		goto _test_eof7;
+case 7:
+#line 485 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st6;
+	goto tr10;
+tr157:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+	goto st89;
+st89:
+	if ( ++p == pe )
+		goto _test_eof89;
+case 89:
+#line 500 "hpricot_css.c"
+	switch( (*p) ) {
+		case 43: goto st89;
+		case 45: goto st89;
+		case 110: goto st89;
+	}
+	if ( 48 <= (*p) && (*p) <= 57 )
+		goto st89;
+	goto tr155;
+tr158:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 76 "hpricot_css.rl"
+	{act = 5;}
+	goto st90;
+tr136:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 76 "hpricot_css.rl"
+	{act = 5;}
+	goto st90;
+st90:
+	if ( ++p == pe )
+		goto _test_eof90;
+case 90:
+#line 529 "hpricot_css.c"
+	switch( (*p) ) {
+		case 43: goto tr157;
+		case 45: goto tr158;
+		case 92: goto st8;
+		case 95: goto tr14;
+		case 110: goto tr158;
+		case 4294967236: goto st9;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr14;
+		} else if ( (*p) >= 48 )
+			goto tr158;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st10;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st12;
+		} else
+			goto st11;
+	} else
+		goto tr14;
+	goto tr156;
+tr14:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 76 "hpricot_css.rl"
+	{act = 5;}
+	goto st91;
+tr140:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 76 "hpricot_css.rl"
+	{act = 5;}
+	goto st91;
+st91:
+	if ( ++p == pe )
+		goto _test_eof91;
+case 91:
+#line 576 "hpricot_css.c"
+	switch( (*p) ) {
+		case 45: goto tr14;
+		case 92: goto st8;
+		case 95: goto tr14;
+		case 4294967236: goto st9;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr14;
+		} else if ( (*p) >= 48 )
+			goto tr14;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st10;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st12;
+		} else
+			goto st11;
+	} else
+		goto tr14;
+	goto tr156;
+tr142:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st8;
+st8:
+	if ( ++p == pe )
+		goto _test_eof8;
+case 8:
+#line 611 "hpricot_css.c"
+	if ( (*p) == 46 )
+		goto tr14;
+	goto tr10;
+tr145:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st9;
+st9:
+	if ( ++p == pe )
+		goto _test_eof9;
+case 9:
+#line 625 "hpricot_css.c"
+	if ( 4294967208 <= (*p) && (*p) <= 4294967231 )
+		goto tr14;
+	goto tr10;
+tr146:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st10;
+st10:
+	if ( ++p == pe )
+		goto _test_eof10;
+case 10:
+#line 639 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto tr14;
+	goto tr10;
+tr147:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st11;
+st11:
+	if ( ++p == pe )
+		goto _test_eof11;
+case 11:
+#line 653 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st10;
+	goto tr10;
+tr148:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st12;
+st12:
+	if ( ++p == pe )
+		goto _test_eof12;
+case 12:
+#line 667 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st11;
+	goto tr10;
+st13:
+	if ( ++p == pe )
+		goto _test_eof13;
+case 13:
+	switch( (*p) ) {
+		case 45: goto tr17;
+		case 92: goto tr18;
+		case 95: goto tr17;
+		case 4294967236: goto tr19;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr17;
+		} else if ( (*p) >= 48 )
+			goto tr17;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto tr20;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto tr22;
+		} else
+			goto tr21;
+	} else
+		goto tr17;
+	goto st0;
+tr17:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 73 "hpricot_css.rl"
+	{act = 2;}
+	goto st92;
+tr23:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 73 "hpricot_css.rl"
+	{act = 2;}
+	goto st92;
+st92:
+	if ( ++p == pe )
+		goto _test_eof92;
+case 92:
+#line 719 "hpricot_css.c"
+	switch( (*p) ) {
+		case 45: goto tr23;
+		case 92: goto st14;
+		case 95: goto tr23;
+		case 4294967236: goto st15;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr23;
+		} else if ( (*p) >= 48 )
+			goto tr23;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st16;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st18;
+		} else
+			goto st17;
+	} else
+		goto tr23;
+	goto tr162;
+tr18:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st14;
+st14:
+	if ( ++p == pe )
+		goto _test_eof14;
+case 14:
+#line 754 "hpricot_css.c"
+	if ( (*p) == 46 )
+		goto tr23;
+	goto tr10;
+tr19:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st15;
+st15:
+	if ( ++p == pe )
+		goto _test_eof15;
+case 15:
+#line 768 "hpricot_css.c"
+	if ( 4294967208 <= (*p) && (*p) <= 4294967231 )
+		goto tr23;
+	goto tr10;
+tr20:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st16;
+st16:
+	if ( ++p == pe )
+		goto _test_eof16;
+case 16:
+#line 782 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto tr23;
+	goto tr10;
+tr21:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st17;
+st17:
+	if ( ++p == pe )
+		goto _test_eof17;
+case 17:
+#line 796 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st16;
+	goto tr10;
+tr22:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st18;
+st18:
+	if ( ++p == pe )
+		goto _test_eof18;
+case 18:
+#line 810 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st17;
+	goto tr10;
+st19:
+	if ( ++p == pe )
+		goto _test_eof19;
+case 19:
+	switch( (*p) ) {
+		case 45: goto tr26;
+		case 92: goto tr27;
+		case 95: goto tr26;
+		case 101: goto tr28;
+		case 102: goto tr29;
+		case 103: goto tr30;
+		case 108: goto tr31;
+		case 110: goto tr32;
+		case 111: goto tr33;
+		case 4294967236: goto tr34;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr26;
+		} else if ( (*p) >= 48 )
+			goto tr26;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto tr35;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto tr37;
+		} else
+			goto tr36;
+	} else
+		goto tr26;
+	goto st0;
+tr26:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st93;
+tr59:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st93;
+tr175:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st93;
+st93:
+	if ( ++p == pe )
+		goto _test_eof93;
+case 93:
+#line 879 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr167:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+	goto st20;
+st20:
+	if ( ++p == pe )
+		goto _test_eof20;
+case 20:
+#line 916 "hpricot_css.c"
+	switch( (*p) ) {
+		case 34: goto tr40;
+		case 39: goto tr41;
+		case 40: goto tr42;
+		case 41: goto tr43;
+	}
+	goto tr39;
+tr39:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st21;
+st21:
+	if ( ++p == pe )
+		goto _test_eof21;
+case 21:
+#line 934 "hpricot_css.c"
+	switch( (*p) ) {
+		case 34: goto tr10;
+		case 40: goto tr10;
+		case 41: goto tr45;
+	}
+	goto st21;
+tr40:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st22;
+st22:
+	if ( ++p == pe )
+		goto _test_eof22;
+case 22:
+#line 951 "hpricot_css.c"
+	switch( (*p) ) {
+		case 34: goto st24;
+		case 40: goto st25;
+		case 41: goto tr10;
+	}
+	goto st23;
+st23:
+	if ( ++p == pe )
+		goto _test_eof23;
+case 23:
+	if ( (*p) == 34 )
+		goto st24;
+	if ( 40 <= (*p) && (*p) <= 41 )
+		goto tr10;
+	goto st23;
+st24:
+	if ( ++p == pe )
+		goto _test_eof24;
+case 24:
+	if ( (*p) == 41 )
+		goto tr45;
+	goto tr10;
+st25:
+	if ( ++p == pe )
+		goto _test_eof25;
+case 25:
+	if ( (*p) == 41 )
+		goto tr10;
+	goto st26;
+st26:
+	if ( ++p == pe )
+		goto _test_eof26;
+case 26:
+	if ( (*p) == 41 )
+		goto st27;
+	goto st26;
+st27:
+	if ( ++p == pe )
+		goto _test_eof27;
+case 27:
+	switch( (*p) ) {
+		case 34: goto st24;
+		case 40: goto st25;
+	}
+	goto tr10;
+tr41:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st28;
+st28:
+	if ( ++p == pe )
+		goto _test_eof28;
+case 28:
+#line 1007 "hpricot_css.c"
+	switch( (*p) ) {
+		case 34: goto st30;
+		case 39: goto st21;
+		case 40: goto st31;
+		case 41: goto tr45;
+	}
+	goto st29;
+st29:
+	if ( ++p == pe )
+		goto _test_eof29;
+case 29:
+	switch( (*p) ) {
+		case 34: goto st30;
+		case 39: goto st21;
+		case 40: goto tr10;
+		case 41: goto tr45;
+	}
+	goto st29;
+st30:
+	if ( ++p == pe )
+		goto _test_eof30;
+case 30:
+	if ( (*p) == 39 )
+		goto st24;
+	if ( 40 <= (*p) && (*p) <= 41 )
+		goto tr10;
+	goto st30;
+st31:
+	if ( ++p == pe )
+		goto _test_eof31;
+case 31:
+	if ( (*p) == 41 )
+		goto tr10;
+	goto st32;
+st32:
+	if ( ++p == pe )
+		goto _test_eof32;
+case 32:
+	if ( (*p) == 41 )
+		goto st33;
+	goto st32;
+st33:
+	if ( ++p == pe )
+		goto _test_eof33;
+case 33:
+	switch( (*p) ) {
+		case 39: goto st24;
+		case 40: goto st31;
+	}
+	goto tr10;
+tr42:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st34;
+st34:
+	if ( ++p == pe )
+		goto _test_eof34;
+case 34:
+#line 1068 "hpricot_css.c"
+	if ( (*p) == 41 )
+		goto tr10;
+	goto st35;
+st35:
+	if ( ++p == pe )
+		goto _test_eof35;
+case 35:
+	if ( (*p) == 41 )
+		goto st36;
+	goto st35;
+st36:
+	if ( ++p == pe )
+		goto _test_eof36;
+case 36:
+	switch( (*p) ) {
+		case 40: goto st34;
+		case 41: goto tr45;
+	}
+	goto tr10;
+tr27:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st37;
+tr176:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+	goto st37;
+st37:
+	if ( ++p == pe )
+		goto _test_eof37;
+case 37:
+#line 1105 "hpricot_css.c"
+	if ( (*p) == 46 )
+		goto tr59;
+	goto tr10;
+tr34:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st38;
+st38:
+	if ( ++p == pe )
+		goto _test_eof38;
+case 38:
+#line 1119 "hpricot_css.c"
+	if ( 4294967208 <= (*p) && (*p) <= 4294967231 )
+		goto tr59;
+	goto tr10;
+tr35:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st39;
+st39:
+	if ( ++p == pe )
+		goto _test_eof39;
+case 39:
+#line 1133 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto tr59;
+	goto tr10;
+tr36:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st40;
+st40:
+	if ( ++p == pe )
+		goto _test_eof40;
+case 40:
+#line 1147 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st39;
+	goto tr10;
+tr37:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st41;
+st41:
+	if ( ++p == pe )
+		goto _test_eof41;
+case 41:
+#line 1161 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st40;
+	goto tr10;
+tr28:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st94;
+st94:
+	if ( ++p == pe )
+		goto _test_eof94;
+case 94:
+#line 1179 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 113: goto tr171;
+		case 118: goto tr172;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr171:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 79 "hpricot_css.rl"
+	{act = 8;}
+	goto st95;
+st95:
+	if ( ++p == pe )
+		goto _test_eof95;
+case 95:
+#line 1217 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr174;
+		case 45: goto tr175;
+		case 92: goto tr176;
+		case 95: goto tr175;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr175;
+		} else if ( (*p) >= 48 )
+			goto tr175;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr175;
+	goto tr173;
+tr174:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+	goto st42;
+st42:
+	if ( ++p == pe )
+		goto _test_eof42;
+case 42:
+#line 1254 "hpricot_css.c"
+	switch( (*p) ) {
+		case 34: goto tr40;
+		case 39: goto tr41;
+		case 40: goto tr42;
+		case 41: goto tr43;
+	}
+	if ( 48 <= (*p) && (*p) <= 57 )
+		goto tr63;
+	goto tr39;
+tr63:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st43;
+st43:
+	if ( ++p == pe )
+		goto _test_eof43;
+case 43:
+#line 1274 "hpricot_css.c"
+	switch( (*p) ) {
+		case 34: goto tr62;
+		case 40: goto tr62;
+		case 41: goto tr64;
+	}
+	if ( 48 <= (*p) && (*p) <= 57 )
+		goto st43;
+	goto st21;
+tr172:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st96;
+st96:
+	if ( ++p == pe )
+		goto _test_eof96;
+case 96:
+#line 1293 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 101: goto tr177;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr177:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st97;
+st97:
+	if ( ++p == pe )
+		goto _test_eof97;
+case 97:
+#line 1330 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 110: goto tr171;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr29:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st98;
+st98:
+	if ( ++p == pe )
+		goto _test_eof98;
+case 98:
+#line 1371 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 105: goto tr178;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr178:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st99;
+st99:
+	if ( ++p == pe )
+		goto _test_eof99;
+case 99:
+#line 1408 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 114: goto tr179;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr179:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st100;
+st100:
+	if ( ++p == pe )
+		goto _test_eof100;
+case 100:
+#line 1445 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 115: goto tr180;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr180:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st101;
+st101:
+	if ( ++p == pe )
+		goto _test_eof101;
+case 101:
+#line 1482 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 116: goto tr181;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr181:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 79 "hpricot_css.rl"
+	{act = 8;}
+	goto st102;
+st102:
+	if ( ++p == pe )
+		goto _test_eof102;
+case 102:
+#line 1519 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr174;
+		case 45: goto tr182;
+		case 92: goto tr176;
+		case 95: goto tr175;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr175;
+		} else if ( (*p) >= 48 )
+			goto tr175;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr175;
+	goto tr173;
+tr195:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st103;
+tr182:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st103;
+st103:
+	if ( ++p == pe )
+		goto _test_eof103;
+case 103:
+#line 1566 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 99: goto tr183;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr183:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st104;
+st104:
+	if ( ++p == pe )
+		goto _test_eof104;
+case 104:
+#line 1603 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 104: goto tr184;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr184:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st105;
+st105:
+	if ( ++p == pe )
+		goto _test_eof105;
+case 105:
+#line 1640 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 105: goto tr185;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr185:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st106;
+st106:
+	if ( ++p == pe )
+		goto _test_eof106;
+case 106:
+#line 1677 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 108: goto tr186;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr186:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st107;
+st107:
+	if ( ++p == pe )
+		goto _test_eof107;
+case 107:
+#line 1714 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 100: goto tr187;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr187:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 78 "hpricot_css.rl"
+	{act = 7;}
+	goto st108;
+st108:
+	if ( ++p == pe )
+		goto _test_eof108;
+case 108:
+#line 1751 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr189;
+		case 45: goto tr175;
+		case 92: goto tr176;
+		case 95: goto tr175;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr175;
+		} else if ( (*p) >= 48 )
+			goto tr175;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr175;
+	goto tr188;
+tr189:
+#line 29 "hpricot_css.rl"
+	{
+    ape = p;
+    PUSH(aps, ape); 
+  }
+	goto st44;
+st44:
+	if ( ++p == pe )
+		goto _test_eof44;
+case 44:
+#line 1788 "hpricot_css.c"
+	switch( (*p) ) {
+		case 34: goto tr40;
+		case 39: goto tr41;
+		case 40: goto tr42;
+		case 41: goto tr67;
+		case 43: goto tr68;
+		case 45: goto tr68;
+		case 101: goto tr69;
+		case 110: goto tr68;
+		case 111: goto tr70;
+	}
+	if ( 48 <= (*p) && (*p) <= 57 )
+		goto tr68;
+	goto tr39;
+tr68:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st45;
+st45:
+	if ( ++p == pe )
+		goto _test_eof45;
+case 45:
+#line 1813 "hpricot_css.c"
+	switch( (*p) ) {
+		case 34: goto tr66;
+		case 40: goto tr66;
+		case 41: goto tr71;
+		case 43: goto st45;
+		case 45: goto st45;
+		case 110: goto st45;
+	}
+	if ( 48 <= (*p) && (*p) <= 57 )
+		goto st45;
+	goto st21;
+tr69:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st46;
+st46:
+	if ( ++p == pe )
+		goto _test_eof46;
+case 46:
+#line 1835 "hpricot_css.c"
+	switch( (*p) ) {
+		case 34: goto tr66;
+		case 40: goto tr66;
+		case 41: goto tr45;
+		case 118: goto st47;
+	}
+	goto st21;
+st47:
+	if ( ++p == pe )
+		goto _test_eof47;
+case 47:
+	switch( (*p) ) {
+		case 34: goto tr66;
+		case 40: goto tr66;
+		case 41: goto tr45;
+		case 101: goto st48;
+	}
+	goto st21;
+st48:
+	if ( ++p == pe )
+		goto _test_eof48;
+case 48:
+	switch( (*p) ) {
+		case 34: goto tr66;
+		case 40: goto tr66;
+		case 41: goto tr45;
+		case 110: goto st49;
+	}
+	goto st21;
+st49:
+	if ( ++p == pe )
+		goto _test_eof49;
+case 49:
+	switch( (*p) ) {
+		case 34: goto tr66;
+		case 40: goto tr66;
+		case 41: goto tr71;
+	}
+	goto st21;
+tr70:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st50;
+st50:
+	if ( ++p == pe )
+		goto _test_eof50;
+case 50:
+#line 1885 "hpricot_css.c"
+	switch( (*p) ) {
+		case 34: goto tr66;
+		case 40: goto tr66;
+		case 41: goto tr45;
+		case 100: goto st51;
+	}
+	goto st21;
+st51:
+	if ( ++p == pe )
+		goto _test_eof51;
+case 51:
+	switch( (*p) ) {
+		case 34: goto tr66;
+		case 40: goto tr66;
+		case 41: goto tr45;
+		case 100: goto st49;
+	}
+	goto st21;
+tr30:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st109;
+st109:
+	if ( ++p == pe )
+		goto _test_eof109;
+case 109:
+#line 1918 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 116: goto tr171;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr31:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st110;
+st110:
+	if ( ++p == pe )
+		goto _test_eof110;
+case 110:
+#line 1959 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 97: goto tr179;
+		case 116: goto tr171;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 98 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr32:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st111;
+st111:
+	if ( ++p == pe )
+		goto _test_eof111;
+case 111:
+#line 2001 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 116: goto tr190;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr190:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st112;
+st112:
+	if ( ++p == pe )
+		goto _test_eof112;
+case 112:
+#line 2038 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 104: goto tr181;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr33:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st113;
+st113:
+	if ( ++p == pe )
+		goto _test_eof113;
+case 113:
+#line 2079 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 100: goto tr191;
+		case 110: goto tr192;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr191:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st114;
+st114:
+	if ( ++p == pe )
+		goto _test_eof114;
+case 114:
+#line 2117 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 100: goto tr171;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr192:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st115;
+st115:
+	if ( ++p == pe )
+		goto _test_eof115;
+case 115:
+#line 2154 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 108: goto tr193;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr193:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st116;
+st116:
+	if ( ++p == pe )
+		goto _test_eof116;
+case 116:
+#line 2191 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr59;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 121: goto tr194;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+tr194:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 80 "hpricot_css.rl"
+	{act = 9;}
+	goto st117;
+st117:
+	if ( ++p == pe )
+		goto _test_eof117;
+case 117:
+#line 2228 "hpricot_css.c"
+	switch( (*p) ) {
+		case 40: goto tr167;
+		case 45: goto tr195;
+		case 92: goto st37;
+		case 95: goto tr59;
+		case 4294967236: goto st38;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr59;
+		} else if ( (*p) >= 48 )
+			goto tr59;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st39;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st41;
+		} else
+			goto st40;
+	} else
+		goto tr59;
+	goto tr166;
+st52:
+	if ( ++p == pe )
+		goto _test_eof52;
+case 52:
+	switch( (*p) ) {
+		case 45: goto tr77;
+		case 92: goto tr78;
+		case 95: goto tr77;
+		case 110: goto tr79;
+		case 4294967236: goto tr80;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr77;
+		} else if ( (*p) >= 48 )
+			goto tr77;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto tr81;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto tr83;
+		} else
+			goto tr82;
+	} else
+		goto tr77;
+	goto st0;
+tr77:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st53;
+tr86:
+#line 34 "hpricot_css.rl"
+	{
+    ape = p;
+    aps2 = p;
+  }
+	goto st53;
+st53:
+	if ( ++p == pe )
+		goto _test_eof53;
+case 53:
+#line 2300 "hpricot_css.c"
+	switch( (*p) ) {
+		case 32: goto tr85;
+		case 45: goto tr86;
+		case 61: goto tr87;
+		case 92: goto tr88;
+		case 95: goto tr86;
+		case 4294967236: goto st67;
+	}
+	if ( (*p) < 65 ) {
+		if ( (*p) < 14 ) {
+			if ( (*p) > 8 ) {
+				if ( 9 <= (*p) && (*p) <= 13 )
+					goto tr85;
+			} else
+				goto tr84;
+		} else if ( (*p) > 47 ) {
+			if ( (*p) > 57 ) {
+				if ( 58 <= (*p) && (*p) <= 64 )
+					goto tr84;
+			} else if ( (*p) >= 48 )
+				goto tr86;
+		} else
+			goto tr84;
+	} else if ( (*p) > 90 ) {
+		if ( (*p) < 123 ) {
+			if ( (*p) > 96 ) {
+				if ( 97 <= (*p) && (*p) <= 122 )
+					goto tr86;
+			} else if ( (*p) >= 91 )
+				goto tr84;
+		} else if ( (*p) > 127 ) {
+			if ( (*p) < 4294967264 ) {
+				if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+					goto st68;
+			} else if ( (*p) > 4294967279 ) {
+				if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+					goto st70;
+			} else
+				goto st69;
+		} else
+			goto tr84;
+	} else
+		goto tr86;
+	goto st0;
+tr84:
+#line 34 "hpricot_css.rl"
+	{
+    ape = p;
+    aps2 = p;
+  }
+	goto st54;
+st54:
+	if ( ++p == pe )
+		goto _test_eof54;
+case 54:
+#line 2356 "hpricot_css.c"
+	if ( (*p) == 61 )
+		goto st55;
+	goto st0;
+st55:
+	if ( ++p == pe )
+		goto _test_eof55;
+case 55:
+	switch( (*p) ) {
+		case 32: goto tr95;
+		case 34: goto tr96;
+		case 39: goto tr97;
+		case 93: goto st0;
+	}
+	if ( 9 <= (*p) && (*p) <= 13 )
+		goto tr95;
+	goto tr94;
+tr94:
+#line 39 "hpricot_css.rl"
+	{
+    ape2 = p;
+    PUSH(aps, ape);
+    PUSH(aps2, ape2);
+  }
+	goto st56;
+st56:
+	if ( ++p == pe )
+		goto _test_eof56;
+case 56:
+#line 2385 "hpricot_css.c"
+	if ( (*p) == 93 )
+		goto tr99;
+	goto st56;
+tr95:
+#line 39 "hpricot_css.rl"
+	{
+    ape2 = p;
+    PUSH(aps, ape);
+    PUSH(aps2, ape2);
+  }
+	goto st57;
+st57:
+	if ( ++p == pe )
+		goto _test_eof57;
+case 57:
+#line 2401 "hpricot_css.c"
+	switch( (*p) ) {
+		case 32: goto st57;
+		case 34: goto st58;
+		case 39: goto st61;
+		case 93: goto tr99;
+	}
+	if ( 9 <= (*p) && (*p) <= 13 )
+		goto st57;
+	goto st56;
+tr96:
+#line 39 "hpricot_css.rl"
+	{
+    ape2 = p;
+    PUSH(aps, ape);
+    PUSH(aps2, ape2);
+  }
+	goto st58;
+st58:
+	if ( ++p == pe )
+		goto _test_eof58;
+case 58:
+#line 2423 "hpricot_css.c"
+	switch( (*p) ) {
+		case 34: goto st56;
+		case 93: goto tr103;
+	}
+	goto st58;
+tr103:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+	goto st118;
+st118:
+	if ( ++p == pe )
+		goto _test_eof118;
+case 118:
+#line 2437 "hpricot_css.c"
+	if ( (*p) == 34 )
+		goto st60;
+	goto st59;
+st59:
+	if ( ++p == pe )
+		goto _test_eof59;
+case 59:
+	if ( (*p) == 34 )
+		goto st60;
+	goto st59;
+st60:
+	if ( ++p == pe )
+		goto _test_eof60;
+case 60:
+	if ( (*p) == 93 )
+		goto tr99;
+	goto tr104;
+tr97:
+#line 39 "hpricot_css.rl"
+	{
+    ape2 = p;
+    PUSH(aps, ape);
+    PUSH(aps2, ape2);
+  }
+	goto st61;
+st61:
+	if ( ++p == pe )
+		goto _test_eof61;
+case 61:
+#line 2467 "hpricot_css.c"
+	switch( (*p) ) {
+		case 39: goto st56;
+		case 93: goto tr107;
+	}
+	goto st61;
+tr107:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+	goto st119;
+st119:
+	if ( ++p == pe )
+		goto _test_eof119;
+case 119:
+#line 2481 "hpricot_css.c"
+	if ( (*p) == 39 )
+		goto st60;
+	goto st62;
+st62:
+	if ( ++p == pe )
+		goto _test_eof62;
+case 62:
+	if ( (*p) == 39 )
+		goto st60;
+	goto st62;
+tr85:
+#line 34 "hpricot_css.rl"
+	{
+    ape = p;
+    aps2 = p;
+  }
+	goto st63;
+st63:
+	if ( ++p == pe )
+		goto _test_eof63;
+case 63:
+#line 2503 "hpricot_css.c"
+	switch( (*p) ) {
+		case 32: goto st63;
+		case 61: goto st64;
+	}
+	if ( 9 <= (*p) && (*p) <= 13 )
+		goto st63;
+	goto st54;
+tr87:
+#line 34 "hpricot_css.rl"
+	{
+    ape = p;
+    aps2 = p;
+  }
+	goto st64;
+st64:
+	if ( ++p == pe )
+		goto _test_eof64;
+case 64:
+#line 2522 "hpricot_css.c"
+	switch( (*p) ) {
+		case 32: goto tr95;
+		case 34: goto tr96;
+		case 39: goto tr97;
+		case 61: goto tr112;
+		case 93: goto st0;
+	}
+	if ( 9 <= (*p) && (*p) <= 13 )
+		goto tr95;
+	goto tr94;
+tr112:
+#line 39 "hpricot_css.rl"
+	{
+    ape2 = p;
+    PUSH(aps, ape);
+    PUSH(aps2, ape2);
+  }
+	goto st65;
+st65:
+	if ( ++p == pe )
+		goto _test_eof65;
+case 65:
+#line 2545 "hpricot_css.c"
+	switch( (*p) ) {
+		case 32: goto tr95;
+		case 34: goto tr96;
+		case 39: goto tr97;
+		case 93: goto tr99;
+	}
+	if ( 9 <= (*p) && (*p) <= 13 )
+		goto tr95;
+	goto tr94;
+tr88:
+#line 34 "hpricot_css.rl"
+	{
+    ape = p;
+    aps2 = p;
+  }
+	goto st66;
+st66:
+	if ( ++p == pe )
+		goto _test_eof66;
+case 66:
+#line 2566 "hpricot_css.c"
+	switch( (*p) ) {
+		case 46: goto st53;
+		case 61: goto st55;
+	}
+	goto st0;
+tr80:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st67;
+st67:
+	if ( ++p == pe )
+		goto _test_eof67;
+case 67:
+#line 2582 "hpricot_css.c"
+	if ( 4294967208 <= (*p) && (*p) <= 4294967231 )
+		goto st53;
+	goto st0;
+tr81:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st68;
+st68:
+	if ( ++p == pe )
+		goto _test_eof68;
+case 68:
+#line 2596 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st53;
+	goto st0;
+tr82:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st69;
+st69:
+	if ( ++p == pe )
+		goto _test_eof69;
+case 69:
+#line 2610 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st68;
+	goto st0;
+tr83:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st70;
+st70:
+	if ( ++p == pe )
+		goto _test_eof70;
+case 70:
+#line 2624 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st69;
+	goto st0;
+tr78:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st71;
+st71:
+	if ( ++p == pe )
+		goto _test_eof71;
+case 71:
+#line 2638 "hpricot_css.c"
+	if ( (*p) == 46 )
+		goto st53;
+	goto st0;
+tr79:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st72;
+st72:
+	if ( ++p == pe )
+		goto _test_eof72;
+case 72:
+#line 2652 "hpricot_css.c"
+	switch( (*p) ) {
+		case 32: goto tr85;
+		case 45: goto tr86;
+		case 61: goto tr87;
+		case 92: goto tr88;
+		case 95: goto tr86;
+		case 97: goto tr114;
+		case 4294967236: goto st67;
+	}
+	if ( (*p) < 65 ) {
+		if ( (*p) < 14 ) {
+			if ( (*p) > 8 ) {
+				if ( 9 <= (*p) && (*p) <= 13 )
+					goto tr85;
+			} else
+				goto tr84;
+		} else if ( (*p) > 47 ) {
+			if ( (*p) > 57 ) {
+				if ( 58 <= (*p) && (*p) <= 64 )
+					goto tr84;
+			} else if ( (*p) >= 48 )
+				goto tr86;
+		} else
+			goto tr84;
+	} else if ( (*p) > 90 ) {
+		if ( (*p) < 123 ) {
+			if ( (*p) > 96 ) {
+				if ( 98 <= (*p) && (*p) <= 122 )
+					goto tr86;
+			} else if ( (*p) >= 91 )
+				goto tr84;
+		} else if ( (*p) > 127 ) {
+			if ( (*p) < 4294967264 ) {
+				if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+					goto st68;
+			} else if ( (*p) > 4294967279 ) {
+				if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+					goto st70;
+			} else
+				goto st69;
+		} else
+			goto tr84;
+	} else
+		goto tr86;
+	goto st0;
+tr114:
+#line 34 "hpricot_css.rl"
+	{
+    ape = p;
+    aps2 = p;
+  }
+	goto st73;
+st73:
+	if ( ++p == pe )
+		goto _test_eof73;
+case 73:
+#line 2709 "hpricot_css.c"
+	switch( (*p) ) {
+		case 32: goto tr85;
+		case 45: goto tr86;
+		case 61: goto tr87;
+		case 92: goto tr88;
+		case 95: goto tr86;
+		case 109: goto tr115;
+		case 4294967236: goto st67;
+	}
+	if ( (*p) < 65 ) {
+		if ( (*p) < 14 ) {
+			if ( (*p) > 8 ) {
+				if ( 9 <= (*p) && (*p) <= 13 )
+					goto tr85;
+			} else
+				goto tr84;
+		} else if ( (*p) > 47 ) {
+			if ( (*p) > 57 ) {
+				if ( 58 <= (*p) && (*p) <= 64 )
+					goto tr84;
+			} else if ( (*p) >= 48 )
+				goto tr86;
+		} else
+			goto tr84;
+	} else if ( (*p) > 90 ) {
+		if ( (*p) < 123 ) {
+			if ( (*p) > 96 ) {
+				if ( 97 <= (*p) && (*p) <= 122 )
+					goto tr86;
+			} else if ( (*p) >= 91 )
+				goto tr84;
+		} else if ( (*p) > 127 ) {
+			if ( (*p) < 4294967264 ) {
+				if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+					goto st68;
+			} else if ( (*p) > 4294967279 ) {
+				if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+					goto st70;
+			} else
+				goto st69;
+		} else
+			goto tr84;
+	} else
+		goto tr86;
+	goto st0;
+tr115:
+#line 34 "hpricot_css.rl"
+	{
+    ape = p;
+    aps2 = p;
+  }
+	goto st74;
+st74:
+	if ( ++p == pe )
+		goto _test_eof74;
+case 74:
+#line 2766 "hpricot_css.c"
+	switch( (*p) ) {
+		case 32: goto tr85;
+		case 45: goto tr86;
+		case 61: goto tr87;
+		case 92: goto tr88;
+		case 95: goto tr86;
+		case 101: goto tr116;
+		case 4294967236: goto st67;
+	}
+	if ( (*p) < 65 ) {
+		if ( (*p) < 14 ) {
+			if ( (*p) > 8 ) {
+				if ( 9 <= (*p) && (*p) <= 13 )
+					goto tr85;
+			} else
+				goto tr84;
+		} else if ( (*p) > 47 ) {
+			if ( (*p) > 57 ) {
+				if ( 58 <= (*p) && (*p) <= 64 )
+					goto tr84;
+			} else if ( (*p) >= 48 )
+				goto tr86;
+		} else
+			goto tr84;
+	} else if ( (*p) > 90 ) {
+		if ( (*p) < 123 ) {
+			if ( (*p) > 96 ) {
+				if ( 97 <= (*p) && (*p) <= 122 )
+					goto tr86;
+			} else if ( (*p) >= 91 )
+				goto tr84;
+		} else if ( (*p) > 127 ) {
+			if ( (*p) < 4294967264 ) {
+				if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+					goto st68;
+			} else if ( (*p) > 4294967279 ) {
+				if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+					goto st70;
+			} else
+				goto st69;
+		} else
+			goto tr84;
+	} else
+		goto tr86;
+	goto st0;
+tr116:
+#line 34 "hpricot_css.rl"
+	{
+    ape = p;
+    aps2 = p;
+  }
+	goto st75;
+st75:
+	if ( ++p == pe )
+		goto _test_eof75;
+case 75:
+#line 2823 "hpricot_css.c"
+	switch( (*p) ) {
+		case 32: goto tr85;
+		case 45: goto tr86;
+		case 61: goto tr117;
+		case 92: goto tr88;
+		case 95: goto tr86;
+		case 4294967236: goto st67;
+	}
+	if ( (*p) < 65 ) {
+		if ( (*p) < 14 ) {
+			if ( (*p) > 8 ) {
+				if ( 9 <= (*p) && (*p) <= 13 )
+					goto tr85;
+			} else
+				goto tr84;
+		} else if ( (*p) > 47 ) {
+			if ( (*p) > 57 ) {
+				if ( 58 <= (*p) && (*p) <= 64 )
+					goto tr84;
+			} else if ( (*p) >= 48 )
+				goto tr86;
+		} else
+			goto tr84;
+	} else if ( (*p) > 90 ) {
+		if ( (*p) < 123 ) {
+			if ( (*p) > 96 ) {
+				if ( 97 <= (*p) && (*p) <= 122 )
+					goto tr86;
+			} else if ( (*p) >= 91 )
+				goto tr84;
+		} else if ( (*p) > 127 ) {
+			if ( (*p) < 4294967264 ) {
+				if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+					goto st68;
+			} else if ( (*p) > 4294967279 ) {
+				if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+					goto st70;
+			} else
+				goto st69;
+		} else
+			goto tr84;
+	} else
+		goto tr86;
+	goto st0;
+tr117:
+#line 34 "hpricot_css.rl"
+	{
+    ape = p;
+    aps2 = p;
+  }
+	goto st76;
+st76:
+	if ( ++p == pe )
+		goto _test_eof76;
+case 76:
+#line 2879 "hpricot_css.c"
+	switch( (*p) ) {
+		case 32: goto tr95;
+		case 34: goto tr96;
+		case 39: goto tr97;
+		case 45: goto tr118;
+		case 61: goto tr112;
+		case 91: goto tr94;
+		case 92: goto tr119;
+		case 95: goto tr118;
+		case 4294967236: goto tr120;
+	}
+	if ( (*p) < 65 ) {
+		if ( (*p) < 14 ) {
+			if ( (*p) > 8 ) {
+				if ( 9 <= (*p) && (*p) <= 13 )
+					goto tr95;
+			} else
+				goto tr94;
+		} else if ( (*p) > 47 ) {
+			if ( (*p) > 57 ) {
+				if ( 58 <= (*p) && (*p) <= 64 )
+					goto tr94;
+			} else if ( (*p) >= 48 )
+				goto tr118;
+		} else
+			goto tr94;
+	} else if ( (*p) > 90 ) {
+		if ( (*p) < 123 ) {
+			if ( (*p) > 96 ) {
+				if ( 97 <= (*p) && (*p) <= 122 )
+					goto tr118;
+			} else if ( (*p) >= 94 )
+				goto tr94;
+		} else if ( (*p) > 127 ) {
+			if ( (*p) < 4294967264 ) {
+				if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+					goto tr121;
+			} else if ( (*p) > 4294967279 ) {
+				if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+					goto tr123;
+			} else
+				goto tr122;
+		} else
+			goto tr94;
+	} else
+		goto tr118;
+	goto st0;
+tr118:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 39 "hpricot_css.rl"
+	{
+    ape2 = p;
+    PUSH(aps, ape);
+    PUSH(aps2, ape2);
+  }
+	goto st77;
+st77:
+	if ( ++p == pe )
+		goto _test_eof77;
+case 77:
+#line 2943 "hpricot_css.c"
+	switch( (*p) ) {
+		case 45: goto st77;
+		case 91: goto st56;
+		case 92: goto st78;
+		case 93: goto tr126;
+		case 94: goto st56;
+		case 96: goto st56;
+		case 4294967236: goto st79;
+	}
+	if ( (*p) < 65 ) {
+		if ( (*p) < 48 ) {
+			if ( (*p) <= 47 )
+				goto st56;
+		} else if ( (*p) > 57 ) {
+			if ( 58 <= (*p) && (*p) <= 64 )
+				goto st56;
+		} else
+			goto st77;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967237 ) {
+			if ( 123 <= (*p) )
+				goto st56;
+		} else if ( (*p) > 4294967263 ) {
+			if ( (*p) > 4294967279 ) {
+				if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+					goto st84;
+			} else if ( (*p) >= 4294967264 )
+				goto st83;
+		} else
+			goto st82;
+	} else
+		goto st77;
+	goto st0;
+tr119:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 39 "hpricot_css.rl"
+	{
+    ape2 = p;
+    PUSH(aps, ape);
+    PUSH(aps2, ape2);
+  }
+	goto st78;
+st78:
+	if ( ++p == pe )
+		goto _test_eof78;
+case 78:
+#line 2993 "hpricot_css.c"
+	switch( (*p) ) {
+		case 46: goto st77;
+		case 93: goto tr99;
+	}
+	goto st56;
+tr120:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st79;
+st79:
+	if ( ++p == pe )
+		goto _test_eof79;
+case 79:
+#line 3009 "hpricot_css.c"
+	if ( 4294967208 <= (*p) && (*p) <= 4294967231 )
+		goto st80;
+	goto st0;
+st80:
+	if ( ++p == pe )
+		goto _test_eof80;
+case 80:
+	switch( (*p) ) {
+		case 45: goto st80;
+		case 92: goto st81;
+		case 93: goto tr126;
+		case 95: goto st80;
+		case 4294967236: goto st79;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto st80;
+		} else if ( (*p) >= 48 )
+			goto st80;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st82;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st84;
+		} else
+			goto st83;
+	} else
+		goto st80;
+	goto st0;
+st81:
+	if ( ++p == pe )
+		goto _test_eof81;
+case 81:
+	if ( (*p) == 46 )
+		goto st80;
+	goto st0;
+tr121:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st82;
+st82:
+	if ( ++p == pe )
+		goto _test_eof82;
+case 82:
+#line 3059 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st80;
+	goto st0;
+tr122:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st83;
+st83:
+	if ( ++p == pe )
+		goto _test_eof83;
+case 83:
+#line 3073 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st82;
+	goto st0;
+tr123:
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+	goto st84;
+st84:
+	if ( ++p == pe )
+		goto _test_eof84;
+case 84:
+#line 3087 "hpricot_css.c"
+	if ( 4294967168 <= (*p) && (*p) <= 4294967231 )
+		goto st83;
+	goto st0;
+tr143:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 76 "hpricot_css.rl"
+	{act = 5;}
+	goto st120;
+st120:
+	if ( ++p == pe )
+		goto _test_eof120;
+case 120:
+#line 3105 "hpricot_css.c"
+	switch( (*p) ) {
+		case 45: goto tr14;
+		case 92: goto st8;
+		case 95: goto tr14;
+		case 118: goto tr197;
+		case 4294967236: goto st9;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr14;
+		} else if ( (*p) >= 48 )
+			goto tr14;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st10;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st12;
+		} else
+			goto st11;
+	} else
+		goto tr14;
+	goto tr156;
+tr197:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 76 "hpricot_css.rl"
+	{act = 5;}
+	goto st121;
+st121:
+	if ( ++p == pe )
+		goto _test_eof121;
+case 121:
+#line 3141 "hpricot_css.c"
+	switch( (*p) ) {
+		case 45: goto tr14;
+		case 92: goto st8;
+		case 95: goto tr14;
+		case 101: goto tr198;
+		case 4294967236: goto st9;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr14;
+		} else if ( (*p) >= 48 )
+			goto tr14;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st10;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st12;
+		} else
+			goto st11;
+	} else
+		goto tr14;
+	goto tr156;
+tr198:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 76 "hpricot_css.rl"
+	{act = 5;}
+	goto st122;
+st122:
+	if ( ++p == pe )
+		goto _test_eof122;
+case 122:
+#line 3177 "hpricot_css.c"
+	switch( (*p) ) {
+		case 45: goto tr14;
+		case 92: goto st8;
+		case 95: goto tr14;
+		case 4294967236: goto st9;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr14;
+		} else if ( (*p) >= 48 )
+			goto tr14;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st10;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st12;
+		} else
+			goto st11;
+	} else
+		goto tr14;
+	goto tr156;
+tr144:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 25 "hpricot_css.rl"
+	{
+    aps = p;
+  }
+#line 76 "hpricot_css.rl"
+	{act = 5;}
+	goto st123;
+st123:
+	if ( ++p == pe )
+		goto _test_eof123;
+case 123:
+#line 3216 "hpricot_css.c"
+	switch( (*p) ) {
+		case 45: goto tr14;
+		case 92: goto st8;
+		case 95: goto tr14;
+		case 100: goto tr199;
+		case 4294967236: goto st9;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr14;
+		} else if ( (*p) >= 48 )
+			goto tr14;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st10;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st12;
+		} else
+			goto st11;
+	} else
+		goto tr14;
+	goto tr156;
+tr199:
+#line 1 "hpricot_css.rl"
+	{te = p+1;}
+#line 76 "hpricot_css.rl"
+	{act = 5;}
+	goto st124;
+st124:
+	if ( ++p == pe )
+		goto _test_eof124;
+case 124:
+#line 3252 "hpricot_css.c"
+	switch( (*p) ) {
+		case 45: goto tr14;
+		case 92: goto st8;
+		case 95: goto tr14;
+		case 4294967236: goto st9;
+	}
+	if ( (*p) < 97 ) {
+		if ( (*p) > 57 ) {
+			if ( 65 <= (*p) && (*p) <= 90 )
+				goto tr14;
+		} else if ( (*p) >= 48 )
+			goto tr14;
+	} else if ( (*p) > 122 ) {
+		if ( (*p) < 4294967264 ) {
+			if ( 4294967237 <= (*p) && (*p) <= 4294967263 )
+				goto st10;
+		} else if ( (*p) > 4294967279 ) {
+			if ( 4294967280 <= (*p) && (*p) <= 4294967284 )
+				goto st12;
+		} else
+			goto st11;
+	} else
+		goto tr14;
+	goto tr156;
+	}
+	_test_eof85: cs = 85; goto _test_eof; 
+	_test_eof86: cs = 86; goto _test_eof; 
+	_test_eof1: cs = 1; goto _test_eof; 
+	_test_eof87: cs = 87; goto _test_eof; 
+	_test_eof2: cs = 2; goto _test_eof; 
+	_test_eof88: cs = 88; goto _test_eof; 
+	_test_eof3: cs = 3; goto _test_eof; 
+	_test_eof4: cs = 4; goto _test_eof; 
+	_test_eof5: cs = 5; goto _test_eof; 
+	_test_eof6: cs = 6; goto _test_eof; 
+	_test_eof7: cs = 7; goto _test_eof; 
+	_test_eof89: cs = 89; goto _test_eof; 
+	_test_eof90: cs = 90; goto _test_eof; 
+	_test_eof91: cs = 91; goto _test_eof; 
+	_test_eof8: cs = 8; goto _test_eof; 
+	_test_eof9: cs = 9; goto _test_eof; 
+	_test_eof10: cs = 10; goto _test_eof; 
+	_test_eof11: cs = 11; goto _test_eof; 
+	_test_eof12: cs = 12; goto _test_eof; 
+	_test_eof13: cs = 13; goto _test_eof; 
+	_test_eof92: cs = 92; goto _test_eof; 
+	_test_eof14: cs = 14; goto _test_eof; 
+	_test_eof15: cs = 15; goto _test_eof; 
+	_test_eof16: cs = 16; goto _test_eof; 
+	_test_eof17: cs = 17; goto _test_eof; 
+	_test_eof18: cs = 18; goto _test_eof; 
+	_test_eof19: cs = 19; goto _test_eof; 
+	_test_eof93: cs = 93; goto _test_eof; 
+	_test_eof20: cs = 20; goto _test_eof; 
+	_test_eof21: cs = 21; goto _test_eof; 
+	_test_eof22: cs = 22; goto _test_eof; 
+	_test_eof23: cs = 23; goto _test_eof; 
+	_test_eof24: cs = 24; goto _test_eof; 
+	_test_eof25: cs = 25; goto _test_eof; 
+	_test_eof26: cs = 26; goto _test_eof; 
+	_test_eof27: cs = 27; goto _test_eof; 
+	_test_eof28: cs = 28; goto _test_eof; 
+	_test_eof29: cs = 29; goto _test_eof; 
+	_test_eof30: cs = 30; goto _test_eof; 
+	_test_eof31: cs = 31; goto _test_eof; 
+	_test_eof32: cs = 32; goto _test_eof; 
+	_test_eof33: cs = 33; goto _test_eof; 
+	_test_eof34: cs = 34; goto _test_eof; 
+	_test_eof35: cs = 35; goto _test_eof; 
+	_test_eof36: cs = 36; goto _test_eof; 
+	_test_eof37: cs = 37; goto _test_eof; 
+	_test_eof38: cs = 38; goto _test_eof; 
+	_test_eof39: cs = 39; goto _test_eof; 
+	_test_eof40: cs = 40; goto _test_eof; 
+	_test_eof41: cs = 41; goto _test_eof; 
+	_test_eof94: cs = 94; goto _test_eof; 
+	_test_eof95: cs = 95; goto _test_eof; 
+	_test_eof42: cs = 42; goto _test_eof; 
+	_test_eof43: cs = 43; goto _test_eof; 
+	_test_eof96: cs = 96; goto _test_eof; 
+	_test_eof97: cs = 97; goto _test_eof; 
+	_test_eof98: cs = 98; goto _test_eof; 
+	_test_eof99: cs = 99; goto _test_eof; 
+	_test_eof100: cs = 100; goto _test_eof; 
+	_test_eof101: cs = 101; goto _test_eof; 
+	_test_eof102: cs = 102; goto _test_eof; 
+	_test_eof103: cs = 103; goto _test_eof; 
+	_test_eof104: cs = 104; goto _test_eof; 
+	_test_eof105: cs = 105; goto _test_eof; 
+	_test_eof106: cs = 106; goto _test_eof; 
+	_test_eof107: cs = 107; goto _test_eof; 
+	_test_eof108: cs = 108; goto _test_eof; 
+	_test_eof44: cs = 44; goto _test_eof; 
+	_test_eof45: cs = 45; goto _test_eof; 
+	_test_eof46: cs = 46; goto _test_eof; 
+	_test_eof47: cs = 47; goto _test_eof; 
+	_test_eof48: cs = 48; goto _test_eof; 
+	_test_eof49: cs = 49; goto _test_eof; 
+	_test_eof50: cs = 50; goto _test_eof; 
+	_test_eof51: cs = 51; goto _test_eof; 
+	_test_eof109: cs = 109; goto _test_eof; 
+	_test_eof110: cs = 110; goto _test_eof; 
+	_test_eof111: cs = 111; goto _test_eof; 
+	_test_eof112: cs = 112; goto _test_eof; 
+	_test_eof113: cs = 113; goto _test_eof; 
+	_test_eof114: cs = 114; goto _test_eof; 
+	_test_eof115: cs = 115; goto _test_eof; 
+	_test_eof116: cs = 116; goto _test_eof; 
+	_test_eof117: cs = 117; goto _test_eof; 
+	_test_eof52: cs = 52; goto _test_eof; 
+	_test_eof53: cs = 53; goto _test_eof; 
+	_test_eof54: cs = 54; goto _test_eof; 
+	_test_eof55: cs = 55; goto _test_eof; 
+	_test_eof56: cs = 56; goto _test_eof; 
+	_test_eof57: cs = 57; goto _test_eof; 
+	_test_eof58: cs = 58; goto _test_eof; 
+	_test_eof118: cs = 118; goto _test_eof; 
+	_test_eof59: cs = 59; goto _test_eof; 
+	_test_eof60: cs = 60; goto _test_eof; 
+	_test_eof61: cs = 61; goto _test_eof; 
+	_test_eof119: cs = 119; goto _test_eof; 
+	_test_eof62: cs = 62; goto _test_eof; 
+	_test_eof63: cs = 63; goto _test_eof; 
+	_test_eof64: cs = 64; goto _test_eof; 
+	_test_eof65: cs = 65; goto _test_eof; 
+	_test_eof66: cs = 66; goto _test_eof; 
+	_test_eof67: cs = 67; goto _test_eof; 
+	_test_eof68: cs = 68; goto _test_eof; 
+	_test_eof69: cs = 69; goto _test_eof; 
+	_test_eof70: cs = 70; goto _test_eof; 
+	_test_eof71: cs = 71; goto _test_eof; 
+	_test_eof72: cs = 72; goto _test_eof; 
+	_test_eof73: cs = 73; goto _test_eof; 
+	_test_eof74: cs = 74; goto _test_eof; 
+	_test_eof75: cs = 75; goto _test_eof; 
+	_test_eof76: cs = 76; goto _test_eof; 
+	_test_eof77: cs = 77; goto _test_eof; 
+	_test_eof78: cs = 78; goto _test_eof; 
+	_test_eof79: cs = 79; goto _test_eof; 
+	_test_eof80: cs = 80; goto _test_eof; 
+	_test_eof81: cs = 81; goto _test_eof; 
+	_test_eof82: cs = 82; goto _test_eof; 
+	_test_eof83: cs = 83; goto _test_eof; 
+	_test_eof84: cs = 84; goto _test_eof; 
+	_test_eof120: cs = 120; goto _test_eof; 
+	_test_eof121: cs = 121; goto _test_eof; 
+	_test_eof122: cs = 122; goto _test_eof; 
+	_test_eof123: cs = 123; goto _test_eof; 
+	_test_eof124: cs = 124; goto _test_eof; 
+
+	_test_eof: {}
+	if ( p == eof )
+	{
+	switch ( cs ) {
+	case 86: goto tr149;
+	case 1: goto tr0;
+	case 87: goto tr150;
+	case 88: goto tr151;
+	case 3: goto tr10;
+	case 4: goto tr10;
+	case 5: goto tr10;
+	case 6: goto tr10;
+	case 7: goto tr10;
+	case 89: goto tr155;
+	case 90: goto tr156;
+	case 91: goto tr156;
+	case 8: goto tr10;
+	case 9: goto tr10;
+	case 10: goto tr10;
+	case 11: goto tr10;
+	case 12: goto tr10;
+	case 92: goto tr162;
+	case 14: goto tr10;
+	case 15: goto tr10;
+	case 16: goto tr10;
+	case 17: goto tr10;
+	case 18: goto tr10;
+	case 93: goto tr166;
+	case 20: goto tr38;
+	case 21: goto tr10;
+	case 22: goto tr10;
+	case 23: goto tr10;
+	case 24: goto tr10;
+	case 25: goto tr10;
+	case 26: goto tr10;
+	case 27: goto tr10;
+	case 28: goto tr10;
+	case 29: goto tr10;
+	case 30: goto tr10;
+	case 31: goto tr10;
+	case 32: goto tr10;
+	case 33: goto tr10;
+	case 34: goto tr10;
+	case 35: goto tr10;
+	case 36: goto tr10;
+	case 37: goto tr10;
+	case 38: goto tr10;
+	case 39: goto tr10;
+	case 40: goto tr10;
+	case 41: goto tr10;
+	case 94: goto tr166;
+	case 95: goto tr173;
+	case 42: goto tr62;
+	case 43: goto tr62;
+	case 96: goto tr166;
+	case 97: goto tr166;
+	case 98: goto tr166;
+	case 99: goto tr166;
+	case 100: goto tr166;
+	case 101: goto tr166;
+	case 102: goto tr173;
+	case 103: goto tr166;
+	case 104: goto tr166;
+	case 105: goto tr166;
+	case 106: goto tr166;
+	case 107: goto tr166;
+	case 108: goto tr188;
+	case 44: goto tr66;
+	case 45: goto tr66;
+	case 46: goto tr66;
+	case 47: goto tr66;
+	case 48: goto tr66;
+	case 49: goto tr66;
+	case 50: goto tr66;
+	case 51: goto tr66;
+	case 109: goto tr166;
+	case 110: goto tr166;
+	case 111: goto tr166;
+	case 112: goto tr166;
+	case 113: goto tr166;
+	case 114: goto tr166;
+	case 115: goto tr166;
+	case 116: goto tr166;
+	case 117: goto tr166;
+	case 118: goto tr196;
+	case 59: goto tr104;
+	case 60: goto tr104;
+	case 119: goto tr196;
+	case 62: goto tr104;
+	case 120: goto tr156;
+	case 121: goto tr156;
+	case 122: goto tr156;
+	case 123: goto tr156;
+	case 124: goto tr156;
+	}
+	}
+
+	_out: {}
+	}
+#line 111 "hpricot_css.rl"
+  
+  rb_gc_unregister_address(&focus);
+  rb_gc_unregister_address(&tmpt);
+  return focus;
+}
diff -ruN hpricot-0.6/ext/hpricot_scan/hpricot_css.rl hpricot/ext/hpricot_scan/hpricot_css.rl
--- hpricot-0.6/ext/hpricot_scan/hpricot_css.rl	1970-01-01 01:00:00.000000000 +0100
+++ hpricot/ext/hpricot_scan/hpricot_css.rl	2009-02-19 19:39:17.000000000 +0100
@@ -0,0 +1,115 @@
+/*
+ * hpricot_css.rl
+ * ragel -C hpricot_css.rl -o hpricot_css.c
+ *
+ * Copyright (C) 2008 why the lucky stiff
+ */
+#include <ruby.h>
+
+#define FILTER(id) \
+  rb_funcall2(mod, rb_intern("" # id), fargs, fvals); \
+  rb_ary_clear(tmpt); \
+  fargs = 1
+#define FILTERAUTO() \
+  char filt[10]; \
+  sprintf(filt, "%.*s", te - ts, ts); \
+  rb_funcall2(mod, rb_intern(filt), fargs, fvals); \
+  rb_ary_clear(tmpt); \
+  fargs = 1
+#define PUSH(aps, ape) rb_ary_push(tmpt, fvals[fargs++] = rb_str_new(aps, ape - aps))
+#define P(id) printf(id ": %.*s\n", te - ts, ts);
+
+%%{
+  machine hpricot_css;
+
+  action a {
+    aps = p;
+  }
+
+  action b {
+    ape = p;
+    PUSH(aps, ape); 
+  }
+
+  action c {
+    ape = p;
+    aps2 = p;
+  }
+
+  action d {
+    ape2 = p;
+    PUSH(aps, ape);
+    PUSH(aps2, ape2);
+  }
+
+  commas    = space* "," space*;
+  traverse  = [>+~];
+  sdot      = "\\.";
+  utfw      = alnum | "_" | "-" | 
+              (0xc4 0xa8..0xbf) | (0xc5..0xdf 0x80..0xbf) |
+              (0xe0..0xef 0x80..0xbf 0x80..0xbf) |
+              (0xf0..0xf4 0x80..0xbf 0x80..0xbf 0x80..0xbf);
+  utfword   = utfw+;
+  utfname   = (utfw | sdot)+; 
+  quote1    = "'" [^']* "'";
+  quote2    = '"' [^"]* '"';
+
+  cssid     = "#" %a utfname %b;
+  cssclass  = "." %a utfname %b;
+  cssname   = "[name=" %a utfname %b "]";
+  cssattr   = "[" %a utfname %c space* [^ \n\t]? "=" %d space* (quote1 | quote2 | [^\]]+) "]";
+  csstag    = utfname >a %b;
+  cssmod    = ("even" | "odd" | (digit | "n" | "+" | "-")* );
+  csschild  = ":" %a ("only" | "nth" | "last" | "first") "-child" %b ("(" %a cssmod %b ")")?;
+  csspos    = ":" %a ("nth" | "eq" | "gt" | "lt" | "first" | "last" | "even" | "odd") %b ("(" %a digit+ %b ")")?;
+  pseudop   = "(" [^)]+ ")";
+  pseudoq   = "'" (pseudop+ | [^'()]*) "'" |
+              '"' (pseudop+ | [^"()]*) '"' |
+                  (pseudop+ | [^"()]*);
+  pseudo    = ":" %a utfname %b ("(" %a pseudoq %b ")")?;
+
+  main     := |*
+    cssid      => { FILTER(ID); };
+    cssclass   => { FILTER(CLASS); };
+    cssname    => { FILTER(NAME); };
+    cssattr    => { FILTER(ATTR); };
+    csstag     => { FILTER(TAG); };
+    cssmod     => { FILTER(MOD); };
+    csschild   => { FILTER(CHILD); };
+    csspos     => { FILTER(POS); };
+    pseudo     => { FILTER(PSUEDO); };
+    commas     => { focus = rb_ary_new3(1, node); };
+    traverse   => { FILTERAUTO(); };
+    space;
+  *|;
+
+  write data nofinal;
+}%%
+
+VALUE hpricot_css(VALUE self, VALUE mod, VALUE str, VALUE node)
+{
+  int cs, act, eof;
+  char *p, *pe, *ts, *te, *aps, *ape, *aps2, *ape2;
+
+  int fargs = 1;
+  VALUE fvals[6];
+  VALUE focus = rb_ary_new3(1, node);
+  VALUE tmpt = rb_ary_new();
+  rb_gc_register_address(&focus);
+  rb_gc_register_address(&tmpt);
+  fvals[0] = focus;
+
+  if (TYPE(str) != T_STRING)
+    rb_raise(rb_eArgError, "bad CSS selector, String only please.");
+ 
+  StringValue(str);
+  p = RSTRING_PTR(str);
+  pe = p + RSTRING_LEN(str);
+
+  %% write init;
+  %% write exec;
+  
+  rb_gc_unregister_address(&focus);
+  rb_gc_unregister_address(&tmpt);
+  return focus;
+}
diff -ruN hpricot-0.6/ext/hpricot_scan/hpricot_scan.c hpricot/ext/hpricot_scan/hpricot_scan.c
--- hpricot-0.6/ext/hpricot_scan/hpricot_scan.c	2007-06-16 00:30:16.000000000 +0200
+++ hpricot/ext/hpricot_scan/hpricot_scan.c	2009-02-19 19:39:17.000000000 +0100
@@ -1,4 +1,4 @@
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
+#line 1 "hpricot_scan.rl"
 /*
  * hpricot_scan.rl
  *
@@ -9,21 +9,48 @@
  */
 #include <ruby.h>
 
+#ifndef RARRAY_LEN
+#define RARRAY_LEN(arr)  RARRAY(arr)->len
+#define RSTRING_LEN(str) RSTRING(str)->len
+#define RSTRING_PTR(str) RSTRING(str)->ptr
+#endif
+
+VALUE hpricot_css(VALUE, VALUE, VALUE, VALUE, VALUE);
+
 #define NO_WAY_SERIOUSLY "*** This should not happen, please send a bug report with the HTML you're parsing to why@whytheluckystiff.net.  So sorry!"
 
 static VALUE sym_xmldecl, sym_doctype, sym_procins, sym_stag, sym_etag, sym_emptytag, sym_comment,
-      sym_cdata, sym_text;
-static VALUE rb_eHpricotParseError;
-static ID s_read, s_to_str;
+      sym_cdata, sym_text, sym_EMPTY, sym_CDATA;
+static VALUE mHpricot, rb_eHpricotParseError;
+static VALUE cBaseEle, cBogusETag, cCData, cComment, cDoc, cDocType, cElem, cETag, cText,
+      cXMLDecl, cProcIns, symAllow, symDeny;
+static ID s_ElementContent;
+static ID s_downcase, s_new, s_parent, s_read, s_to_str;
+static ID iv_parent;
+static VALUE reProcInsParse;
+
+typedef struct {
+  int name;
+  VALUE tag, attr, etag, raw, EC;
+  VALUE parent, children;
+} hpricot_ele;
+
+#define OPT(opts, key) (!NIL_P(opts) && RTEST(rb_hash_aref(opts, ID2SYM(rb_intern("" # key)))))
 
 #define ELE(N) \
-  if (tokend > tokstart || text == 1) { \
-    VALUE raw_string = Qnil; \
+  if (te > ts || text == 1) { \
+    char *raw = NULL; \
+    int rawlen = 0; \
     ele_open = 0; text = 0; \
-    if (tokstart != 0 && sym_##N != sym_cdata && sym_##N != sym_text && sym_##N != sym_procins && sym_##N != sym_comment) { \
-      raw_string = rb_str_new(tokstart, tokend-tokstart); \
+    if (ts != 0 && sym_##N != sym_cdata && sym_##N != sym_text && sym_##N != sym_procins && sym_##N != sym_comment) { \
+      raw = ts; rawlen = te - ts; \
     } \
-    rb_yield_tokens(sym_##N, tag, attr, raw_string, taint); \
+    if (rb_block_given_p()) { \
+      VALUE raw_string = Qnil; \
+      if (raw != NULL) raw_string = rb_str_new(raw, rawlen); \
+      rb_yield_tokens(sym_##N, tag, attr, Qnil, taint); \
+    } else \
+      rb_hpricot_token(S, sym_##N, tag, attr, raw, rawlen, taint); \
   }
 
 #define SET(N, E) \
@@ -34,7 +61,7 @@
 
 #define CAT(N, E) if (NIL_P(N)) { SET(N, E); } else { rb_str_cat(N, mark_##N, E - mark_##N); }
 
-#define SLIDE(N) if ( mark_##N > tokstart ) mark_##N = buf + (mark_##N - tokstart);
+#define SLIDE(N) if ( mark_##N > ts ) mark_##N = buf + (mark_##N - ts);
 
 #define ATTR(K, V) \
     if (!NIL_P(K)) { \
@@ -47,8 +74,8 @@
     { \
       if (ele_open == 1) { \
         ele_open = 0; \
-        if (tokstart > 0) { \
-          mark_tag = tokstart; \
+        if (ts > 0) { \
+          mark_tag = ts; \
         } \
       } else { \
         mark_tag = p; \
@@ -60,16 +87,20 @@
 
 #define EBLK(N, T) CAT(tag, p - T + 1); ELE(N);
 
-#line 107 "ext/hpricot_scan/hpricot_scan.rl"
+#line 134 "hpricot_scan.rl"
 
 
 
-#line 68 "ext/hpricot_scan/hpricot_scan.c"
+#line 95 "hpricot_scan.c"
 static const int hpricot_scan_start = 204;
-
 static const int hpricot_scan_error = -1;
 
-#line 110 "ext/hpricot_scan/hpricot_scan.rl"
+static const int hpricot_scan_en_html_comment = 214;
+static const int hpricot_scan_en_html_cdata = 216;
+static const int hpricot_scan_en_html_procins = 218;
+static const int hpricot_scan_en_main = 204;
+
+#line 137 "hpricot_scan.rl"
 
 #define BUFSIZE 16384
 
@@ -89,16 +120,299 @@
   rb_yield(ary);
 }
 
-VALUE hpricot_scan(VALUE self, VALUE port)
+static void
+rb_hpricot_add(VALUE focus, VALUE ele)
+{
+  hpricot_ele *he, *he2;
+  Data_Get_Struct(focus, hpricot_ele, he);
+  Data_Get_Struct(ele, hpricot_ele, he2);
+  if (NIL_P(he->children))
+    he->children = rb_ary_new();
+  rb_ary_push(he->children, ele);
+  he2->parent = focus;
+}
+
+typedef struct {
+  VALUE doc;
+  VALUE focus;
+  VALUE last;
+  VALUE EC;
+  unsigned char xml, strict, fixup;
+} hpricot_state;
+
+static void
+hpricot_ele_mark(hpricot_ele *he)
+{
+  rb_gc_mark(he->tag);
+  rb_gc_mark(he->attr);
+  rb_gc_mark(he->etag);
+  rb_gc_mark(he->raw);
+  rb_gc_mark(he->parent);
+  rb_gc_mark(he->children);
+}
+
+static void
+hpricot_ele_free(hpricot_ele *he)
+{
+  free(he);
+}
+
+#define H_PROP(prop) \
+  static VALUE hpricot_ele_set_##prop(VALUE self, VALUE x) { \
+    hpricot_ele *he; \
+    Data_Get_Struct(self, hpricot_ele, he); \
+    he->prop = x; \
+    return self; \
+  } \
+  static VALUE hpricot_ele_get_##prop(VALUE self) { \
+    hpricot_ele *he; \
+    Data_Get_Struct(self, hpricot_ele, he); \
+    return he->prop; \
+  }
+
+#define H_ATTR(prop) \
+  static VALUE hpricot_ele_set_##prop(VALUE self, VALUE x) { \
+    hpricot_ele *he; \
+    Data_Get_Struct(self, hpricot_ele, he); \
+    rb_hash_aset(he->attr, ID2SYM(rb_intern("" # prop)), x); \
+    return self; \
+  } \
+  static VALUE hpricot_ele_get_##prop(VALUE self) { \
+    hpricot_ele *he; \
+    Data_Get_Struct(self, hpricot_ele, he); \
+    return rb_hash_aref(he->attr, ID2SYM(rb_intern("" # prop))); \
+  }
+
+H_PROP(tag);
+H_PROP(attr);
+H_PROP(etag);
+H_PROP(parent);
+H_PROP(children);
+H_ATTR(encoding);
+H_ATTR(version);
+H_ATTR(standalone);
+H_ATTR(system_id);
+H_ATTR(public_id);
+
+static VALUE
+hpricot_ele_get_raw(VALUE self, VALUE x) {
+  hpricot_ele *he;
+  Data_Get_Struct(self, hpricot_ele, he);
+  return he->raw;
+}
+
+static VALUE
+hpricot_ele_clear_raw(VALUE self)
+{
+  hpricot_ele *he;
+  Data_Get_Struct(self, hpricot_ele, he);
+  he->raw = Qnil;
+  return Qtrue;
+}
+
+#define H_ELE(klass) \
+  hpricot_ele *he = ALLOC(hpricot_ele); \
+  he->name = 0; \
+  he->tag = tag; \
+  he->attr = attr; \
+  he->raw = Qnil; \
+  he->EC = ec; \
+  he->etag = he->parent = he->children = Qnil; \
+  if (raw != NULL && (sym == sym_emptytag || sym == sym_stag || sym == sym_etag || sym == sym_doctype)) { \
+    he->raw = rb_str_new(raw, rawlen); \
+  } \
+  ele = Data_Wrap_Struct(klass, hpricot_ele_mark, hpricot_ele_free, he); \
+  S->last = ele
+
+VALUE
+hpricot_ele_alloc(VALUE klass)
+{
+  VALUE ele;
+  hpricot_ele *he = ALLOC(hpricot_ele);
+  he->name = 0;
+  he->tag = he->attr = he->raw = he->EC = Qnil;
+  he->etag = he->parent = he->children = Qnil;
+  ele = Data_Wrap_Struct(klass, hpricot_ele_mark, hpricot_ele_free, he);
+  return ele;
+}
+
+//
+// the swift, compact parser logic.  most of the complicated stuff is done
+// in the lexer.  this step just pairs up the start and end tags.
+//
+void
+rb_hpricot_token(hpricot_state *S, VALUE sym, VALUE tag, VALUE attr, char *raw, int rawlen, int taint)
+{
+  VALUE ele, ec = Qnil;
+
+  //
+  // in html mode, fix up start tags incorrectly formed as empty tags
+  //
+  if (!S->xml) {
+    hpricot_ele *last;
+    Data_Get_Struct(S->focus, hpricot_ele, last);
+    if (last->EC == sym_CDATA &&
+       (sym != sym_procins && sym != sym_comment && sym != sym_cdata && sym != sym_text) &&
+      !(sym == sym_etag && rb_str_hash(tag) == last->name))
+    {
+      sym = sym_text;
+      tag = rb_str_new(raw, rawlen);
+    }
+
+    if (sym == sym_emptytag || sym == sym_stag || sym == sym_etag) {
+      ec = rb_hash_aref(S->EC, tag);
+      if (NIL_P(ec)) {
+        tag = rb_funcall(tag, s_downcase, 0);
+        ec = rb_hash_aref(S->EC, tag);
+      }
+      if (sym == sym_emptytag) {
+        if (ec != sym_EMPTY)
+          sym = sym_stag;
+      } else if (sym == sym_stag) {
+        if (ec == sym_EMPTY)
+          sym = sym_emptytag;
+      }
+    }
+  }
+
+  if (sym == sym_emptytag || sym == sym_stag) {
+    H_ELE(cElem);
+    he->name = rb_str_hash(tag);
+
+    if (!S->xml) {
+      VALUE match = Qnil, e = S->focus;
+      while (e != S->doc)
+      {
+        hpricot_ele *hee;
+        Data_Get_Struct(e, hpricot_ele, hee);
+
+        if (TYPE(hee->EC) == T_HASH)
+        {
+          VALUE has = rb_hash_lookup(hee->EC, INT2NUM(he->name));
+          if (has != Qnil) {
+            if (has == Qtrue) {
+              if (match == Qnil)
+                match = e;
+            } else if (has == symAllow) {
+              match = S->focus;
+            } else if (has == symDeny) {
+              match = Qnil;
+            }
+          }
+        }
+
+        e = hee->parent;
+      }
+
+      if (match == Qnil)
+        match = S->focus;
+      S->focus = match;
+    }
+
+    rb_hpricot_add(S->focus, ele);
+
+    //
+    // in the case of a start tag that should be empty, just
+    // skip the step that focuses the element.  focusing moves
+    // us deeper into the document.
+    //
+    if (sym == sym_stag) {
+      if (S->xml || ec != sym_EMPTY) {
+        S->focus = ele;
+        S->last = Qnil;
+      }
+    }
+  } else if (sym == sym_etag) {
+    int name;
+    VALUE match = Qnil, e = S->focus;
+    if (S->strict) {
+      if (NIL_P(rb_hash_aref(S->EC, tag))) {
+        tag = rb_str_new2("div");
+      }
+    }
+
+    //
+    // another optimization will be to improve this very simple
+    // O(n) tag search, where n is the depth of the focused tag.
+    //
+    // (see also: the search above for fixups)
+    //
+    name = rb_str_hash(tag);
+    while (e != S->doc)
+    {
+      hpricot_ele *he;
+      Data_Get_Struct(e, hpricot_ele, he);
+
+      if (he->name == name)
+      {
+        match = e;
+        break;
+      }
+
+      e = he->parent;
+    }
+
+    if (NIL_P(match))
+    {
+      H_ELE(cBogusETag);
+      rb_hpricot_add(S->focus, ele);
+    }
+    else
+    {
+      H_ELE(cETag);
+      Data_Get_Struct(match, hpricot_ele, he);
+      he->etag = ele;
+      S->focus = he->parent;
+      S->last = Qnil;
+    }
+  } else if (sym == sym_cdata) {
+    H_ELE(cCData);
+    rb_hpricot_add(S->focus, ele);
+  } else if (sym == sym_comment) {
+    H_ELE(cComment);
+    rb_hpricot_add(S->focus, ele);
+  } else if (sym == sym_doctype) {
+    H_ELE(cDocType);
+    if (S->strict) {
+      rb_hash_aset(attr, ID2SYM(rb_intern("system_id")), rb_str_new2("http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"));
+      rb_hash_aset(attr, ID2SYM(rb_intern("public_id")), rb_str_new2("-//W3C//DTD XHTML 1.0 Strict//EN"));
+    }
+    rb_hpricot_add(S->focus, ele);
+  } else if (sym == sym_procins) {
+    VALUE match = rb_funcall(tag, rb_intern("match"), 1, reProcInsParse);
+    tag = rb_reg_nth_match(1, match);
+    attr = rb_reg_nth_match(2, match);
+    H_ELE(cProcIns);
+    rb_hpricot_add(S->focus, ele);
+  } else if (sym == sym_text) {
+    // TODO: add raw_string as well?
+    if (!NIL_P(S->last) && RBASIC(S->last)->klass == cText) {
+      hpricot_ele *he;
+      Data_Get_Struct(S->last, hpricot_ele, he);
+      rb_str_append(he->tag, tag);
+    } else {
+      H_ELE(cText);
+      rb_hpricot_add(S->focus, ele);
+    }
+  } else if (sym == sym_xmldecl) {
+    H_ELE(cXMLDecl);
+    rb_hpricot_add(S->focus, ele);
+  }
+}
+
+VALUE hpricot_scan(int argc, VALUE *argv, VALUE self)
 {
   int cs, act, have = 0, nread = 0, curline = 1, text = 0;
-  char *tokstart = 0, *tokend = 0, *buf = NULL;
+  char *ts = 0, *te = 0, *buf = NULL, *eof = NULL;
 
+  hpricot_state *S = NULL;
+  VALUE port, opts;
   VALUE attr = Qnil, tag = Qnil, akey = Qnil, aval = Qnil, bufsize = Qnil;
   char *mark_tag = 0, *mark_akey = 0, *mark_aval = 0;
-  int done = 0, ele_open = 0, buffer_size = 0;
+  int done = 0, ele_open = 0, buffer_size = 0, taint = 0;
 
-  int taint = OBJ_TAINTED( port );
+  rb_scan_args(argc, argv, "11", &port, &opts);
+  taint = OBJ_TAINTED( port );
   if ( !rb_respond_to( port, s_read ) )
   {
     if ( rb_respond_to( port, s_to_str ) )
@@ -108,10 +422,32 @@
     }
     else
     {
-      rb_raise( rb_eArgError, "bad Hpricot argument, String or IO only please." );
+      rb_raise(rb_eArgError, "an Hpricot document must be built from an input source (a String or IO object.)");
     }
   }
 
+  if (TYPE(opts) != T_HASH)
+    opts = Qnil;
+
+  if (!rb_block_given_p())
+  {
+    S = ALLOC(hpricot_state);
+    hpricot_ele *he = ALLOC(hpricot_ele);
+    MEMZERO(he, hpricot_ele, 1);
+    he->tag = he->attr = he->etag = he->parent = he->children = Qnil;
+    S->doc = Data_Wrap_Struct(cDoc, hpricot_ele_mark, hpricot_ele_free, he);
+    rb_gc_register_address(&S->doc);
+    S->focus = S->doc;
+    S->last = Qnil;
+    S->xml = OPT(opts, xml);
+    S->strict = OPT(opts, xhtml_strict);
+    S->fixup = OPT(opts, fixup_tags);
+    if (S->strict) S->fixup = 1;
+    rb_ivar_set(S->doc, rb_intern("@options"), opts);
+
+    S->EC = rb_const_get(mHpricot, s_ElementContent);
+  }
+
   buffer_size = BUFSIZE;
   if (rb_ivar_defined(self, rb_intern("@buffer_size")) == Qtrue) {
     bufsize = rb_ivar_get(self, rb_intern("@buffer_size"));
@@ -122,39 +458,56 @@
   buf = ALLOC_N(char, buffer_size);
 
   
-#line 126 "ext/hpricot_scan/hpricot_scan.c"
+#line 462 "hpricot_scan.c"
 	{
 	cs = hpricot_scan_start;
-	tokstart = 0;
-	tokend = 0;
+	ts = 0;
+	te = 0;
 	act = 0;
 	}
-#line 162 "ext/hpricot_scan/hpricot_scan.rl"
+#line 494 "hpricot_scan.rl"
   
   while ( !done ) {
     VALUE str;
-    char *p = buf + have, *pe;
-    int len, space = buffer_size - have;
+    char *p, *pe;
+    int len, space = buffer_size - have, tokstart_diff, tokend_diff, mark_tag_diff, mark_akey_diff, mark_aval_diff;
 
     if ( space == 0 ) {
       /* We've used up the entire buffer storing an already-parsed token
        * prefix that must be preserved.  Likely caused by super-long attributes.
-       * See ticket #13. */
-      rb_raise(rb_eHpricotParseError, "ran out of buffer space on element <%s>, starting on line %d.", RSTRING(tag)->ptr, curline);
+       * Increase buffer size and continue  */
+       tokstart_diff = ts - buf;
+       tokend_diff = te - buf;
+       mark_tag_diff = mark_tag - buf;
+       mark_akey_diff = mark_akey - buf;
+       mark_aval_diff = mark_aval - buf;
+
+       buffer_size += BUFSIZE;
+       REALLOC_N(buf, char, buffer_size);
+
+       space = buffer_size - have;
+
+       ts= buf + tokstart_diff;
+       te = buf + tokend_diff;
+       mark_tag = buf + mark_tag_diff;
+       mark_akey = buf + mark_akey_diff;
+       mark_aval = buf + mark_aval_diff;
     }
+    p = buf + have;
 
     if ( rb_respond_to( port, s_read ) )
     {
-      str = rb_funcall( port, s_read, 1, INT2FIX(space) );
+      str = rb_funcall(port, s_read, 1, INT2FIX(space));
+      len = RSTRING_LEN(str);
+      memcpy(p, StringValuePtr(str), len);
     }
     else
     {
-      str = rb_str_substr( port, nread, space );
+      len = RSTRING_LEN(port) - nread;
+      if (len > space) len = space;
+      memcpy(p, StringValuePtr(port) + nread, len);
     }
 
-    StringValue(str);
-    memcpy( p, RSTRING(str)->ptr, RSTRING(str)->len );
-    len = RSTRING(str)->len;
     nread += len;
 
     /* If this is the last buffer, tack on an EOF. */
@@ -165,180 +518,183 @@
 
     pe = p + len;
     
-#line 169 "ext/hpricot_scan/hpricot_scan.c"
+#line 522 "hpricot_scan.c"
 	{
 	if ( p == pe )
-		goto _out;
+		goto _test_eof;
 	switch ( cs )
 	{
-tr14:
-#line 67 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p;{ {{p = ((tokend))-1;}{goto st218;}} }{p = ((tokend))-1;}}
+tr0:
+#line 73 "hpricot_scan.rl"
+	{{p = ((te))-1;}{ TEXT_PASS(); }}
 	goto st204;
-tr18:
-#line 73 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+tr4:
+#line 71 "hpricot_scan.rl"
+	{te = p+1;{ {goto st214;} }}
 	goto st204;
-tr23:
-#line 73 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+tr15:
+#line 107 "hpricot_scan.rl"
+	{ SET(tag, p); }
+#line 66 "hpricot_scan.rl"
+	{te = p+1;{ ELE(doctype); }}
 	goto st204;
-tr24:
-#line 9 "ext/hpricot_scan/hpricot_scan.rl"
-	{curline += 1;}
-#line 73 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+tr18:
+#line 66 "hpricot_scan.rl"
+	{te = p+1;{ ELE(doctype); }}
 	goto st204;
-tr69:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
+tr39:
+#line 1 "hpricot_scan.rl"
 	{	switch( act ) {
 	case 8:
-	{ ELE(doctype); }
+	{{p = ((te))-1;} ELE(doctype); }
 	break;
 	case 10:
-	{ ELE(stag); }
+	{{p = ((te))-1;} ELE(stag); }
 	break;
 	case 12:
-	{ ELE(emptytag); }
+	{{p = ((te))-1;} ELE(emptytag); }
 	break;
 	case 15:
-	{ TEXT_PASS(); }
+	{{p = ((te))-1;} TEXT_PASS(); }
 	break;
-	default: break;
 	}
-	{p = ((tokend))-1;}}
+	}
 	goto st204;
-tr70:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr93:
+#line 72 "hpricot_scan.rl"
+	{te = p+1;{ {goto st216;} }}
+	goto st204;
+tr97:
+#line 107 "hpricot_scan.rl"
+	{ SET(tag, p); }
+#line 69 "hpricot_scan.rl"
+	{te = p+1;{ ELE(etag); }}
+	goto st204;
+tr99:
+#line 69 "hpricot_scan.rl"
+	{te = p+1;{ ELE(etag); }}
+	goto st204;
+tr103:
+#line 107 "hpricot_scan.rl"
+	{ SET(tag, p); }
+#line 68 "hpricot_scan.rl"
+	{te = p+1;{ ELE(stag); }}
+	goto st204;
+tr107:
+#line 68 "hpricot_scan.rl"
+	{te = p+1;{ ELE(stag); }}
+	goto st204;
+tr112:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+#line 128 "hpricot_scan.rl"
+	{ 
+    ATTR(akey, aval);
+  }
+#line 68 "hpricot_scan.rl"
+	{te = p+1;{ ELE(stag); }}
+	goto st204;
+tr117:
+#line 128 "hpricot_scan.rl"
+	{ 
+    ATTR(akey, aval);
+  }
+#line 68 "hpricot_scan.rl"
+	{te = p+1;{ ELE(stag); }}
+	goto st204;
+tr118:
+#line 70 "hpricot_scan.rl"
+	{te = p+1;{ ELE(emptytag); }}
+	goto st204;
+tr129:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(stag); }{p = ((tokend))-1;}}
+#line 68 "hpricot_scan.rl"
+	{te = p+1;{ ELE(stag); }}
 	goto st204;
-tr76:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr133:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(stag); }{p = ((tokend))-1;}}
+#line 68 "hpricot_scan.rl"
+	{te = p+1;{ ELE(stag); }}
 	goto st204;
-tr137:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr139:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    ATTR(akey, aval);
-  }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(stag); }{p = ((tokend))-1;}}
-	goto st204;
-tr162:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(stag); }{p = ((tokend))-1;}}
-	goto st204;
-tr264:
-#line 67 "ext/hpricot_scan/hpricot_scan.rl"
-	{{ {{p = ((tokend))-1;}{goto st218;}} }{p = ((tokend))-1;}}
-	goto st204;
-tr270:
-#line 65 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(xmldecl); }{p = ((tokend))-1;}}
-	goto st204;
-tr296:
-#line 73 "ext/hpricot_scan/hpricot_scan.rl"
-	{{ TEXT_PASS(); }{p = ((tokend))-1;}}
-	goto st204;
-tr302:
-#line 66 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(doctype); }{p = ((tokend))-1;}}
-	goto st204;
-tr314:
-#line 69 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(etag); }{p = ((tokend))-1;}}
-	goto st204;
-tr318:
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(stag); }{p = ((tokend))-1;}}
+#line 68 "hpricot_scan.rl"
+	{te = p+1;{ ELE(stag); }}
 	goto st204;
-tr327:
-#line 80 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(tag, p); }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(stag); }{p = ((tokend))-1;}}
+tr349:
+#line 67 "hpricot_scan.rl"
+	{{p = ((te))-1;}{ {goto st218;} }}
 	goto st204;
-tr330:
-#line 80 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(tag, p); }
-#line 66 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(doctype); }{p = ((tokend))-1;}}
+tr363:
+#line 65 "hpricot_scan.rl"
+	{te = p+1;{ ELE(xmldecl); }}
 	goto st204;
-tr334:
-#line 80 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(tag, p); }
-#line 69 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(etag); }{p = ((tokend))-1;}}
+tr411:
+#line 73 "hpricot_scan.rl"
+	{te = p+1;{ TEXT_PASS(); }}
 	goto st204;
-tr355:
-#line 72 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ {{p = ((tokend))-1;}{goto st216;}} }{p = ((tokend))-1;}}
+tr412:
+#line 9 "hpricot_scan.rl"
+	{curline += 1;}
+#line 73 "hpricot_scan.rl"
+	{te = p+1;{ TEXT_PASS(); }}
 	goto st204;
-tr356:
-#line 71 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ {{p = ((tokend))-1;}{goto st214;}} }{p = ((tokend))-1;}}
+tr414:
+#line 73 "hpricot_scan.rl"
+	{te = p;p--;{ TEXT_PASS(); }}
 	goto st204;
-tr368:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    ATTR(akey, aval);
-  }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(stag); }{p = ((tokend))-1;}}
+tr419:
+#line 66 "hpricot_scan.rl"
+	{te = p;p--;{ ELE(doctype); }}
 	goto st204;
-tr369:
-#line 70 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ ELE(emptytag); }{p = ((tokend))-1;}}
+tr420:
+#line 67 "hpricot_scan.rl"
+	{te = p;p--;{ {goto st218;} }}
 	goto st204;
 st204:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokstart = 0;}
+#line 1 "hpricot_scan.rl"
+	{ts = 0;}
 	if ( ++p == pe )
-		goto _out204;
+		goto _test_eof204;
 case 204:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokstart = p;}
-#line 333 "ext/hpricot_scan/hpricot_scan.c"
-	switch( (*p) ) {
-		case 10: goto tr24;
-		case 60: goto tr25;
-	}
-	goto tr23;
-tr25:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 65 "ext/hpricot_scan/hpricot_scan.rl"
+#line 1 "hpricot_scan.rl"
+	{ts = p;}
+#line 689 "hpricot_scan.c"
+	switch( (*p) ) {
+		case 10: goto tr412;
+		case 60: goto tr413;
+	}
+	goto tr411;
+tr413:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 92 "hpricot_scan.rl"
 	{
     if (text == 1) {
       CAT(tag, p);
@@ -350,127 +706,127 @@
     mark_tag = NULL;
     ele_open = 1;
   }
-#line 73 "ext/hpricot_scan/hpricot_scan.rl"
+#line 73 "hpricot_scan.rl"
 	{act = 15;}
 	goto st205;
 st205:
 	if ( ++p == pe )
-		goto _out205;
+		goto _test_eof205;
 case 205:
-#line 361 "ext/hpricot_scan/hpricot_scan.c"
+#line 717 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 33: goto st0;
 		case 47: goto st59;
-		case 58: goto tr21;
+		case 58: goto tr417;
 		case 63: goto st145;
-		case 95: goto tr21;
+		case 95: goto tr417;
 	}
 	if ( (*p) > 90 ) {
 		if ( 97 <= (*p) && (*p) <= 122 )
-			goto tr21;
+			goto tr417;
 	} else if ( (*p) >= 65 )
-		goto tr21;
-	goto tr18;
+		goto tr417;
+	goto tr414;
 st0:
 	if ( ++p == pe )
-		goto _out0;
+		goto _test_eof0;
 case 0:
 	switch( (*p) ) {
 		case 45: goto st1;
 		case 68: goto st2;
 		case 91: goto st53;
 	}
-	goto tr296;
+	goto tr0;
 st1:
 	if ( ++p == pe )
-		goto _out1;
+		goto _test_eof1;
 case 1:
 	if ( (*p) == 45 )
-		goto tr356;
-	goto tr296;
+		goto tr4;
+	goto tr0;
 st2:
 	if ( ++p == pe )
-		goto _out2;
+		goto _test_eof2;
 case 2:
 	if ( (*p) == 79 )
 		goto st3;
-	goto tr296;
+	goto tr0;
 st3:
 	if ( ++p == pe )
-		goto _out3;
+		goto _test_eof3;
 case 3:
 	if ( (*p) == 67 )
 		goto st4;
-	goto tr296;
+	goto tr0;
 st4:
 	if ( ++p == pe )
-		goto _out4;
+		goto _test_eof4;
 case 4:
 	if ( (*p) == 84 )
 		goto st5;
-	goto tr296;
+	goto tr0;
 st5:
 	if ( ++p == pe )
-		goto _out5;
+		goto _test_eof5;
 case 5:
 	if ( (*p) == 89 )
 		goto st6;
-	goto tr296;
+	goto tr0;
 st6:
 	if ( ++p == pe )
-		goto _out6;
+		goto _test_eof6;
 case 6:
 	if ( (*p) == 80 )
 		goto st7;
-	goto tr296;
+	goto tr0;
 st7:
 	if ( ++p == pe )
-		goto _out7;
+		goto _test_eof7;
 case 7:
 	if ( (*p) == 69 )
 		goto st8;
-	goto tr296;
+	goto tr0;
 st8:
 	if ( ++p == pe )
-		goto _out8;
+		goto _test_eof8;
 case 8:
 	if ( (*p) == 32 )
 		goto st9;
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st9;
-	goto tr296;
+	goto tr0;
 st9:
 	if ( ++p == pe )
-		goto _out9;
+		goto _test_eof9;
 case 9:
 	switch( (*p) ) {
 		case 32: goto st9;
-		case 58: goto tr309;
-		case 95: goto tr309;
+		case 58: goto tr12;
+		case 95: goto tr12;
 	}
 	if ( (*p) < 65 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
 			goto st9;
 	} else if ( (*p) > 90 ) {
 		if ( 97 <= (*p) && (*p) <= 122 )
-			goto tr309;
+			goto tr12;
 	} else
-		goto tr309;
-	goto tr296;
-tr309:
-#line 77 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr12;
+	goto tr0;
+tr12:
+#line 104 "hpricot_scan.rl"
 	{ mark_tag = p; }
 	goto st10;
 st10:
 	if ( ++p == pe )
-		goto _out10;
+		goto _test_eof10;
 case 10:
-#line 469 "ext/hpricot_scan/hpricot_scan.c"
+#line 825 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr328;
-		case 62: goto tr330;
+		case 32: goto tr13;
+		case 62: goto tr15;
 		case 63: goto st10;
-		case 91: goto tr331;
+		case 91: goto tr16;
 		case 95: goto st10;
 	}
 	if ( (*p) < 48 ) {
@@ -478,7 +834,7 @@
 			if ( 45 <= (*p) && (*p) <= 46 )
 				goto st10;
 		} else if ( (*p) >= 9 )
-			goto tr328;
+			goto tr13;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
@@ -487,73 +843,73 @@
 			goto st10;
 	} else
 		goto st10;
-	goto tr296;
-tr328:
-#line 80 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr0;
+tr13:
+#line 107 "hpricot_scan.rl"
 	{ SET(tag, p); }
 	goto st11;
 st11:
 	if ( ++p == pe )
-		goto _out11;
+		goto _test_eof11;
 case 11:
-#line 500 "ext/hpricot_scan/hpricot_scan.c"
+#line 856 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st11;
-		case 62: goto tr302;
+		case 62: goto tr18;
 		case 80: goto st12;
 		case 83: goto st48;
 		case 91: goto st26;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st11;
-	goto tr296;
+	goto tr0;
 st12:
 	if ( ++p == pe )
-		goto _out12;
+		goto _test_eof12;
 case 12:
 	if ( (*p) == 85 )
 		goto st13;
-	goto tr296;
+	goto tr0;
 st13:
 	if ( ++p == pe )
-		goto _out13;
+		goto _test_eof13;
 case 13:
 	if ( (*p) == 66 )
 		goto st14;
-	goto tr296;
+	goto tr0;
 st14:
 	if ( ++p == pe )
-		goto _out14;
+		goto _test_eof14;
 case 14:
 	if ( (*p) == 76 )
 		goto st15;
-	goto tr296;
+	goto tr0;
 st15:
 	if ( ++p == pe )
-		goto _out15;
+		goto _test_eof15;
 case 15:
 	if ( (*p) == 73 )
 		goto st16;
-	goto tr296;
+	goto tr0;
 st16:
 	if ( ++p == pe )
-		goto _out16;
+		goto _test_eof16;
 case 16:
 	if ( (*p) == 67 )
 		goto st17;
-	goto tr296;
+	goto tr0;
 st17:
 	if ( ++p == pe )
-		goto _out17;
+		goto _test_eof17;
 case 17:
 	if ( (*p) == 32 )
 		goto st18;
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st18;
-	goto tr296;
+	goto tr0;
 st18:
 	if ( ++p == pe )
-		goto _out18;
+		goto _test_eof18;
 case 18:
 	switch( (*p) ) {
 		case 32: goto st18;
@@ -562,41 +918,41 @@
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st18;
-	goto tr296;
+	goto tr0;
 st19:
 	if ( ++p == pe )
-		goto _out19;
+		goto _test_eof19;
 case 19:
 	switch( (*p) ) {
-		case 9: goto tr321;
-		case 34: goto tr320;
-		case 61: goto tr321;
-		case 95: goto tr321;
+		case 9: goto tr30;
+		case 34: goto tr31;
+		case 61: goto tr30;
+		case 95: goto tr30;
 	}
 	if ( (*p) < 39 ) {
 		if ( 32 <= (*p) && (*p) <= 37 )
-			goto tr321;
+			goto tr30;
 	} else if ( (*p) > 59 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr321;
+				goto tr30;
 		} else if ( (*p) >= 63 )
-			goto tr321;
+			goto tr30;
 	} else
-		goto tr321;
-	goto tr296;
-tr321:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr30;
+	goto tr0;
+tr30:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st20;
 st20:
 	if ( ++p == pe )
-		goto _out20;
+		goto _test_eof20;
 case 20:
-#line 597 "ext/hpricot_scan/hpricot_scan.c"
+#line 953 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 9: goto st20;
-		case 34: goto tr320;
+		case 34: goto tr33;
 		case 61: goto st20;
 		case 95: goto st20;
 	}
@@ -611,153 +967,165 @@
 			goto st20;
 	} else
 		goto st20;
-	goto tr296;
-tr320:
-#line 91 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("public_id"), aval); }
+	goto tr0;
+tr31:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 118 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("public_id")), aval); }
+	goto st21;
+tr33:
+#line 118 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("public_id")), aval); }
 	goto st21;
 st21:
 	if ( ++p == pe )
-		goto _out21;
+		goto _test_eof21;
 case 21:
-#line 624 "ext/hpricot_scan/hpricot_scan.c"
+#line 986 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st22;
-		case 62: goto tr302;
+		case 62: goto tr18;
 		case 91: goto st26;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st22;
-	goto tr296;
+	goto tr0;
 st22:
 	if ( ++p == pe )
-		goto _out22;
+		goto _test_eof22;
 case 22:
 	switch( (*p) ) {
 		case 32: goto st22;
 		case 34: goto st23;
 		case 39: goto st28;
-		case 62: goto tr302;
+		case 62: goto tr18;
 		case 91: goto st26;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st22;
-	goto tr296;
+	goto tr0;
 st23:
 	if ( ++p == pe )
-		goto _out23;
+		goto _test_eof23;
 case 23:
 	if ( (*p) == 34 )
-		goto tr6;
-	goto tr222;
-tr222:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr38;
+	goto tr37;
+tr37:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st24;
 st24:
 	if ( ++p == pe )
-		goto _out24;
+		goto _test_eof24;
 case 24:
-#line 662 "ext/hpricot_scan/hpricot_scan.c"
+#line 1024 "hpricot_scan.c"
 	if ( (*p) == 34 )
-		goto tr6;
+		goto tr41;
 	goto st24;
-tr6:
-#line 92 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("system_id"), aval); }
+tr38:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 119 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("system_id")), aval); }
+	goto st25;
+tr41:
+#line 119 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("system_id")), aval); }
 	goto st25;
 st25:
 	if ( ++p == pe )
-		goto _out25;
+		goto _test_eof25;
 case 25:
-#line 674 "ext/hpricot_scan/hpricot_scan.c"
+#line 1042 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st25;
-		case 62: goto tr302;
+		case 62: goto tr18;
 		case 91: goto st26;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st25;
-	goto tr69;
-tr331:
-#line 80 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr39;
+tr16:
+#line 107 "hpricot_scan.rl"
 	{ SET(tag, p); }
 	goto st26;
 st26:
 	if ( ++p == pe )
-		goto _out26;
+		goto _test_eof26;
 case 26:
-#line 691 "ext/hpricot_scan/hpricot_scan.c"
+#line 1059 "hpricot_scan.c"
 	if ( (*p) == 93 )
 		goto st27;
 	goto st26;
 st27:
 	if ( ++p == pe )
-		goto _out27;
+		goto _test_eof27;
 case 27:
 	switch( (*p) ) {
 		case 32: goto st27;
-		case 62: goto tr302;
+		case 62: goto tr18;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st27;
-	goto tr69;
+	goto tr39;
 st28:
 	if ( ++p == pe )
-		goto _out28;
+		goto _test_eof28;
 case 28:
 	if ( (*p) == 39 )
-		goto tr6;
-	goto tr182;
-tr182:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr38;
+	goto tr44;
+tr44:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st29;
 st29:
 	if ( ++p == pe )
-		goto _out29;
+		goto _test_eof29;
 case 29:
-#line 721 "ext/hpricot_scan/hpricot_scan.c"
+#line 1089 "hpricot_scan.c"
 	if ( (*p) == 39 )
-		goto tr6;
+		goto tr41;
 	goto st29;
 st30:
 	if ( ++p == pe )
-		goto _out30;
+		goto _test_eof30;
 case 30:
 	switch( (*p) ) {
-		case 9: goto tr322;
-		case 39: goto tr323;
-		case 61: goto tr322;
-		case 95: goto tr322;
+		case 9: goto tr46;
+		case 39: goto tr47;
+		case 61: goto tr46;
+		case 95: goto tr46;
 	}
 	if ( (*p) < 40 ) {
 		if ( (*p) > 33 ) {
 			if ( 35 <= (*p) && (*p) <= 37 )
-				goto tr322;
+				goto tr46;
 		} else if ( (*p) >= 32 )
-			goto tr322;
+			goto tr46;
 	} else if ( (*p) > 59 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr322;
+				goto tr46;
 		} else if ( (*p) >= 63 )
-			goto tr322;
+			goto tr46;
 	} else
-		goto tr322;
-	goto tr296;
-tr322:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr46;
+	goto tr0;
+tr46:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st31;
 st31:
 	if ( ++p == pe )
-		goto _out31;
+		goto _test_eof31;
 case 31:
-#line 758 "ext/hpricot_scan/hpricot_scan.c"
+#line 1126 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 9: goto st31;
-		case 39: goto tr303;
+		case 39: goto tr49;
 		case 61: goto st31;
 		case 95: goto st31;
 	}
@@ -775,34 +1143,42 @@
 			goto st31;
 	} else
 		goto st31;
-	goto tr296;
-tr42:
-#line 91 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("public_id"), aval); }
-#line 92 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("system_id"), aval); }
+	goto tr0;
+tr47:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 118 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("public_id")), aval); }
 	goto st32;
-tr303:
-#line 91 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("public_id"), aval); }
+tr49:
+#line 118 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("public_id")), aval); }
 	goto st32;
-tr323:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr55:
+#line 118 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("public_id")), aval); }
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 91 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("public_id"), aval); }
+#line 119 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("system_id")), aval); }
+	goto st32;
+tr82:
+#line 118 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("public_id")), aval); }
+#line 119 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("system_id")), aval); }
 	goto st32;
 st32:
 	if ( ++p == pe )
-		goto _out32;
+		goto _test_eof32;
 case 32:
-#line 800 "ext/hpricot_scan/hpricot_scan.c"
+#line 1176 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 9: goto st33;
 		case 32: goto st33;
 		case 33: goto st31;
-		case 39: goto tr303;
-		case 62: goto tr302;
+		case 39: goto tr49;
+		case 62: goto tr18;
 		case 91: goto st26;
 		case 95: goto st31;
 	}
@@ -820,17 +1196,17 @@
 			goto st31;
 	} else
 		goto st31;
-	goto tr296;
+	goto tr0;
 st33:
 	if ( ++p == pe )
-		goto _out33;
+		goto _test_eof33;
 case 33:
 	switch( (*p) ) {
 		case 9: goto st33;
 		case 32: goto st33;
 		case 34: goto st23;
-		case 39: goto tr301;
-		case 62: goto tr302;
+		case 39: goto tr51;
+		case 62: goto tr18;
 		case 91: goto st26;
 		case 95: goto st31;
 	}
@@ -848,61 +1224,61 @@
 			goto st31;
 	} else
 		goto st31;
-	goto tr296;
-tr44:
-#line 91 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("public_id"), aval); }
-#line 92 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("system_id"), aval); }
+	goto tr0;
+tr51:
+#line 118 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("public_id")), aval); }
 	goto st34;
-tr301:
-#line 91 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("public_id"), aval); }
+tr62:
+#line 118 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("public_id")), aval); }
+#line 119 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("system_id")), aval); }
 	goto st34;
 st34:
 	if ( ++p == pe )
-		goto _out34;
+		goto _test_eof34;
 case 34:
-#line 867 "ext/hpricot_scan/hpricot_scan.c"
+#line 1243 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 9: goto tr186;
-		case 32: goto tr186;
-		case 33: goto tr188;
-		case 39: goto tr42;
-		case 62: goto tr184;
-		case 91: goto tr185;
-		case 95: goto tr188;
+		case 9: goto tr52;
+		case 32: goto tr52;
+		case 33: goto tr54;
+		case 39: goto tr55;
+		case 62: goto tr56;
+		case 91: goto tr57;
+		case 95: goto tr54;
 	}
 	if ( (*p) < 40 ) {
 		if ( (*p) > 13 ) {
 			if ( 35 <= (*p) && (*p) <= 37 )
-				goto tr188;
+				goto tr54;
 		} else if ( (*p) >= 10 )
-			goto tr187;
+			goto tr53;
 	} else if ( (*p) > 59 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr188;
+				goto tr54;
 		} else if ( (*p) >= 61 )
-			goto tr188;
+			goto tr54;
 	} else
-		goto tr188;
-	goto tr182;
-tr186:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr54;
+	goto tr44;
+tr52:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st35;
 st35:
 	if ( ++p == pe )
-		goto _out35;
+		goto _test_eof35;
 case 35:
-#line 900 "ext/hpricot_scan/hpricot_scan.c"
+#line 1276 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 9: goto st35;
 		case 32: goto st35;
 		case 34: goto st37;
-		case 39: goto tr44;
-		case 62: goto tr40;
+		case 39: goto tr62;
+		case 62: goto tr63;
 		case 91: goto st40;
 		case 95: goto st47;
 	}
@@ -921,20 +1297,20 @@
 	} else
 		goto st47;
 	goto st29;
-tr187:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr53:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st36;
 st36:
 	if ( ++p == pe )
-		goto _out36;
+		goto _test_eof36;
 case 36:
-#line 933 "ext/hpricot_scan/hpricot_scan.c"
+#line 1309 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st36;
 		case 34: goto st37;
-		case 39: goto tr39;
-		case 62: goto tr40;
+		case 39: goto tr65;
+		case 62: goto tr63;
 		case 91: goto st40;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
@@ -942,217 +1318,223 @@
 	goto st29;
 st37:
 	if ( ++p == pe )
-		goto _out37;
+		goto _test_eof37;
 case 37:
 	switch( (*p) ) {
-		case 34: goto tr63;
-		case 39: goto tr224;
+		case 34: goto tr67;
+		case 39: goto tr68;
 	}
-	goto tr223;
-tr223:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr66;
+tr66:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st38;
 st38:
 	if ( ++p == pe )
-		goto _out38;
+		goto _test_eof38;
 case 38:
-#line 961 "ext/hpricot_scan/hpricot_scan.c"
+#line 1337 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 34: goto tr63;
-		case 39: goto tr64;
+		case 34: goto tr70;
+		case 39: goto tr71;
 	}
 	goto st38;
-tr63:
-#line 92 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("system_id"), aval); }
+tr81:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
 	goto st39;
-tr183:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr67:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
+#line 119 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("system_id")), aval); }
+	goto st39;
+tr70:
+#line 119 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("system_id")), aval); }
 	goto st39;
 st39:
 	if ( ++p == pe )
-		goto _out39;
+		goto _test_eof39;
 case 39:
-#line 979 "ext/hpricot_scan/hpricot_scan.c"
+#line 1361 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st39;
-		case 39: goto tr6;
-		case 62: goto tr40;
+		case 39: goto tr41;
+		case 62: goto tr63;
 		case 91: goto st40;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st39;
 	goto st29;
-tr40:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 66 "ext/hpricot_scan/hpricot_scan.rl"
+tr56:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 66 "hpricot_scan.rl"
 	{act = 8;}
 	goto st206;
-tr184:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-#line 66 "ext/hpricot_scan/hpricot_scan.rl"
+tr63:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 66 "hpricot_scan.rl"
 	{act = 8;}
 	goto st206;
 st206:
 	if ( ++p == pe )
-		goto _out206;
+		goto _test_eof206;
 case 206:
-#line 1007 "ext/hpricot_scan/hpricot_scan.c"
+#line 1389 "hpricot_scan.c"
 	if ( (*p) == 39 )
-		goto tr6;
+		goto tr41;
 	goto st29;
-tr185:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr57:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st40;
 st40:
 	if ( ++p == pe )
-		goto _out40;
+		goto _test_eof40;
 case 40:
-#line 1019 "ext/hpricot_scan/hpricot_scan.c"
+#line 1401 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 39: goto tr35;
+		case 39: goto tr73;
 		case 93: goto st42;
 	}
 	goto st40;
-tr35:
-#line 92 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("system_id"), aval); }
+tr73:
+#line 119 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("system_id")), aval); }
 	goto st41;
 st41:
 	if ( ++p == pe )
-		goto _out41;
+		goto _test_eof41;
 case 41:
-#line 1033 "ext/hpricot_scan/hpricot_scan.c"
+#line 1415 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st41;
-		case 62: goto tr27;
+		case 62: goto tr76;
 		case 93: goto st27;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st41;
 	goto st26;
-tr27:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 66 "ext/hpricot_scan/hpricot_scan.rl"
+tr76:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 66 "hpricot_scan.rl"
 	{act = 8;}
 	goto st207;
 st207:
 	if ( ++p == pe )
-		goto _out207;
+		goto _test_eof207;
 case 207:
-#line 1052 "ext/hpricot_scan/hpricot_scan.c"
+#line 1434 "hpricot_scan.c"
 	if ( (*p) == 93 )
 		goto st27;
 	goto st26;
 st42:
 	if ( ++p == pe )
-		goto _out42;
+		goto _test_eof42;
 case 42:
 	switch( (*p) ) {
 		case 32: goto st42;
-		case 39: goto tr6;
-		case 62: goto tr40;
+		case 39: goto tr41;
+		case 62: goto tr63;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st42;
 	goto st29;
-tr64:
-#line 92 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("system_id"), aval); }
-	goto st43;
-tr224:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr68:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 92 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("system_id"), aval); }
+#line 119 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("system_id")), aval); }
+	goto st43;
+tr71:
+#line 119 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("system_id")), aval); }
 	goto st43;
 st43:
 	if ( ++p == pe )
-		goto _out43;
+		goto _test_eof43;
 case 43:
-#line 1082 "ext/hpricot_scan/hpricot_scan.c"
+#line 1464 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st43;
-		case 34: goto tr6;
-		case 62: goto tr61;
+		case 34: goto tr41;
+		case 62: goto tr78;
 		case 91: goto st44;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st43;
 	goto st24;
-tr61:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 66 "ext/hpricot_scan/hpricot_scan.rl"
+tr78:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 66 "hpricot_scan.rl"
 	{act = 8;}
 	goto st208;
 st208:
 	if ( ++p == pe )
-		goto _out208;
+		goto _test_eof208;
 case 208:
-#line 1102 "ext/hpricot_scan/hpricot_scan.c"
+#line 1484 "hpricot_scan.c"
 	if ( (*p) == 34 )
-		goto tr6;
+		goto tr41;
 	goto st24;
 st44:
 	if ( ++p == pe )
-		goto _out44;
+		goto _test_eof44;
 case 44:
 	switch( (*p) ) {
-		case 34: goto tr35;
+		case 34: goto tr73;
 		case 93: goto st45;
 	}
 	goto st44;
 st45:
 	if ( ++p == pe )
-		goto _out45;
+		goto _test_eof45;
 case 45:
 	switch( (*p) ) {
 		case 32: goto st45;
-		case 34: goto tr6;
-		case 62: goto tr61;
+		case 34: goto tr41;
+		case 62: goto tr78;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st45;
 	goto st24;
-tr39:
-#line 92 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("system_id"), aval); }
+tr65:
+#line 119 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("system_id")), aval); }
 	goto st46;
 st46:
 	if ( ++p == pe )
-		goto _out46;
+		goto _test_eof46;
 case 46:
-#line 1135 "ext/hpricot_scan/hpricot_scan.c"
+#line 1517 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr183;
-		case 39: goto tr6;
-		case 62: goto tr184;
-		case 91: goto tr185;
+		case 32: goto tr81;
+		case 39: goto tr38;
+		case 62: goto tr56;
+		case 91: goto tr57;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
-		goto tr183;
-	goto tr182;
-tr188:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr81;
+	goto tr44;
+tr54:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st47;
 st47:
 	if ( ++p == pe )
-		goto _out47;
+		goto _test_eof47;
 case 47:
-#line 1153 "ext/hpricot_scan/hpricot_scan.c"
+#line 1535 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 9: goto st47;
-		case 39: goto tr42;
+		case 39: goto tr82;
 		case 61: goto st47;
 		case 95: goto st47;
 	}
@@ -1173,107 +1555,107 @@
 	goto st29;
 st48:
 	if ( ++p == pe )
-		goto _out48;
+		goto _test_eof48;
 case 48:
 	if ( (*p) == 89 )
 		goto st49;
-	goto tr296;
+	goto tr0;
 st49:
 	if ( ++p == pe )
-		goto _out49;
+		goto _test_eof49;
 case 49:
 	if ( (*p) == 83 )
 		goto st50;
-	goto tr296;
+	goto tr0;
 st50:
 	if ( ++p == pe )
-		goto _out50;
+		goto _test_eof50;
 case 50:
 	if ( (*p) == 84 )
 		goto st51;
-	goto tr296;
+	goto tr0;
 st51:
 	if ( ++p == pe )
-		goto _out51;
+		goto _test_eof51;
 case 51:
 	if ( (*p) == 69 )
 		goto st52;
-	goto tr296;
+	goto tr0;
 st52:
 	if ( ++p == pe )
-		goto _out52;
+		goto _test_eof52;
 case 52:
 	if ( (*p) == 77 )
 		goto st21;
-	goto tr296;
+	goto tr0;
 st53:
 	if ( ++p == pe )
-		goto _out53;
+		goto _test_eof53;
 case 53:
 	if ( (*p) == 67 )
 		goto st54;
-	goto tr296;
+	goto tr0;
 st54:
 	if ( ++p == pe )
-		goto _out54;
+		goto _test_eof54;
 case 54:
 	if ( (*p) == 68 )
 		goto st55;
-	goto tr296;
+	goto tr0;
 st55:
 	if ( ++p == pe )
-		goto _out55;
+		goto _test_eof55;
 case 55:
 	if ( (*p) == 65 )
 		goto st56;
-	goto tr296;
+	goto tr0;
 st56:
 	if ( ++p == pe )
-		goto _out56;
+		goto _test_eof56;
 case 56:
 	if ( (*p) == 84 )
 		goto st57;
-	goto tr296;
+	goto tr0;
 st57:
 	if ( ++p == pe )
-		goto _out57;
+		goto _test_eof57;
 case 57:
 	if ( (*p) == 65 )
 		goto st58;
-	goto tr296;
+	goto tr0;
 st58:
 	if ( ++p == pe )
-		goto _out58;
+		goto _test_eof58;
 case 58:
 	if ( (*p) == 91 )
-		goto tr355;
-	goto tr296;
+		goto tr93;
+	goto tr0;
 st59:
 	if ( ++p == pe )
-		goto _out59;
+		goto _test_eof59;
 case 59:
 	switch( (*p) ) {
-		case 58: goto tr338;
-		case 95: goto tr338;
+		case 58: goto tr94;
+		case 95: goto tr94;
 	}
 	if ( (*p) > 90 ) {
 		if ( 97 <= (*p) && (*p) <= 122 )
-			goto tr338;
+			goto tr94;
 	} else if ( (*p) >= 65 )
-		goto tr338;
-	goto tr296;
-tr338:
-#line 77 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr94;
+	goto tr0;
+tr94:
+#line 104 "hpricot_scan.rl"
 	{ mark_tag = p; }
 	goto st60;
 st60:
 	if ( ++p == pe )
-		goto _out60;
+		goto _test_eof60;
 case 60:
-#line 1274 "ext/hpricot_scan/hpricot_scan.c"
+#line 1656 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr332;
-		case 62: goto tr334;
+		case 32: goto tr95;
+		case 62: goto tr97;
 		case 63: goto st60;
 		case 95: goto st60;
 	}
@@ -1282,7 +1664,7 @@
 			if ( 45 <= (*p) && (*p) <= 46 )
 				goto st60;
 		} else if ( (*p) >= 9 )
-			goto tr332;
+			goto tr95;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
@@ -1291,42 +1673,42 @@
 			goto st60;
 	} else
 		goto st60;
-	goto tr296;
-tr332:
-#line 80 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr0;
+tr95:
+#line 107 "hpricot_scan.rl"
 	{ SET(tag, p); }
 	goto st61;
 st61:
 	if ( ++p == pe )
-		goto _out61;
+		goto _test_eof61;
 case 61:
-#line 1304 "ext/hpricot_scan/hpricot_scan.c"
+#line 1686 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st61;
-		case 62: goto tr314;
+		case 62: goto tr99;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st61;
-	goto tr296;
-tr21:
-#line 77 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr0;
+tr417:
+#line 104 "hpricot_scan.rl"
 	{ mark_tag = p; }
 	goto st62;
 st62:
 	if ( ++p == pe )
-		goto _out62;
+		goto _test_eof62;
 case 62:
-#line 1320 "ext/hpricot_scan/hpricot_scan.c"
+#line 1702 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr324;
-		case 47: goto tr326;
-		case 62: goto tr327;
+		case 32: goto tr100;
+		case 47: goto tr102;
+		case 62: goto tr103;
 		case 63: goto st62;
 		case 95: goto st62;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
-			goto tr324;
+			goto tr100;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
@@ -1335,22 +1717,22 @@
 			goto st62;
 	} else
 		goto st62;
-	goto tr296;
-tr324:
-#line 80 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr0;
+tr100:
+#line 107 "hpricot_scan.rl"
 	{ SET(tag, p); }
 	goto st63;
 st63:
 	if ( ++p == pe )
-		goto _out63;
+		goto _test_eof63;
 case 63:
-#line 1348 "ext/hpricot_scan/hpricot_scan.c"
+#line 1730 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st63;
 		case 47: goto st66;
-		case 62: goto tr318;
-		case 63: goto tr316;
-		case 95: goto tr316;
+		case 62: goto tr107;
+		case 63: goto tr105;
+		case 95: goto tr105;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
@@ -1358,54 +1740,54 @@
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr316;
+				goto tr105;
 		} else if ( (*p) >= 65 )
-			goto tr316;
+			goto tr105;
 	} else
-		goto tr316;
-	goto tr296;
-tr360:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    ATTR(akey, aval);
-  }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr105;
+	goto tr0;
+tr105:
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st64;
-tr316:
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+tr114:
+#line 128 "hpricot_scan.rl"
+	{ 
+    ATTR(akey, aval);
+  }
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st64;
 st64:
 	if ( ++p == pe )
-		goto _out64;
+		goto _test_eof64;
 case 64:
-#line 1398 "ext/hpricot_scan/hpricot_scan.c"
+#line 1780 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr364;
-		case 47: goto tr366;
-		case 61: goto tr367;
-		case 62: goto tr368;
+		case 32: goto tr108;
+		case 47: goto tr110;
+		case 61: goto tr111;
+		case 62: goto tr112;
 		case 63: goto st64;
 		case 95: goto st64;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
-			goto tr364;
+			goto tr108;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
@@ -1414,22 +1796,22 @@
 			goto st64;
 	} else
 		goto st64;
-	goto tr69;
-tr71:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr39;
+tr108:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+	goto st65;
+tr140:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st65;
-tr364:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr134:
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-	goto st65;
-tr132:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -1437,16 +1819,16 @@
 	goto st65;
 st65:
 	if ( ++p == pe )
-		goto _out65;
+		goto _test_eof65;
 case 65:
-#line 1443 "ext/hpricot_scan/hpricot_scan.c"
+#line 1825 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st65;
-		case 47: goto tr361;
+		case 47: goto tr115;
 		case 61: goto st67;
-		case 62: goto tr162;
-		case 63: goto tr360;
-		case 95: goto tr360;
+		case 62: goto tr117;
+		case 63: goto tr114;
+		case 95: goto tr114;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
@@ -1454,106 +1836,112 @@
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr360;
+				goto tr114;
 		} else if ( (*p) >= 65 )
-			goto tr360;
+			goto tr114;
 	} else
-		goto tr360;
-	goto tr69;
-tr361:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr114;
+	goto tr39;
+tr102:
+#line 107 "hpricot_scan.rl"
+	{ SET(tag, p); }
+	goto st66;
+tr110:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st66;
-tr366:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr115:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st66;
-tr326:
-#line 80 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(tag, p); }
-	goto st66;
 st66:
 	if ( ++p == pe )
-		goto _out66;
+		goto _test_eof66;
 case 66:
-#line 1486 "ext/hpricot_scan/hpricot_scan.c"
+#line 1868 "hpricot_scan.c"
 	if ( (*p) == 62 )
-		goto tr369;
-	goto tr69;
-tr367:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr118;
+	goto tr39;
+tr111:
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
 	goto st67;
 st67:
 	if ( ++p == pe )
-		goto _out67;
+		goto _test_eof67;
 case 67:
-#line 1498 "ext/hpricot_scan/hpricot_scan.c"
+#line 1880 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr157;
-		case 32: goto tr157;
+		case 13: goto tr120;
+		case 32: goto tr120;
 		case 34: goto st142;
 		case 39: goto st143;
-		case 47: goto tr161;
-		case 60: goto tr69;
-		case 62: goto tr162;
+		case 47: goto tr124;
+		case 60: goto tr39;
+		case 62: goto tr117;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr158;
+			goto tr121;
 	} else if ( (*p) >= 9 )
-		goto tr157;
-	goto tr156;
-tr156:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr120;
+	goto tr119;
+tr119:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st68;
 st68:
 	if ( ++p == pe )
-		goto _out68;
+		goto _test_eof68;
 case 68:
-#line 1522 "ext/hpricot_scan/hpricot_scan.c"
+#line 1904 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr66;
-		case 32: goto tr66;
-		case 47: goto tr68;
-		case 60: goto tr69;
-		case 62: goto tr70;
+		case 13: goto tr126;
+		case 32: goto tr126;
+		case 47: goto tr128;
+		case 60: goto tr39;
+		case 62: goto tr129;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr67;
+			goto tr127;
 	} else if ( (*p) >= 9 )
-		goto tr66;
+		goto tr126;
 	goto st68;
-tr3:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); }
-	goto st69;
-tr66:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr126:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st69;
+tr331:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st69;
+tr169:
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st69;
 st69:
 	if ( ++p == pe )
-		goto _out69;
+		goto _test_eof69;
 case 69:
-#line 1551 "ext/hpricot_scan/hpricot_scan.c"
+#line 1939 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st69;
-		case 47: goto tr361;
-		case 62: goto tr162;
-		case 63: goto tr360;
-		case 95: goto tr360;
+		case 47: goto tr115;
+		case 62: goto tr117;
+		case 63: goto tr114;
+		case 95: goto tr114;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
@@ -1561,105 +1949,111 @@
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr360;
+				goto tr114;
 		} else if ( (*p) >= 65 )
-			goto tr360;
+			goto tr114;
 	} else
-		goto tr360;
-	goto tr69;
-tr84:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); }
-	goto st70;
-tr67:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr114;
+	goto tr39;
+tr127:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st70;
+tr155:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st70;
+tr163:
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st70;
 st70:
 	if ( ++p == pe )
-		goto _out70;
+		goto _test_eof70;
 case 70:
-#line 1586 "ext/hpricot_scan/hpricot_scan.c"
+#line 1980 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr66;
-		case 32: goto tr66;
-		case 47: goto tr74;
-		case 60: goto tr69;
-		case 62: goto tr76;
-		case 63: goto tr73;
-		case 95: goto tr73;
+		case 13: goto tr126;
+		case 32: goto tr126;
+		case 47: goto tr132;
+		case 60: goto tr39;
+		case 62: goto tr133;
+		case 63: goto tr131;
+		case 95: goto tr131;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr67;
+				goto tr127;
 		} else if ( (*p) >= 9 )
-			goto tr66;
+			goto tr126;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr73;
+				goto tr131;
 		} else if ( (*p) >= 65 )
-			goto tr73;
+			goto tr131;
 	} else
-		goto tr73;
+		goto tr131;
 	goto st68;
-tr73:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr131:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st71;
-tr165:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr150:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st71;
 st71:
 	if ( ++p == pe )
-		goto _out71;
+		goto _test_eof71;
 case 71:
-#line 1647 "ext/hpricot_scan/hpricot_scan.c"
+#line 2041 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr132;
-		case 32: goto tr132;
-		case 47: goto tr135;
-		case 60: goto tr69;
-		case 61: goto tr136;
-		case 62: goto tr137;
+		case 13: goto tr134;
+		case 32: goto tr134;
+		case 47: goto tr137;
+		case 60: goto tr39;
+		case 61: goto tr138;
+		case 62: goto tr139;
 		case 63: goto st71;
 		case 95: goto st71;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr133;
+				goto tr135;
 		} else if ( (*p) >= 9 )
-			goto tr132;
+			goto tr134;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
@@ -1669,17 +2063,17 @@
 	} else
 		goto st71;
 	goto st68;
-tr72:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr141:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st72;
-tr133:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr135:
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -1687,98 +2081,98 @@
 	goto st72;
 st72:
 	if ( ++p == pe )
-		goto _out72;
+		goto _test_eof72;
 case 72:
-#line 1693 "ext/hpricot_scan/hpricot_scan.c"
+#line 2087 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr71;
-		case 32: goto tr71;
-		case 47: goto tr74;
-		case 60: goto tr69;
+		case 13: goto tr140;
+		case 32: goto tr140;
+		case 47: goto tr132;
+		case 60: goto tr39;
 		case 61: goto st74;
-		case 62: goto tr76;
-		case 63: goto tr73;
-		case 95: goto tr73;
+		case 62: goto tr133;
+		case 63: goto tr131;
+		case 95: goto tr131;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr72;
+				goto tr141;
 		} else if ( (*p) >= 9 )
-			goto tr71;
+			goto tr140;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr73;
+				goto tr131;
 		} else if ( (*p) >= 65 )
-			goto tr73;
+			goto tr131;
 	} else
-		goto tr73;
+		goto tr131;
 	goto st68;
-tr68:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr124:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 128 "hpricot_scan.rl"
+	{ 
+    ATTR(akey, aval);
+  }
+	goto st73;
+tr128:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st73;
-tr74:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr132:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st73;
-tr135:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr137:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    ATTR(akey, aval);
-  }
-	goto st73;
-tr161:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st73;
-tr230:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr147:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st73;
-tr231:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr151:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -1786,58 +2180,58 @@
 	goto st73;
 st73:
 	if ( ++p == pe )
-		goto _out73;
+		goto _test_eof73;
 case 73:
-#line 1792 "ext/hpricot_scan/hpricot_scan.c"
+#line 2186 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr66;
-		case 32: goto tr66;
-		case 47: goto tr68;
-		case 60: goto tr69;
-		case 62: goto tr70;
+		case 13: goto tr126;
+		case 32: goto tr126;
+		case 47: goto tr128;
+		case 60: goto tr39;
+		case 62: goto tr129;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr67;
+			goto tr127;
 	} else if ( (*p) >= 9 )
-		goto tr66;
+		goto tr126;
 	goto st68;
-tr136:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-	goto st74;
-tr158:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr121:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st74;
+tr138:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+	goto st74;
 st74:
 	if ( ++p == pe )
-		goto _out74;
+		goto _test_eof74;
 case 74:
-#line 1818 "ext/hpricot_scan/hpricot_scan.c"
+#line 2212 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr226;
-		case 32: goto tr226;
+		case 13: goto tr143;
+		case 32: goto tr143;
 		case 34: goto st77;
 		case 39: goto st141;
-		case 47: goto tr230;
-		case 60: goto tr69;
-		case 62: goto tr70;
+		case 47: goto tr147;
+		case 60: goto tr39;
+		case 62: goto tr129;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr227;
+			goto tr144;
 	} else if ( (*p) >= 9 )
-		goto tr226;
-	goto tr156;
-tr163:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr143;
+	goto tr119;
+tr148:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st75;
-tr226:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr143:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -1845,43 +2239,43 @@
 	goto st75;
 st75:
 	if ( ++p == pe )
-		goto _out75;
+		goto _test_eof75;
 case 75:
-#line 1851 "ext/hpricot_scan/hpricot_scan.c"
+#line 2245 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr163;
-		case 32: goto tr163;
+		case 13: goto tr148;
+		case 32: goto tr148;
 		case 34: goto st142;
 		case 39: goto st143;
-		case 47: goto tr161;
-		case 60: goto tr69;
-		case 62: goto tr162;
-		case 63: goto tr165;
-		case 95: goto tr165;
+		case 47: goto tr124;
+		case 60: goto tr39;
+		case 62: goto tr117;
+		case 63: goto tr150;
+		case 95: goto tr150;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr164;
+				goto tr149;
 		} else if ( (*p) >= 9 )
-			goto tr163;
+			goto tr148;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr165;
+				goto tr150;
 		} else if ( (*p) >= 65 )
-			goto tr165;
+			goto tr150;
 	} else
-		goto tr165;
-	goto tr156;
-tr164:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr150;
+	goto tr119;
+tr149:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st76;
-tr227:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr144:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -1889,121 +2283,121 @@
 	goto st76;
 st76:
 	if ( ++p == pe )
-		goto _out76;
+		goto _test_eof76;
 case 76:
-#line 1895 "ext/hpricot_scan/hpricot_scan.c"
+#line 2289 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr226;
-		case 32: goto tr226;
+		case 13: goto tr143;
+		case 32: goto tr143;
 		case 34: goto st77;
 		case 39: goto st141;
-		case 47: goto tr231;
-		case 60: goto tr69;
-		case 62: goto tr76;
-		case 63: goto tr165;
-		case 95: goto tr165;
+		case 47: goto tr151;
+		case 60: goto tr39;
+		case 62: goto tr133;
+		case 63: goto tr150;
+		case 95: goto tr150;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr227;
+				goto tr144;
 		} else if ( (*p) >= 9 )
-			goto tr226;
+			goto tr143;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr165;
+				goto tr150;
 		} else if ( (*p) >= 65 )
-			goto tr165;
+			goto tr150;
 	} else
-		goto tr165;
-	goto tr156;
+		goto tr150;
+	goto tr119;
 st77:
 	if ( ++p == pe )
-		goto _out77;
+		goto _test_eof77;
 case 77:
 	switch( (*p) ) {
-		case 13: goto tr248;
-		case 32: goto tr248;
-		case 34: goto tr84;
-		case 47: goto tr246;
-		case 60: goto tr199;
-		case 62: goto tr250;
-		case 92: goto tr195;
+		case 13: goto tr153;
+		case 32: goto tr153;
+		case 34: goto tr155;
+		case 47: goto tr156;
+		case 60: goto tr157;
+		case 62: goto tr158;
+		case 92: goto tr159;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr249;
+			goto tr154;
 	} else if ( (*p) >= 9 )
-		goto tr248;
-	goto tr189;
-tr189:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr153;
+	goto tr152;
+tr152:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st78;
 st78:
 	if ( ++p == pe )
-		goto _out78;
+		goto _test_eof78;
 case 78:
-#line 1949 "ext/hpricot_scan/hpricot_scan.c"
+#line 2343 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr92;
-		case 32: goto tr92;
-		case 34: goto tr84;
-		case 47: goto tr95;
+		case 13: goto tr161;
+		case 32: goto tr161;
+		case 34: goto tr163;
+		case 47: goto tr164;
 		case 60: goto st80;
-		case 62: goto tr96;
+		case 62: goto tr166;
 		case 92: goto st94;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr93;
+			goto tr162;
 	} else if ( (*p) >= 9 )
-		goto tr92;
+		goto tr161;
 	goto st78;
-tr11:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); }
+tr336:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
 	goto st79;
-tr92:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr161:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st79;
-tr201:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-	goto st79;
-tr216:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); }
-	goto st79;
-tr248:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr153:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st79;
+tr317:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st79;
+tr174:
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st79;
 st79:
 	if ( ++p == pe )
-		goto _out79;
+		goto _test_eof79;
 case 79:
-#line 1999 "ext/hpricot_scan/hpricot_scan.c"
+#line 2393 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st79;
-		case 34: goto tr3;
-		case 47: goto tr48;
-		case 62: goto tr50;
-		case 63: goto tr47;
+		case 34: goto tr169;
+		case 47: goto tr171;
+		case 62: goto tr172;
+		case 63: goto tr170;
 		case 92: goto st81;
-		case 95: goto tr47;
+		case 95: goto tr170;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
@@ -2011,90 +2405,90 @@
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr47;
+				goto tr170;
 		} else if ( (*p) >= 65 )
-			goto tr47;
+			goto tr170;
 	} else
-		goto tr47;
+		goto tr170;
 	goto st80;
-tr199:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr157:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st80;
 st80:
 	if ( ++p == pe )
-		goto _out80;
+		goto _test_eof80;
 case 80:
-#line 2029 "ext/hpricot_scan/hpricot_scan.c"
+#line 2423 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 34: goto tr3;
+		case 34: goto tr169;
 		case 92: goto st81;
 	}
 	goto st80;
-tr200:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr340:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st81;
 st81:
 	if ( ++p == pe )
-		goto _out81;
+		goto _test_eof81;
 case 81:
-#line 2043 "ext/hpricot_scan/hpricot_scan.c"
+#line 2437 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 34: goto tr11;
+		case 34: goto tr174;
 		case 92: goto st81;
 	}
 	goto st80;
-tr47:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr170:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st82;
-tr202:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr337:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st82;
 st82:
 	if ( ++p == pe )
-		goto _out82;
+		goto _test_eof82;
 case 82:
-#line 2085 "ext/hpricot_scan/hpricot_scan.c"
+#line 2479 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr122;
-		case 34: goto tr3;
-		case 47: goto tr124;
-		case 61: goto tr125;
-		case 62: goto tr126;
+		case 32: goto tr175;
+		case 34: goto tr169;
+		case 47: goto tr177;
+		case 61: goto tr178;
+		case 62: goto tr179;
 		case 63: goto st82;
 		case 92: goto st81;
 		case 95: goto st82;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
-			goto tr122;
+			goto tr175;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
@@ -2104,21 +2498,21 @@
 	} else
 		goto st82;
 	goto st80;
-tr98:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr175:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+	goto st83;
+tr206:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st83;
-tr122:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-	goto st83;
-tr144:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr200:
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -2126,18 +2520,18 @@
 	goto st83;
 st83:
 	if ( ++p == pe )
-		goto _out83;
+		goto _test_eof83;
 case 83:
-#line 2132 "ext/hpricot_scan/hpricot_scan.c"
+#line 2526 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st83;
-		case 34: goto tr3;
-		case 47: goto tr48;
+		case 34: goto tr169;
+		case 47: goto tr171;
 		case 61: goto st85;
-		case 62: goto tr50;
-		case 63: goto tr47;
+		case 62: goto tr172;
+		case 63: goto tr170;
 		case 92: goto st81;
-		case 95: goto tr47;
+		case 95: goto tr170;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
@@ -2145,234 +2539,234 @@
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr47;
+				goto tr170;
 		} else if ( (*p) >= 65 )
-			goto tr47;
+			goto tr170;
 	} else
-		goto tr47;
+		goto tr170;
 	goto st80;
-tr48:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr177:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st84;
-tr124:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr171:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st84;
-tr203:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr338:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st84;
 st84:
 	if ( ++p == pe )
-		goto _out84;
+		goto _test_eof84;
 case 84:
-#line 2181 "ext/hpricot_scan/hpricot_scan.c"
+#line 2575 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 34: goto tr3;
-		case 62: goto tr45;
+		case 34: goto tr169;
+		case 62: goto tr182;
 		case 92: goto st81;
 	}
 	goto st80;
-tr45:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 70 "ext/hpricot_scan/hpricot_scan.rl"
-	{act = 12;}
-	goto st209;
-tr50:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr158:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 110 "hpricot_scan.rl"
+	{ 
+    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
+    else { SET(aval, p); }
+  }
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st209;
-tr96:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr166:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st209;
-tr103:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr172:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
-    else { SET(aval, p); }
-  }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st209;
-tr126:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr179:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st209;
-tr149:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr182:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 70 "hpricot_scan.rl"
+	{act = 12;}
+	goto st209;
+tr196:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 128 "hpricot_scan.rl"
 	{ 
-    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
-    else { SET(aval, p); }
+    ATTR(akey, aval);
   }
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
-    ATTR(akey, aval);
+    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
+    else { SET(aval, p); }
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st209;
-tr204:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr197:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
+	{ 
+    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
+    else { SET(aval, p); }
+  }
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st209;
-tr250:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr205:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st209;
-tr251:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr339:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
-    else { SET(aval, p); }
-  }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st209;
 st209:
 	if ( ++p == pe )
-		goto _out209;
+		goto _test_eof209;
 case 209:
-#line 2313 "ext/hpricot_scan/hpricot_scan.c"
+#line 2707 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 34: goto tr3;
+		case 34: goto tr169;
 		case 92: goto st81;
 	}
 	goto st80;
-tr125:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr178:
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
 	goto st85;
 st85:
 	if ( ++p == pe )
-		goto _out85;
+		goto _test_eof85;
 case 85:
-#line 2327 "ext/hpricot_scan/hpricot_scan.c"
+#line 2721 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr190;
-		case 32: goto tr190;
-		case 34: goto tr192;
+		case 13: goto tr183;
+		case 32: goto tr183;
+		case 34: goto tr185;
 		case 39: goto st140;
-		case 47: goto tr194;
+		case 47: goto tr187;
 		case 60: goto st80;
-		case 62: goto tr50;
-		case 92: goto tr195;
+		case 62: goto tr172;
+		case 92: goto tr159;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr191;
+			goto tr184;
 	} else if ( (*p) >= 9 )
-		goto tr190;
-	goto tr189;
-tr190:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr183;
+	goto tr152;
+tr183:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st86;
 st86:
 	if ( ++p == pe )
-		goto _out86;
+		goto _test_eof86;
 case 86:
-#line 2352 "ext/hpricot_scan/hpricot_scan.c"
+#line 2746 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr196;
-		case 32: goto tr196;
-		case 34: goto tr192;
+		case 13: goto tr188;
+		case 32: goto tr188;
+		case 34: goto tr185;
 		case 39: goto st140;
-		case 47: goto tr194;
+		case 47: goto tr187;
 		case 60: goto st80;
-		case 62: goto tr50;
-		case 92: goto tr195;
+		case 62: goto tr172;
+		case 92: goto tr159;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr197;
+			goto tr189;
 	} else if ( (*p) >= 9 )
-		goto tr196;
-	goto tr189;
-tr196:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr188;
+	goto tr152;
+tr188:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st87;
-tr242:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr191:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -2380,44 +2774,44 @@
 	goto st87;
 st87:
 	if ( ++p == pe )
-		goto _out87;
+		goto _test_eof87;
 case 87:
-#line 2386 "ext/hpricot_scan/hpricot_scan.c"
+#line 2780 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr196;
-		case 32: goto tr196;
-		case 34: goto tr192;
+		case 13: goto tr188;
+		case 32: goto tr188;
+		case 34: goto tr185;
 		case 39: goto st140;
-		case 47: goto tr194;
+		case 47: goto tr187;
 		case 60: goto st80;
-		case 62: goto tr50;
-		case 63: goto tr198;
-		case 92: goto tr195;
-		case 95: goto tr198;
+		case 62: goto tr172;
+		case 63: goto tr190;
+		case 92: goto tr159;
+		case 95: goto tr190;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr197;
+				goto tr189;
 		} else if ( (*p) >= 9 )
-			goto tr196;
+			goto tr188;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr198;
+				goto tr190;
 		} else if ( (*p) >= 65 )
-			goto tr198;
+			goto tr190;
 	} else
-		goto tr198;
-	goto tr189;
-tr197:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr190;
+	goto tr152;
+tr189:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st88;
-tr243:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr192:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -2425,173 +2819,173 @@
 	goto st88;
 st88:
 	if ( ++p == pe )
-		goto _out88;
+		goto _test_eof88;
 case 88:
-#line 2431 "ext/hpricot_scan/hpricot_scan.c"
+#line 2825 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr242;
-		case 32: goto tr242;
-		case 34: goto tr244;
+		case 13: goto tr191;
+		case 32: goto tr191;
+		case 34: goto tr193;
 		case 39: goto st96;
-		case 47: goto tr247;
+		case 47: goto tr195;
 		case 60: goto st80;
-		case 62: goto tr103;
-		case 63: goto tr198;
-		case 92: goto tr195;
-		case 95: goto tr198;
+		case 62: goto tr196;
+		case 63: goto tr190;
+		case 92: goto tr159;
+		case 95: goto tr190;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr243;
+				goto tr192;
 		} else if ( (*p) >= 9 )
-			goto tr242;
+			goto tr191;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr198;
+				goto tr190;
 		} else if ( (*p) >= 65 )
-			goto tr198;
+			goto tr190;
 	} else
-		goto tr198;
-	goto tr189;
-tr244:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr190;
+	goto tr152;
+tr193:
+#line 109 "hpricot_scan.rl"
 	{ SET(aval, p); }
 	goto st89;
 st89:
 	if ( ++p == pe )
-		goto _out89;
+		goto _test_eof89;
 case 89:
-#line 2467 "ext/hpricot_scan/hpricot_scan.c"
+#line 2861 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr248;
-		case 32: goto tr248;
-		case 34: goto tr84;
-		case 47: goto tr247;
-		case 60: goto tr199;
-		case 62: goto tr251;
-		case 63: goto tr198;
-		case 92: goto tr195;
-		case 95: goto tr198;
+		case 13: goto tr153;
+		case 32: goto tr153;
+		case 34: goto tr155;
+		case 47: goto tr195;
+		case 60: goto tr157;
+		case 62: goto tr197;
+		case 63: goto tr190;
+		case 92: goto tr159;
+		case 95: goto tr190;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr249;
+				goto tr154;
 		} else if ( (*p) >= 9 )
-			goto tr248;
+			goto tr153;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr198;
+				goto tr190;
 		} else if ( (*p) >= 65 )
-			goto tr198;
+			goto tr190;
 	} else
-		goto tr198;
-	goto tr189;
-tr94:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); }
-	goto st90;
-tr93:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr190;
+	goto tr152;
+tr162:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st90;
-tr260:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); }
-	goto st90;
-tr249:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr154:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st90;
+tr214:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st90;
+tr209:
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st90;
 st90:
 	if ( ++p == pe )
-		goto _out90;
+		goto _test_eof90;
 case 90:
-#line 2524 "ext/hpricot_scan/hpricot_scan.c"
+#line 2918 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr92;
-		case 32: goto tr92;
-		case 34: goto tr84;
-		case 47: goto tr101;
+		case 13: goto tr161;
+		case 32: goto tr161;
+		case 34: goto tr163;
+		case 47: goto tr199;
 		case 60: goto st80;
-		case 62: goto tr103;
-		case 63: goto tr100;
+		case 62: goto tr196;
+		case 63: goto tr198;
 		case 92: goto st94;
-		case 95: goto tr100;
+		case 95: goto tr198;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr93;
+				goto tr162;
 		} else if ( (*p) >= 9 )
-			goto tr92;
+			goto tr161;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr100;
+				goto tr198;
 		} else if ( (*p) >= 65 )
-			goto tr100;
+			goto tr198;
 	} else
-		goto tr100;
+		goto tr198;
 	goto st78;
-tr100:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr198:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st91;
-tr198:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr190:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st91;
 st91:
 	if ( ++p == pe )
-		goto _out91;
+		goto _test_eof91;
 case 91:
-#line 2587 "ext/hpricot_scan/hpricot_scan.c"
+#line 2981 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr144;
-		case 32: goto tr144;
-		case 34: goto tr84;
-		case 47: goto tr147;
+		case 13: goto tr200;
+		case 32: goto tr200;
+		case 34: goto tr163;
+		case 47: goto tr203;
 		case 60: goto st80;
-		case 61: goto tr148;
-		case 62: goto tr149;
+		case 61: goto tr204;
+		case 62: goto tr205;
 		case 63: goto st91;
 		case 92: goto st94;
 		case 95: goto st91;
@@ -2599,9 +2993,9 @@
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr145;
+				goto tr201;
 		} else if ( (*p) >= 9 )
-			goto tr144;
+			goto tr200;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
@@ -2611,17 +3005,17 @@
 	} else
 		goto st91;
 	goto st78;
-tr99:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr207:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st92;
-tr145:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr201:
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -2629,100 +3023,100 @@
 	goto st92;
 st92:
 	if ( ++p == pe )
-		goto _out92;
+		goto _test_eof92;
 case 92:
-#line 2635 "ext/hpricot_scan/hpricot_scan.c"
+#line 3029 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr98;
-		case 32: goto tr98;
-		case 34: goto tr84;
-		case 47: goto tr101;
+		case 13: goto tr206;
+		case 32: goto tr206;
+		case 34: goto tr163;
+		case 47: goto tr199;
 		case 60: goto st80;
 		case 61: goto st95;
-		case 62: goto tr103;
-		case 63: goto tr100;
+		case 62: goto tr196;
+		case 63: goto tr198;
 		case 92: goto st94;
-		case 95: goto tr100;
+		case 95: goto tr198;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr99;
+				goto tr207;
 		} else if ( (*p) >= 9 )
-			goto tr98;
+			goto tr206;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr100;
+				goto tr198;
 		} else if ( (*p) >= 65 )
-			goto tr100;
+			goto tr198;
 	} else
-		goto tr100;
+		goto tr198;
 	goto st78;
-tr95:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr187:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 128 "hpricot_scan.rl"
+	{ 
+    ATTR(akey, aval);
+  }
+	goto st93;
+tr164:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st93;
-tr101:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr199:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st93;
-tr147:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr203:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st93;
-tr194:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    ATTR(akey, aval);
-  }
-	goto st93;
-tr246:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr156:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st93;
-tr247:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr195:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -2730,160 +3124,160 @@
 	goto st93;
 st93:
 	if ( ++p == pe )
-		goto _out93;
+		goto _test_eof93;
 case 93:
-#line 2736 "ext/hpricot_scan/hpricot_scan.c"
+#line 3130 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr92;
-		case 32: goto tr92;
-		case 34: goto tr84;
-		case 47: goto tr95;
+		case 13: goto tr161;
+		case 32: goto tr161;
+		case 34: goto tr163;
+		case 47: goto tr164;
 		case 60: goto st80;
-		case 62: goto tr96;
+		case 62: goto tr166;
 		case 92: goto st94;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr93;
+			goto tr162;
 	} else if ( (*p) >= 9 )
-		goto tr92;
+		goto tr161;
 	goto st78;
-tr195:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr159:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st94;
 st94:
 	if ( ++p == pe )
-		goto _out94;
+		goto _test_eof94;
 case 94:
-#line 2760 "ext/hpricot_scan/hpricot_scan.c"
+#line 3154 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr92;
-		case 32: goto tr92;
-		case 34: goto tr94;
-		case 47: goto tr95;
+		case 13: goto tr161;
+		case 32: goto tr161;
+		case 34: goto tr209;
+		case 47: goto tr164;
 		case 60: goto st80;
-		case 62: goto tr96;
+		case 62: goto tr166;
 		case 92: goto st94;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr93;
+			goto tr162;
 	} else if ( (*p) >= 9 )
-		goto tr92;
+		goto tr161;
 	goto st78;
-tr148:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-	goto st95;
-tr191:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr184:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st95;
+tr204:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+	goto st95;
 st95:
 	if ( ++p == pe )
-		goto _out95;
+		goto _test_eof95;
 case 95:
-#line 2788 "ext/hpricot_scan/hpricot_scan.c"
+#line 3182 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr242;
-		case 32: goto tr242;
-		case 34: goto tr244;
+		case 13: goto tr191;
+		case 32: goto tr191;
+		case 34: goto tr193;
 		case 39: goto st96;
-		case 47: goto tr246;
+		case 47: goto tr156;
 		case 60: goto st80;
-		case 62: goto tr96;
-		case 92: goto tr195;
+		case 62: goto tr166;
+		case 92: goto tr159;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr243;
+			goto tr192;
 	} else if ( (*p) >= 9 )
-		goto tr242;
-	goto tr189;
+		goto tr191;
+	goto tr152;
 st96:
 	if ( ++p == pe )
-		goto _out96;
+		goto _test_eof96;
 case 96:
 	switch( (*p) ) {
-		case 13: goto tr258;
-		case 32: goto tr258;
-		case 34: goto tr263;
-		case 39: goto tr94;
-		case 47: goto tr256;
-		case 60: goto tr215;
-		case 62: goto tr261;
-		case 92: goto tr211;
+		case 13: goto tr211;
+		case 32: goto tr211;
+		case 34: goto tr213;
+		case 39: goto tr214;
+		case 47: goto tr215;
+		case 60: goto tr216;
+		case 62: goto tr217;
+		case 92: goto tr218;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr259;
+			goto tr212;
 	} else if ( (*p) >= 9 )
-		goto tr258;
-	goto tr205;
-tr205:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr211;
+	goto tr210;
+tr210:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st97;
 st97:
 	if ( ++p == pe )
-		goto _out97;
+		goto _test_eof97;
 case 97:
-#line 2833 "ext/hpricot_scan/hpricot_scan.c"
+#line 3227 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr105;
-		case 32: goto tr105;
-		case 34: goto tr80;
-		case 39: goto tr94;
-		case 47: goto tr108;
+		case 13: goto tr220;
+		case 32: goto tr220;
+		case 34: goto tr222;
+		case 39: goto tr209;
+		case 47: goto tr223;
 		case 60: goto st99;
-		case 62: goto tr109;
+		case 62: goto tr225;
 		case 92: goto st129;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr106;
+			goto tr221;
 	} else if ( (*p) >= 9 )
-		goto tr105;
+		goto tr220;
 	goto st97;
-tr51:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); }
+tr315:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
 	goto st98;
-tr105:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr220:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st98;
-tr218:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-	goto st98;
-tr258:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr211:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st98;
+tr299:
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st98;
 st98:
 	if ( ++p == pe )
-		goto _out98;
+		goto _test_eof98;
 case 98:
-#line 2878 "ext/hpricot_scan/hpricot_scan.c"
+#line 3272 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st98;
-		case 34: goto tr10;
-		case 39: goto tr11;
-		case 47: goto tr55;
-		case 62: goto tr57;
-		case 63: goto tr54;
+		case 34: goto tr228;
+		case 39: goto tr174;
+		case 47: goto tr230;
+		case 62: goto tr231;
+		case 63: goto tr229;
 		case 92: goto st122;
-		case 95: goto tr54;
+		case 95: goto tr229;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
@@ -2891,70 +3285,76 @@
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr54;
+				goto tr229;
 		} else if ( (*p) >= 65 )
-			goto tr54;
+			goto tr229;
 	} else
-		goto tr54;
+		goto tr229;
 	goto st99;
-tr215:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr216:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st99;
 st99:
 	if ( ++p == pe )
-		goto _out99;
+		goto _test_eof99;
 case 99:
-#line 2909 "ext/hpricot_scan/hpricot_scan.c"
+#line 3303 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 34: goto tr10;
-		case 39: goto tr11;
+		case 34: goto tr228;
+		case 39: goto tr174;
 		case 92: goto st122;
 	}
 	goto st99;
-tr10:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); }
+tr330:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
 	goto st100;
-tr78:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr255:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st100;
-tr178:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-	goto st100;
-tr225:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); }
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-	goto st100;
-tr238:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr326:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st100;
+tr316:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st100;
+tr228:
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st100;
+tr322:
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+	goto st100;
 st100:
 	if ( ++p == pe )
-		goto _out100;
+		goto _test_eof100;
 case 100:
-#line 2950 "ext/hpricot_scan/hpricot_scan.c"
+#line 3350 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st100;
-		case 39: goto tr3;
-		case 47: goto tr31;
-		case 62: goto tr33;
-		case 63: goto tr30;
+		case 39: goto tr169;
+		case 47: goto tr236;
+		case 62: goto tr237;
+		case 63: goto tr235;
 		case 92: goto st102;
-		case 95: goto tr30;
+		case 95: goto tr235;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
@@ -2962,90 +3362,90 @@
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr30;
+				goto tr235;
 		} else if ( (*p) >= 65 )
-			goto tr30;
+			goto tr235;
 	} else
-		goto tr30;
+		goto tr235;
 	goto st101;
-tr176:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr328:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st101;
 st101:
 	if ( ++p == pe )
-		goto _out101;
+		goto _test_eof101;
 case 101:
-#line 2980 "ext/hpricot_scan/hpricot_scan.c"
+#line 3380 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 39: goto tr3;
+		case 39: goto tr169;
 		case 92: goto st102;
 	}
 	goto st101;
-tr177:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr335:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st102;
 st102:
 	if ( ++p == pe )
-		goto _out102;
+		goto _test_eof102;
 case 102:
-#line 2994 "ext/hpricot_scan/hpricot_scan.c"
+#line 3394 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 39: goto tr10;
+		case 39: goto tr228;
 		case 92: goto st102;
 	}
 	goto st101;
-tr30:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr235:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st103;
-tr179:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr332:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st103;
 st103:
 	if ( ++p == pe )
-		goto _out103;
+		goto _test_eof103;
 case 103:
-#line 3036 "ext/hpricot_scan/hpricot_scan.c"
+#line 3436 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr117;
-		case 39: goto tr3;
-		case 47: goto tr119;
-		case 61: goto tr120;
-		case 62: goto tr121;
+		case 32: goto tr239;
+		case 39: goto tr169;
+		case 47: goto tr241;
+		case 61: goto tr242;
+		case 62: goto tr243;
 		case 63: goto st103;
 		case 92: goto st102;
 		case 95: goto st103;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
-			goto tr117;
+			goto tr239;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
@@ -3055,21 +3455,21 @@
 	} else
 		goto st103;
 	goto st101;
-tr85:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr239:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+	goto st104;
+tr269:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st104;
-tr117:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-	goto st104;
-tr138:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr263:
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -3077,18 +3477,18 @@
 	goto st104;
 st104:
 	if ( ++p == pe )
-		goto _out104;
+		goto _test_eof104;
 case 104:
-#line 3083 "ext/hpricot_scan/hpricot_scan.c"
+#line 3483 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st104;
-		case 39: goto tr3;
-		case 47: goto tr31;
+		case 39: goto tr169;
+		case 47: goto tr236;
 		case 61: goto st106;
-		case 62: goto tr33;
-		case 63: goto tr30;
+		case 62: goto tr237;
+		case 63: goto tr235;
 		case 92: goto st102;
-		case 95: goto tr30;
+		case 95: goto tr235;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
@@ -3096,327 +3496,333 @@
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr30;
+				goto tr235;
 		} else if ( (*p) >= 65 )
-			goto tr30;
+			goto tr235;
 	} else
-		goto tr30;
+		goto tr235;
 	goto st101;
-tr31:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr241:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st105;
-tr119:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr236:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st105;
-tr180:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr333:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st105;
 st105:
 	if ( ++p == pe )
-		goto _out105;
+		goto _test_eof105;
 case 105:
-#line 3132 "ext/hpricot_scan/hpricot_scan.c"
+#line 3532 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 39: goto tr3;
-		case 62: goto tr28;
+		case 39: goto tr169;
+		case 62: goto tr246;
 		case 92: goto st102;
 	}
 	goto st101;
-tr28:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 70 "ext/hpricot_scan/hpricot_scan.rl"
-	{act = 12;}
-	goto st210;
-tr33:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr341:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 110 "hpricot_scan.rl"
+	{ 
+    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
+    else { SET(aval, p); }
+  }
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st210;
-tr82:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr258:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st210;
-tr90:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr237:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
-    else { SET(aval, p); }
-  }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st210;
-tr121:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr243:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st210;
-tr143:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr246:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 70 "hpricot_scan.rl"
+	{act = 12;}
+	goto st210;
+tr262:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 128 "hpricot_scan.rl"
 	{ 
-    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
-    else { SET(aval, p); }
+    ATTR(akey, aval);
   }
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
-    ATTR(akey, aval);
+    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
+    else { SET(aval, p); }
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st210;
-tr181:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr329:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
+	{ 
+    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
+    else { SET(aval, p); }
+  }
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st210;
-tr240:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr268:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st210;
-tr241:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr334:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
-    else { SET(aval, p); }
-  }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st210;
 st210:
 	if ( ++p == pe )
-		goto _out210;
+		goto _test_eof210;
 case 210:
-#line 3264 "ext/hpricot_scan/hpricot_scan.c"
+#line 3664 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 39: goto tr3;
+		case 39: goto tr169;
 		case 92: goto st102;
 	}
 	goto st101;
-tr120:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr242:
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
 	goto st106;
 st106:
 	if ( ++p == pe )
-		goto _out106;
+		goto _test_eof106;
 case 106:
-#line 3278 "ext/hpricot_scan/hpricot_scan.c"
+#line 3678 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr167;
-		case 32: goto tr167;
+		case 13: goto tr248;
+		case 32: goto tr248;
 		case 34: goto st136;
-		case 39: goto tr170;
-		case 47: goto tr171;
+		case 39: goto tr251;
+		case 47: goto tr252;
 		case 60: goto st101;
-		case 62: goto tr33;
-		case 92: goto tr172;
+		case 62: goto tr237;
+		case 92: goto tr253;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr168;
+			goto tr249;
 	} else if ( (*p) >= 9 )
-		goto tr167;
-	goto tr166;
-tr166:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr248;
+	goto tr247;
+tr247:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st107;
 st107:
 	if ( ++p == pe )
-		goto _out107;
+		goto _test_eof107;
 case 107:
-#line 3303 "ext/hpricot_scan/hpricot_scan.c"
+#line 3703 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr78;
-		case 32: goto tr78;
-		case 39: goto tr84;
-		case 47: goto tr81;
+		case 13: goto tr255;
+		case 32: goto tr255;
+		case 39: goto tr163;
+		case 47: goto tr257;
 		case 60: goto st101;
-		case 62: goto tr82;
+		case 62: goto tr258;
 		case 92: goto st112;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr79;
+			goto tr256;
 	} else if ( (*p) >= 9 )
-		goto tr78;
+		goto tr255;
 	goto st107;
-tr80:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); }
-	goto st108;
-tr79:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr256:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st108;
-tr263:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); }
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-	goto st108;
-tr239:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr327:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st108;
+tr281:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st108;
+tr222:
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st108;
+tr213:
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+	goto st108;
 st108:
 	if ( ++p == pe )
-		goto _out108;
+		goto _test_eof108;
 case 108:
-#line 3349 "ext/hpricot_scan/hpricot_scan.c"
+#line 3755 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr78;
-		case 32: goto tr78;
-		case 39: goto tr84;
-		case 47: goto tr88;
+		case 13: goto tr255;
+		case 32: goto tr255;
+		case 39: goto tr163;
+		case 47: goto tr261;
 		case 60: goto st101;
-		case 62: goto tr90;
-		case 63: goto tr87;
+		case 62: goto tr262;
+		case 63: goto tr260;
 		case 92: goto st112;
-		case 95: goto tr87;
+		case 95: goto tr260;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr79;
+				goto tr256;
 		} else if ( (*p) >= 9 )
-			goto tr78;
+			goto tr255;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr87;
+				goto tr260;
 		} else if ( (*p) >= 65 )
-			goto tr87;
+			goto tr260;
 	} else
-		goto tr87;
+		goto tr260;
 	goto st107;
-tr87:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr260:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st109;
-tr175:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr279:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st109;
 st109:
 	if ( ++p == pe )
-		goto _out109;
+		goto _test_eof109;
 case 109:
-#line 3412 "ext/hpricot_scan/hpricot_scan.c"
+#line 3818 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr138;
-		case 32: goto tr138;
-		case 39: goto tr84;
-		case 47: goto tr141;
+		case 13: goto tr263;
+		case 32: goto tr263;
+		case 39: goto tr163;
+		case 47: goto tr266;
 		case 60: goto st101;
-		case 61: goto tr142;
-		case 62: goto tr143;
+		case 61: goto tr267;
+		case 62: goto tr268;
 		case 63: goto st109;
 		case 92: goto st112;
 		case 95: goto st109;
@@ -3424,9 +3830,9 @@
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr139;
+				goto tr264;
 		} else if ( (*p) >= 9 )
-			goto tr138;
+			goto tr263;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
@@ -3436,17 +3842,17 @@
 	} else
 		goto st109;
 	goto st107;
-tr86:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr270:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st110;
-tr139:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr264:
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -3454,100 +3860,100 @@
 	goto st110;
 st110:
 	if ( ++p == pe )
-		goto _out110;
+		goto _test_eof110;
 case 110:
-#line 3460 "ext/hpricot_scan/hpricot_scan.c"
+#line 3866 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr85;
-		case 32: goto tr85;
-		case 39: goto tr84;
-		case 47: goto tr88;
+		case 13: goto tr269;
+		case 32: goto tr269;
+		case 39: goto tr163;
+		case 47: goto tr261;
 		case 60: goto st101;
 		case 61: goto st113;
-		case 62: goto tr90;
-		case 63: goto tr87;
+		case 62: goto tr262;
+		case 63: goto tr260;
 		case 92: goto st112;
-		case 95: goto tr87;
+		case 95: goto tr260;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr86;
+				goto tr270;
 		} else if ( (*p) >= 9 )
-			goto tr85;
+			goto tr269;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr87;
+				goto tr260;
 		} else if ( (*p) >= 65 )
-			goto tr87;
+			goto tr260;
 	} else
-		goto tr87;
+		goto tr260;
 	goto st107;
-tr81:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr252:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 128 "hpricot_scan.rl"
+	{ 
+    ATTR(akey, aval);
+  }
+	goto st111;
+tr257:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st111;
-tr88:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr261:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st111;
-tr141:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr266:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    ATTR(akey, aval);
-  }
-	goto st111;
-tr171:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st111;
-tr236:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr276:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st111;
-tr237:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr280:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -3555,85 +3961,85 @@
 	goto st111;
 st111:
 	if ( ++p == pe )
-		goto _out111;
+		goto _test_eof111;
 case 111:
-#line 3561 "ext/hpricot_scan/hpricot_scan.c"
+#line 3967 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr78;
-		case 32: goto tr78;
-		case 39: goto tr84;
-		case 47: goto tr81;
+		case 13: goto tr255;
+		case 32: goto tr255;
+		case 39: goto tr163;
+		case 47: goto tr257;
 		case 60: goto st101;
-		case 62: goto tr82;
+		case 62: goto tr258;
 		case 92: goto st112;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr79;
+			goto tr256;
 	} else if ( (*p) >= 9 )
-		goto tr78;
+		goto tr255;
 	goto st107;
-tr172:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr253:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st112;
 st112:
 	if ( ++p == pe )
-		goto _out112;
+		goto _test_eof112;
 case 112:
-#line 3585 "ext/hpricot_scan/hpricot_scan.c"
+#line 3991 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr78;
-		case 32: goto tr78;
-		case 39: goto tr80;
-		case 47: goto tr81;
+		case 13: goto tr255;
+		case 32: goto tr255;
+		case 39: goto tr222;
+		case 47: goto tr257;
 		case 60: goto st101;
-		case 62: goto tr82;
+		case 62: goto tr258;
 		case 92: goto st112;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr79;
+			goto tr256;
 	} else if ( (*p) >= 9 )
-		goto tr78;
+		goto tr255;
 	goto st107;
-tr142:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-	goto st113;
-tr168:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr249:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st113;
+tr267:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+	goto st113;
 st113:
 	if ( ++p == pe )
-		goto _out113;
+		goto _test_eof113;
 case 113:
-#line 3613 "ext/hpricot_scan/hpricot_scan.c"
+#line 4019 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr232;
-		case 32: goto tr232;
+		case 13: goto tr272;
+		case 32: goto tr272;
 		case 34: goto st116;
-		case 39: goto tr235;
-		case 47: goto tr236;
+		case 39: goto tr275;
+		case 47: goto tr276;
 		case 60: goto st101;
-		case 62: goto tr82;
-		case 92: goto tr172;
+		case 62: goto tr258;
+		case 92: goto tr253;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr233;
+			goto tr273;
 	} else if ( (*p) >= 9 )
-		goto tr232;
-	goto tr166;
-tr173:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr272;
+	goto tr247;
+tr277:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st114;
-tr232:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr272:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -3641,44 +4047,44 @@
 	goto st114;
 st114:
 	if ( ++p == pe )
-		goto _out114;
+		goto _test_eof114;
 case 114:
-#line 3647 "ext/hpricot_scan/hpricot_scan.c"
+#line 4053 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr173;
-		case 32: goto tr173;
+		case 13: goto tr277;
+		case 32: goto tr277;
 		case 34: goto st136;
-		case 39: goto tr170;
-		case 47: goto tr171;
+		case 39: goto tr251;
+		case 47: goto tr252;
 		case 60: goto st101;
-		case 62: goto tr33;
-		case 63: goto tr175;
-		case 92: goto tr172;
-		case 95: goto tr175;
+		case 62: goto tr237;
+		case 63: goto tr279;
+		case 92: goto tr253;
+		case 95: goto tr279;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr174;
+				goto tr278;
 		} else if ( (*p) >= 9 )
-			goto tr173;
+			goto tr277;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr175;
+				goto tr279;
 		} else if ( (*p) >= 65 )
-			goto tr175;
+			goto tr279;
 	} else
-		goto tr175;
-	goto tr166;
-tr174:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr279;
+	goto tr247;
+tr278:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st115;
-tr233:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr273:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -3686,154 +4092,154 @@
 	goto st115;
 st115:
 	if ( ++p == pe )
-		goto _out115;
+		goto _test_eof115;
 case 115:
-#line 3692 "ext/hpricot_scan/hpricot_scan.c"
+#line 4098 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr232;
-		case 32: goto tr232;
+		case 13: goto tr272;
+		case 32: goto tr272;
 		case 34: goto st116;
-		case 39: goto tr235;
-		case 47: goto tr237;
+		case 39: goto tr275;
+		case 47: goto tr280;
 		case 60: goto st101;
-		case 62: goto tr90;
-		case 63: goto tr175;
-		case 92: goto tr172;
-		case 95: goto tr175;
+		case 62: goto tr262;
+		case 63: goto tr279;
+		case 92: goto tr253;
+		case 95: goto tr279;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr233;
+				goto tr273;
 		} else if ( (*p) >= 9 )
-			goto tr232;
+			goto tr272;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr175;
+				goto tr279;
 		} else if ( (*p) >= 65 )
-			goto tr175;
+			goto tr279;
 	} else
-		goto tr175;
-	goto tr166;
+		goto tr279;
+	goto tr247;
 st116:
 	if ( ++p == pe )
-		goto _out116;
+		goto _test_eof116;
 case 116:
 	switch( (*p) ) {
-		case 13: goto tr258;
-		case 32: goto tr258;
-		case 34: goto tr80;
-		case 39: goto tr260;
-		case 47: goto tr256;
-		case 60: goto tr215;
-		case 62: goto tr261;
-		case 92: goto tr211;
+		case 13: goto tr211;
+		case 32: goto tr211;
+		case 34: goto tr281;
+		case 39: goto tr214;
+		case 47: goto tr215;
+		case 60: goto tr216;
+		case 62: goto tr217;
+		case 92: goto tr218;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr259;
+			goto tr212;
 	} else if ( (*p) >= 9 )
-		goto tr258;
-	goto tr205;
-tr107:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); }
-	goto st117;
-tr106:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr211;
+	goto tr210;
+tr221:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st117;
-tr259:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr212:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st117;
+tr314:
+#line 109 "hpricot_scan.rl"
+	{ SET(aval, p); }
+	goto st117;
 st117:
 	if ( ++p == pe )
-		goto _out117;
+		goto _test_eof117;
 case 117:
-#line 3764 "ext/hpricot_scan/hpricot_scan.c"
+#line 4170 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr105;
-		case 32: goto tr105;
-		case 34: goto tr80;
-		case 39: goto tr94;
-		case 47: goto tr114;
+		case 13: goto tr220;
+		case 32: goto tr220;
+		case 34: goto tr222;
+		case 39: goto tr209;
+		case 47: goto tr283;
 		case 60: goto st99;
-		case 62: goto tr116;
-		case 63: goto tr113;
+		case 62: goto tr284;
+		case 63: goto tr282;
 		case 92: goto st129;
-		case 95: goto tr113;
+		case 95: goto tr282;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr106;
+				goto tr221;
 		} else if ( (*p) >= 9 )
-			goto tr105;
+			goto tr220;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr113;
+				goto tr282;
 		} else if ( (*p) >= 65 )
-			goto tr113;
+			goto tr282;
 	} else
-		goto tr113;
+		goto tr282;
 	goto st97;
-tr113:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr282:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st118;
-tr214:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr307:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st118;
 st118:
 	if ( ++p == pe )
-		goto _out118;
+		goto _test_eof118;
 case 118:
-#line 3828 "ext/hpricot_scan/hpricot_scan.c"
+#line 4234 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr150;
-		case 32: goto tr150;
-		case 34: goto tr80;
-		case 39: goto tr94;
-		case 47: goto tr153;
+		case 13: goto tr285;
+		case 32: goto tr285;
+		case 34: goto tr222;
+		case 39: goto tr209;
+		case 47: goto tr288;
 		case 60: goto st99;
-		case 61: goto tr154;
-		case 62: goto tr155;
+		case 61: goto tr289;
+		case 62: goto tr290;
 		case 63: goto st118;
 		case 92: goto st129;
 		case 95: goto st118;
@@ -3841,9 +4247,9 @@
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr151;
+				goto tr286;
 		} else if ( (*p) >= 9 )
-			goto tr150;
+			goto tr285;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
@@ -3853,21 +4259,21 @@
 	} else
 		goto st118;
 	goto st97;
-tr111:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr293:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+	goto st119;
+tr323:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st119;
-tr127:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-	goto st119;
-tr150:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr285:
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -3875,19 +4281,19 @@
 	goto st119;
 st119:
 	if ( ++p == pe )
-		goto _out119;
+		goto _test_eof119;
 case 119:
-#line 3881 "ext/hpricot_scan/hpricot_scan.c"
+#line 4287 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st119;
-		case 34: goto tr10;
-		case 39: goto tr11;
-		case 47: goto tr55;
+		case 34: goto tr228;
+		case 39: goto tr174;
+		case 47: goto tr230;
 		case 61: goto st123;
-		case 62: goto tr57;
-		case 63: goto tr54;
+		case 62: goto tr231;
+		case 63: goto tr229;
 		case 92: goto st122;
-		case 95: goto tr54;
+		case 95: goto tr229;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
@@ -3895,63 +4301,63 @@
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr54;
+				goto tr229;
 		} else if ( (*p) >= 65 )
-			goto tr54;
+			goto tr229;
 	} else
-		goto tr54;
+		goto tr229;
 	goto st99;
-tr54:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr229:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st120;
-tr219:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr318:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 94 "ext/hpricot_scan/hpricot_scan.rl"
+#line 121 "hpricot_scan.rl"
 	{ 
     akey = Qnil;
     aval = Qnil;
     mark_akey = NULL;
     mark_aval = NULL;
   }
-#line 79 "ext/hpricot_scan/hpricot_scan.rl"
+#line 106 "hpricot_scan.rl"
 	{ mark_akey = p; }
 	goto st120;
 st120:
 	if ( ++p == pe )
-		goto _out120;
+		goto _test_eof120;
 case 120:
-#line 3941 "ext/hpricot_scan/hpricot_scan.c"
+#line 4347 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr127;
-		case 34: goto tr10;
-		case 39: goto tr11;
-		case 47: goto tr129;
-		case 61: goto tr130;
-		case 62: goto tr131;
+		case 32: goto tr293;
+		case 34: goto tr228;
+		case 39: goto tr174;
+		case 47: goto tr295;
+		case 61: goto tr296;
+		case 62: goto tr297;
 		case 63: goto st120;
 		case 92: goto st122;
 		case 95: goto st120;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
-			goto tr127;
+			goto tr293;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
@@ -3961,245 +4367,245 @@
 	} else
 		goto st120;
 	goto st99;
-tr55:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr295:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st121;
-tr129:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr230:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st121;
-tr220:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr319:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st121;
 st121:
 	if ( ++p == pe )
-		goto _out121;
+		goto _test_eof121;
 case 121:
-#line 3991 "ext/hpricot_scan/hpricot_scan.c"
+#line 4397 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 34: goto tr10;
-		case 39: goto tr11;
-		case 62: goto tr52;
+		case 34: goto tr228;
+		case 39: goto tr174;
+		case 62: goto tr298;
 		case 92: goto st122;
 	}
 	goto st99;
-tr52:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 70 "ext/hpricot_scan/hpricot_scan.rl"
-	{act = 12;}
-	goto st211;
-tr57:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr217:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 110 "hpricot_scan.rl"
+	{ 
+    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
+    else { SET(aval, p); }
+  }
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st211;
-tr109:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr225:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st211;
-tr116:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr231:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
-    else { SET(aval, p); }
-  }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st211;
-tr131:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr297:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st211;
-tr155:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr298:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 70 "hpricot_scan.rl"
+	{act = 12;}
+	goto st211;
+tr284:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 128 "hpricot_scan.rl"
 	{ 
-    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
-    else { SET(aval, p); }
+    ATTR(akey, aval);
   }
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
-    ATTR(akey, aval);
+    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
+    else { SET(aval, p); }
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st211;
-tr221:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr313:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
+	{ 
+    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
+    else { SET(aval, p); }
+  }
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st211;
-tr261:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr290:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st211;
-tr262:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr320:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
-    else { SET(aval, p); }
-  }
-#line 68 "ext/hpricot_scan/hpricot_scan.rl"
+#line 68 "hpricot_scan.rl"
 	{act = 10;}
 	goto st211;
 st211:
 	if ( ++p == pe )
-		goto _out211;
+		goto _test_eof211;
 case 211:
-#line 4124 "ext/hpricot_scan/hpricot_scan.c"
+#line 4530 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 34: goto tr10;
-		case 39: goto tr11;
+		case 34: goto tr228;
+		case 39: goto tr174;
 		case 92: goto st122;
 	}
 	goto st99;
-tr217:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr321:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st122;
 st122:
 	if ( ++p == pe )
-		goto _out122;
+		goto _test_eof122;
 case 122:
-#line 4139 "ext/hpricot_scan/hpricot_scan.c"
+#line 4545 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 34: goto tr51;
-		case 39: goto tr51;
+		case 34: goto tr299;
+		case 39: goto tr299;
 		case 92: goto st122;
 	}
 	goto st99;
-tr130:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr296:
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
 	goto st123;
 st123:
 	if ( ++p == pe )
-		goto _out123;
+		goto _test_eof123;
 case 123:
-#line 4154 "ext/hpricot_scan/hpricot_scan.c"
+#line 4560 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr206;
-		case 32: goto tr206;
-		case 34: goto tr208;
-		case 39: goto tr209;
-		case 47: goto tr210;
+		case 13: goto tr300;
+		case 32: goto tr300;
+		case 34: goto tr302;
+		case 39: goto tr303;
+		case 47: goto tr304;
 		case 60: goto st99;
-		case 62: goto tr57;
-		case 92: goto tr211;
+		case 62: goto tr231;
+		case 92: goto tr218;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr207;
+			goto tr301;
 	} else if ( (*p) >= 9 )
-		goto tr206;
-	goto tr205;
-tr206:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr300;
+	goto tr210;
+tr300:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st124;
 st124:
 	if ( ++p == pe )
-		goto _out124;
+		goto _test_eof124;
 case 124:
-#line 4179 "ext/hpricot_scan/hpricot_scan.c"
+#line 4585 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr212;
-		case 32: goto tr212;
-		case 34: goto tr208;
-		case 39: goto tr209;
-		case 47: goto tr210;
+		case 13: goto tr305;
+		case 32: goto tr305;
+		case 34: goto tr302;
+		case 39: goto tr303;
+		case 47: goto tr304;
 		case 60: goto st99;
-		case 62: goto tr57;
-		case 92: goto tr211;
+		case 62: goto tr231;
+		case 92: goto tr218;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr213;
+			goto tr306;
 	} else if ( (*p) >= 9 )
-		goto tr212;
-	goto tr205;
-tr212:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr305;
+	goto tr210;
+tr305:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st125;
-tr252:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr308:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -4207,44 +4613,44 @@
 	goto st125;
 st125:
 	if ( ++p == pe )
-		goto _out125;
+		goto _test_eof125;
 case 125:
-#line 4213 "ext/hpricot_scan/hpricot_scan.c"
+#line 4619 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr212;
-		case 32: goto tr212;
-		case 34: goto tr208;
-		case 39: goto tr209;
-		case 47: goto tr210;
+		case 13: goto tr305;
+		case 32: goto tr305;
+		case 34: goto tr302;
+		case 39: goto tr303;
+		case 47: goto tr304;
 		case 60: goto st99;
-		case 62: goto tr57;
-		case 63: goto tr214;
-		case 92: goto tr211;
-		case 95: goto tr214;
+		case 62: goto tr231;
+		case 63: goto tr307;
+		case 92: goto tr218;
+		case 95: goto tr307;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr213;
+				goto tr306;
 		} else if ( (*p) >= 9 )
-			goto tr212;
+			goto tr305;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr214;
+				goto tr307;
 		} else if ( (*p) >= 65 )
-			goto tr214;
+			goto tr307;
 	} else
-		goto tr214;
-	goto tr205;
-tr213:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr307;
+	goto tr210;
+tr306:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st126;
-tr253:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr309:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -4252,136 +4658,136 @@
 	goto st126;
 st126:
 	if ( ++p == pe )
-		goto _out126;
+		goto _test_eof126;
 case 126:
-#line 4258 "ext/hpricot_scan/hpricot_scan.c"
+#line 4664 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr252;
-		case 32: goto tr252;
-		case 34: goto tr254;
-		case 39: goto tr255;
-		case 47: goto tr257;
+		case 13: goto tr308;
+		case 32: goto tr308;
+		case 34: goto tr310;
+		case 39: goto tr311;
+		case 47: goto tr312;
 		case 60: goto st99;
-		case 62: goto tr116;
-		case 63: goto tr214;
-		case 92: goto tr211;
-		case 95: goto tr214;
+		case 62: goto tr284;
+		case 63: goto tr307;
+		case 92: goto tr218;
+		case 95: goto tr307;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr253;
+				goto tr309;
 		} else if ( (*p) >= 9 )
-			goto tr252;
+			goto tr308;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr214;
+				goto tr307;
 		} else if ( (*p) >= 65 )
-			goto tr214;
+			goto tr307;
 	} else
-		goto tr214;
-	goto tr205;
-tr254:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr307;
+	goto tr210;
+tr310:
+#line 109 "hpricot_scan.rl"
 	{ SET(aval, p); }
 	goto st127;
 st127:
 	if ( ++p == pe )
-		goto _out127;
+		goto _test_eof127;
 case 127:
-#line 4294 "ext/hpricot_scan/hpricot_scan.c"
+#line 4700 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr258;
-		case 32: goto tr258;
-		case 34: goto tr80;
-		case 39: goto tr260;
-		case 47: goto tr257;
-		case 60: goto tr215;
-		case 62: goto tr262;
-		case 63: goto tr214;
-		case 92: goto tr211;
-		case 95: goto tr214;
+		case 13: goto tr211;
+		case 32: goto tr211;
+		case 34: goto tr281;
+		case 39: goto tr214;
+		case 47: goto tr312;
+		case 60: goto tr216;
+		case 62: goto tr313;
+		case 63: goto tr307;
+		case 92: goto tr218;
+		case 95: goto tr307;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr259;
+				goto tr212;
 		} else if ( (*p) >= 9 )
-			goto tr258;
+			goto tr211;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr214;
+				goto tr307;
 		} else if ( (*p) >= 65 )
-			goto tr214;
+			goto tr307;
 	} else
-		goto tr214;
-	goto tr205;
-tr108:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr307;
+	goto tr210;
+tr304:
+#line 105 "hpricot_scan.rl"
+	{ mark_aval = p; }
+#line 128 "hpricot_scan.rl"
+	{ 
+    ATTR(akey, aval);
+  }
+	goto st128;
+tr223:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st128;
-tr114:
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+tr283:
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st128;
-tr153:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+tr288:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st128;
-tr210:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
-	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
-	{ 
-    ATTR(akey, aval);
-  }
-	goto st128;
-tr256:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr215:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
 	goto st128;
-tr257:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr312:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
-#line 101 "ext/hpricot_scan/hpricot_scan.rl"
+#line 128 "hpricot_scan.rl"
 	{ 
     ATTR(akey, aval);
   }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -4389,188 +4795,188 @@
 	goto st128;
 st128:
 	if ( ++p == pe )
-		goto _out128;
+		goto _test_eof128;
 case 128:
-#line 4395 "ext/hpricot_scan/hpricot_scan.c"
+#line 4801 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr105;
-		case 32: goto tr105;
-		case 34: goto tr80;
-		case 39: goto tr94;
-		case 47: goto tr108;
+		case 13: goto tr220;
+		case 32: goto tr220;
+		case 34: goto tr222;
+		case 39: goto tr209;
+		case 47: goto tr223;
 		case 60: goto st99;
-		case 62: goto tr109;
+		case 62: goto tr225;
 		case 92: goto st129;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr106;
+			goto tr221;
 	} else if ( (*p) >= 9 )
-		goto tr105;
+		goto tr220;
 	goto st97;
-tr211:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+tr218:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st129;
 st129:
 	if ( ++p == pe )
-		goto _out129;
+		goto _test_eof129;
 case 129:
-#line 4420 "ext/hpricot_scan/hpricot_scan.c"
+#line 4826 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr105;
-		case 32: goto tr105;
-		case 34: goto tr107;
-		case 39: goto tr107;
-		case 47: goto tr108;
+		case 13: goto tr220;
+		case 32: goto tr220;
+		case 34: goto tr314;
+		case 39: goto tr314;
+		case 47: goto tr223;
 		case 60: goto st99;
-		case 62: goto tr109;
+		case 62: goto tr225;
 		case 92: goto st129;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr106;
+			goto tr221;
 	} else if ( (*p) >= 9 )
-		goto tr105;
+		goto tr220;
 	goto st97;
-tr255:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
+tr311:
+#line 109 "hpricot_scan.rl"
 	{ SET(aval, p); }
 	goto st130;
 st130:
 	if ( ++p == pe )
-		goto _out130;
+		goto _test_eof130;
 case 130:
-#line 4445 "ext/hpricot_scan/hpricot_scan.c"
+#line 4851 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr258;
-		case 32: goto tr258;
-		case 34: goto tr263;
-		case 39: goto tr94;
-		case 47: goto tr257;
-		case 60: goto tr215;
-		case 62: goto tr262;
-		case 63: goto tr214;
-		case 92: goto tr211;
-		case 95: goto tr214;
+		case 13: goto tr211;
+		case 32: goto tr211;
+		case 34: goto tr213;
+		case 39: goto tr214;
+		case 47: goto tr312;
+		case 60: goto tr216;
+		case 62: goto tr313;
+		case 63: goto tr307;
+		case 92: goto tr218;
+		case 95: goto tr307;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr259;
+				goto tr212;
 		} else if ( (*p) >= 9 )
-			goto tr258;
+			goto tr211;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr214;
+				goto tr307;
 		} else if ( (*p) >= 65 )
-			goto tr214;
+			goto tr307;
 	} else
-		goto tr214;
-	goto tr205;
-tr208:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr307;
+	goto tr210;
+tr302:
+#line 109 "hpricot_scan.rl"
 	{ SET(aval, p); }
 	goto st131;
 st131:
 	if ( ++p == pe )
-		goto _out131;
+		goto _test_eof131;
 case 131:
-#line 4481 "ext/hpricot_scan/hpricot_scan.c"
+#line 4887 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr218;
-		case 34: goto tr10;
-		case 39: goto tr216;
-		case 47: goto tr220;
-		case 62: goto tr221;
-		case 63: goto tr219;
-		case 92: goto tr217;
-		case 95: goto tr219;
+		case 32: goto tr315;
+		case 34: goto tr316;
+		case 39: goto tr317;
+		case 47: goto tr319;
+		case 62: goto tr320;
+		case 63: goto tr318;
+		case 92: goto tr321;
+		case 95: goto tr318;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
-			goto tr218;
+			goto tr315;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr219;
+				goto tr318;
 		} else if ( (*p) >= 65 )
-			goto tr219;
+			goto tr318;
 	} else
-		goto tr219;
-	goto tr215;
-tr209:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr318;
+	goto tr216;
+tr303:
+#line 109 "hpricot_scan.rl"
 	{ SET(aval, p); }
 	goto st132;
 st132:
 	if ( ++p == pe )
-		goto _out132;
+		goto _test_eof132;
 case 132:
-#line 4512 "ext/hpricot_scan/hpricot_scan.c"
+#line 4918 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr218;
-		case 34: goto tr225;
-		case 39: goto tr11;
-		case 47: goto tr220;
-		case 62: goto tr221;
-		case 63: goto tr219;
-		case 92: goto tr217;
-		case 95: goto tr219;
+		case 32: goto tr315;
+		case 34: goto tr322;
+		case 39: goto tr317;
+		case 47: goto tr319;
+		case 62: goto tr320;
+		case 63: goto tr318;
+		case 92: goto tr321;
+		case 95: goto tr318;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
-			goto tr218;
+			goto tr315;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr219;
+				goto tr318;
 		} else if ( (*p) >= 65 )
-			goto tr219;
+			goto tr318;
 	} else
-		goto tr219;
-	goto tr215;
-tr154:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(akey, p); }
-	goto st133;
-tr207:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr318;
+	goto tr216;
+tr301:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st133;
+tr289:
+#line 114 "hpricot_scan.rl"
+	{ SET(akey, p); }
+	goto st133;
 st133:
 	if ( ++p == pe )
-		goto _out133;
+		goto _test_eof133;
 case 133:
-#line 4547 "ext/hpricot_scan/hpricot_scan.c"
+#line 4953 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr252;
-		case 32: goto tr252;
-		case 34: goto tr254;
-		case 39: goto tr255;
-		case 47: goto tr256;
+		case 13: goto tr308;
+		case 32: goto tr308;
+		case 34: goto tr310;
+		case 39: goto tr311;
+		case 47: goto tr215;
 		case 60: goto st99;
-		case 62: goto tr109;
-		case 92: goto tr211;
+		case 62: goto tr225;
+		case 92: goto tr218;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr253;
+			goto tr309;
 	} else if ( (*p) >= 9 )
-		goto tr252;
-	goto tr205;
-tr112:
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr308;
+	goto tr210;
+tr324:
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
   }
 	goto st134;
-tr151:
-#line 87 "ext/hpricot_scan/hpricot_scan.rl"
+tr286:
+#line 114 "hpricot_scan.rl"
 	{ SET(akey, p); }
-#line 83 "ext/hpricot_scan/hpricot_scan.rl"
+#line 110 "hpricot_scan.rl"
 	{ 
     if (*(p-1) == '"' || *(p-1) == '\'') { SET(aval, p-1); }
     else { SET(aval, p); }
@@ -4578,262 +4984,262 @@
 	goto st134;
 st134:
 	if ( ++p == pe )
-		goto _out134;
+		goto _test_eof134;
 case 134:
-#line 4584 "ext/hpricot_scan/hpricot_scan.c"
+#line 4990 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr111;
-		case 32: goto tr111;
-		case 34: goto tr80;
-		case 39: goto tr94;
-		case 47: goto tr114;
+		case 13: goto tr323;
+		case 32: goto tr323;
+		case 34: goto tr222;
+		case 39: goto tr209;
+		case 47: goto tr283;
 		case 60: goto st99;
 		case 61: goto st133;
-		case 62: goto tr116;
-		case 63: goto tr113;
+		case 62: goto tr284;
+		case 63: goto tr282;
 		case 92: goto st129;
-		case 95: goto tr113;
+		case 95: goto tr282;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr112;
+				goto tr324;
 		} else if ( (*p) >= 9 )
-			goto tr111;
+			goto tr323;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr113;
+				goto tr282;
 		} else if ( (*p) >= 65 )
-			goto tr113;
+			goto tr282;
 	} else
-		goto tr113;
+		goto tr282;
 	goto st97;
-tr235:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
+tr275:
+#line 109 "hpricot_scan.rl"
 	{ SET(aval, p); }
 	goto st135;
 st135:
 	if ( ++p == pe )
-		goto _out135;
+		goto _test_eof135;
 case 135:
-#line 4621 "ext/hpricot_scan/hpricot_scan.c"
+#line 5027 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr238;
-		case 32: goto tr238;
-		case 39: goto tr84;
-		case 47: goto tr237;
-		case 60: goto tr176;
-		case 62: goto tr241;
-		case 63: goto tr175;
-		case 92: goto tr172;
-		case 95: goto tr175;
+		case 13: goto tr326;
+		case 32: goto tr326;
+		case 39: goto tr155;
+		case 47: goto tr280;
+		case 60: goto tr328;
+		case 62: goto tr329;
+		case 63: goto tr279;
+		case 92: goto tr253;
+		case 95: goto tr279;
 	}
 	if ( (*p) < 45 ) {
 		if ( (*p) > 10 ) {
 			if ( 11 <= (*p) && (*p) <= 12 )
-				goto tr239;
+				goto tr327;
 		} else if ( (*p) >= 9 )
-			goto tr238;
+			goto tr326;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr175;
+				goto tr279;
 		} else if ( (*p) >= 65 )
-			goto tr175;
+			goto tr279;
 	} else
-		goto tr175;
-	goto tr166;
+		goto tr279;
+	goto tr247;
 st136:
 	if ( ++p == pe )
-		goto _out136;
+		goto _test_eof136;
 case 136:
 	switch( (*p) ) {
-		case 34: goto tr10;
-		case 39: goto tr216;
-		case 92: goto tr217;
+		case 34: goto tr316;
+		case 39: goto tr317;
+		case 92: goto tr321;
 	}
-	goto tr215;
-tr170:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr216;
+tr251:
+#line 109 "hpricot_scan.rl"
 	{ SET(aval, p); }
 	goto st137;
 st137:
 	if ( ++p == pe )
-		goto _out137;
+		goto _test_eof137;
 case 137:
-#line 4666 "ext/hpricot_scan/hpricot_scan.c"
+#line 5072 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr178;
-		case 39: goto tr3;
-		case 47: goto tr180;
-		case 62: goto tr181;
-		case 63: goto tr179;
-		case 92: goto tr177;
-		case 95: goto tr179;
+		case 32: goto tr330;
+		case 39: goto tr331;
+		case 47: goto tr333;
+		case 62: goto tr334;
+		case 63: goto tr332;
+		case 92: goto tr335;
+		case 95: goto tr332;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
-			goto tr178;
+			goto tr330;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr179;
+				goto tr332;
 		} else if ( (*p) >= 65 )
-			goto tr179;
+			goto tr332;
 	} else
-		goto tr179;
-	goto tr176;
-tr167:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr332;
+	goto tr328;
+tr248:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st138;
 st138:
 	if ( ++p == pe )
-		goto _out138;
+		goto _test_eof138;
 case 138:
-#line 4696 "ext/hpricot_scan/hpricot_scan.c"
+#line 5102 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr173;
-		case 32: goto tr173;
+		case 13: goto tr277;
+		case 32: goto tr277;
 		case 34: goto st136;
-		case 39: goto tr170;
-		case 47: goto tr171;
+		case 39: goto tr251;
+		case 47: goto tr252;
 		case 60: goto st101;
-		case 62: goto tr33;
-		case 92: goto tr172;
+		case 62: goto tr237;
+		case 92: goto tr253;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr174;
+			goto tr278;
 	} else if ( (*p) >= 9 )
-		goto tr173;
-	goto tr166;
-tr192:
-#line 82 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr277;
+	goto tr247;
+tr185:
+#line 109 "hpricot_scan.rl"
 	{ SET(aval, p); }
 	goto st139;
 st139:
 	if ( ++p == pe )
-		goto _out139;
+		goto _test_eof139;
 case 139:
-#line 4721 "ext/hpricot_scan/hpricot_scan.c"
+#line 5127 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr201;
-		case 34: goto tr3;
-		case 47: goto tr203;
-		case 62: goto tr204;
-		case 63: goto tr202;
-		case 92: goto tr200;
-		case 95: goto tr202;
+		case 32: goto tr336;
+		case 34: goto tr331;
+		case 47: goto tr338;
+		case 62: goto tr339;
+		case 63: goto tr337;
+		case 92: goto tr340;
+		case 95: goto tr337;
 	}
 	if ( (*p) < 45 ) {
 		if ( 9 <= (*p) && (*p) <= 13 )
-			goto tr201;
+			goto tr336;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr202;
+				goto tr337;
 		} else if ( (*p) >= 65 )
-			goto tr202;
+			goto tr337;
 	} else
-		goto tr202;
-	goto tr199;
+		goto tr337;
+	goto tr157;
 st140:
 	if ( ++p == pe )
-		goto _out140;
+		goto _test_eof140;
 case 140:
 	switch( (*p) ) {
-		case 34: goto tr225;
-		case 39: goto tr11;
-		case 92: goto tr217;
+		case 34: goto tr322;
+		case 39: goto tr317;
+		case 92: goto tr321;
 	}
-	goto tr215;
+	goto tr216;
 st141:
 	if ( ++p == pe )
-		goto _out141;
+		goto _test_eof141;
 case 141:
 	switch( (*p) ) {
-		case 13: goto tr238;
-		case 32: goto tr238;
-		case 39: goto tr84;
-		case 47: goto tr236;
-		case 60: goto tr176;
-		case 62: goto tr240;
-		case 92: goto tr172;
+		case 13: goto tr326;
+		case 32: goto tr326;
+		case 39: goto tr155;
+		case 47: goto tr276;
+		case 60: goto tr328;
+		case 62: goto tr341;
+		case 92: goto tr253;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr239;
+			goto tr327;
 	} else if ( (*p) >= 9 )
-		goto tr238;
-	goto tr166;
+		goto tr326;
+	goto tr247;
 st142:
 	if ( ++p == pe )
-		goto _out142;
+		goto _test_eof142;
 case 142:
 	switch( (*p) ) {
-		case 34: goto tr3;
-		case 92: goto tr200;
+		case 34: goto tr331;
+		case 92: goto tr340;
 	}
-	goto tr199;
+	goto tr157;
 st143:
 	if ( ++p == pe )
-		goto _out143;
+		goto _test_eof143;
 case 143:
 	switch( (*p) ) {
-		case 39: goto tr3;
-		case 92: goto tr177;
+		case 39: goto tr331;
+		case 92: goto tr335;
 	}
-	goto tr176;
-tr157:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr328;
+tr120:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st144;
 st144:
 	if ( ++p == pe )
-		goto _out144;
+		goto _test_eof144;
 case 144:
-#line 4798 "ext/hpricot_scan/hpricot_scan.c"
+#line 5204 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 13: goto tr163;
-		case 32: goto tr163;
+		case 13: goto tr148;
+		case 32: goto tr148;
 		case 34: goto st142;
 		case 39: goto st143;
-		case 47: goto tr161;
-		case 60: goto tr69;
-		case 62: goto tr162;
+		case 47: goto tr124;
+		case 60: goto tr39;
+		case 62: goto tr117;
 	}
 	if ( (*p) > 10 ) {
 		if ( 11 <= (*p) && (*p) <= 12 )
-			goto tr164;
+			goto tr149;
 	} else if ( (*p) >= 9 )
-		goto tr163;
-	goto tr156;
+		goto tr148;
+	goto tr119;
 st145:
 	if ( ++p == pe )
-		goto _out145;
+		goto _test_eof145;
 case 145:
 	switch( (*p) ) {
-		case 58: goto tr339;
-		case 95: goto tr339;
-		case 120: goto tr340;
+		case 58: goto tr342;
+		case 95: goto tr342;
+		case 120: goto tr343;
 	}
 	if ( (*p) > 90 ) {
 		if ( 97 <= (*p) && (*p) <= 122 )
-			goto tr339;
+			goto tr342;
 	} else if ( (*p) >= 65 )
-		goto tr339;
-	goto tr296;
-tr339:
-#line 46 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr342;
+	goto tr0;
+tr342:
+#line 46 "hpricot_scan.rl"
 	{ TEXT_PASS(); }
 	goto st146;
 st146:
 	if ( ++p == pe )
-		goto _out146;
+		goto _test_eof146;
 case 146:
-#line 4837 "ext/hpricot_scan/hpricot_scan.c"
+#line 5243 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st212;
 		case 63: goto st146;
@@ -4853,25 +5259,25 @@
 			goto st146;
 	} else
 		goto st146;
-	goto tr296;
+	goto tr0;
 st212:
 	if ( ++p == pe )
-		goto _out212;
+		goto _test_eof212;
 case 212:
 	if ( (*p) == 32 )
 		goto st212;
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st212;
-	goto tr14;
-tr340:
-#line 46 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr420;
+tr343:
+#line 46 "hpricot_scan.rl"
 	{ TEXT_PASS(); }
 	goto st147;
 st147:
 	if ( ++p == pe )
-		goto _out147;
+		goto _test_eof147;
 case 147:
-#line 4875 "ext/hpricot_scan/hpricot_scan.c"
+#line 5281 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st212;
 		case 63: goto st146;
@@ -4892,10 +5298,10 @@
 			goto st146;
 	} else
 		goto st146;
-	goto tr296;
+	goto tr0;
 st148:
 	if ( ++p == pe )
-		goto _out148;
+		goto _test_eof148;
 case 148:
 	switch( (*p) ) {
 		case 32: goto st212;
@@ -4917,13 +5323,13 @@
 			goto st146;
 	} else
 		goto st146;
-	goto tr296;
+	goto tr0;
 st149:
 	if ( ++p == pe )
-		goto _out149;
+		goto _test_eof149;
 case 149:
 	switch( (*p) ) {
-		case 32: goto tr16;
+		case 32: goto tr348;
 		case 63: goto st146;
 		case 95: goto st146;
 	}
@@ -4932,7 +5338,7 @@
 			if ( 45 <= (*p) && (*p) <= 46 )
 				goto st146;
 		} else if ( (*p) >= 9 )
-			goto tr16;
+			goto tr348;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
@@ -4941,68 +5347,68 @@
 			goto st146;
 	} else
 		goto st146;
-	goto tr296;
-tr16:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
+	goto tr0;
+tr348:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
 	goto st213;
 st213:
 	if ( ++p == pe )
-		goto _out213;
+		goto _test_eof213;
 case 213:
-#line 4954 "ext/hpricot_scan/hpricot_scan.c"
+#line 5360 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 32: goto tr16;
+		case 32: goto tr348;
 		case 118: goto st150;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
-		goto tr16;
-	goto tr14;
+		goto tr348;
+	goto tr420;
 st150:
 	if ( ++p == pe )
-		goto _out150;
+		goto _test_eof150;
 case 150:
 	if ( (*p) == 101 )
 		goto st151;
-	goto tr264;
+	goto tr349;
 st151:
 	if ( ++p == pe )
-		goto _out151;
+		goto _test_eof151;
 case 151:
 	if ( (*p) == 114 )
 		goto st152;
-	goto tr264;
+	goto tr349;
 st152:
 	if ( ++p == pe )
-		goto _out152;
+		goto _test_eof152;
 case 152:
 	if ( (*p) == 115 )
 		goto st153;
-	goto tr264;
+	goto tr349;
 st153:
 	if ( ++p == pe )
-		goto _out153;
+		goto _test_eof153;
 case 153:
 	if ( (*p) == 105 )
 		goto st154;
-	goto tr264;
+	goto tr349;
 st154:
 	if ( ++p == pe )
-		goto _out154;
+		goto _test_eof154;
 case 154:
 	if ( (*p) == 111 )
 		goto st155;
-	goto tr264;
+	goto tr349;
 st155:
 	if ( ++p == pe )
-		goto _out155;
+		goto _test_eof155;
 case 155:
 	if ( (*p) == 110 )
 		goto st156;
-	goto tr264;
+	goto tr349;
 st156:
 	if ( ++p == pe )
-		goto _out156;
+		goto _test_eof156;
 case 156:
 	switch( (*p) ) {
 		case 32: goto st156;
@@ -5010,10 +5416,10 @@
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st156;
-	goto tr264;
+	goto tr349;
 st157:
 	if ( ++p == pe )
-		goto _out157;
+		goto _test_eof157;
 case 157:
 	switch( (*p) ) {
 		case 32: goto st157;
@@ -5022,36 +5428,36 @@
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st157;
-	goto tr264;
+	goto tr349;
 st158:
 	if ( ++p == pe )
-		goto _out158;
+		goto _test_eof158;
 case 158:
 	if ( (*p) == 95 )
-		goto tr282;
+		goto tr359;
 	if ( (*p) < 48 ) {
 		if ( 45 <= (*p) && (*p) <= 46 )
-			goto tr282;
+			goto tr359;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr282;
+				goto tr359;
 		} else if ( (*p) >= 65 )
-			goto tr282;
+			goto tr359;
 	} else
-		goto tr282;
-	goto tr264;
-tr282:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr359;
+	goto tr349;
+tr359:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st159;
 st159:
 	if ( ++p == pe )
-		goto _out159;
+		goto _test_eof159;
 case 159:
-#line 5053 "ext/hpricot_scan/hpricot_scan.c"
+#line 5459 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 34: goto tr275;
+		case 34: goto tr360;
 		case 95: goto st159;
 	}
 	if ( (*p) < 48 ) {
@@ -5065,97 +5471,97 @@
 			goto st159;
 	} else
 		goto st159;
-	goto tr264;
-tr275:
-#line 88 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("version"), aval); }
+	goto tr349;
+tr360:
+#line 115 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("version")), aval); }
 	goto st160;
 st160:
 	if ( ++p == pe )
-		goto _out160;
+		goto _test_eof160;
 case 160:
-#line 5078 "ext/hpricot_scan/hpricot_scan.c"
+#line 5484 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st161;
-		case 62: goto tr270;
+		case 62: goto tr363;
 		case 63: goto st162;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st161;
-	goto tr264;
+	goto tr349;
 st161:
 	if ( ++p == pe )
-		goto _out161;
+		goto _test_eof161;
 case 161:
 	switch( (*p) ) {
 		case 32: goto st161;
-		case 62: goto tr270;
+		case 62: goto tr363;
 		case 63: goto st162;
 		case 101: goto st163;
 		case 115: goto st176;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st161;
-	goto tr264;
+	goto tr349;
 st162:
 	if ( ++p == pe )
-		goto _out162;
+		goto _test_eof162;
 case 162:
 	if ( (*p) == 62 )
-		goto tr270;
-	goto tr264;
+		goto tr363;
+	goto tr349;
 st163:
 	if ( ++p == pe )
-		goto _out163;
+		goto _test_eof163;
 case 163:
 	if ( (*p) == 110 )
 		goto st164;
-	goto tr264;
+	goto tr349;
 st164:
 	if ( ++p == pe )
-		goto _out164;
+		goto _test_eof164;
 case 164:
 	if ( (*p) == 99 )
 		goto st165;
-	goto tr264;
+	goto tr349;
 st165:
 	if ( ++p == pe )
-		goto _out165;
+		goto _test_eof165;
 case 165:
 	if ( (*p) == 111 )
 		goto st166;
-	goto tr264;
+	goto tr349;
 st166:
 	if ( ++p == pe )
-		goto _out166;
+		goto _test_eof166;
 case 166:
 	if ( (*p) == 100 )
 		goto st167;
-	goto tr264;
+	goto tr349;
 st167:
 	if ( ++p == pe )
-		goto _out167;
+		goto _test_eof167;
 case 167:
 	if ( (*p) == 105 )
 		goto st168;
-	goto tr264;
+	goto tr349;
 st168:
 	if ( ++p == pe )
-		goto _out168;
+		goto _test_eof168;
 case 168:
 	if ( (*p) == 110 )
 		goto st169;
-	goto tr264;
+	goto tr349;
 st169:
 	if ( ++p == pe )
-		goto _out169;
+		goto _test_eof169;
 case 169:
 	if ( (*p) == 103 )
 		goto st170;
-	goto tr264;
+	goto tr349;
 st170:
 	if ( ++p == pe )
-		goto _out170;
+		goto _test_eof170;
 case 170:
 	switch( (*p) ) {
 		case 32: goto st170;
@@ -5163,10 +5569,10 @@
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st170;
-	goto tr264;
+	goto tr349;
 st171:
 	if ( ++p == pe )
-		goto _out171;
+		goto _test_eof171;
 case 171:
 	switch( (*p) ) {
 		case 32: goto st171;
@@ -5175,28 +5581,28 @@
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st171;
-	goto tr264;
+	goto tr349;
 st172:
 	if ( ++p == pe )
-		goto _out172;
+		goto _test_eof172;
 case 172:
 	if ( (*p) > 90 ) {
 		if ( 97 <= (*p) && (*p) <= 122 )
-			goto tr283;
+			goto tr377;
 	} else if ( (*p) >= 65 )
-		goto tr283;
-	goto tr264;
-tr283:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr377;
+	goto tr349;
+tr377:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st173;
 st173:
 	if ( ++p == pe )
-		goto _out173;
+		goto _test_eof173;
 case 173:
-#line 5198 "ext/hpricot_scan/hpricot_scan.c"
+#line 5604 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 34: goto tr277;
+		case 34: goto tr378;
 		case 95: goto st173;
 	}
 	if ( (*p) < 48 ) {
@@ -5210,103 +5616,103 @@
 			goto st173;
 	} else
 		goto st173;
-	goto tr264;
-tr277:
-#line 89 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("encoding"), aval); }
+	goto tr349;
+tr378:
+#line 116 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("encoding")), aval); }
 	goto st174;
 st174:
 	if ( ++p == pe )
-		goto _out174;
+		goto _test_eof174;
 case 174:
-#line 5223 "ext/hpricot_scan/hpricot_scan.c"
+#line 5629 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st175;
-		case 62: goto tr270;
+		case 62: goto tr363;
 		case 63: goto st162;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st175;
-	goto tr264;
+	goto tr349;
 st175:
 	if ( ++p == pe )
-		goto _out175;
+		goto _test_eof175;
 case 175:
 	switch( (*p) ) {
 		case 32: goto st175;
-		case 62: goto tr270;
+		case 62: goto tr363;
 		case 63: goto st162;
 		case 115: goto st176;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st175;
-	goto tr264;
+	goto tr349;
 st176:
 	if ( ++p == pe )
-		goto _out176;
+		goto _test_eof176;
 case 176:
 	if ( (*p) == 116 )
 		goto st177;
-	goto tr264;
+	goto tr349;
 st177:
 	if ( ++p == pe )
-		goto _out177;
+		goto _test_eof177;
 case 177:
 	if ( (*p) == 97 )
 		goto st178;
-	goto tr264;
+	goto tr349;
 st178:
 	if ( ++p == pe )
-		goto _out178;
+		goto _test_eof178;
 case 178:
 	if ( (*p) == 110 )
 		goto st179;
-	goto tr264;
+	goto tr349;
 st179:
 	if ( ++p == pe )
-		goto _out179;
+		goto _test_eof179;
 case 179:
 	if ( (*p) == 100 )
 		goto st180;
-	goto tr264;
+	goto tr349;
 st180:
 	if ( ++p == pe )
-		goto _out180;
+		goto _test_eof180;
 case 180:
 	if ( (*p) == 97 )
 		goto st181;
-	goto tr264;
+	goto tr349;
 st181:
 	if ( ++p == pe )
-		goto _out181;
+		goto _test_eof181;
 case 181:
 	if ( (*p) == 108 )
 		goto st182;
-	goto tr264;
+	goto tr349;
 st182:
 	if ( ++p == pe )
-		goto _out182;
+		goto _test_eof182;
 case 182:
 	if ( (*p) == 111 )
 		goto st183;
-	goto tr264;
+	goto tr349;
 st183:
 	if ( ++p == pe )
-		goto _out183;
+		goto _test_eof183;
 case 183:
 	if ( (*p) == 110 )
 		goto st184;
-	goto tr264;
+	goto tr349;
 st184:
 	if ( ++p == pe )
-		goto _out184;
+		goto _test_eof184;
 case 184:
 	if ( (*p) == 101 )
 		goto st185;
-	goto tr264;
+	goto tr349;
 st185:
 	if ( ++p == pe )
-		goto _out185;
+		goto _test_eof185;
 case 185:
 	switch( (*p) ) {
 		case 32: goto st185;
@@ -5314,10 +5720,10 @@
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st185;
-	goto tr264;
+	goto tr349;
 st186:
 	if ( ++p == pe )
-		goto _out186;
+		goto _test_eof186;
 case 186:
 	switch( (*p) ) {
 		case 32: goto st186;
@@ -5326,139 +5732,139 @@
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st186;
-	goto tr264;
+	goto tr349;
 st187:
 	if ( ++p == pe )
-		goto _out187;
+		goto _test_eof187;
 case 187:
 	switch( (*p) ) {
-		case 110: goto tr291;
-		case 121: goto tr292;
+		case 110: goto tr393;
+		case 121: goto tr394;
 	}
-	goto tr264;
-tr291:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr349;
+tr393:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st188;
 st188:
 	if ( ++p == pe )
-		goto _out188;
+		goto _test_eof188;
 case 188:
-#line 5348 "ext/hpricot_scan/hpricot_scan.c"
+#line 5754 "hpricot_scan.c"
 	if ( (*p) == 111 )
 		goto st189;
-	goto tr264;
+	goto tr349;
 st189:
 	if ( ++p == pe )
-		goto _out189;
+		goto _test_eof189;
 case 189:
 	if ( (*p) == 34 )
-		goto tr279;
-	goto tr264;
-tr279:
-#line 90 "ext/hpricot_scan/hpricot_scan.rl"
-	{ SET(aval, p); ATTR(rb_str_new2("standalone"), aval); }
+		goto tr396;
+	goto tr349;
+tr396:
+#line 117 "hpricot_scan.rl"
+	{ SET(aval, p); ATTR(ID2SYM(rb_intern("standalone")), aval); }
 	goto st190;
 st190:
 	if ( ++p == pe )
-		goto _out190;
+		goto _test_eof190;
 case 190:
-#line 5367 "ext/hpricot_scan/hpricot_scan.c"
+#line 5773 "hpricot_scan.c"
 	switch( (*p) ) {
 		case 32: goto st190;
-		case 62: goto tr270;
+		case 62: goto tr363;
 		case 63: goto st162;
 	}
 	if ( 9 <= (*p) && (*p) <= 13 )
 		goto st190;
-	goto tr264;
-tr292:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr349;
+tr394:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st191;
 st191:
 	if ( ++p == pe )
-		goto _out191;
+		goto _test_eof191;
 case 191:
-#line 5384 "ext/hpricot_scan/hpricot_scan.c"
+#line 5790 "hpricot_scan.c"
 	if ( (*p) == 101 )
 		goto st192;
-	goto tr264;
+	goto tr349;
 st192:
 	if ( ++p == pe )
-		goto _out192;
+		goto _test_eof192;
 case 192:
 	if ( (*p) == 115 )
 		goto st189;
-	goto tr264;
+	goto tr349;
 st193:
 	if ( ++p == pe )
-		goto _out193;
+		goto _test_eof193;
 case 193:
 	switch( (*p) ) {
-		case 110: goto tr405;
-		case 121: goto tr406;
+		case 110: goto tr399;
+		case 121: goto tr400;
 	}
-	goto tr264;
-tr405:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+	goto tr349;
+tr399:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st194;
 st194:
 	if ( ++p == pe )
-		goto _out194;
+		goto _test_eof194;
 case 194:
-#line 5412 "ext/hpricot_scan/hpricot_scan.c"
+#line 5818 "hpricot_scan.c"
 	if ( (*p) == 111 )
 		goto st195;
-	goto tr264;
+	goto tr349;
 st195:
 	if ( ++p == pe )
-		goto _out195;
+		goto _test_eof195;
 case 195:
 	if ( (*p) == 39 )
-		goto tr279;
-	goto tr264;
-tr406:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr396;
+	goto tr349;
+tr400:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st196;
 st196:
 	if ( ++p == pe )
-		goto _out196;
+		goto _test_eof196;
 case 196:
-#line 5431 "ext/hpricot_scan/hpricot_scan.c"
+#line 5837 "hpricot_scan.c"
 	if ( (*p) == 101 )
 		goto st197;
-	goto tr264;
+	goto tr349;
 st197:
 	if ( ++p == pe )
-		goto _out197;
+		goto _test_eof197;
 case 197:
 	if ( (*p) == 115 )
 		goto st195;
-	goto tr264;
+	goto tr349;
 st198:
 	if ( ++p == pe )
-		goto _out198;
+		goto _test_eof198;
 case 198:
 	if ( (*p) > 90 ) {
 		if ( 97 <= (*p) && (*p) <= 122 )
-			goto tr383;
+			goto tr403;
 	} else if ( (*p) >= 65 )
-		goto tr383;
-	goto tr264;
-tr383:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr403;
+	goto tr349;
+tr403:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st199;
 st199:
 	if ( ++p == pe )
-		goto _out199;
+		goto _test_eof199;
 case 199:
-#line 5460 "ext/hpricot_scan/hpricot_scan.c"
+#line 5866 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 39: goto tr277;
+		case 39: goto tr378;
 		case 95: goto st199;
 	}
 	if ( (*p) < 48 ) {
@@ -5472,36 +5878,36 @@
 			goto st199;
 	} else
 		goto st199;
-	goto tr264;
+	goto tr349;
 st200:
 	if ( ++p == pe )
-		goto _out200;
+		goto _test_eof200;
 case 200:
 	if ( (*p) == 95 )
-		goto tr382;
+		goto tr405;
 	if ( (*p) < 48 ) {
 		if ( 45 <= (*p) && (*p) <= 46 )
-			goto tr382;
+			goto tr405;
 	} else if ( (*p) > 58 ) {
 		if ( (*p) > 90 ) {
 			if ( 97 <= (*p) && (*p) <= 122 )
-				goto tr382;
+				goto tr405;
 		} else if ( (*p) >= 65 )
-			goto tr382;
+			goto tr405;
 	} else
-		goto tr382;
-	goto tr264;
-tr382:
-#line 78 "ext/hpricot_scan/hpricot_scan.rl"
+		goto tr405;
+	goto tr349;
+tr405:
+#line 105 "hpricot_scan.rl"
 	{ mark_aval = p; }
 	goto st201;
 st201:
 	if ( ++p == pe )
-		goto _out201;
+		goto _test_eof201;
 case 201:
-#line 5503 "ext/hpricot_scan/hpricot_scan.c"
+#line 5909 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 39: goto tr275;
+		case 39: goto tr360;
 		case 95: goto st201;
 	}
 	if ( (*p) < 48 ) {
@@ -5515,394 +5921,616 @@
 			goto st201;
 	} else
 		goto st201;
-	goto tr264;
-tr409:
-#line 51 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+	goto tr349;
+tr407:
+#line 51 "hpricot_scan.rl"
+	{{p = ((te))-1;}{ TEXT_PASS(); }}
 	goto st214;
-tr411:
-#line 51 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+tr408:
+#line 50 "hpricot_scan.rl"
+	{ EBLK(comment, 3); {goto st204;} }
+#line 50 "hpricot_scan.rl"
+	{te = p+1;}
 	goto st214;
-tr412:
-#line 9 "ext/hpricot_scan/hpricot_scan.rl"
-	{curline += 1;}
-#line 51 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+tr422:
+#line 51 "hpricot_scan.rl"
+	{te = p+1;{ TEXT_PASS(); }}
 	goto st214;
-tr414:
-#line 51 "ext/hpricot_scan/hpricot_scan.rl"
-	{{ TEXT_PASS(); }{p = ((tokend))-1;}}
+tr423:
+#line 9 "hpricot_scan.rl"
+	{curline += 1;}
+#line 51 "hpricot_scan.rl"
+	{te = p+1;{ TEXT_PASS(); }}
 	goto st214;
-tr415:
-#line 50 "ext/hpricot_scan/hpricot_scan.rl"
-	{ EBLK(comment, 3); {goto st204;} }
-#line 50 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{p = ((tokend))-1;}}
+tr425:
+#line 51 "hpricot_scan.rl"
+	{te = p;p--;{ TEXT_PASS(); }}
 	goto st214;
 st214:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokstart = 0;}
+#line 1 "hpricot_scan.rl"
+	{ts = 0;}
 	if ( ++p == pe )
-		goto _out214;
+		goto _test_eof214;
 case 214:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokstart = p;}
-#line 5552 "ext/hpricot_scan/hpricot_scan.c"
+#line 1 "hpricot_scan.rl"
+	{ts = p;}
+#line 5958 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 10: goto tr412;
-		case 45: goto tr413;
+		case 10: goto tr423;
+		case 45: goto tr424;
 	}
-	goto tr411;
-tr413:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
+	goto tr422;
+tr424:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
 	goto st215;
 st215:
 	if ( ++p == pe )
-		goto _out215;
+		goto _test_eof215;
 case 215:
-#line 5566 "ext/hpricot_scan/hpricot_scan.c"
+#line 5972 "hpricot_scan.c"
 	if ( (*p) == 45 )
 		goto st202;
-	goto tr409;
+	goto tr425;
 st202:
 	if ( ++p == pe )
-		goto _out202;
+		goto _test_eof202;
 case 202:
 	if ( (*p) == 62 )
-		goto tr415;
-	goto tr414;
-tr416:
-#line 56 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+		goto tr408;
+	goto tr407;
+tr409:
+#line 56 "hpricot_scan.rl"
+	{{p = ((te))-1;}{ TEXT_PASS(); }}
+	goto st216;
+tr410:
+#line 55 "hpricot_scan.rl"
+	{ EBLK(cdata, 3); {goto st204;} }
+#line 55 "hpricot_scan.rl"
+	{te = p+1;}
 	goto st216;
-tr418:
-#line 56 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+tr427:
+#line 56 "hpricot_scan.rl"
+	{te = p+1;{ TEXT_PASS(); }}
 	goto st216;
-tr419:
-#line 9 "ext/hpricot_scan/hpricot_scan.rl"
+tr428:
+#line 9 "hpricot_scan.rl"
 	{curline += 1;}
-#line 56 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+#line 56 "hpricot_scan.rl"
+	{te = p+1;{ TEXT_PASS(); }}
 	goto st216;
-tr421:
-#line 56 "ext/hpricot_scan/hpricot_scan.rl"
-	{{ TEXT_PASS(); }{p = ((tokend))-1;}}
-	goto st216;
-tr422:
-#line 55 "ext/hpricot_scan/hpricot_scan.rl"
-	{ EBLK(cdata, 3); {goto st204;} }
-#line 55 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{p = ((tokend))-1;}}
+tr430:
+#line 56 "hpricot_scan.rl"
+	{te = p;p--;{ TEXT_PASS(); }}
 	goto st216;
 st216:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokstart = 0;}
+#line 1 "hpricot_scan.rl"
+	{ts = 0;}
 	if ( ++p == pe )
-		goto _out216;
+		goto _test_eof216;
 case 216:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokstart = p;}
-#line 5609 "ext/hpricot_scan/hpricot_scan.c"
-	switch( (*p) ) {
-		case 10: goto tr419;
-		case 93: goto tr420;
-	}
-	goto tr418;
-tr420:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;}
+#line 1 "hpricot_scan.rl"
+	{ts = p;}
+#line 6015 "hpricot_scan.c"
+	switch( (*p) ) {
+		case 10: goto tr428;
+		case 93: goto tr429;
+	}
+	goto tr427;
+tr429:
+#line 1 "hpricot_scan.rl"
+	{te = p+1;}
 	goto st217;
 st217:
 	if ( ++p == pe )
-		goto _out217;
+		goto _test_eof217;
 case 217:
-#line 5623 "ext/hpricot_scan/hpricot_scan.c"
+#line 6029 "hpricot_scan.c"
 	if ( (*p) == 93 )
 		goto st203;
-	goto tr416;
+	goto tr430;
 st203:
 	if ( ++p == pe )
-		goto _out203;
+		goto _test_eof203;
 case 203:
 	if ( (*p) == 62 )
-		goto tr422;
-	goto tr421;
-tr423:
-#line 61 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+		goto tr410;
+	goto tr409;
+tr432:
+#line 61 "hpricot_scan.rl"
+	{te = p+1;{ TEXT_PASS(); }}
 	goto st218;
-tr424:
-#line 60 "ext/hpricot_scan/hpricot_scan.rl"
-	{ EBLK(procins, 2); {goto st204;} }
-#line 60 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{p = ((tokend))-1;}}
+tr433:
+#line 9 "hpricot_scan.rl"
+	{curline += 1;}
+#line 61 "hpricot_scan.rl"
+	{te = p+1;{ TEXT_PASS(); }}
 	goto st218;
-tr425:
-#line 61 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+tr434:
+#line 60 "hpricot_scan.rl"
+	{ EBLK(procins, 2); {goto st204;} }
+#line 60 "hpricot_scan.rl"
+	{te = p+1;}
 	goto st218;
-tr426:
-#line 9 "ext/hpricot_scan/hpricot_scan.rl"
-	{curline += 1;}
-#line 61 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokend = p+1;{ TEXT_PASS(); }{p = ((tokend))-1;}}
+tr436:
+#line 61 "hpricot_scan.rl"
+	{te = p;p--;{ TEXT_PASS(); }}
 	goto st218;
 st218:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokstart = 0;}
+#line 1 "hpricot_scan.rl"
+	{ts = 0;}
 	if ( ++p == pe )
-		goto _out218;
+		goto _test_eof218;
 case 218:
-#line 1 "ext/hpricot_scan/hpricot_scan.rl"
-	{tokstart = p;}
-#line 5662 "ext/hpricot_scan/hpricot_scan.c"
+#line 1 "hpricot_scan.rl"
+	{ts = p;}
+#line 6068 "hpricot_scan.c"
 	switch( (*p) ) {
-		case 10: goto tr426;
-		case 62: goto tr424;
+		case 10: goto tr433;
+		case 62: goto tr434;
 		case 63: goto st219;
 	}
-	goto tr425;
+	goto tr432;
 st219:
 	if ( ++p == pe )
-		goto _out219;
+		goto _test_eof219;
 case 219:
 	if ( (*p) == 62 )
-		goto tr424;
-	goto tr423;
+		goto tr434;
+	goto tr436;
+	}
+	_test_eof204: cs = 204; goto _test_eof; 
+	_test_eof205: cs = 205; goto _test_eof; 
+	_test_eof0: cs = 0; goto _test_eof; 
+	_test_eof1: cs = 1; goto _test_eof; 
+	_test_eof2: cs = 2; goto _test_eof; 
+	_test_eof3: cs = 3; goto _test_eof; 
+	_test_eof4: cs = 4; goto _test_eof; 
+	_test_eof5: cs = 5; goto _test_eof; 
+	_test_eof6: cs = 6; goto _test_eof; 
+	_test_eof7: cs = 7; goto _test_eof; 
+	_test_eof8: cs = 8; goto _test_eof; 
+	_test_eof9: cs = 9; goto _test_eof; 
+	_test_eof10: cs = 10; goto _test_eof; 
+	_test_eof11: cs = 11; goto _test_eof; 
+	_test_eof12: cs = 12; goto _test_eof; 
+	_test_eof13: cs = 13; goto _test_eof; 
+	_test_eof14: cs = 14; goto _test_eof; 
+	_test_eof15: cs = 15; goto _test_eof; 
+	_test_eof16: cs = 16; goto _test_eof; 
+	_test_eof17: cs = 17; goto _test_eof; 
+	_test_eof18: cs = 18; goto _test_eof; 
+	_test_eof19: cs = 19; goto _test_eof; 
+	_test_eof20: cs = 20; goto _test_eof; 
+	_test_eof21: cs = 21; goto _test_eof; 
+	_test_eof22: cs = 22; goto _test_eof; 
+	_test_eof23: cs = 23; goto _test_eof; 
+	_test_eof24: cs = 24; goto _test_eof; 
+	_test_eof25: cs = 25; goto _test_eof; 
+	_test_eof26: cs = 26; goto _test_eof; 
+	_test_eof27: cs = 27; goto _test_eof; 
+	_test_eof28: cs = 28; goto _test_eof; 
+	_test_eof29: cs = 29; goto _test_eof; 
+	_test_eof30: cs = 30; goto _test_eof; 
+	_test_eof31: cs = 31; goto _test_eof; 
+	_test_eof32: cs = 32; goto _test_eof; 
+	_test_eof33: cs = 33; goto _test_eof; 
+	_test_eof34: cs = 34; goto _test_eof; 
+	_test_eof35: cs = 35; goto _test_eof; 
+	_test_eof36: cs = 36; goto _test_eof; 
+	_test_eof37: cs = 37; goto _test_eof; 
+	_test_eof38: cs = 38; goto _test_eof; 
+	_test_eof39: cs = 39; goto _test_eof; 
+	_test_eof206: cs = 206; goto _test_eof; 
+	_test_eof40: cs = 40; goto _test_eof; 
+	_test_eof41: cs = 41; goto _test_eof; 
+	_test_eof207: cs = 207; goto _test_eof; 
+	_test_eof42: cs = 42; goto _test_eof; 
+	_test_eof43: cs = 43; goto _test_eof; 
+	_test_eof208: cs = 208; goto _test_eof; 
+	_test_eof44: cs = 44; goto _test_eof; 
+	_test_eof45: cs = 45; goto _test_eof; 
+	_test_eof46: cs = 46; goto _test_eof; 
+	_test_eof47: cs = 47; goto _test_eof; 
+	_test_eof48: cs = 48; goto _test_eof; 
+	_test_eof49: cs = 49; goto _test_eof; 
+	_test_eof50: cs = 50; goto _test_eof; 
+	_test_eof51: cs = 51; goto _test_eof; 
+	_test_eof52: cs = 52; goto _test_eof; 
+	_test_eof53: cs = 53; goto _test_eof; 
+	_test_eof54: cs = 54; goto _test_eof; 
+	_test_eof55: cs = 55; goto _test_eof; 
+	_test_eof56: cs = 56; goto _test_eof; 
+	_test_eof57: cs = 57; goto _test_eof; 
+	_test_eof58: cs = 58; goto _test_eof; 
+	_test_eof59: cs = 59; goto _test_eof; 
+	_test_eof60: cs = 60; goto _test_eof; 
+	_test_eof61: cs = 61; goto _test_eof; 
+	_test_eof62: cs = 62; goto _test_eof; 
+	_test_eof63: cs = 63; goto _test_eof; 
+	_test_eof64: cs = 64; goto _test_eof; 
+	_test_eof65: cs = 65; goto _test_eof; 
+	_test_eof66: cs = 66; goto _test_eof; 
+	_test_eof67: cs = 67; goto _test_eof; 
+	_test_eof68: cs = 68; goto _test_eof; 
+	_test_eof69: cs = 69; goto _test_eof; 
+	_test_eof70: cs = 70; goto _test_eof; 
+	_test_eof71: cs = 71; goto _test_eof; 
+	_test_eof72: cs = 72; goto _test_eof; 
+	_test_eof73: cs = 73; goto _test_eof; 
+	_test_eof74: cs = 74; goto _test_eof; 
+	_test_eof75: cs = 75; goto _test_eof; 
+	_test_eof76: cs = 76; goto _test_eof; 
+	_test_eof77: cs = 77; goto _test_eof; 
+	_test_eof78: cs = 78; goto _test_eof; 
+	_test_eof79: cs = 79; goto _test_eof; 
+	_test_eof80: cs = 80; goto _test_eof; 
+	_test_eof81: cs = 81; goto _test_eof; 
+	_test_eof82: cs = 82; goto _test_eof; 
+	_test_eof83: cs = 83; goto _test_eof; 
+	_test_eof84: cs = 84; goto _test_eof; 
+	_test_eof209: cs = 209; goto _test_eof; 
+	_test_eof85: cs = 85; goto _test_eof; 
+	_test_eof86: cs = 86; goto _test_eof; 
+	_test_eof87: cs = 87; goto _test_eof; 
+	_test_eof88: cs = 88; goto _test_eof; 
+	_test_eof89: cs = 89; goto _test_eof; 
+	_test_eof90: cs = 90; goto _test_eof; 
+	_test_eof91: cs = 91; goto _test_eof; 
+	_test_eof92: cs = 92; goto _test_eof; 
+	_test_eof93: cs = 93; goto _test_eof; 
+	_test_eof94: cs = 94; goto _test_eof; 
+	_test_eof95: cs = 95; goto _test_eof; 
+	_test_eof96: cs = 96; goto _test_eof; 
+	_test_eof97: cs = 97; goto _test_eof; 
+	_test_eof98: cs = 98; goto _test_eof; 
+	_test_eof99: cs = 99; goto _test_eof; 
+	_test_eof100: cs = 100; goto _test_eof; 
+	_test_eof101: cs = 101; goto _test_eof; 
+	_test_eof102: cs = 102; goto _test_eof; 
+	_test_eof103: cs = 103; goto _test_eof; 
+	_test_eof104: cs = 104; goto _test_eof; 
+	_test_eof105: cs = 105; goto _test_eof; 
+	_test_eof210: cs = 210; goto _test_eof; 
+	_test_eof106: cs = 106; goto _test_eof; 
+	_test_eof107: cs = 107; goto _test_eof; 
+	_test_eof108: cs = 108; goto _test_eof; 
+	_test_eof109: cs = 109; goto _test_eof; 
+	_test_eof110: cs = 110; goto _test_eof; 
+	_test_eof111: cs = 111; goto _test_eof; 
+	_test_eof112: cs = 112; goto _test_eof; 
+	_test_eof113: cs = 113; goto _test_eof; 
+	_test_eof114: cs = 114; goto _test_eof; 
+	_test_eof115: cs = 115; goto _test_eof; 
+	_test_eof116: cs = 116; goto _test_eof; 
+	_test_eof117: cs = 117; goto _test_eof; 
+	_test_eof118: cs = 118; goto _test_eof; 
+	_test_eof119: cs = 119; goto _test_eof; 
+	_test_eof120: cs = 120; goto _test_eof; 
+	_test_eof121: cs = 121; goto _test_eof; 
+	_test_eof211: cs = 211; goto _test_eof; 
+	_test_eof122: cs = 122; goto _test_eof; 
+	_test_eof123: cs = 123; goto _test_eof; 
+	_test_eof124: cs = 124; goto _test_eof; 
+	_test_eof125: cs = 125; goto _test_eof; 
+	_test_eof126: cs = 126; goto _test_eof; 
+	_test_eof127: cs = 127; goto _test_eof; 
+	_test_eof128: cs = 128; goto _test_eof; 
+	_test_eof129: cs = 129; goto _test_eof; 
+	_test_eof130: cs = 130; goto _test_eof; 
+	_test_eof131: cs = 131; goto _test_eof; 
+	_test_eof132: cs = 132; goto _test_eof; 
+	_test_eof133: cs = 133; goto _test_eof; 
+	_test_eof134: cs = 134; goto _test_eof; 
+	_test_eof135: cs = 135; goto _test_eof; 
+	_test_eof136: cs = 136; goto _test_eof; 
+	_test_eof137: cs = 137; goto _test_eof; 
+	_test_eof138: cs = 138; goto _test_eof; 
+	_test_eof139: cs = 139; goto _test_eof; 
+	_test_eof140: cs = 140; goto _test_eof; 
+	_test_eof141: cs = 141; goto _test_eof; 
+	_test_eof142: cs = 142; goto _test_eof; 
+	_test_eof143: cs = 143; goto _test_eof; 
+	_test_eof144: cs = 144; goto _test_eof; 
+	_test_eof145: cs = 145; goto _test_eof; 
+	_test_eof146: cs = 146; goto _test_eof; 
+	_test_eof212: cs = 212; goto _test_eof; 
+	_test_eof147: cs = 147; goto _test_eof; 
+	_test_eof148: cs = 148; goto _test_eof; 
+	_test_eof149: cs = 149; goto _test_eof; 
+	_test_eof213: cs = 213; goto _test_eof; 
+	_test_eof150: cs = 150; goto _test_eof; 
+	_test_eof151: cs = 151; goto _test_eof; 
+	_test_eof152: cs = 152; goto _test_eof; 
+	_test_eof153: cs = 153; goto _test_eof; 
+	_test_eof154: cs = 154; goto _test_eof; 
+	_test_eof155: cs = 155; goto _test_eof; 
+	_test_eof156: cs = 156; goto _test_eof; 
+	_test_eof157: cs = 157; goto _test_eof; 
+	_test_eof158: cs = 158; goto _test_eof; 
+	_test_eof159: cs = 159; goto _test_eof; 
+	_test_eof160: cs = 160; goto _test_eof; 
+	_test_eof161: cs = 161; goto _test_eof; 
+	_test_eof162: cs = 162; goto _test_eof; 
+	_test_eof163: cs = 163; goto _test_eof; 
+	_test_eof164: cs = 164; goto _test_eof; 
+	_test_eof165: cs = 165; goto _test_eof; 
+	_test_eof166: cs = 166; goto _test_eof; 
+	_test_eof167: cs = 167; goto _test_eof; 
+	_test_eof168: cs = 168; goto _test_eof; 
+	_test_eof169: cs = 169; goto _test_eof; 
+	_test_eof170: cs = 170; goto _test_eof; 
+	_test_eof171: cs = 171; goto _test_eof; 
+	_test_eof172: cs = 172; goto _test_eof; 
+	_test_eof173: cs = 173; goto _test_eof; 
+	_test_eof174: cs = 174; goto _test_eof; 
+	_test_eof175: cs = 175; goto _test_eof; 
+	_test_eof176: cs = 176; goto _test_eof; 
+	_test_eof177: cs = 177; goto _test_eof; 
+	_test_eof178: cs = 178; goto _test_eof; 
+	_test_eof179: cs = 179; goto _test_eof; 
+	_test_eof180: cs = 180; goto _test_eof; 
+	_test_eof181: cs = 181; goto _test_eof; 
+	_test_eof182: cs = 182; goto _test_eof; 
+	_test_eof183: cs = 183; goto _test_eof; 
+	_test_eof184: cs = 184; goto _test_eof; 
+	_test_eof185: cs = 185; goto _test_eof; 
+	_test_eof186: cs = 186; goto _test_eof; 
+	_test_eof187: cs = 187; goto _test_eof; 
+	_test_eof188: cs = 188; goto _test_eof; 
+	_test_eof189: cs = 189; goto _test_eof; 
+	_test_eof190: cs = 190; goto _test_eof; 
+	_test_eof191: cs = 191; goto _test_eof; 
+	_test_eof192: cs = 192; goto _test_eof; 
+	_test_eof193: cs = 193; goto _test_eof; 
+	_test_eof194: cs = 194; goto _test_eof; 
+	_test_eof195: cs = 195; goto _test_eof; 
+	_test_eof196: cs = 196; goto _test_eof; 
+	_test_eof197: cs = 197; goto _test_eof; 
+	_test_eof198: cs = 198; goto _test_eof; 
+	_test_eof199: cs = 199; goto _test_eof; 
+	_test_eof200: cs = 200; goto _test_eof; 
+	_test_eof201: cs = 201; goto _test_eof; 
+	_test_eof214: cs = 214; goto _test_eof; 
+	_test_eof215: cs = 215; goto _test_eof; 
+	_test_eof202: cs = 202; goto _test_eof; 
+	_test_eof216: cs = 216; goto _test_eof; 
+	_test_eof217: cs = 217; goto _test_eof; 
+	_test_eof203: cs = 203; goto _test_eof; 
+	_test_eof218: cs = 218; goto _test_eof; 
+	_test_eof219: cs = 219; goto _test_eof; 
+
+	_test_eof: {}
+	if ( p == eof )
+	{
+	switch ( cs ) {
+	case 205: goto tr414;
+	case 0: goto tr0;
+	case 1: goto tr0;
+	case 2: goto tr0;
+	case 3: goto tr0;
+	case 4: goto tr0;
+	case 5: goto tr0;
+	case 6: goto tr0;
+	case 7: goto tr0;
+	case 8: goto tr0;
+	case 9: goto tr0;
+	case 10: goto tr0;
+	case 11: goto tr0;
+	case 12: goto tr0;
+	case 13: goto tr0;
+	case 14: goto tr0;
+	case 15: goto tr0;
+	case 16: goto tr0;
+	case 17: goto tr0;
+	case 18: goto tr0;
+	case 19: goto tr0;
+	case 20: goto tr0;
+	case 21: goto tr0;
+	case 22: goto tr0;
+	case 23: goto tr0;
+	case 24: goto tr39;
+	case 25: goto tr39;
+	case 26: goto tr39;
+	case 27: goto tr39;
+	case 28: goto tr0;
+	case 29: goto tr39;
+	case 30: goto tr0;
+	case 31: goto tr0;
+	case 32: goto tr0;
+	case 33: goto tr0;
+	case 34: goto tr0;
+	case 35: goto tr0;
+	case 36: goto tr0;
+	case 37: goto tr0;
+	case 38: goto tr0;
+	case 39: goto tr0;
+	case 206: goto tr419;
+	case 40: goto tr0;
+	case 41: goto tr0;
+	case 207: goto tr419;
+	case 42: goto tr0;
+	case 43: goto tr0;
+	case 208: goto tr419;
+	case 44: goto tr0;
+	case 45: goto tr0;
+	case 46: goto tr0;
+	case 47: goto tr0;
+	case 48: goto tr0;
+	case 49: goto tr0;
+	case 50: goto tr0;
+	case 51: goto tr0;
+	case 52: goto tr0;
+	case 53: goto tr0;
+	case 54: goto tr0;
+	case 55: goto tr0;
+	case 56: goto tr0;
+	case 57: goto tr0;
+	case 58: goto tr0;
+	case 59: goto tr0;
+	case 60: goto tr0;
+	case 61: goto tr0;
+	case 62: goto tr0;
+	case 63: goto tr0;
+	case 64: goto tr39;
+	case 65: goto tr39;
+	case 66: goto tr39;
+	case 67: goto tr39;
+	case 68: goto tr39;
+	case 69: goto tr39;
+	case 70: goto tr39;
+	case 71: goto tr39;
+	case 72: goto tr39;
+	case 73: goto tr39;
+	case 74: goto tr39;
+	case 75: goto tr39;
+	case 76: goto tr39;
+	case 77: goto tr39;
+	case 78: goto tr39;
+	case 79: goto tr39;
+	case 80: goto tr39;
+	case 81: goto tr39;
+	case 82: goto tr39;
+	case 83: goto tr39;
+	case 84: goto tr39;
+	case 209: goto tr39;
+	case 85: goto tr39;
+	case 86: goto tr39;
+	case 87: goto tr39;
+	case 88: goto tr39;
+	case 89: goto tr39;
+	case 90: goto tr39;
+	case 91: goto tr39;
+	case 92: goto tr39;
+	case 93: goto tr39;
+	case 94: goto tr39;
+	case 95: goto tr39;
+	case 96: goto tr39;
+	case 97: goto tr39;
+	case 98: goto tr39;
+	case 99: goto tr39;
+	case 100: goto tr39;
+	case 101: goto tr39;
+	case 102: goto tr39;
+	case 103: goto tr39;
+	case 104: goto tr39;
+	case 105: goto tr39;
+	case 210: goto tr39;
+	case 106: goto tr39;
+	case 107: goto tr39;
+	case 108: goto tr39;
+	case 109: goto tr39;
+	case 110: goto tr39;
+	case 111: goto tr39;
+	case 112: goto tr39;
+	case 113: goto tr39;
+	case 114: goto tr39;
+	case 115: goto tr39;
+	case 116: goto tr39;
+	case 117: goto tr39;
+	case 118: goto tr39;
+	case 119: goto tr39;
+	case 120: goto tr39;
+	case 121: goto tr39;
+	case 211: goto tr39;
+	case 122: goto tr39;
+	case 123: goto tr39;
+	case 124: goto tr39;
+	case 125: goto tr39;
+	case 126: goto tr39;
+	case 127: goto tr39;
+	case 128: goto tr39;
+	case 129: goto tr39;
+	case 130: goto tr39;
+	case 131: goto tr39;
+	case 132: goto tr39;
+	case 133: goto tr39;
+	case 134: goto tr39;
+	case 135: goto tr39;
+	case 136: goto tr39;
+	case 137: goto tr39;
+	case 138: goto tr39;
+	case 139: goto tr39;
+	case 140: goto tr39;
+	case 141: goto tr39;
+	case 142: goto tr39;
+	case 143: goto tr39;
+	case 144: goto tr39;
+	case 145: goto tr0;
+	case 146: goto tr0;
+	case 212: goto tr420;
+	case 147: goto tr0;
+	case 148: goto tr0;
+	case 149: goto tr0;
+	case 213: goto tr420;
+	case 150: goto tr349;
+	case 151: goto tr349;
+	case 152: goto tr349;
+	case 153: goto tr349;
+	case 154: goto tr349;
+	case 155: goto tr349;
+	case 156: goto tr349;
+	case 157: goto tr349;
+	case 158: goto tr349;
+	case 159: goto tr349;
+	case 160: goto tr349;
+	case 161: goto tr349;
+	case 162: goto tr349;
+	case 163: goto tr349;
+	case 164: goto tr349;
+	case 165: goto tr349;
+	case 166: goto tr349;
+	case 167: goto tr349;
+	case 168: goto tr349;
+	case 169: goto tr349;
+	case 170: goto tr349;
+	case 171: goto tr349;
+	case 172: goto tr349;
+	case 173: goto tr349;
+	case 174: goto tr349;
+	case 175: goto tr349;
+	case 176: goto tr349;
+	case 177: goto tr349;
+	case 178: goto tr349;
+	case 179: goto tr349;
+	case 180: goto tr349;
+	case 181: goto tr349;
+	case 182: goto tr349;
+	case 183: goto tr349;
+	case 184: goto tr349;
+	case 185: goto tr349;
+	case 186: goto tr349;
+	case 187: goto tr349;
+	case 188: goto tr349;
+	case 189: goto tr349;
+	case 190: goto tr349;
+	case 191: goto tr349;
+	case 192: goto tr349;
+	case 193: goto tr349;
+	case 194: goto tr349;
+	case 195: goto tr349;
+	case 196: goto tr349;
+	case 197: goto tr349;
+	case 198: goto tr349;
+	case 199: goto tr349;
+	case 200: goto tr349;
+	case 201: goto tr349;
+	case 215: goto tr425;
+	case 202: goto tr407;
+	case 217: goto tr430;
+	case 203: goto tr409;
+	case 219: goto tr436;
+	}
 	}
-	_out204: cs = 204; goto _out; 
-	_out205: cs = 205; goto _out; 
-	_out0: cs = 0; goto _out; 
-	_out1: cs = 1; goto _out; 
-	_out2: cs = 2; goto _out; 
-	_out3: cs = 3; goto _out; 
-	_out4: cs = 4; goto _out; 
-	_out5: cs = 5; goto _out; 
-	_out6: cs = 6; goto _out; 
-	_out7: cs = 7; goto _out; 
-	_out8: cs = 8; goto _out; 
-	_out9: cs = 9; goto _out; 
-	_out10: cs = 10; goto _out; 
-	_out11: cs = 11; goto _out; 
-	_out12: cs = 12; goto _out; 
-	_out13: cs = 13; goto _out; 
-	_out14: cs = 14; goto _out; 
-	_out15: cs = 15; goto _out; 
-	_out16: cs = 16; goto _out; 
-	_out17: cs = 17; goto _out; 
-	_out18: cs = 18; goto _out; 
-	_out19: cs = 19; goto _out; 
-	_out20: cs = 20; goto _out; 
-	_out21: cs = 21; goto _out; 
-	_out22: cs = 22; goto _out; 
-	_out23: cs = 23; goto _out; 
-	_out24: cs = 24; goto _out; 
-	_out25: cs = 25; goto _out; 
-	_out26: cs = 26; goto _out; 
-	_out27: cs = 27; goto _out; 
-	_out28: cs = 28; goto _out; 
-	_out29: cs = 29; goto _out; 
-	_out30: cs = 30; goto _out; 
-	_out31: cs = 31; goto _out; 
-	_out32: cs = 32; goto _out; 
-	_out33: cs = 33; goto _out; 
-	_out34: cs = 34; goto _out; 
-	_out35: cs = 35; goto _out; 
-	_out36: cs = 36; goto _out; 
-	_out37: cs = 37; goto _out; 
-	_out38: cs = 38; goto _out; 
-	_out39: cs = 39; goto _out; 
-	_out206: cs = 206; goto _out; 
-	_out40: cs = 40; goto _out; 
-	_out41: cs = 41; goto _out; 
-	_out207: cs = 207; goto _out; 
-	_out42: cs = 42; goto _out; 
-	_out43: cs = 43; goto _out; 
-	_out208: cs = 208; goto _out; 
-	_out44: cs = 44; goto _out; 
-	_out45: cs = 45; goto _out; 
-	_out46: cs = 46; goto _out; 
-	_out47: cs = 47; goto _out; 
-	_out48: cs = 48; goto _out; 
-	_out49: cs = 49; goto _out; 
-	_out50: cs = 50; goto _out; 
-	_out51: cs = 51; goto _out; 
-	_out52: cs = 52; goto _out; 
-	_out53: cs = 53; goto _out; 
-	_out54: cs = 54; goto _out; 
-	_out55: cs = 55; goto _out; 
-	_out56: cs = 56; goto _out; 
-	_out57: cs = 57; goto _out; 
-	_out58: cs = 58; goto _out; 
-	_out59: cs = 59; goto _out; 
-	_out60: cs = 60; goto _out; 
-	_out61: cs = 61; goto _out; 
-	_out62: cs = 62; goto _out; 
-	_out63: cs = 63; goto _out; 
-	_out64: cs = 64; goto _out; 
-	_out65: cs = 65; goto _out; 
-	_out66: cs = 66; goto _out; 
-	_out67: cs = 67; goto _out; 
-	_out68: cs = 68; goto _out; 
-	_out69: cs = 69; goto _out; 
-	_out70: cs = 70; goto _out; 
-	_out71: cs = 71; goto _out; 
-	_out72: cs = 72; goto _out; 
-	_out73: cs = 73; goto _out; 
-	_out74: cs = 74; goto _out; 
-	_out75: cs = 75; goto _out; 
-	_out76: cs = 76; goto _out; 
-	_out77: cs = 77; goto _out; 
-	_out78: cs = 78; goto _out; 
-	_out79: cs = 79; goto _out; 
-	_out80: cs = 80; goto _out; 
-	_out81: cs = 81; goto _out; 
-	_out82: cs = 82; goto _out; 
-	_out83: cs = 83; goto _out; 
-	_out84: cs = 84; goto _out; 
-	_out209: cs = 209; goto _out; 
-	_out85: cs = 85; goto _out; 
-	_out86: cs = 86; goto _out; 
-	_out87: cs = 87; goto _out; 
-	_out88: cs = 88; goto _out; 
-	_out89: cs = 89; goto _out; 
-	_out90: cs = 90; goto _out; 
-	_out91: cs = 91; goto _out; 
-	_out92: cs = 92; goto _out; 
-	_out93: cs = 93; goto _out; 
-	_out94: cs = 94; goto _out; 
-	_out95: cs = 95; goto _out; 
-	_out96: cs = 96; goto _out; 
-	_out97: cs = 97; goto _out; 
-	_out98: cs = 98; goto _out; 
-	_out99: cs = 99; goto _out; 
-	_out100: cs = 100; goto _out; 
-	_out101: cs = 101; goto _out; 
-	_out102: cs = 102; goto _out; 
-	_out103: cs = 103; goto _out; 
-	_out104: cs = 104; goto _out; 
-	_out105: cs = 105; goto _out; 
-	_out210: cs = 210; goto _out; 
-	_out106: cs = 106; goto _out; 
-	_out107: cs = 107; goto _out; 
-	_out108: cs = 108; goto _out; 
-	_out109: cs = 109; goto _out; 
-	_out110: cs = 110; goto _out; 
-	_out111: cs = 111; goto _out; 
-	_out112: cs = 112; goto _out; 
-	_out113: cs = 113; goto _out; 
-	_out114: cs = 114; goto _out; 
-	_out115: cs = 115; goto _out; 
-	_out116: cs = 116; goto _out; 
-	_out117: cs = 117; goto _out; 
-	_out118: cs = 118; goto _out; 
-	_out119: cs = 119; goto _out; 
-	_out120: cs = 120; goto _out; 
-	_out121: cs = 121; goto _out; 
-	_out211: cs = 211; goto _out; 
-	_out122: cs = 122; goto _out; 
-	_out123: cs = 123; goto _out; 
-	_out124: cs = 124; goto _out; 
-	_out125: cs = 125; goto _out; 
-	_out126: cs = 126; goto _out; 
-	_out127: cs = 127; goto _out; 
-	_out128: cs = 128; goto _out; 
-	_out129: cs = 129; goto _out; 
-	_out130: cs = 130; goto _out; 
-	_out131: cs = 131; goto _out; 
-	_out132: cs = 132; goto _out; 
-	_out133: cs = 133; goto _out; 
-	_out134: cs = 134; goto _out; 
-	_out135: cs = 135; goto _out; 
-	_out136: cs = 136; goto _out; 
-	_out137: cs = 137; goto _out; 
-	_out138: cs = 138; goto _out; 
-	_out139: cs = 139; goto _out; 
-	_out140: cs = 140; goto _out; 
-	_out141: cs = 141; goto _out; 
-	_out142: cs = 142; goto _out; 
-	_out143: cs = 143; goto _out; 
-	_out144: cs = 144; goto _out; 
-	_out145: cs = 145; goto _out; 
-	_out146: cs = 146; goto _out; 
-	_out212: cs = 212; goto _out; 
-	_out147: cs = 147; goto _out; 
-	_out148: cs = 148; goto _out; 
-	_out149: cs = 149; goto _out; 
-	_out213: cs = 213; goto _out; 
-	_out150: cs = 150; goto _out; 
-	_out151: cs = 151; goto _out; 
-	_out152: cs = 152; goto _out; 
-	_out153: cs = 153; goto _out; 
-	_out154: cs = 154; goto _out; 
-	_out155: cs = 155; goto _out; 
-	_out156: cs = 156; goto _out; 
-	_out157: cs = 157; goto _out; 
-	_out158: cs = 158; goto _out; 
-	_out159: cs = 159; goto _out; 
-	_out160: cs = 160; goto _out; 
-	_out161: cs = 161; goto _out; 
-	_out162: cs = 162; goto _out; 
-	_out163: cs = 163; goto _out; 
-	_out164: cs = 164; goto _out; 
-	_out165: cs = 165; goto _out; 
-	_out166: cs = 166; goto _out; 
-	_out167: cs = 167; goto _out; 
-	_out168: cs = 168; goto _out; 
-	_out169: cs = 169; goto _out; 
-	_out170: cs = 170; goto _out; 
-	_out171: cs = 171; goto _out; 
-	_out172: cs = 172; goto _out; 
-	_out173: cs = 173; goto _out; 
-	_out174: cs = 174; goto _out; 
-	_out175: cs = 175; goto _out; 
-	_out176: cs = 176; goto _out; 
-	_out177: cs = 177; goto _out; 
-	_out178: cs = 178; goto _out; 
-	_out179: cs = 179; goto _out; 
-	_out180: cs = 180; goto _out; 
-	_out181: cs = 181; goto _out; 
-	_out182: cs = 182; goto _out; 
-	_out183: cs = 183; goto _out; 
-	_out184: cs = 184; goto _out; 
-	_out185: cs = 185; goto _out; 
-	_out186: cs = 186; goto _out; 
-	_out187: cs = 187; goto _out; 
-	_out188: cs = 188; goto _out; 
-	_out189: cs = 189; goto _out; 
-	_out190: cs = 190; goto _out; 
-	_out191: cs = 191; goto _out; 
-	_out192: cs = 192; goto _out; 
-	_out193: cs = 193; goto _out; 
-	_out194: cs = 194; goto _out; 
-	_out195: cs = 195; goto _out; 
-	_out196: cs = 196; goto _out; 
-	_out197: cs = 197; goto _out; 
-	_out198: cs = 198; goto _out; 
-	_out199: cs = 199; goto _out; 
-	_out200: cs = 200; goto _out; 
-	_out201: cs = 201; goto _out; 
-	_out214: cs = 214; goto _out; 
-	_out215: cs = 215; goto _out; 
-	_out202: cs = 202; goto _out; 
-	_out216: cs = 216; goto _out; 
-	_out217: cs = 217; goto _out; 
-	_out203: cs = 203; goto _out; 
-	_out218: cs = 218; goto _out; 
-	_out219: cs = 219; goto _out; 
 
-	_out: {}
 	}
-#line 197 "ext/hpricot_scan/hpricot_scan.rl"
+#line 546 "hpricot_scan.rl"
     
     if ( cs == hpricot_scan_error ) {
       free(buf);
       if ( !NIL_P(tag) )
       {
-        rb_raise(rb_eHpricotParseError, "parse error on element <%s>, starting on line %d.\n" NO_WAY_SERIOUSLY, RSTRING(tag)->ptr, curline);
+        rb_raise(rb_eHpricotParseError, "parse error on element <%s>, starting on line %d.\n" NO_WAY_SERIOUSLY, RSTRING_PTR(tag), curline);
       }
       else
       {
@@ -5913,17 +6541,17 @@
     if ( done && ele_open )
     {
       ele_open = 0;
-      if (tokstart > 0) {
-        mark_tag = tokstart;
-        tokstart = 0;
+      if (ts > 0) {
+        mark_tag = ts;
+        ts = 0;
         text = 1;
       }
     }
 
-    if ( tokstart == 0 )
+    if ( ts == 0 )
     {
       have = 0;
-      /* text nodes have no tokstart because each byte is parsed alone */
+      /* text nodes have no ts because each byte is parsed alone */
       if ( mark_tag != NULL && text == 1 )
       {
         if (done)
@@ -5943,27 +6571,98 @@
     }
     else
     {
-      have = pe - tokstart;
-      memmove( buf, tokstart, have );
+      have = pe - ts;
+      memmove( buf, ts, have );
       SLIDE(tag);
       SLIDE(akey);
       SLIDE(aval);
-      tokend = buf + (tokend - tokstart);
-      tokstart = buf;
+      te = buf + (te - ts);
+      ts = buf;
     }
   }
   free(buf);
+
+  if (S != NULL)
+  {
+    VALUE doc = S->doc;
+    rb_gc_unregister_address(&S->doc);
+    free(S);
+    return doc;
+  }
+
+  return Qnil;
 }
 
 void Init_hpricot_scan()
 {
-  VALUE mHpricot = rb_define_module("Hpricot");
+  mHpricot = rb_define_module("Hpricot");
   rb_define_attr(rb_singleton_class(mHpricot), "buffer_size", 1, 1);
-  rb_define_singleton_method(mHpricot, "scan", hpricot_scan, 1);
-  rb_eHpricotParseError = rb_define_class_under(mHpricot, "ParseError", rb_eException);
+  rb_define_singleton_method(mHpricot, "scan", hpricot_scan, -1);
+  rb_define_singleton_method(mHpricot, "css", hpricot_css, 3);
+  rb_eHpricotParseError = rb_define_class_under(mHpricot, "ParseError", rb_eStandardError);
+
+  cDoc = rb_define_class_under(mHpricot, "Doc", rb_cObject);
+  rb_define_alloc_func(cDoc, hpricot_ele_alloc);
+  rb_define_method(cDoc, "children", hpricot_ele_get_children, 0);
+  rb_define_method(cDoc, "children=", hpricot_ele_set_children, 1);
 
+  cBaseEle = rb_define_class_under(mHpricot, "BaseEle", rb_cObject);
+  rb_define_alloc_func(cBaseEle, hpricot_ele_alloc);
+  rb_define_method(cBaseEle, "raw_string", hpricot_ele_get_raw, 0);
+  rb_define_method(cBaseEle, "clear_raw", hpricot_ele_clear_raw, 0);
+  rb_define_method(cBaseEle, "parent", hpricot_ele_get_parent, 0);
+  rb_define_method(cBaseEle, "parent=", hpricot_ele_set_parent, 1);
+  cCData = rb_define_class_under(mHpricot, "CData", cBaseEle);
+  rb_define_method(cCData, "content", hpricot_ele_get_tag, 0);
+  rb_define_method(cCData, "content=", hpricot_ele_set_tag, 1);
+  cComment = rb_define_class_under(mHpricot, "Comment", cBaseEle);
+  rb_define_method(cComment, "content", hpricot_ele_get_tag, 0);
+  rb_define_method(cComment, "content=", hpricot_ele_set_tag, 1);
+  cDocType = rb_define_class_under(mHpricot, "DocType", cBaseEle);
+  rb_define_method(cDocType, "target", hpricot_ele_get_tag, 0);
+  rb_define_method(cDocType, "target=", hpricot_ele_set_tag, 1);
+  rb_define_method(cDocType, "public_id", hpricot_ele_get_public_id, 0);
+  rb_define_method(cDocType, "public_id=", hpricot_ele_set_public_id, 1);
+  rb_define_method(cDocType, "system_id", hpricot_ele_get_system_id, 0);
+  rb_define_method(cDocType, "system_id=", hpricot_ele_set_system_id, 1);
+  cElem = rb_define_class_under(mHpricot, "Elem", cBaseEle);
+  rb_define_method(cElem, "raw_attributes", hpricot_ele_get_attr, 0);
+  rb_define_method(cElem, "raw_attributes=", hpricot_ele_set_attr, 1);
+  rb_define_method(cElem, "children", hpricot_ele_get_children, 0);
+  rb_define_method(cElem, "children=", hpricot_ele_set_children, 1);
+  rb_define_method(cElem, "etag", hpricot_ele_get_etag, 0);
+  rb_define_method(cElem, "etag=", hpricot_ele_set_etag, 1);
+  rb_define_method(cElem, "name", hpricot_ele_get_tag, 0);
+  rb_define_method(cElem, "name=", hpricot_ele_set_tag, 1);
+  cETag = rb_define_class_under(mHpricot, "ETag", cBaseEle);
+  rb_define_method(cETag, "name", hpricot_ele_get_tag, 0);
+  rb_define_method(cETag, "name=", hpricot_ele_set_tag, 1);
+  cBogusETag = rb_define_class_under(mHpricot, "BogusETag", cETag);
+  cText = rb_define_class_under(mHpricot, "Text", cBaseEle);
+  rb_define_method(cText, "content", hpricot_ele_get_tag, 0);
+  rb_define_method(cText, "content=", hpricot_ele_set_tag, 1);
+  cXMLDecl = rb_define_class_under(mHpricot, "XMLDecl", cBaseEle);
+  rb_define_method(cXMLDecl, "encoding", hpricot_ele_get_encoding, 0);
+  rb_define_method(cXMLDecl, "encoding=", hpricot_ele_set_encoding, 1);
+  rb_define_method(cXMLDecl, "standalone", hpricot_ele_get_standalone, 0);
+  rb_define_method(cXMLDecl, "standalone=", hpricot_ele_set_standalone, 1);
+  rb_define_method(cXMLDecl, "version", hpricot_ele_get_version, 0);
+  rb_define_method(cXMLDecl, "version=", hpricot_ele_set_version, 1);
+  cProcIns = rb_define_class_under(mHpricot, "ProcIns", cBaseEle);
+  rb_define_method(cProcIns, "target", hpricot_ele_get_tag, 0);
+  rb_define_method(cProcIns, "target=", hpricot_ele_set_tag, 1);
+  rb_define_method(cProcIns, "content", hpricot_ele_get_attr, 0);
+  rb_define_method(cProcIns, "content=", hpricot_ele_set_attr, 1);
+
+  s_ElementContent = rb_intern("ElementContent");
+  symAllow = ID2SYM(rb_intern("allow"));
+  symDeny = ID2SYM(rb_intern("deny"));
+  s_downcase = rb_intern("downcase");
+  s_new = rb_intern("new");
+  s_parent = rb_intern("parent");
   s_read = rb_intern("read");
   s_to_str = rb_intern("to_str");
+  iv_parent = rb_intern("parent");
   sym_xmldecl = ID2SYM(rb_intern("xmldecl"));
   sym_doctype = ID2SYM(rb_intern("doctype"));
   sym_procins = ID2SYM(rb_intern("procins"));
@@ -5973,4 +6672,9 @@
   sym_comment = ID2SYM(rb_intern("comment"));
   sym_cdata = ID2SYM(rb_intern("cdata"));
   sym_text = ID2SYM(rb_intern("text"));
+  sym_EMPTY = ID2SYM(rb_intern("EMPTY"));
+  sym_CDATA = ID2SYM(rb_intern("CDATA"));
+
+  rb_const_set(mHpricot, rb_intern("ProcInsParse"),
+    reProcInsParse = rb_eval_string("/\\A<\\?(\\S+)\\s+(.+)/m"));
 }
diff -ruN hpricot-0.6/ext/hpricot_scan/hpricot_scan.java.rl hpricot/ext/hpricot_scan/hpricot_scan.java.rl
--- hpricot-0.6/ext/hpricot_scan/hpricot_scan.java.rl	2007-05-31 14:49:09.000000000 +0200
+++ hpricot/ext/hpricot_scan/hpricot_scan.java.rl	2009-02-19 19:39:17.000000000 +0100
@@ -6,7 +6,9 @@
 import org.jruby.RubyHash;
 import org.jruby.RubyModule;
 import org.jruby.RubyNumeric;
+import org.jruby.RubyObjectAdapter;
 import org.jruby.RubyString;
+import org.jruby.javasupport.JavaEmbedUtils;
 import org.jruby.runtime.Block;
 import org.jruby.runtime.CallbackFactory;
 import org.jruby.runtime.builtin.IRubyObject;
@@ -15,13 +17,14 @@
 
 public class HpricotScanService implements BasicLibraryService {
        public static String NO_WAY_SERIOUSLY="*** This should not happen, please send a bug report with the HTML you're parsing to why@whytheluckystiff.net.  So sorry!";
+       private static RubyObjectAdapter rubyApi;
 
        public void ELE(IRubyObject N) {
-         if (tokend > tokstart || text) {
+         if (te > ts || text) {
            IRubyObject raw_string = runtime.getNil();
            ele_open = false; text = false;
-           if (tokstart != -1 && N != cdata && N != sym_text && N != procins && N != comment) { 
-             raw_string = runtime.newString(new String(buf,tokstart,tokend-tokstart));
+           if (ts != -1 && N != cdata && N != sym_text && N != procins && N != comment) { 
+             raw_string = runtime.newString(new String(buf,ts,te-ts));
            } 
            rb_yield_tokens(N, tag[0], attr, raw_string, taint);
          }
@@ -75,13 +78,13 @@
            } else if(N == aval) {
              mark = mark_aval;
            }
-           if(mark > tokstart) {
+           if(mark > ts) {
              if(N == tag) {
-               mark_tag  -= tokstart;
+               mark_tag  -= ts;
              } else if(N == akey) {
-               mark_akey -= tokstart;
+               mark_akey -= ts;
              } else if(N == aval) {
-               mark_aval -= tokstart;
+               mark_aval -= ts;
              }
            }
        }
@@ -91,7 +94,8 @@
            if(attr.isNil()) {
              attr = RubyHash.newHash(runtime);
            }
-           ((RubyHash)attr).aset(K,V);
+           ((RubyHash)attr).op_aset(runtime.getCurrentContext(),K,V);
+           // ((RubyHash)attr).aset(K,V);
          }
        }
 
@@ -111,8 +115,8 @@
          if(!text) { 
            if(ele_open) { 
              ele_open = false; 
-             if(tokstart > -1) { 
-               mark_tag = tokstart; 
+             if(ts > -1) { 
+               mark_tag = ts; 
              } 
            } else {
              mark_tag = p; 
@@ -180,7 +184,7 @@
     ATTR(akey, aval);
   }
 
-  include hpricot_common "ext/hpricot_scan/hpricot_common.rl";
+  include hpricot_common "hpricot_common.rl";
 
 }%%
 
@@ -206,7 +210,8 @@
 
 int cs, act, have = 0, nread = 0, curline = 1, p=-1;
 boolean text = false;
-int tokstart=-1, tokend;
+int ts=-1, te;
+int eof=-1;
 char[] buf;
 Ruby runtime;
 IRubyObject attr, bufsize;
@@ -239,8 +244,8 @@
   }
 
   buffer_size = BUFSIZE;
-  if (recv.getInstanceVariable("@buffer_size") != null) {
-    bufsize = recv.getInstanceVariable("@buffer_size");
+  if (rubyApi.getInstanceVariable(recv, "@buffer_size") != null) {
+    bufsize = rubyApi.getInstanceVariable(recv, "@buffer_size");
     if (!bufsize.isNil()) {
       buffer_size = RubyNumeric.fix2int(bufsize);
     }
@@ -259,7 +264,11 @@
       /* We've used up the entire buffer storing an already-parsed token
        * prefix that must be preserved.  Likely caused by super-long attributes.
        * See ticket #13. */
-      rb_raise(rb_eHpricotParseError, "ran out of buffer space on element <" + tag.toString() + ">, starting on line "+curline+".");
+       buffer_size += BUFSIZE;
+       char[] new_buf = new char[buffer_size];
+       System.arraycopy(buf, 0, new_buf, 0, buf.length);
+       buf = new_buf;
+       space = buffer_size - have;
     }
 
     if (port.respondsTo("read")) {
@@ -296,16 +305,16 @@
     
     if ( done && ele_open ) {
       ele_open = false;
-      if(tokstart > -1) {
-        mark_tag = tokstart;
-        tokstart = -1;
+      if(ts > -1) {
+        mark_tag = ts;
+        ts = -1;
         text = true;
       }
     }
 
-    if(tokstart == -1) {
+    if(ts == -1) {
       have = 0;
-      /* text nodes have no tokstart because each byte is parsed alone */
+      /* text nodes have no ts because each byte is parsed alone */
       if(mark_tag != -1 && text) {
         if (done) {
           if(mark_tag < p-1) {
@@ -318,13 +327,13 @@
       }
       mark_tag = 0;
     } else {
-      have = pe - tokstart;
-      System.arraycopy(buf,tokstart,buf,0,have);
+      have = pe - ts;
+      System.arraycopy(buf,ts,buf,0,have);
       SLIDE(tag);
       SLIDE(akey);
       SLIDE(aval);
-      tokend = (tokend - tokstart);
-      tokstart = 0;
+      te = (te - ts);
+      ts = 0;
     }
   }
   return runtime.getNil();
@@ -355,9 +364,10 @@
 
 public static void Init_hpricot_scan(Ruby runtime) {
   RubyModule mHpricot = runtime.defineModule("Hpricot");
-  mHpricot.getMetaClass().attr_accessor(new IRubyObject[]{runtime.newSymbol("buffer_size")});
+  mHpricot.getMetaClass().attr_accessor(runtime.getCurrentContext(),new IRubyObject[]{runtime.newSymbol("buffer_size")});
   CallbackFactory fact = runtime.callbackFactory(HpricotScanService.class);
   mHpricot.getMetaClass().defineMethod("scan",fact.getSingletonMethod("__hpricot_scan",IRubyObject.class));
-  mHpricot.defineClassUnder("ParseError",runtime.getClass("Exception"),runtime.getClass("Exception").getAllocator());
+  mHpricot.defineClassUnder("ParseError",runtime.getClass("StandardError"),runtime.getClass("StandardError").getAllocator());
+  rubyApi = JavaEmbedUtils.newObjectAdapter();
 }
 }
diff -ruN hpricot-0.6/ext/hpricot_scan/hpricot_scan.rl hpricot/ext/hpricot_scan/hpricot_scan.rl
--- hpricot-0.6/ext/hpricot_scan/hpricot_scan.rl	2007-03-08 11:10:19.000000000 +0100
+++ hpricot/ext/hpricot_scan/hpricot_scan.rl	2009-02-19 19:39:17.000000000 +0100
@@ -8,21 +8,48 @@
  */
 #include <ruby.h>
 
+#ifndef RARRAY_LEN
+#define RARRAY_LEN(arr)  RARRAY(arr)->len
+#define RSTRING_LEN(str) RSTRING(str)->len
+#define RSTRING_PTR(str) RSTRING(str)->ptr
+#endif
+
+VALUE hpricot_css(VALUE, VALUE, VALUE, VALUE, VALUE);
+
 #define NO_WAY_SERIOUSLY "*** This should not happen, please send a bug report with the HTML you're parsing to why@whytheluckystiff.net.  So sorry!"
 
 static VALUE sym_xmldecl, sym_doctype, sym_procins, sym_stag, sym_etag, sym_emptytag, sym_comment,
-      sym_cdata, sym_text;
-static VALUE rb_eHpricotParseError;
-static ID s_read, s_to_str;
+      sym_cdata, sym_text, sym_EMPTY, sym_CDATA;
+static VALUE mHpricot, rb_eHpricotParseError;
+static VALUE cBaseEle, cBogusETag, cCData, cComment, cDoc, cDocType, cElem, cETag, cText,
+      cXMLDecl, cProcIns, symAllow, symDeny;
+static ID s_ElementContent;
+static ID s_downcase, s_new, s_parent, s_read, s_to_str;
+static ID iv_parent;
+static VALUE reProcInsParse;
+
+typedef struct {
+  int name;
+  VALUE tag, attr, etag, raw, EC;
+  VALUE parent, children;
+} hpricot_ele;
+
+#define OPT(opts, key) (!NIL_P(opts) && RTEST(rb_hash_aref(opts, ID2SYM(rb_intern("" # key)))))
 
 #define ELE(N) \
-  if (tokend > tokstart || text == 1) { \
-    VALUE raw_string = Qnil; \
+  if (te > ts || text == 1) { \
+    char *raw = NULL; \
+    int rawlen = 0; \
     ele_open = 0; text = 0; \
-    if (tokstart != 0 && sym_##N != sym_cdata && sym_##N != sym_text && sym_##N != sym_procins && sym_##N != sym_comment) { \
-      raw_string = rb_str_new(tokstart, tokend-tokstart); \
+    if (ts != 0 && sym_##N != sym_cdata && sym_##N != sym_text && sym_##N != sym_procins && sym_##N != sym_comment) { \
+      raw = ts; rawlen = te - ts; \
     } \
-    rb_yield_tokens(sym_##N, tag, attr, raw_string, taint); \
+    if (rb_block_given_p()) { \
+      VALUE raw_string = Qnil; \
+      if (raw != NULL) raw_string = rb_str_new(raw, rawlen); \
+      rb_yield_tokens(sym_##N, tag, attr, Qnil, taint); \
+    } else \
+      rb_hpricot_token(S, sym_##N, tag, attr, raw, rawlen, taint); \
   }
 
 #define SET(N, E) \
@@ -33,7 +60,7 @@
 
 #define CAT(N, E) if (NIL_P(N)) { SET(N, E); } else { rb_str_cat(N, mark_##N, E - mark_##N); }
 
-#define SLIDE(N) if ( mark_##N > tokstart ) mark_##N = buf + (mark_##N - tokstart);
+#define SLIDE(N) if ( mark_##N > ts ) mark_##N = buf + (mark_##N - ts);
 
 #define ATTR(K, V) \
     if (!NIL_P(K)) { \
@@ -46,8 +73,8 @@
     { \
       if (ele_open == 1) { \
         ele_open = 0; \
-        if (tokstart > 0) { \
-          mark_tag = tokstart; \
+        if (ts > 0) { \
+          mark_tag = ts; \
         } \
       } else { \
         mark_tag = p; \
@@ -85,11 +112,11 @@
     else { SET(aval, p); }
   }
   action akey { SET(akey, p); }
-  action xmlver { SET(aval, p); ATTR(rb_str_new2("version"), aval); }
-  action xmlenc { SET(aval, p); ATTR(rb_str_new2("encoding"), aval); }
-  action xmlsd  { SET(aval, p); ATTR(rb_str_new2("standalone"), aval); }
-  action pubid  { SET(aval, p); ATTR(rb_str_new2("public_id"), aval); }
-  action sysid  { SET(aval, p); ATTR(rb_str_new2("system_id"), aval); }
+  action xmlver { SET(aval, p); ATTR(ID2SYM(rb_intern("version")), aval); }
+  action xmlenc { SET(aval, p); ATTR(ID2SYM(rb_intern("encoding")), aval); }
+  action xmlsd  { SET(aval, p); ATTR(ID2SYM(rb_intern("standalone")), aval); }
+  action pubid  { SET(aval, p); ATTR(ID2SYM(rb_intern("public_id")), aval); }
+  action sysid  { SET(aval, p); ATTR(ID2SYM(rb_intern("system_id")), aval); }
 
   action new_attr { 
     akey = Qnil;
@@ -102,7 +129,7 @@
     ATTR(akey, aval);
   }
 
-  include hpricot_common "ext/hpricot_scan/hpricot_common.rl";
+  include hpricot_common "hpricot_common.rl";
 
 }%%
 
@@ -126,16 +153,299 @@
   rb_yield(ary);
 }
 
-VALUE hpricot_scan(VALUE self, VALUE port)
+static void
+rb_hpricot_add(VALUE focus, VALUE ele)
+{
+  hpricot_ele *he, *he2;
+  Data_Get_Struct(focus, hpricot_ele, he);
+  Data_Get_Struct(ele, hpricot_ele, he2);
+  if (NIL_P(he->children))
+    he->children = rb_ary_new();
+  rb_ary_push(he->children, ele);
+  he2->parent = focus;
+}
+
+typedef struct {
+  VALUE doc;
+  VALUE focus;
+  VALUE last;
+  VALUE EC;
+  unsigned char xml, strict, fixup;
+} hpricot_state;
+
+static void
+hpricot_ele_mark(hpricot_ele *he)
+{
+  rb_gc_mark(he->tag);
+  rb_gc_mark(he->attr);
+  rb_gc_mark(he->etag);
+  rb_gc_mark(he->raw);
+  rb_gc_mark(he->parent);
+  rb_gc_mark(he->children);
+}
+
+static void
+hpricot_ele_free(hpricot_ele *he)
+{
+  free(he);
+}
+
+#define H_PROP(prop) \
+  static VALUE hpricot_ele_set_##prop(VALUE self, VALUE x) { \
+    hpricot_ele *he; \
+    Data_Get_Struct(self, hpricot_ele, he); \
+    he->prop = x; \
+    return self; \
+  } \
+  static VALUE hpricot_ele_get_##prop(VALUE self) { \
+    hpricot_ele *he; \
+    Data_Get_Struct(self, hpricot_ele, he); \
+    return he->prop; \
+  }
+
+#define H_ATTR(prop) \
+  static VALUE hpricot_ele_set_##prop(VALUE self, VALUE x) { \
+    hpricot_ele *he; \
+    Data_Get_Struct(self, hpricot_ele, he); \
+    rb_hash_aset(he->attr, ID2SYM(rb_intern("" # prop)), x); \
+    return self; \
+  } \
+  static VALUE hpricot_ele_get_##prop(VALUE self) { \
+    hpricot_ele *he; \
+    Data_Get_Struct(self, hpricot_ele, he); \
+    return rb_hash_aref(he->attr, ID2SYM(rb_intern("" # prop))); \
+  }
+
+H_PROP(tag);
+H_PROP(attr);
+H_PROP(etag);
+H_PROP(parent);
+H_PROP(children);
+H_ATTR(encoding);
+H_ATTR(version);
+H_ATTR(standalone);
+H_ATTR(system_id);
+H_ATTR(public_id);
+
+static VALUE
+hpricot_ele_get_raw(VALUE self, VALUE x) {
+  hpricot_ele *he;
+  Data_Get_Struct(self, hpricot_ele, he);
+  return he->raw;
+}
+
+static VALUE
+hpricot_ele_clear_raw(VALUE self)
+{
+  hpricot_ele *he;
+  Data_Get_Struct(self, hpricot_ele, he);
+  he->raw = Qnil;
+  return Qtrue;
+}
+
+#define H_ELE(klass) \
+  hpricot_ele *he = ALLOC(hpricot_ele); \
+  he->name = 0; \
+  he->tag = tag; \
+  he->attr = attr; \
+  he->raw = Qnil; \
+  he->EC = ec; \
+  he->etag = he->parent = he->children = Qnil; \
+  if (raw != NULL && (sym == sym_emptytag || sym == sym_stag || sym == sym_etag || sym == sym_doctype)) { \
+    he->raw = rb_str_new(raw, rawlen); \
+  } \
+  ele = Data_Wrap_Struct(klass, hpricot_ele_mark, hpricot_ele_free, he); \
+  S->last = ele
+
+VALUE
+hpricot_ele_alloc(VALUE klass)
+{
+  VALUE ele;
+  hpricot_ele *he = ALLOC(hpricot_ele);
+  he->name = 0;
+  he->tag = he->attr = he->raw = he->EC = Qnil;
+  he->etag = he->parent = he->children = Qnil;
+  ele = Data_Wrap_Struct(klass, hpricot_ele_mark, hpricot_ele_free, he);
+  return ele;
+}
+
+//
+// the swift, compact parser logic.  most of the complicated stuff is done
+// in the lexer.  this step just pairs up the start and end tags.
+//
+void
+rb_hpricot_token(hpricot_state *S, VALUE sym, VALUE tag, VALUE attr, char *raw, int rawlen, int taint)
+{
+  VALUE ele, ec = Qnil;
+
+  //
+  // in html mode, fix up start tags incorrectly formed as empty tags
+  //
+  if (!S->xml) {
+    hpricot_ele *last;
+    Data_Get_Struct(S->focus, hpricot_ele, last);
+    if (last->EC == sym_CDATA &&
+       (sym != sym_procins && sym != sym_comment && sym != sym_cdata && sym != sym_text) &&
+      !(sym == sym_etag && rb_str_hash(tag) == last->name))
+    {
+      sym = sym_text;
+      tag = rb_str_new(raw, rawlen);
+    }
+
+    if (sym == sym_emptytag || sym == sym_stag || sym == sym_etag) {
+      ec = rb_hash_aref(S->EC, tag);
+      if (NIL_P(ec)) {
+        tag = rb_funcall(tag, s_downcase, 0);
+        ec = rb_hash_aref(S->EC, tag);
+      }
+      if (sym == sym_emptytag) {
+        if (ec != sym_EMPTY)
+          sym = sym_stag;
+      } else if (sym == sym_stag) {
+        if (ec == sym_EMPTY)
+          sym = sym_emptytag;
+      }
+    }
+  }
+
+  if (sym == sym_emptytag || sym == sym_stag) {
+    H_ELE(cElem);
+    he->name = rb_str_hash(tag);
+
+    if (!S->xml) {
+      VALUE match = Qnil, e = S->focus;
+      while (e != S->doc)
+      {
+        hpricot_ele *hee;
+        Data_Get_Struct(e, hpricot_ele, hee);
+
+        if (TYPE(hee->EC) == T_HASH)
+        {
+          VALUE has = rb_hash_lookup(hee->EC, INT2NUM(he->name));
+          if (has != Qnil) {
+            if (has == Qtrue) {
+              if (match == Qnil)
+                match = e;
+            } else if (has == symAllow) {
+              match = S->focus;
+            } else if (has == symDeny) {
+              match = Qnil;
+            }
+          }
+        }
+
+        e = hee->parent;
+      }
+
+      if (match == Qnil)
+        match = S->focus;
+      S->focus = match;
+    }
+
+    rb_hpricot_add(S->focus, ele);
+
+    //
+    // in the case of a start tag that should be empty, just
+    // skip the step that focuses the element.  focusing moves
+    // us deeper into the document.
+    //
+    if (sym == sym_stag) {
+      if (S->xml || ec != sym_EMPTY) {
+        S->focus = ele;
+        S->last = Qnil;
+      }
+    }
+  } else if (sym == sym_etag) {
+    int name;
+    VALUE match = Qnil, e = S->focus;
+    if (S->strict) {
+      if (NIL_P(rb_hash_aref(S->EC, tag))) {
+        tag = rb_str_new2("div");
+      }
+    }
+
+    //
+    // another optimization will be to improve this very simple
+    // O(n) tag search, where n is the depth of the focused tag.
+    //
+    // (see also: the search above for fixups)
+    //
+    name = rb_str_hash(tag);
+    while (e != S->doc)
+    {
+      hpricot_ele *he;
+      Data_Get_Struct(e, hpricot_ele, he);
+
+      if (he->name == name)
+      {
+        match = e;
+        break;
+      }
+
+      e = he->parent;
+    }
+
+    if (NIL_P(match))
+    {
+      H_ELE(cBogusETag);
+      rb_hpricot_add(S->focus, ele);
+    }
+    else
+    {
+      H_ELE(cETag);
+      Data_Get_Struct(match, hpricot_ele, he);
+      he->etag = ele;
+      S->focus = he->parent;
+      S->last = Qnil;
+    }
+  } else if (sym == sym_cdata) {
+    H_ELE(cCData);
+    rb_hpricot_add(S->focus, ele);
+  } else if (sym == sym_comment) {
+    H_ELE(cComment);
+    rb_hpricot_add(S->focus, ele);
+  } else if (sym == sym_doctype) {
+    H_ELE(cDocType);
+    if (S->strict) {
+      rb_hash_aset(attr, ID2SYM(rb_intern("system_id")), rb_str_new2("http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"));
+      rb_hash_aset(attr, ID2SYM(rb_intern("public_id")), rb_str_new2("-//W3C//DTD XHTML 1.0 Strict//EN"));
+    }
+    rb_hpricot_add(S->focus, ele);
+  } else if (sym == sym_procins) {
+    VALUE match = rb_funcall(tag, rb_intern("match"), 1, reProcInsParse);
+    tag = rb_reg_nth_match(1, match);
+    attr = rb_reg_nth_match(2, match);
+    H_ELE(cProcIns);
+    rb_hpricot_add(S->focus, ele);
+  } else if (sym == sym_text) {
+    // TODO: add raw_string as well?
+    if (!NIL_P(S->last) && RBASIC(S->last)->klass == cText) {
+      hpricot_ele *he;
+      Data_Get_Struct(S->last, hpricot_ele, he);
+      rb_str_append(he->tag, tag);
+    } else {
+      H_ELE(cText);
+      rb_hpricot_add(S->focus, ele);
+    }
+  } else if (sym == sym_xmldecl) {
+    H_ELE(cXMLDecl);
+    rb_hpricot_add(S->focus, ele);
+  }
+}
+
+VALUE hpricot_scan(int argc, VALUE *argv, VALUE self)
 {
   int cs, act, have = 0, nread = 0, curline = 1, text = 0;
-  char *tokstart = 0, *tokend = 0, *buf = NULL;
+  char *ts = 0, *te = 0, *buf = NULL, *eof = NULL;
 
+  hpricot_state *S = NULL;
+  VALUE port, opts;
   VALUE attr = Qnil, tag = Qnil, akey = Qnil, aval = Qnil, bufsize = Qnil;
   char *mark_tag = 0, *mark_akey = 0, *mark_aval = 0;
-  int done = 0, ele_open = 0, buffer_size = 0;
+  int done = 0, ele_open = 0, buffer_size = 0, taint = 0;
 
-  int taint = OBJ_TAINTED( port );
+  rb_scan_args(argc, argv, "11", &port, &opts);
+  taint = OBJ_TAINTED( port );
   if ( !rb_respond_to( port, s_read ) )
   {
     if ( rb_respond_to( port, s_to_str ) )
@@ -145,10 +455,32 @@
     }
     else
     {
-      rb_raise( rb_eArgError, "bad Hpricot argument, String or IO only please." );
+      rb_raise(rb_eArgError, "an Hpricot document must be built from an input source (a String or IO object.)");
     }
   }
 
+  if (TYPE(opts) != T_HASH)
+    opts = Qnil;
+
+  if (!rb_block_given_p())
+  {
+    S = ALLOC(hpricot_state);
+    hpricot_ele *he = ALLOC(hpricot_ele);
+    MEMZERO(he, hpricot_ele, 1);
+    he->tag = he->attr = he->etag = he->parent = he->children = Qnil;
+    S->doc = Data_Wrap_Struct(cDoc, hpricot_ele_mark, hpricot_ele_free, he);
+    rb_gc_register_address(&S->doc);
+    S->focus = S->doc;
+    S->last = Qnil;
+    S->xml = OPT(opts, xml);
+    S->strict = OPT(opts, xhtml_strict);
+    S->fixup = OPT(opts, fixup_tags);
+    if (S->strict) S->fixup = 1;
+    rb_ivar_set(S->doc, rb_intern("@options"), opts);
+
+    S->EC = rb_const_get(mHpricot, s_ElementContent);
+  }
+
   buffer_size = BUFSIZE;
   if (rb_ivar_defined(self, rb_intern("@buffer_size")) == Qtrue) {
     bufsize = rb_ivar_get(self, rb_intern("@buffer_size"));
@@ -162,28 +494,45 @@
   
   while ( !done ) {
     VALUE str;
-    char *p = buf + have, *pe;
-    int len, space = buffer_size - have;
+    char *p, *pe;
+    int len, space = buffer_size - have, tokstart_diff, tokend_diff, mark_tag_diff, mark_akey_diff, mark_aval_diff;
 
     if ( space == 0 ) {
       /* We've used up the entire buffer storing an already-parsed token
        * prefix that must be preserved.  Likely caused by super-long attributes.
-       * See ticket #13. */
-      rb_raise(rb_eHpricotParseError, "ran out of buffer space on element <%s>, starting on line %d.", RSTRING(tag)->ptr, curline);
+       * Increase buffer size and continue  */
+       tokstart_diff = ts - buf;
+       tokend_diff = te - buf;
+       mark_tag_diff = mark_tag - buf;
+       mark_akey_diff = mark_akey - buf;
+       mark_aval_diff = mark_aval - buf;
+
+       buffer_size += BUFSIZE;
+       REALLOC_N(buf, char, buffer_size);
+
+       space = buffer_size - have;
+
+       ts= buf + tokstart_diff;
+       te = buf + tokend_diff;
+       mark_tag = buf + mark_tag_diff;
+       mark_akey = buf + mark_akey_diff;
+       mark_aval = buf + mark_aval_diff;
     }
+    p = buf + have;
 
     if ( rb_respond_to( port, s_read ) )
     {
-      str = rb_funcall( port, s_read, 1, INT2FIX(space) );
+      str = rb_funcall(port, s_read, 1, INT2FIX(space));
+      len = RSTRING_LEN(str);
+      memcpy(p, StringValuePtr(str), len);
     }
     else
     {
-      str = rb_str_substr( port, nread, space );
+      len = RSTRING_LEN(port) - nread;
+      if (len > space) len = space;
+      memcpy(p, StringValuePtr(port) + nread, len);
     }
 
-    StringValue(str);
-    memcpy( p, RSTRING(str)->ptr, RSTRING(str)->len );
-    len = RSTRING(str)->len;
     nread += len;
 
     /* If this is the last buffer, tack on an EOF. */
@@ -199,7 +548,7 @@
       free(buf);
       if ( !NIL_P(tag) )
       {
-        rb_raise(rb_eHpricotParseError, "parse error on element <%s>, starting on line %d.\n" NO_WAY_SERIOUSLY, RSTRING(tag)->ptr, curline);
+        rb_raise(rb_eHpricotParseError, "parse error on element <%s>, starting on line %d.\n" NO_WAY_SERIOUSLY, RSTRING_PTR(tag), curline);
       }
       else
       {
@@ -210,17 +559,17 @@
     if ( done && ele_open )
     {
       ele_open = 0;
-      if (tokstart > 0) {
-        mark_tag = tokstart;
-        tokstart = 0;
+      if (ts > 0) {
+        mark_tag = ts;
+        ts = 0;
         text = 1;
       }
     }
 
-    if ( tokstart == 0 )
+    if ( ts == 0 )
     {
       have = 0;
-      /* text nodes have no tokstart because each byte is parsed alone */
+      /* text nodes have no ts because each byte is parsed alone */
       if ( mark_tag != NULL && text == 1 )
       {
         if (done)
@@ -240,27 +589,98 @@
     }
     else
     {
-      have = pe - tokstart;
-      memmove( buf, tokstart, have );
+      have = pe - ts;
+      memmove( buf, ts, have );
       SLIDE(tag);
       SLIDE(akey);
       SLIDE(aval);
-      tokend = buf + (tokend - tokstart);
-      tokstart = buf;
+      te = buf + (te - ts);
+      ts = buf;
     }
   }
   free(buf);
+
+  if (S != NULL)
+  {
+    VALUE doc = S->doc;
+    rb_gc_unregister_address(&S->doc);
+    free(S);
+    return doc;
+  }
+
+  return Qnil;
 }
 
 void Init_hpricot_scan()
 {
-  VALUE mHpricot = rb_define_module("Hpricot");
+  mHpricot = rb_define_module("Hpricot");
   rb_define_attr(rb_singleton_class(mHpricot), "buffer_size", 1, 1);
-  rb_define_singleton_method(mHpricot, "scan", hpricot_scan, 1);
-  rb_eHpricotParseError = rb_define_class_under(mHpricot, "ParseError", rb_eException);
-
+  rb_define_singleton_method(mHpricot, "scan", hpricot_scan, -1);
+  rb_define_singleton_method(mHpricot, "css", hpricot_css, 3);
+  rb_eHpricotParseError = rb_define_class_under(mHpricot, "ParseError", rb_eStandardError);
+
+  cDoc = rb_define_class_under(mHpricot, "Doc", rb_cObject);
+  rb_define_alloc_func(cDoc, hpricot_ele_alloc);
+  rb_define_method(cDoc, "children", hpricot_ele_get_children, 0);
+  rb_define_method(cDoc, "children=", hpricot_ele_set_children, 1);
+
+  cBaseEle = rb_define_class_under(mHpricot, "BaseEle", rb_cObject);
+  rb_define_alloc_func(cBaseEle, hpricot_ele_alloc);
+  rb_define_method(cBaseEle, "raw_string", hpricot_ele_get_raw, 0);
+  rb_define_method(cBaseEle, "clear_raw", hpricot_ele_clear_raw, 0);
+  rb_define_method(cBaseEle, "parent", hpricot_ele_get_parent, 0);
+  rb_define_method(cBaseEle, "parent=", hpricot_ele_set_parent, 1);
+  cCData = rb_define_class_under(mHpricot, "CData", cBaseEle);
+  rb_define_method(cCData, "content", hpricot_ele_get_tag, 0);
+  rb_define_method(cCData, "content=", hpricot_ele_set_tag, 1);
+  cComment = rb_define_class_under(mHpricot, "Comment", cBaseEle);
+  rb_define_method(cComment, "content", hpricot_ele_get_tag, 0);
+  rb_define_method(cComment, "content=", hpricot_ele_set_tag, 1);
+  cDocType = rb_define_class_under(mHpricot, "DocType", cBaseEle);
+  rb_define_method(cDocType, "target", hpricot_ele_get_tag, 0);
+  rb_define_method(cDocType, "target=", hpricot_ele_set_tag, 1);
+  rb_define_method(cDocType, "public_id", hpricot_ele_get_public_id, 0);
+  rb_define_method(cDocType, "public_id=", hpricot_ele_set_public_id, 1);
+  rb_define_method(cDocType, "system_id", hpricot_ele_get_system_id, 0);
+  rb_define_method(cDocType, "system_id=", hpricot_ele_set_system_id, 1);
+  cElem = rb_define_class_under(mHpricot, "Elem", cBaseEle);
+  rb_define_method(cElem, "raw_attributes", hpricot_ele_get_attr, 0);
+  rb_define_method(cElem, "raw_attributes=", hpricot_ele_set_attr, 1);
+  rb_define_method(cElem, "children", hpricot_ele_get_children, 0);
+  rb_define_method(cElem, "children=", hpricot_ele_set_children, 1);
+  rb_define_method(cElem, "etag", hpricot_ele_get_etag, 0);
+  rb_define_method(cElem, "etag=", hpricot_ele_set_etag, 1);
+  rb_define_method(cElem, "name", hpricot_ele_get_tag, 0);
+  rb_define_method(cElem, "name=", hpricot_ele_set_tag, 1);
+  cETag = rb_define_class_under(mHpricot, "ETag", cBaseEle);
+  rb_define_method(cETag, "name", hpricot_ele_get_tag, 0);
+  rb_define_method(cETag, "name=", hpricot_ele_set_tag, 1);
+  cBogusETag = rb_define_class_under(mHpricot, "BogusETag", cETag);
+  cText = rb_define_class_under(mHpricot, "Text", cBaseEle);
+  rb_define_method(cText, "content", hpricot_ele_get_tag, 0);
+  rb_define_method(cText, "content=", hpricot_ele_set_tag, 1);
+  cXMLDecl = rb_define_class_under(mHpricot, "XMLDecl", cBaseEle);
+  rb_define_method(cXMLDecl, "encoding", hpricot_ele_get_encoding, 0);
+  rb_define_method(cXMLDecl, "encoding=", hpricot_ele_set_encoding, 1);
+  rb_define_method(cXMLDecl, "standalone", hpricot_ele_get_standalone, 0);
+  rb_define_method(cXMLDecl, "standalone=", hpricot_ele_set_standalone, 1);
+  rb_define_method(cXMLDecl, "version", hpricot_ele_get_version, 0);
+  rb_define_method(cXMLDecl, "version=", hpricot_ele_set_version, 1);
+  cProcIns = rb_define_class_under(mHpricot, "ProcIns", cBaseEle);
+  rb_define_method(cProcIns, "target", hpricot_ele_get_tag, 0);
+  rb_define_method(cProcIns, "target=", hpricot_ele_set_tag, 1);
+  rb_define_method(cProcIns, "content", hpricot_ele_get_attr, 0);
+  rb_define_method(cProcIns, "content=", hpricot_ele_set_attr, 1);
+
+  s_ElementContent = rb_intern("ElementContent");
+  symAllow = ID2SYM(rb_intern("allow"));
+  symDeny = ID2SYM(rb_intern("deny"));
+  s_downcase = rb_intern("downcase");
+  s_new = rb_intern("new");
+  s_parent = rb_intern("parent");
   s_read = rb_intern("read");
   s_to_str = rb_intern("to_str");
+  iv_parent = rb_intern("parent");
   sym_xmldecl = ID2SYM(rb_intern("xmldecl"));
   sym_doctype = ID2SYM(rb_intern("doctype"));
   sym_procins = ID2SYM(rb_intern("procins"));
@@ -270,4 +690,9 @@
   sym_comment = ID2SYM(rb_intern("comment"));
   sym_cdata = ID2SYM(rb_intern("cdata"));
   sym_text = ID2SYM(rb_intern("text"));
+  sym_EMPTY = ID2SYM(rb_intern("EMPTY"));
+  sym_CDATA = ID2SYM(rb_intern("CDATA"));
+
+  rb_const_set(mHpricot, rb_intern("ProcInsParse"),
+    reProcInsParse = rb_eval_string("/\\A<\\?(\\S+)\\s+(.+)/m"));
 }
diff -ruN hpricot-0.6/hpricot.gemspec hpricot/hpricot.gemspec
--- hpricot-0.6/hpricot.gemspec	1970-01-01 01:00:00.000000000 +0100
+++ hpricot/hpricot.gemspec	2009-02-19 19:39:17.000000000 +0100
@@ -0,0 +1,17 @@
+Gem::Specification.new do |s|
+  s.name = %q{hpricot}
+  s.version = "0.6.207"
+ 
+  s.authors = ["why the lucky stiff"]
+  s.date = %q{2009-02-07}
+  s.description = %q{a swift, liberal HTML parser with a fantastic library}
+  s.email = %q{why@ruby-lang.org}
+  s.extensions = ["ext/fast_xs/extconf.rb", "ext/hpricot_scan/extconf.rb"]
+  s.extra_rdoc_files = ["README", "CHANGELOG", "COPYING"]
+  s.files = ["CHANGELOG", "COPYING", "README", "Rakefile", "test/files", "test/files/basic.xhtml", "test/files/boingboing.html", "test/files/cy0.html", "test/files/immob.html", "test/files/pace_application.html", "test/files/tenderlove.html", "test/files/uswebgen.html", "test/files/utf8.html", "test/files/week9.html", "test/files/why.xml", "test/load_files.rb", "test/test_alter.rb", "test/test_builder.rb", "test/test_parser.rb", "test/test_paths.rb", "test/test_preserved.rb", "test/test_xml.rb", "lib/hpricot", "lib/hpricot/blankslate.rb", "lib/hpricot/builder.rb", "lib/hpricot/elements.rb", "lib/hpricot/htmlinfo.rb", "lib/hpricot/inspect.rb", "lib/hpricot/modules.rb", "lib/hpricot/parse.rb", "lib/hpricot/tag.rb", "lib/hpricot/tags.rb", "lib/hpricot/traverse.rb", "lib/hpricot/xchar.rb", "lib/hpricot.rb", "extras/mingw-rbconfig.rb", "ext/hpricot_scan/hpricot_scan.h", "ext/fast_xs/FastXsService.java", "ext/hpricot_scan/HpricotScanService.java", "ext/fast_xs/fast_xs.c", "ext/hpricot_scan/hpricot_scan.c", "ext/hpricot_scan/hpricot_css.c", "ext/fast_xs/extconf.rb", "ext/hpricot_scan/extconf.rb", "ext/hpricot_scan/hpricot_common.rl", "ext/hpricot_scan/hpricot_scan.java.rl", "ext/hpricot_scan/hpricot_scan.rl"]
+  s.has_rdoc = true
+  s.homepage = %q{http://code.whytheluckystiff.net/hpricot/}
+  s.rdoc_options = ["--quiet", "--title", "The Hpricot Reference", "--main", "README", "--inline-source"]
+  s.require_paths = ["lib"]
+  s.summary = %q{a swift, liberal HTML parser with a fantastic library}
+end
diff -ruN hpricot-0.6/lib/hpricot/builder.rb hpricot/lib/hpricot/builder.rb
--- hpricot-0.6/lib/hpricot/builder.rb	2007-05-31 14:49:09.000000000 +0200
+++ hpricot/lib/hpricot/builder.rb	2009-02-19 19:39:17.000000000 +0100
@@ -1,14 +1,22 @@
 require 'hpricot/tags'
-require 'hpricot/xchar'
+require 'fast_xs'
 require 'hpricot/blankslate'
+require 'hpricot/htmlinfo'
 
 module Hpricot
+  # XML unescape
+  def self.uxs(str)
+    str.to_s.
+        gsub(/\&(\w+);/) { [NamedCharacters[$1] || ??].pack("U*") }.
+        gsub(/\&\#(\d+);/) { [$1.to_i].pack("U*") }
+  end
+
   def self.build(ele = Doc.new, assigns = {}, &blk)
     ele.extend Builder
     assigns.each do |k, v|
       ele.instance_variable_set("@#{k}", v)
     end
-    ele.instance_eval &blk
+    ele.instance_eval(&blk)
     ele
   end
 
@@ -30,14 +38,21 @@
       @@default[option] = value
     end
 
+    def add_child ele
+      ele.parent = self
+      self.children ||= []
+      self.children << ele
+      ele
+    end
+
     # Write a +string+ to the HTML stream, making sure to escape it.
     def text!(string)
-      @children << Text.new(Hpricot.xs(string))
+      add_child Text.new(string.fast_xs)
     end
 
     # Write a +string+ to the HTML stream without escaping it.
     def text(string)
-      @children << Text.new(string)
+      add_child Text.new(string)
       nil
     end
     alias_method :<<, :text
@@ -52,11 +67,11 @@
               raise InvalidXhtmlError, "no element `#{tag}' for #{tagset.doctype}"
           elsif args.last.respond_to?(:to_hash)
               attrs = args.last.to_hash
-              
+
               if @tagset.forms.include?(tag) and attrs[:id]
                 attrs[:name] ||= attrs[:id]
               end
-              
+
               attrs.each do |k, v|
                   atname = k.to_s.downcase.intern
                   unless k =~ /:/ or @tagset.tagset[tag].include? atname
@@ -75,29 +90,30 @@
       # turn arguments into children or attributes
       childs = []
       attrs = args.grep(Hash)
-      childs.concat((args - attrs).map do |x|
+      childs.concat((args - attrs).flatten.map do |x|
         if x.respond_to? :to_html
           Hpricot.make(x.to_html)
         elsif x
-          Text.new(Hpricot.xs(x))
+          Text.new(x.fast_xs)
         end
       end.flatten)
       attrs = attrs.inject({}) do |hsh, ath|
         ath.each do |k, v|
-          hsh[k] = Hpricot.xs(v.to_s) if v
+          hsh[k] = v.to_s.fast_xs if v
         end
         hsh
       end
 
       # create the element itself
-      f = Elem.new(STag.new(tag, attrs), childs, ETag.new(tag))
+      tag = tag.to_s
+      f = Elem.new(tag, attrs, childs, ETag.new(tag))
 
       # build children from the block
       if block
         build(f, &block)
       end
 
-      @children << f
+      add_child f
       f
     end
 
@@ -130,11 +146,11 @@
     end
 
     def doctype(target, pub, sys)
-      @children << DocType.new(target, pub, sys)
+      add_child DocType.new(target, pub, sys)
     end
 
     remove_method :head
-    
+
     # Builds a head tag.  Adds a <tt>meta</tt> tag inside with Content-Type
     # set to <tt>text/html; charset=utf-8</tt>.
     def head(*args, &block)
@@ -178,7 +194,7 @@
     def initialize(builder, sym)
       @builder, @sym, @attrs = builder, sym, {}
     end
-    
+
     # Adds attributes to an element.  Bang methods set the :id attribute.
     # Other methods add to the :class attribute.
     def method_missing(id_or_class, *args, &block)
@@ -192,7 +208,7 @@
         args.push(@attrs)
         return @builder.tag!(@sym, *args, &block)
       end
-      
+
       return self
     end
 
diff -ruN hpricot-0.6/lib/hpricot/elements.rb hpricot/lib/hpricot/elements.rb
--- hpricot-0.6/lib/hpricot/elements.rb	2007-06-04 23:40:58.000000000 +0200
+++ hpricot/lib/hpricot/elements.rb	2009-02-19 19:39:17.000000000 +0100
@@ -130,25 +130,25 @@
     # Add to the end of the contents inside each element in this list.
     # Pass in an HTML +str+, which is turned into Hpricot elements.
     def append(str = nil, &blk)
-      each { |x| x.html(x.children + Hpricot.make(str, &blk)) }
+      each { |x| x.html(x.children + x.make(str, &blk)) }
     end
 
     # Add to the start of the contents inside each element in this list.
     # Pass in an HTML +str+, which is turned into Hpricot elements.
     def prepend(str = nil, &blk)
-      each { |x| x.html(Hpricot.make(str, &blk) + x.children) }
+      each { |x| x.html(x.make(str, &blk) + x.children) }
     end
  
     # Add some HTML just previous to each element in this list.
     # Pass in an HTML +str+, which is turned into Hpricot elements.
     def before(str = nil, &blk)
-      each { |x| x.parent.insert_before Hpricot.make(str, &blk), x }
+      each { |x| x.parent.insert_before x.make(str, &blk), x }
     end
 
     # Just after each element in this list, add some HTML.
     # Pass in an HTML +str+, which is turned into Hpricot elements.
     def after(str = nil, &blk)
-      each { |x| x.parent.insert_after Hpricot.make(str, &blk), x }
+      each { |x| x.parent.insert_after x.make(str, &blk), x }
     end
 
     # Wraps each element in the list inside the element created by HTML +str+. 
@@ -161,14 +161,14 @@
     # This code wraps every link on the page inside a +div.link+ and a +div.link_inner+ nest.
     def wrap(str = nil, &blk)
       each do |x|
-        wrap = Hpricot.make(str, &blk)
+        wrap = x.make(str, &blk)
         nest = wrap.detect { |w| w.respond_to? :children }
         unless nest
-          raise Exception, "No wrapping element found."
+          raise "No wrapping element found."
         end
         x.parent.replace_child(x, wrap)
         nest = nest.children.first until nest.empty?
-        nest.html(nest.children + [x])
+        nest.html([x])
       end
     end
 
@@ -261,7 +261,7 @@
       self      
     end
 
-    ATTR_RE = %r!\[ *(?:(@)([\w\(\)-]+)|([\w\(\)-]+\(\))) *([~\!\|\*$\^=]*) *'?"?([^\]'"]*)'?"? *\]!i
+    ATTR_RE = %r!\[ *(?:(@)([\w\(\)-]+)|([\w\(\)-]+\(\))) *([~\!\|\*$\^=]*) *'?"?([^'"]*)'?"? *\]!i
     BRACK_RE = %r!(\[) *([^\]]*) *\]+!i
     FUNC_RE = %r!(:)?([a-zA-Z0-9\*_-]*)\( *[\"']?([^ \)]*?)['\"]? *\)!
     CUST_RE = %r!(:)([a-zA-Z0-9\*_-]*)()!
@@ -275,7 +275,7 @@
             expr = $'
             m.compact!
             if m[0] == '@'
-                m[0] = "@#{m.slice!(2,1)}"
+                m[0] = "@#{m.slice!(2,1).join}"
             end
 
             if m[0] == '[' && m[1] =~ /^\d+$/
@@ -300,10 +300,10 @@
                         args = m[1..-1]
                     end
                 end
-                i = -1
+                args << -1
                 nodes = Elements[*nodes.find_all do |x| 
-                                      i += 1
-                                      x.send(meth, *([*args] + [i])) ? truth : !truth
+                                      args[-1] += 1
+                                      x.send(meth, *args) ? truth : !truth
                                   end]
             end
         end
@@ -446,23 +446,23 @@
       parent.containers.length == 1
     end
 
-    filter :parent do
+    filter :parent do |*a|
       containers.length > 0
     end
 
-    filter :empty do
+    filter :empty do |*a|
       containers.length == 0
     end
 
-    filter :root do
+    filter :root do |*a|
       self.is_a? Hpricot::Doc
     end
     
-    filter 'text' do
+    filter 'text' do |*a|
       self.text?
     end
 
-    filter 'comment' do
+    filter 'comment' do |*a|
       self.comment?
     end
 
@@ -495,7 +495,7 @@
     end
 
     filter 'text()' do |val,i|
-      !self.inner_text.strip.empty?
+      self.children.grep(Hpricot::Text).detect { |x| x.content =~ /\S/ } if self.children
     end
 
     filter '@' do |attr,val,i|
diff -ruN hpricot-0.6/lib/hpricot/htmlinfo.rb hpricot/lib/hpricot/htmlinfo.rb
--- hpricot-0.6/lib/hpricot/htmlinfo.rb	2007-01-09 23:26:13.000000000 +0100
+++ hpricot/lib/hpricot/htmlinfo.rb	2009-02-19 19:39:17.000000000 +0100
@@ -473,9 +473,23 @@
    "menu", "noframes", "noscript", "object", "ol", "p", "pre", "q", "s",
    "samp", "script", "select", "small", "span", "strike", "strong", "sub",
    "sup", "table", "textarea", "tt", "u", "ul", "var"]}
+  ElementContent.keys.each do |k|
+    v = ElementContent[k]
+    if v.is_a? Array
+      ElementContent[k] = v.inject({}) do |h, name|
+        h[name.hash] = true
+        h
+      end
+    end
+  end
 
   ElementInclusions =
 {"head"=>["link", "meta", "object", "script", "style"], "body"=>["del", "ins"]}
+  ElementInclusions.each do |k, v|
+    v.each do |name|
+      ElementContent[k][name.hash] = :allow
+    end
+  end
 
   ElementExclusions =
 {"button"=>
@@ -496,6 +510,11 @@
    "h1", "h2", "h3", "h4", "h5", "h6", "hr", "isindex", "menu", "noframes",
    "noscript", "ol", "p", "pre", "table", "ul"],
  "label"=>["label"]}
+  ElementExclusions.each do |k, v|
+    v.each do |name|
+      ElementContent[k][name.hash] = :deny
+    end
+  end
 
   OmittedAttrName =
 {"h6"=>
diff -ruN hpricot-0.6/lib/hpricot/inspect.rb hpricot/lib/hpricot/inspect.rb
--- hpricot-0.6/lib/hpricot/inspect.rb	2007-04-03 23:34:31.000000000 +0200
+++ hpricot/lib/hpricot/inspect.rb	2009-02-19 19:39:17.000000000 +0100
@@ -11,28 +11,7 @@
 
   class Doc
     def pretty_print(q)
-      q.object_group(self) { @children.each {|elt| q.breakable; q.pp elt } }
-    end
-    alias inspect pretty_print_inspect
-  end
-
-  class Elem
-    def pretty_print(q)
-      if empty?
-        q.group(1, '{emptyelem', '}') {
-          q.breakable; q.pp @stag
-        }
-      else
-        q.group(1, "{elem", "}") {
-          q.breakable; q.pp @stag
-          if @children
-            @children.each {|elt| q.breakable; q.pp elt }
-          end
-          if @etag
-            q.breakable; q.pp @etag
-          end
-        }
-      end
+      q.object_group(self) { children.each {|elt| q.breakable; q.pp elt } }
     end
     alias inspect pretty_print_inspect
   end
@@ -41,7 +20,7 @@
     def pretty_print(q)
       q.group(1, '{', '}') {
         q.text self.class.name.sub(/.*::/,'').downcase
-        if rs = @raw_string
+        if rs = raw_string
           rs.scan(/[^\r\n]*(?:\r\n?|\n|[^\r\n]\z)/) {|line|
             q.breakable
             q.pp line
@@ -55,13 +34,30 @@
     alias inspect pretty_print_inspect
   end
 
-  class STag
+  class Elem
     def pretty_print(q)
+      if empty?
+        q.group(1, '{emptyelem', '}') {
+          q.breakable; pretty_print_stag q
+        }
+      else
+        q.group(1, "{elem", "}") {
+          q.breakable; pretty_print_stag q
+          if children
+            children.each {|elt| q.breakable; q.pp elt }
+          end
+          if etag
+            q.breakable; q.pp etag
+          end
+        }
+      end
+    end
+    def pretty_print_stag(q)
       q.group(1, '<', '>') {
-        q.text @name
+        q.text name
 
-        if @raw_attributes
-          @raw_attributes.each {|n, t|
+        if raw_attributes
+          raw_attributes.each {|n, t|
             q.breakable
             if t
               q.text "#{n}=\"#{Hpricot.uxs(t)}\""
@@ -78,7 +74,7 @@
   class ETag
     def pretty_print(q)
       q.group(1, '</', '>') {
-        q.text @name
+        q.text name
       }
     end
     alias inspect pretty_print_inspect
@@ -86,7 +82,7 @@
 
   class Text
     def pretty_print(q)
-      q.text @content.dump
+      q.text content.dump
     end
   end
 
@@ -94,11 +90,11 @@
     def pretty_print(q)
       q.group(1, '{', '}') {
         q.text self.class.name.sub(/.*::/,'').downcase
-        if rs = @raw_string
+        if rs = raw_string
           q.breakable
           q.text rs
         else
-          q.text "</#{@name}>"
+          q.text "</#{name}>"
         end
       }
     end
diff -ruN hpricot-0.6/lib/hpricot/modules.rb hpricot/lib/hpricot/modules.rb
--- hpricot-0.6/lib/hpricot/modules.rb	2007-01-09 23:26:13.000000000 +0100
+++ hpricot/lib/hpricot/modules.rb	2009-02-19 19:39:17.000000000 +0100
@@ -4,7 +4,6 @@
 
   # :stopdoc:
   module Tag; include Hpricot end
-    class STag; include Tag end
     class ETag; include Tag end
   # :startdoc:
 
@@ -12,6 +11,7 @@
     module Container; include Node end
       class Doc; include Container end
       class Elem; include Container end
+
     module Leaf; include Node end
       class Text; include Leaf end
       class XMLDecl; include Leaf end
@@ -25,6 +25,7 @@
   module Leaf::Trav; include Traverse end
   class Doc;       module Trav; include Container::Trav end; include Trav end
   class Elem;      module Trav; include Container::Trav end; include Trav end
+  class CData;     module Trav; include Leaf::Trav      end; include Trav end
   class Text;      module Trav; include Leaf::Trav      end; include Trav end
   class XMLDecl;   module Trav; include Leaf::Trav      end; include Trav end
   class DocType;   module Trav; include Leaf::Trav      end; include Trav end
diff -ruN hpricot-0.6/lib/hpricot/parse.rb hpricot/lib/hpricot/parse.rb
--- hpricot-0.6/lib/hpricot/parse.rb	2007-06-06 16:30:15.000000000 +0200
+++ hpricot/lib/hpricot/parse.rb	2009-02-19 19:39:17.000000000 +0100
@@ -1,7 +1,7 @@
 require 'hpricot/htmlinfo'
 
 def Hpricot(input = nil, opts = {}, &blk)
-  Hpricot.parse(input, opts, &blk)
+  Hpricot.make(input, opts, &blk)
 end
 
 module Hpricot
@@ -12,286 +12,27 @@
   # Hpricot.parse parses <i>input</i> and return a document tree.
   # represented by Hpricot::Doc.
   def Hpricot.parse(input = nil, opts = {}, &blk)
-    Doc.new(make(input, opts, &blk))
+    make(input, opts, &blk)
   end
 
   # Hpricot::XML parses <i>input</i>, disregarding all the HTML rules
   # and returning a document tree.
-  def Hpricot.XML(input, opts = {})
-    Doc.new(make(input, opts.merge(:xml => true)))
+  def Hpricot.XML(input = nil, opts = {}, &blk)
+    opts.merge! :xml => true
+    make(input, opts, &blk)
   end
 
   # :stopdoc:
 
   def Hpricot.make(input = nil, opts = {}, &blk)
-    opts = {:fixup_tags => false}.merge(opts)
-    unless input or blk
-      raise ArgumentError, "An Hpricot document must be built from an input source (a String) or a block."
-    end
-
-    conv = opts[:xml] ? :to_s : :downcase
-
-    fragment =
-    if input
-      case opts[:encoding]
-      when nil
-      when 'utf-8'
-        unless defined? Encoding::Character::UTF8
-          raise EncodingError, "The ruby-character-encodings library could not be found for utf-8 mode."
-        end
-      else
-        raise EncodingError, "No encoding option `#{opts[:encoding]}' is available."
-      end
-
-      if opts[:xhtml_strict]
-        opts[:fixup_tags] = true
-      end
-
-      stack = [[nil, nil, [], [], [], []]]
-      Hpricot.scan(input) do |token|
-        if stack.last[5] == :CDATA and ![:procins, :comment, :cdata].include?(token[0]) and
-            !(token[0] == :etag and token[1].casecmp(stack.last[0]).zero?)
-          token[0] = :text
-          token[1] = token[3] if token[3]
-        end
-
-        if !opts[:xml] and token[0] == :emptytag
-          token[1] = token[1].send(conv)
-          if ElementContent[token[1].downcase] != :EMPTY
-            token[0] = :stag
-          end
-        end
-
-        # TODO: downcase instead when parsing attributes?
-        if !opts[:xml] and token[2].is_a?(Hash)
-          token[2] = token[2].inject({}) { |hsh,(k,v)| hsh[k.downcase] = v; hsh }
-        end
-
-        case token[0]
-        when :stag
-          case opts[:encoding] when 'utf-8'
-            token.map! { |str| u(str) if str.is_a? String }
-          end
-
-          stagname = token[0] = token[1] = token[1].send(conv)
-          if ElementContent[stagname] == :EMPTY and !opts[:xml]
-            token[0] = :emptytag
-            stack.last[2] << token
-          else
-            unless opts[:xml]
-              if opts[:fixup_tags]
-                # obey the tag rules set up by the current element
-                if ElementContent.has_key? stagname
-                  trans = nil
-                  (stack.length-1).downto(0) do |i|
-                    untags = stack[i][5]
-                    break unless untags.include? stagname
-                    # puts "** ILLEGAL #{stagname} IN #{stack[i][0]}"
-                    trans = i
-                  end
-                  if trans.to_i > 1
-                    eles = stack.slice!(trans..-1)
-                    stack.last[2] += eles
-                    # puts "** TRANSPLANTED #{stagname} TO #{stack.last[0]}"
-                  end
-                elsif opts[:xhtml_strict]
-                  token[2] = {'class' => stagname}
-                  stagname = token[0] = "div"
-                end
-              end
-
-              # setup tag rules for inside this element
-              if ElementContent[stagname] == :CDATA
-                uncontainable_tags = :CDATA
-              elsif opts[:fixup_tags]
-                possible_tags = ElementContent[stagname]
-                excluded_tags, included_tags = stack.last[3..4]
-                if possible_tags
-                  excluded_tags = excluded_tags | (ElementExclusions[stagname] || [])
-                  included_tags = included_tags | (ElementInclusions[stagname] || [])
-                  containable_tags = (possible_tags | included_tags) - excluded_tags
-                  uncontainable_tags = ElementContent.keys - containable_tags
-                else
-                  # If the tagname is unknown, it is assumed that any element
-                  # except excluded can be contained.
-                  uncontainable_tags = excluded_tags
-                end
-              end
-            end
-            unless opts[:xml]
-              case token[2] when Hash
-                token[2] = token[2].inject({}) { |hsh,(k,v)| hsh[k.downcase] = v; hsh }
-              end
-            end
-            stack << [stagname, token, [], excluded_tags, included_tags, uncontainable_tags]
-          end
-        when :etag
-          etagname = token[0] = token[1].send(conv)
-          if opts[:xhtml_strict] and not ElementContent.has_key? etagname
-            etagname = token[0] = "div"
-          end
-          matched_elem = nil
-          (stack.length-1).downto(0) do |i|
-            stagname, = stack[i]
-            if stagname == etagname
-              matched_elem = stack[i]
-              stack[i][1] += token
-              eles = stack.slice!((i+1)..-1)
-              stack.last[2] += eles
-              break
-            end
-          end
-          unless matched_elem
-            stack.last[2] << [:bogus_etag, token.first, token.last]
-          else
-            ele = stack.pop
-            stack.last[2] << ele
-          end
-        when :text
-          l = stack.last[2].last
-          if l and l[0] == :text
-            l[1] += token[1]
-          else
-            stack.last[2] << token
-          end
-        else
-          stack.last[2] << token
-        end
-      end
-
-      while 1 < stack.length
-        ele = stack.pop
-        stack.last[2] << ele
-      end
-
-      structure_list = stack[0][2]
-      structure_list.map {|s| build_node(s, opts) }
-    elsif blk
-      Hpricot.build(&blk).children
-    end
-  end
-
-  def Hpricot.build_node(structure, opts = {})
-    case structure[0]
-    when String
-      tagname, _, attrs, sraw, _, _, _, eraw = structure[1]
-      children = structure[2]
-      etag = eraw && ETag.parse(tagname, eraw)
-      stag = STag.parse(tagname, attrs, sraw, true)
-      if !children.empty? || etag
-        Elem.new(stag,
-                  children.map {|c| build_node(c, opts) },
-                  etag)
-      else
-        Elem.new(stag)
-      end
-    when :text
-      Text.parse_pcdata(structure[1])
-    when :emptytag
-      Elem.new(STag.parse(structure[1], structure[2], structure[3], false))
-    when :bogus_etag
-      BogusETag.parse(structure[1], structure[2])
-    when :xmldecl
-      XMLDecl.parse(structure[2], structure[3])
-    when :doctype
-      if opts[:xhtml_strict]
-        structure[2]['system_id'] = "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
-        structure[2]['public_id'] = "-//W3C//DTD XHTML 1.0 Strict//EN"
-      end
-      DocType.parse(structure[1], structure[2], structure[3])
-    when :procins
-      ProcIns.parse(structure[1])
-    when :comment
-      Comment.parse(structure[1])
-    when :cdata_content
-      Text.parse_cdata_content(structure[1])
-    when :cdata
-      Text.parse_cdata_section(structure[1])
+    if blk
+      doc = Hpricot.build(&blk)
+      doc.instance_variable_set("@options", opts)
+      doc
     else
-      raise Exception, "[bug] unknown structure: #{structure.inspect}"
+      Hpricot.scan(input, opts)
     end
   end
 
-  def STag.parse(qname, attrs, raw_string, is_stag)
-    result = STag.new(qname, attrs)
-    result.raw_string = raw_string
-    result
-  end
-
-  def ETag.parse(qname, raw_string)
-    result = self.new(qname)
-    result.raw_string = raw_string
-    result
-  end
-
-  def BogusETag.parse(qname, raw_string)
-    result = self.new(qname)
-    result.raw_string = raw_string
-    result
-  end
-
-  def Text.parse_pcdata(raw_string)
-    result = Text.new(raw_string)
-    result
-  end
-
-  def Text.parse_cdata_content(raw_string)
-    result = CData.new(raw_string)
-    result
-  end
-
-  def Text.parse_cdata_section(content)
-    result = CData.new(content)
-    result
-  end
-
-  def XMLDecl.parse(attrs, raw_string)
-    attrs ||= {}
-    version = attrs['version']
-    encoding = attrs['encoding']
-    case attrs['standalone']
-    when 'yes'
-      standalone = true
-    when 'no'
-      standalone = false
-    else
-      standalone = nil
-    end
-
-    result = XMLDecl.new(version, encoding, standalone)
-    result.raw_string = raw_string
-    result
-  end
-
-  def DocType.parse(root_element_name, attrs, raw_string)
-    if attrs
-      public_identifier = attrs['public_id']
-      system_identifier = attrs['system_id']
-    end
-
-    root_element_name = root_element_name.downcase
-
-    result = DocType.new(root_element_name, public_identifier, system_identifier)
-    result.raw_string = raw_string
-    result
-  end
-
-  def ProcIns.parse(raw_string)
-    _, target, content = *raw_string.match(/\A<\?(\S+)\s+(.+)/m)
-    result = ProcIns.new(target, content)
-    result
-  end
-
-  def Comment.parse(content)
-    result = Comment.new(content)
-    result
-  end
-
-  module Pat
-    NameChar = /[-A-Za-z0-9._:]/
-    Name = /[A-Za-z_:]#{NameChar}*/
-    Nmtoken = /#{NameChar}+/
-  end
-
   # :startdoc:
 end
diff -ruN hpricot-0.6/lib/hpricot/tag.rb hpricot/lib/hpricot/tag.rb
--- hpricot-0.6/lib/hpricot/tag.rb	2007-04-14 11:21:55.000000000 +0200
+++ hpricot/lib/hpricot/tag.rb	2009-02-19 19:39:17.000000000 +0100
@@ -2,62 +2,55 @@
   # :stopdoc:
 
   class Doc
-    attr_accessor :children
-    def initialize(children = [])
-      @children = children ? children.each { |c| c.parent = self }  : []
-    end
     def output(out, opts = {})
-      @children.each do |n|
+      children.each do |n|
         n.output(out, opts)
-      end
+      end if children
       out
     end
+    def make(input = nil, &blk)
+      Hpricot.make(input, @options, &blk).children
+    end
     def altered!; end
+    def inspect_tree
+      children.map { |x| x.inspect_tree }.join if children
+    end
   end
 
   class BaseEle
-    attr_accessor :raw_string, :parent
     def html_quote(str)
       "\"" + str.gsub('"', '\\"') + "\""
     end
     def if_output(opts)
-      if opts[:preserve] and not @raw_string.nil?
-        @raw_string
+      if opts[:preserve] and not raw_string.nil?
+        raw_string
       else
         yield opts
       end
     end
     def pathname; self.name end
     def altered!
-      @raw_string = nil
+      clear_raw
     end
-    def self.alterable(*fields)
-      attr_accessor(*fields)
-      fields.each do |f|
-        define_method("#{f}=") do |v|
-          altered!
-          instance_variable_set("@#{f}", v)
-        end
-      end
+    def inspect_tree(depth = 0)
+      %{#{" " * depth}} + self.class.name.split(/::/).last.downcase + "\n"
     end
   end
 
   class Elem
-    attr_accessor :stag, :etag, :children
-    def initialize(stag, children=nil, etag=nil)
-      @stag, @etag = stag, etag
-      @children = children ? children.each { |c| c.parent = self }  : []
-    end
-    def empty?; @children.empty? end
-    [:name, :raw_attributes, :parent, :altered!].each do |m|
-      [m, "#{m}="].each { |m2| define_method(m2) { |*a| [@etag, @stag].inject { |_,t| t.send(m2, *a) if t and t.respond_to?(m2) } } }
+    def initialize tag, attrs = nil, children = nil, etag = nil
+      self.name, self.raw_attributes, self.children, self.etag =
+        tag, attrs, children, etag
     end
+    def empty?; children.nil? or children.empty? end
     def attributes
       if raw_attributes
         raw_attributes.inject({}) do |hsh, (k, v)|
           hsh[k] = Hpricot.uxs(v)
           hsh
         end
+      else
+        {}
       end
     end
     def to_plain_text
@@ -75,151 +68,128 @@
     end
     def pathname; self.name end
     def output(out, opts = {})
-      if empty? and ElementContent[@stag.name] == :EMPTY
-        @stag.output(out, opts.merge(:style => :empty))
-      else
-        @stag.output(out, opts)
-        @children.each { |n| n.output(out, opts) }
-        if @etag
-          @etag.output(out, opts)
-        elsif !opts[:preserve]
-          ETag.new(@stag.name).output(out, opts)
+      out <<
+        if_output(opts) do
+          "<#{name}#{attributes_as_html}" +
+            ((empty? and not etag) ? " /" : "") +
+            ">"
         end
+      if children
+        children.each { |n| n.output(out, opts) }
+      end
+      if etag
+        etag.output(out, opts)
+      elsif !opts[:preserve] && !empty?
+        out <<
+          if_output(opts) do
+            "</#{name}>"
+          end
       end
       out
     end
-  end
-
-  class STag < BaseEle
-    def initialize(name, attributes=nil)
-      @name = name.to_s
-      @raw_attributes = attributes || {}
-    end
-    alterable :name, :raw_attributes
     def attributes_as_html
-      if @raw_attributes
-        @raw_attributes.map do |aname, aval|
+      if raw_attributes
+        raw_attributes.map do |aname, aval|
           " #{aname}" +
-            (aval ? "=\"#{aval}\"" : "")
+            (aval ? "=#{html_quote aval}" : "")
         end.join
       end
     end
-    def output(out, opts = {})
-      out <<
-        if_output(opts) do
-          "<#{@name}#{attributes_as_html}" +
-            (opts[:style] == :empty ? " /" : "") +
-            ">"
-        end
+    def inspect_tree(depth = 0)
+      %{#{" " * depth}} + name + "\n" +
+        (children ? children.map { |x| x.inspect_tree(depth + 1) }.join : "")
     end
   end
 
-  class ETag < BaseEle
-    def initialize(qualified_name)
-      @name = qualified_name.to_s
-    end
-    alterable :name
+  class ETag
+    def initialize name; self.name = name end
     def output(out, opts = {})
       out <<
         if_output(opts) do
-          "</#{@name}>"
+          "</#{name}>"
         end
     end
   end
 
-  class BogusETag < ETag
+  class BogusETag
     def output(out, opts = {}); out << if_output(opts) { '' }; end
   end
 
-  class Text < BaseEle
-    def initialize(text)
-      @content = text
-    end
-    alterable :content
+  class Text
+    def initialize content; self.content = content end
     def pathname; "text()" end
     def to_s
-      Hpricot.uxs(@content)
+      Hpricot.uxs(content)
     end
     alias_method :inner_text, :to_s
     alias_method :to_plain_text, :to_s
+    def << str; self.content << str end
     def output(out, opts = {})
       out <<
         if_output(opts) do
-          @content
+          content.to_s
         end
     end
   end
 
-  class CData < Text
+  class CData
+    def initialize content; self.content = content end
     alias_method :to_s, :content
     alias_method :to_plain_text, :content
     def output(out, opts = {})
       out <<
         if_output(opts) do
-          "<![CDATA[#@content]]>"
+          "<![CDATA[#{content}]]>"
         end
     end
   end
 
-  class XMLDecl < BaseEle
-    def initialize(version, encoding, standalone)
-      @version, @encoding, @standalone = version, encoding, standalone
-    end
-    alterable :version, :encoding, :standalone
+  class XMLDecl
     def pathname; "xmldecl()" end
     def output(out, opts = {})
       out <<
         if_output(opts) do
-          "<?xml version=\"#{@version}\"" +
-            (@encoding ? " encoding=\"#{encoding}\"" : "") +
-            (@standalone != nil ? " standalone=\"#{standalone ? 'yes' : 'no'}\"" : "") +
+          "<?xml version=\"#{version}\"" +
+            (encoding ? " encoding=\"#{encoding}\"" : "") +
+            (standalone != nil ? " standalone=\"#{standalone ? 'yes' : 'no'}\"" : "") +
             "?>"
         end
     end
   end
 
-  class DocType < BaseEle
-    def initialize(target, pubid, sysid)
-      @target, @public_id, @system_id = target, pubid, sysid
+  class DocType
+    def initialize target, pub, sys
+      self.target, self.public_id, self.system_id = target, pub, sys
     end
-    alterable :target, :public_id, :system_id
     def pathname; "doctype()" end
     def output(out, opts = {})
       out <<
         if_output(opts) do
-          "<!DOCTYPE #{@target} " +
-            (@public_id ? "PUBLIC \"#{@public_id}\"" : "SYSTEM") +
-            (@system_id ? " #{html_quote(@system_id)}" : "") + ">"
+          "<!DOCTYPE #{target} " +
+            (public_id ? "PUBLIC \"#{public_id}\"" : "SYSTEM") +
+            (system_id ? " #{html_quote(system_id)}" : "") + ">"
         end
     end
   end
 
-  class ProcIns < BaseEle
-    def initialize(target, content)
-      @target, @content = target, content
-    end
+  class ProcIns
     def pathname; "procins()" end
-    alterable :target, :content
     def output(out, opts = {})
       out << 
         if_output(opts) do
-          "<?#{@target}" +
-           (@content ? " #{@content}" : "") +
+          "<?#{target}" +
+           (content ? " #{content}" : "") +
            "?>"
         end
     end
   end
 
-  class Comment < BaseEle
-    def initialize(content)
-      @content = content
-    end
+  class Comment
     def pathname; "comment()" end
-    alterable :content
     def output(out, opts = {})
       out <<
         if_output(opts) do
-          "<!--#{@content}-->"
+          "<!--#{content}-->"
         end
     end
   end
diff -ruN hpricot-0.6/lib/hpricot/traverse.rb hpricot/lib/hpricot/traverse.rb
--- hpricot-0.6/lib/hpricot/traverse.rb	2007-06-04 22:47:18.000000000 +0200
+++ hpricot/lib/hpricot/traverse.rb	2009-02-19 19:39:17.000000000 +0100
@@ -20,6 +20,16 @@
     # Is this object a stranded end tag?
     def bogusetag?() BogusETag::Trav === self end
 
+    # Parses an HTML string, making an HTML fragment based on
+    # the options used to create the container document.
+    def make(input = nil, &blk)
+      if parent and parent.respond_to? :make
+        parent.make(input, &blk)
+      else
+        Hpricot.make(input, &blk).children
+      end
+    end
+
     # Builds an HTML string from this node and its contents.
     # If you need to write to a stream, try calling <tt>output(io)</tt>
     # as a method on this object.
@@ -41,7 +51,7 @@
         return i if (x.respond_to?(:name) and name == x.name) or
           (x.text? and name == "text()")
         i += 1
-      end
+      end if children
       -1
     end
 
@@ -109,12 +119,12 @@
 
     # Adds elements immediately after this element, contained in the +html+ string.
     def after(html = nil, &blk)
-      parent.insert_after(Hpricot.make(html, &blk), self)
+      parent.insert_after(make(html, &blk), self)
     end
 
     # Adds elements immediately before this element, contained in the +html+ string.
     def before(html = nil, &blk)
-      parent.insert_before(Hpricot.make(html, &blk), self)
+      parent.insert_before(make(html, &blk), self)
     end
 
 
@@ -122,7 +132,7 @@
     # in the +html+ string.
     def swap(html = nil, &blk)
       parent.altered!
-      parent.replace_child(self, Hpricot.make(html, &blk))
+      parent.replace_child(self, make(html, &blk))
     end
 
     def get_subnode(*indexes)
@@ -136,16 +146,20 @@
     # Builds a string from the text contained in this node.  All
     # HTML elements are removed.
     def to_plain_text
-      if respond_to? :children
+      if respond_to?(:children) and children
         children.map { |x| x.to_plain_text }.join.strip.gsub(/\n{2,}/, "\n\n")
+      else
+        ""
       end
     end
 
     # Builds a string from the text contained in this node.  All
     # HTML elements are removed.
     def inner_text
-      if respond_to? :children
+      if respond_to?(:children) and children
         children.map { |x| x.inner_text }.join
+      else
+        ""
       end
     end
     alias_method :innerText, :inner_text
@@ -158,12 +172,14 @@
         when Array
           self.children = inner
         else
-          self.children = Hpricot.make(inner, &blk)
+          self.children = make(inner, &blk)
         end
         reparent self.children
       else
-        if respond_to? :children
+        if respond_to?(:children) and children
           children.map { |x| x.output("") }.join
+        else
+          ""
         end
       end
     end
@@ -197,7 +213,7 @@
         parent.children.each do |e|
           id = sim if e == self
           sim += 1 if e.pathname == self.pathname
-        end
+        end if parent.children
         p = File.join(parent.xpath, self.pathname)
         p += "[#{id+1}]" if sim >= 2
         p
@@ -214,7 +230,7 @@
         parent.children.each do |e|
           id = sim if e == self
           sim += 1 if e.pathname == self.pathname
-        end
+        end if parent.children
         p = parent.css_path
         p = p ? "#{p} > #{self.pathname}" : self.pathname
         p += ":nth(#{id})" if sim >= 2
@@ -479,13 +495,13 @@
 
     # +each_child+ iterates over each child.
     def each_child(&block) # :yields: child_node
-      children.each(&block)
+      children.each(&block) if children
       nil
     end
 
     # +each_child_with_index+ iterates over each child.
     def each_child_with_index(&block) # :yields: child_node, index
-      children.each_with_index(&block)
+      children.each_with_index(&block) if children
       nil
     end
 
@@ -513,8 +529,9 @@
 
     def get_elements_by_tag_name(*a)
       list = Elements[]
+      a.delete("*")
       traverse_element(*a.map { |tag| [tag, "{http://www.w3.org/1999/xhtml}#{tag}"] }.flatten) do |e|
-          list << e
+        list << e if e.elem?
       end
       list
     end
@@ -615,7 +632,7 @@
   # :stopdoc:
   module Doc::Trav
     def traverse_all_element(&block)
-      children.each {|c| c.traverse_all_element(&block) }
+      children.each {|c| c.traverse_all_element(&block) } if children
     end
     def xpath
       "/"
@@ -628,7 +645,7 @@
   module Elem::Trav
     def traverse_all_element(&block)
       yield self
-      children.each {|c| c.traverse_all_element(&block) }
+      children.each {|c| c.traverse_all_element(&block) } if children
     end
   end
 
@@ -640,14 +657,14 @@
 
   module Doc::Trav
     def traverse_some_element(name_set, &block)
-      children.each {|c| c.traverse_some_element(name_set, &block) }
+      children.each {|c| c.traverse_some_element(name_set, &block) } if children
     end
   end
 
   module Elem::Trav
     def traverse_some_element(name_set, &block)
       yield self if name_set.include? self.name
-      children.each {|c| c.traverse_some_element(name_set, &block) }
+      children.each {|c| c.traverse_some_element(name_set, &block) } if children
     end
   end
 
@@ -786,7 +803,7 @@
   module Doc::Trav
     def root
       es = []
-      children.each {|c| es << c if c.elem? }
+      children.each {|c| es << c if c.elem? } if children
       raise Hpricot::Error, "no element" if es.empty?
       raise Hpricot::Error, "multiple top elements" if 1 < es.length
       es[0]
@@ -806,7 +823,7 @@
     def set_attribute(name, val)
       altered!
       self.raw_attributes ||= {}
-      self.raw_attributes[name.to_s] = Hpricot.xs(val)
+      self.raw_attributes[name.to_s] = val.fast_xs
     end
     alias_method :[]=, :set_attribute
     def remove_attribute(name)
diff -ruN hpricot-0.6/setup.rb hpricot/setup.rb
--- hpricot-0.6/setup.rb	1970-01-01 01:00:00.000000000 +0100
+++ hpricot/setup.rb	2009-02-19 19:39:17.000000000 +0100
@@ -0,0 +1,1585 @@
+#
+# setup.rb
+#
+# Copyright (c) 2000-2005 Minero Aoki
+#
+# This program is free software.
+# You can distribute/modify this program under the terms of
+# the GNU LGPL, Lesser General Public License version 2.1.
+#
+
+unless Enumerable.method_defined?(:map)   # Ruby 1.4.6
+  module Enumerable
+    alias map collect
+  end
+end
+
+unless File.respond_to?(:read)   # Ruby 1.6
+  def File.read(fname)
+    open(fname) {|f|
+      return f.read
+    }
+  end
+end
+
+unless Errno.const_defined?(:ENOTEMPTY)   # Windows?
+  module Errno
+    class ENOTEMPTY
+      # We do not raise this exception, implementation is not needed.
+    end
+  end
+end
+
+def File.binread(fname)
+  open(fname, 'rb') {|f|
+    return f.read
+  }
+end
+
+# for corrupted Windows' stat(2)
+def File.dir?(path)
+  File.directory?((path[-1,1] == '/') ? path : path + '/')
+end
+
+
+class ConfigTable
+
+  include Enumerable
+
+  def initialize(rbconfig)
+    @rbconfig = rbconfig
+    @items = []
+    @table = {}
+    # options
+    @install_prefix = nil
+    @config_opt = nil
+    @verbose = true
+    @no_harm = false
+  end
+
+  attr_accessor :install_prefix
+  attr_accessor :config_opt
+
+  attr_writer :verbose
+
+  def verbose?
+    @verbose
+  end
+
+  attr_writer :no_harm
+
+  def no_harm?
+    @no_harm
+  end
+
+  def [](key)
+    lookup(key).resolve(self)
+  end
+
+  def []=(key, val)
+    lookup(key).set val
+  end
+
+  def names
+    @items.map {|i| i.name }
+  end
+
+  def each(&block)
+    @items.each(&block)
+  end
+
+  def key?(name)
+    @table.key?(name)
+  end
+
+  def lookup(name)
+    @table[name] or setup_rb_error "no such config item: #{name}"
+  end
+
+  def add(item)
+    @items.push item
+    @table[item.name] = item
+  end
+
+  def remove(name)
+    item = lookup(name)
+    @items.delete_if {|i| i.name == name }
+    @table.delete_if {|name, i| i.name == name }
+    item
+  end
+
+  def load_script(path, inst = nil)
+    if File.file?(path)
+      MetaConfigEnvironment.new(self, inst).instance_eval File.read(path), path
+    end
+  end
+
+  def savefile
+    '.config'
+  end
+
+  def load_savefile
+    begin
+      File.foreach(savefile()) do |line|
+        k, v = *line.split(/=/, 2)
+        self[k] = v.strip
+      end
+    rescue Errno::ENOENT
+      setup_rb_error $!.message + "\n#{File.basename($0)} config first"
+    end
+  end
+
+  def save
+    @items.each {|i| i.value }
+    File.open(savefile(), 'w') {|f|
+      @items.each do |i|
+        f.printf "%s=%s\n", i.name, i.value if i.value? and i.value
+      end
+    }
+  end
+
+  def load_standard_entries
+    standard_entries(@rbconfig).each do |ent|
+      add ent
+    end
+  end
+
+  def standard_entries(rbconfig)
+    c = rbconfig
+
+    rubypath = File.join(c['bindir'], c['ruby_install_name'] + c['EXEEXT'])
+
+    major = c['MAJOR'].to_i
+    minor = c['MINOR'].to_i
+    teeny = c['TEENY'].to_i
+    version = "#{major}.#{minor}"
+
+    # ruby ver. >= 1.4.4?
+    newpath_p = ((major >= 2) or
+                 ((major == 1) and
+                  ((minor >= 5) or
+                   ((minor == 4) and (teeny >= 4)))))
+
+    if c['rubylibdir']
+      # V > 1.6.3
+      libruby         = "#{c['prefix']}/lib/ruby"
+      librubyver      = c['rubylibdir']
+      librubyverarch  = c['archdir']
+      siteruby        = c['sitedir']
+      siterubyver     = c['sitelibdir']
+      siterubyverarch = c['sitearchdir']
+    elsif newpath_p
+      # 1.4.4 <= V <= 1.6.3
+      libruby         = "#{c['prefix']}/lib/ruby"
+      librubyver      = "#{c['prefix']}/lib/ruby/#{version}"
+      librubyverarch  = "#{c['prefix']}/lib/ruby/#{version}/#{c['arch']}"
+      siteruby        = c['sitedir']
+      siterubyver     = "$siteruby/#{version}"
+      siterubyverarch = "$siterubyver/#{c['arch']}"
+    else
+      # V < 1.4.4
+      libruby         = "#{c['prefix']}/lib/ruby"
+      librubyver      = "#{c['prefix']}/lib/ruby/#{version}"
+      librubyverarch  = "#{c['prefix']}/lib/ruby/#{version}/#{c['arch']}"
+      siteruby        = "#{c['prefix']}/lib/ruby/#{version}/site_ruby"
+      siterubyver     = siteruby
+      siterubyverarch = "$siterubyver/#{c['arch']}"
+    end
+    parameterize = lambda {|path|
+      path.sub(/\A#{Regexp.quote(c['prefix'])}/, '$prefix')
+    }
+
+    if arg = c['configure_args'].split.detect {|arg| /--with-make-prog=/ =~ arg }
+      makeprog = arg.sub(/'/, '').split(/=/, 2)[1]
+    else
+      makeprog = 'make'
+    end
+
+    [
+      ExecItem.new('installdirs', 'std/site/home',
+                   'std: install under libruby; site: install under site_ruby; home: install under $HOME')\
+          {|val, table|
+            case val
+            when 'std'
+              table['rbdir'] = '$librubyver'
+              table['sodir'] = '$librubyverarch'
+            when 'site'
+              table['rbdir'] = '$siterubyver'
+              table['sodir'] = '$siterubyverarch'
+            when 'home'
+              setup_rb_error '$HOME was not set' unless ENV['HOME']
+              table['prefix'] = ENV['HOME']
+              table['rbdir'] = '$libdir/ruby'
+              table['sodir'] = '$libdir/ruby'
+            end
+          },
+      PathItem.new('prefix', 'path', c['prefix'],
+                   'path prefix of target environment'),
+      PathItem.new('bindir', 'path', parameterize.call(c['bindir']),
+                   'the directory for commands'),
+      PathItem.new('libdir', 'path', parameterize.call(c['libdir']),
+                   'the directory for libraries'),
+      PathItem.new('datadir', 'path', parameterize.call(c['datadir']),
+                   'the directory for shared data'),
+      PathItem.new('mandir', 'path', parameterize.call(c['mandir']),
+                   'the directory for man pages'),
+      PathItem.new('sysconfdir', 'path', parameterize.call(c['sysconfdir']),
+                   'the directory for system configuration files'),
+      PathItem.new('localstatedir', 'path', parameterize.call(c['localstatedir']),
+                   'the directory for local state data'),
+      PathItem.new('libruby', 'path', libruby,
+                   'the directory for ruby libraries'),
+      PathItem.new('librubyver', 'path', librubyver,
+                   'the directory for standard ruby libraries'),
+      PathItem.new('librubyverarch', 'path', librubyverarch,
+                   'the directory for standard ruby extensions'),
+      PathItem.new('siteruby', 'path', siteruby,
+          'the directory for version-independent aux ruby libraries'),
+      PathItem.new('siterubyver', 'path', siterubyver,
+                   'the directory for aux ruby libraries'),
+      PathItem.new('siterubyverarch', 'path', siterubyverarch,
+                   'the directory for aux ruby binaries'),
+      PathItem.new('rbdir', 'path', '$siterubyver',
+                   'the directory for ruby scripts'),
+      PathItem.new('sodir', 'path', '$siterubyverarch',
+                   'the directory for ruby extentions'),
+      PathItem.new('rubypath', 'path', rubypath,
+                   'the path to set to #! line'),
+      ProgramItem.new('rubyprog', 'name', rubypath,
+                      'the ruby program using for installation'),
+      ProgramItem.new('makeprog', 'name', makeprog,
+                      'the make program to compile ruby extentions'),
+      SelectItem.new('shebang', 'all/ruby/never', 'ruby',
+                     'shebang line (#!) editing mode'),
+      BoolItem.new('without-ext', 'yes/no', 'no',
+                   'does not compile/install ruby extentions')
+    ]
+  end
+  private :standard_entries
+
+  def load_multipackage_entries
+    multipackage_entries().each do |ent|
+      add ent
+    end
+  end
+
+  def multipackage_entries
+    [
+      PackageSelectionItem.new('with', 'name,name...', '', 'ALL',
+                               'package names that you want to install'),
+      PackageSelectionItem.new('without', 'name,name...', '', 'NONE',
+                               'package names that you do not want to install')
+    ]
+  end
+  private :multipackage_entries
+
+  ALIASES = {
+    'std-ruby'         => 'librubyver',
+    'stdruby'          => 'librubyver',
+    'rubylibdir'       => 'librubyver',
+    'archdir'          => 'librubyverarch',
+    'site-ruby-common' => 'siteruby',     # For backward compatibility
+    'site-ruby'        => 'siterubyver',  # For backward compatibility
+    'bin-dir'          => 'bindir',
+    'bin-dir'          => 'bindir',
+    'rb-dir'           => 'rbdir',
+    'so-dir'           => 'sodir',
+    'data-dir'         => 'datadir',
+    'ruby-path'        => 'rubypath',
+    'ruby-prog'        => 'rubyprog',
+    'ruby'             => 'rubyprog',
+    'make-prog'        => 'makeprog',
+    'make'             => 'makeprog'
+  }
+
+  def fixup
+    ALIASES.each do |ali, name|
+      @table[ali] = @table[name]
+    end
+    @items.freeze
+    @table.freeze
+    @options_re = /\A--(#{@table.keys.join('|')})(?:=(.*))?\z/
+  end
+
+  def parse_opt(opt)
+    m = @options_re.match(opt) or setup_rb_error "config: unknown option #{opt}"
+    m.to_a[1,2]
+  end
+
+  def dllext
+    @rbconfig['DLEXT']
+  end
+
+  def value_config?(name)
+    lookup(name).value?
+  end
+
+  class Item
+    def initialize(name, template, default, desc)
+      @name = name.freeze
+      @template = template
+      @value = default
+      @default = default
+      @description = desc
+    end
+
+    attr_reader :name
+    attr_reader :description
+
+    attr_accessor :default
+    alias help_default default
+
+    def help_opt
+      "--#{@name}=#{@template}"
+    end
+
+    def value?
+      true
+    end
+
+    def value
+      @value
+    end
+
+    def resolve(table)
+      @value.gsub(%r<\$([^/]+)>) { table[$1] }
+    end
+
+    def set(val)
+      @value = check(val)
+    end
+
+    private
+
+    def check(val)
+      setup_rb_error "config: --#{name} requires argument" unless val
+      val
+    end
+  end
+
+  class BoolItem < Item
+    def config_type
+      'bool'
+    end
+
+    def help_opt
+      "--#{@name}"
+    end
+
+    private
+
+    def check(val)
+      return 'yes' unless val
+      case val
+      when /\Ay(es)?\z/i, /\At(rue)?\z/i then 'yes'
+      when /\An(o)?\z/i, /\Af(alse)\z/i  then 'no'
+      else
+        setup_rb_error "config: --#{@name} accepts only yes/no for argument"
+      end
+    end
+  end
+
+  class PathItem < Item
+    def config_type
+      'path'
+    end
+
+    private
+
+    def check(path)
+      setup_rb_error "config: --#{@name} requires argument"  unless path
+      path[0,1] == '$' ? path : File.expand_path(path)
+    end
+  end
+
+  class ProgramItem < Item
+    def config_type
+      'program'
+    end
+  end
+
+  class SelectItem < Item
+    def initialize(name, selection, default, desc)
+      super
+      @ok = selection.split('/')
+    end
+
+    def config_type
+      'select'
+    end
+
+    private
+
+    def check(val)
+      unless @ok.include?(val.strip)
+        setup_rb_error "config: use --#{@name}=#{@template} (#{val})"
+      end
+      val.strip
+    end
+  end
+
+  class ExecItem < Item
+    def initialize(name, selection, desc, &block)
+      super name, selection, nil, desc
+      @ok = selection.split('/')
+      @action = block
+    end
+
+    def config_type
+      'exec'
+    end
+
+    def value?
+      false
+    end
+
+    def resolve(table)
+      setup_rb_error "$#{name()} wrongly used as option value"
+    end
+
+    undef set
+
+    def evaluate(val, table)
+      v = val.strip.downcase
+      unless @ok.include?(v)
+        setup_rb_error "invalid option --#{@name}=#{val} (use #{@template})"
+      end
+      @action.call v, table
+    end
+  end
+
+  class PackageSelectionItem < Item
+    def initialize(name, template, default, help_default, desc)
+      super name, template, default, desc
+      @help_default = help_default
+    end
+
+    attr_reader :help_default
+
+    def config_type
+      'package'
+    end
+
+    private
+
+    def check(val)
+      unless File.dir?("packages/#{val}")
+        setup_rb_error "config: no such package: #{val}"
+      end
+      val
+    end
+  end
+
+  class MetaConfigEnvironment
+    def initialize(config, installer)
+      @config = config
+      @installer = installer
+    end
+
+    def config_names
+      @config.names
+    end
+
+    def config?(name)
+      @config.key?(name)
+    end
+
+    def bool_config?(name)
+      @config.lookup(name).config_type == 'bool'
+    end
+
+    def path_config?(name)
+      @config.lookup(name).config_type == 'path'
+    end
+
+    def value_config?(name)
+      @config.lookup(name).config_type != 'exec'
+    end
+
+    def add_config(item)
+      @config.add item
+    end
+
+    def add_bool_config(name, default, desc)
+      @config.add BoolItem.new(name, 'yes/no', default ? 'yes' : 'no', desc)
+    end
+
+    def add_path_config(name, default, desc)
+      @config.add PathItem.new(name, 'path', default, desc)
+    end
+
+    def set_config_default(name, default)
+      @config.lookup(name).default = default
+    end
+
+    def remove_config(name)
+      @config.remove(name)
+    end
+
+    # For only multipackage
+    def packages
+      raise '[setup.rb fatal] multi-package metaconfig API packages() called for single-package; contact application package vendor' unless @installer
+      @installer.packages
+    end
+
+    # For only multipackage
+    def declare_packages(list)
+      raise '[setup.rb fatal] multi-package metaconfig API declare_packages() called for single-package; contact application package vendor' unless @installer
+      @installer.packages = list
+    end
+  end
+
+end   # class ConfigTable
+
+
+# This module requires: #verbose?, #no_harm?
+module FileOperations
+
+  def mkdir_p(dirname, prefix = nil)
+    dirname = prefix + File.expand_path(dirname) if prefix
+    $stderr.puts "mkdir -p #{dirname}" if verbose?
+    return if no_harm?
+
+    # Does not check '/', it's too abnormal.
+    dirs = File.expand_path(dirname).split(%r<(?=/)>)
+    if /\A[a-z]:\z/i =~ dirs[0]
+      disk = dirs.shift
+      dirs[0] = disk + dirs[0]
+    end
+    dirs.each_index do |idx|
+      path = dirs[0..idx].join('')
+      Dir.mkdir path unless File.dir?(path)
+    end
+  end
+
+  def rm_f(path)
+    $stderr.puts "rm -f #{path}" if verbose?
+    return if no_harm?
+    force_remove_file path
+  end
+
+  def rm_rf(path)
+    $stderr.puts "rm -rf #{path}" if verbose?
+    return if no_harm?
+    remove_tree path
+  end
+
+  def remove_tree(path)
+    if File.symlink?(path)
+      remove_file path
+    elsif File.dir?(path)
+      remove_tree0 path
+    else
+      force_remove_file path
+    end
+  end
+
+  def remove_tree0(path)
+    Dir.foreach(path) do |ent|
+      next if ent == '.'
+      next if ent == '..'
+      entpath = "#{path}/#{ent}"
+      if File.symlink?(entpath)
+        remove_file entpath
+      elsif File.dir?(entpath)
+        remove_tree0 entpath
+      else
+        force_remove_file entpath
+      end
+    end
+    begin
+      Dir.rmdir path
+    rescue Errno::ENOTEMPTY
+      # directory may not be empty
+    end
+  end
+
+  def move_file(src, dest)
+    force_remove_file dest
+    begin
+      File.rename src, dest
+    rescue
+      File.open(dest, 'wb') {|f|
+        f.write File.binread(src)
+      }
+      File.chmod File.stat(src).mode, dest
+      File.unlink src
+    end
+  end
+
+  def force_remove_file(path)
+    begin
+      remove_file path
+    rescue
+    end
+  end
+
+  def remove_file(path)
+    File.chmod 0777, path
+    File.unlink path
+  end
+
+  def install(from, dest, mode, prefix = nil)
+    $stderr.puts "install #{from} #{dest}" if verbose?
+    return if no_harm?
+
+    realdest = prefix ? prefix + File.expand_path(dest) : dest
+    realdest = File.join(realdest, File.basename(from)) if File.dir?(realdest)
+    str = File.binread(from)
+    if diff?(str, realdest)
+      verbose_off {
+        rm_f realdest if File.exist?(realdest)
+      }
+      File.open(realdest, 'wb') {|f|
+        f.write str
+      }
+      File.chmod mode, realdest
+
+      File.open("#{objdir_root()}/InstalledFiles", 'a') {|f|
+        if prefix
+          f.puts realdest.sub(prefix, '')
+        else
+          f.puts realdest
+        end
+      }
+    end
+  end
+
+  def diff?(new_content, path)
+    return true unless File.exist?(path)
+    new_content != File.binread(path)
+  end
+
+  def command(*args)
+    $stderr.puts args.join(' ') if verbose?
+    system(*args) or raise RuntimeError,
+        "system(#{args.map{|a| a.inspect }.join(' ')}) failed"
+  end
+
+  def ruby(*args)
+    command config('rubyprog'), *args
+  end
+  
+  def make(task = nil)
+    command(*[config('makeprog'), task].compact)
+  end
+
+  def extdir?(dir)
+    File.exist?("#{dir}/MANIFEST") or File.exist?("#{dir}/extconf.rb")
+  end
+
+  def files_of(dir)
+    Dir.open(dir) {|d|
+      return d.select {|ent| File.file?("#{dir}/#{ent}") }
+    }
+  end
+
+  DIR_REJECT = %w( . .. CVS SCCS RCS CVS.adm .svn )
+
+  def directories_of(dir)
+    Dir.open(dir) {|d|
+      return d.select {|ent| File.dir?("#{dir}/#{ent}") } - DIR_REJECT
+    }
+  end
+
+end
+
+
+# This module requires: #srcdir_root, #objdir_root, #relpath
+module HookScriptAPI
+
+  def get_config(key)
+    @config[key]
+  end
+
+  alias config get_config
+
+  # obsolete: use metaconfig to change configuration
+  def set_config(key, val)
+    @config[key] = val
+  end
+
+  #
+  # srcdir/objdir (works only in the package directory)
+  #
+
+  def curr_srcdir
+    "#{srcdir_root()}/#{relpath()}"
+  end
+
+  def curr_objdir
+    "#{objdir_root()}/#{relpath()}"
+  end
+
+  def srcfile(path)
+    "#{curr_srcdir()}/#{path}"
+  end
+
+  def srcexist?(path)
+    File.exist?(srcfile(path))
+  end
+
+  def srcdirectory?(path)
+    File.dir?(srcfile(path))
+  end
+  
+  def srcfile?(path)
+    File.file?(srcfile(path))
+  end
+
+  def srcentries(path = '.')
+    Dir.open("#{curr_srcdir()}/#{path}") {|d|
+      return d.to_a - %w(. ..)
+    }
+  end
+
+  def srcfiles(path = '.')
+    srcentries(path).select {|fname|
+      File.file?(File.join(curr_srcdir(), path, fname))
+    }
+  end
+
+  def srcdirectories(path = '.')
+    srcentries(path).select {|fname|
+      File.dir?(File.join(curr_srcdir(), path, fname))
+    }
+  end
+
+end
+
+
+class ToplevelInstaller
+
+  Version   = '3.4.1'
+  Copyright = 'Copyright (c) 2000-2005 Minero Aoki'
+
+  TASKS = [
+    [ 'all',      'do config, setup, then install' ],
+    [ 'config',   'saves your configurations' ],
+    [ 'show',     'shows current configuration' ],
+    [ 'setup',    'compiles ruby extentions and others' ],
+    [ 'install',  'installs files' ],
+    [ 'test',     'run all tests in test/' ],
+    [ 'clean',    "does `make clean' for each extention" ],
+    [ 'distclean',"does `make distclean' for each extention" ]
+  ]
+
+  def ToplevelInstaller.invoke
+    config = ConfigTable.new(load_rbconfig())
+    config.load_standard_entries
+    config.load_multipackage_entries if multipackage?
+    config.fixup
+    klass = (multipackage?() ? ToplevelInstallerMulti : ToplevelInstaller)
+    klass.new(File.dirname($0), config).invoke
+  end
+
+  def ToplevelInstaller.multipackage?
+    File.dir?(File.dirname($0) + '/packages')
+  end
+
+  def ToplevelInstaller.load_rbconfig
+    if arg = ARGV.detect {|arg| /\A--rbconfig=/ =~ arg }
+      ARGV.delete(arg)
+      load File.expand_path(arg.split(/=/, 2)[1])
+      $".push 'rbconfig.rb'
+    else
+      require 'rbconfig'
+    end
+    ::Config::CONFIG
+  end
+
+  def initialize(ardir_root, config)
+    @ardir = File.expand_path(ardir_root)
+    @config = config
+    # cache
+    @valid_task_re = nil
+  end
+
+  def config(key)
+    @config[key]
+  end
+
+  def inspect
+    "#<#{self.class} #{__id__()}>"
+  end
+
+  def invoke
+    run_metaconfigs
+    case task = parsearg_global()
+    when nil, 'all'
+      parsearg_config
+      init_installers
+      exec_config
+      exec_setup
+      exec_install
+    else
+      case task
+      when 'config', 'test'
+        ;
+      when 'clean', 'distclean'
+        @config.load_savefile if File.exist?(@config.savefile)
+      else
+        @config.load_savefile
+      end
+      __send__ "parsearg_#{task}"
+      init_installers
+      __send__ "exec_#{task}"
+    end
+  end
+  
+  def run_metaconfigs
+    @config.load_script "#{@ardir}/metaconfig"
+  end
+
+  def init_installers
+    @installer = Installer.new(@config, @ardir, File.expand_path('.'))
+  end
+
+  #
+  # Hook Script API bases
+  #
+
+  def srcdir_root
+    @ardir
+  end
+
+  def objdir_root
+    '.'
+  end
+
+  def relpath
+    '.'
+  end
+
+  #
+  # Option Parsing
+  #
+
+  def parsearg_global
+    while arg = ARGV.shift
+      case arg
+      when /\A\w+\z/
+        setup_rb_error "invalid task: #{arg}" unless valid_task?(arg)
+        return arg
+      when '-q', '--quiet'
+        @config.verbose = false
+      when '--verbose'
+        @config.verbose = true
+      when '--help'
+        print_usage $stdout
+        exit 0
+      when '--version'
+        puts "#{File.basename($0)} version #{Version}"
+        exit 0
+      when '--copyright'
+        puts Copyright
+        exit 0
+      else
+        setup_rb_error "unknown global option '#{arg}'"
+      end
+    end
+    nil
+  end
+
+  def valid_task?(t)
+    valid_task_re() =~ t
+  end
+
+  def valid_task_re
+    @valid_task_re ||= /\A(?:#{TASKS.map {|task,desc| task }.join('|')})\z/
+  end
+
+  def parsearg_no_options
+    unless ARGV.empty?
+      task = caller(0).first.slice(%r<`parsearg_(\w+)'>, 1)
+      setup_rb_error "#{task}: unknown options: #{ARGV.join(' ')}"
+    end
+  end
+
+  alias parsearg_show       parsearg_no_options
+  alias parsearg_setup      parsearg_no_options
+  alias parsearg_test       parsearg_no_options
+  alias parsearg_clean      parsearg_no_options
+  alias parsearg_distclean  parsearg_no_options
+
+  def parsearg_config
+    evalopt = []
+    set = []
+    @config.config_opt = []
+    while i = ARGV.shift
+      if /\A--?\z/ =~ i
+        @config.config_opt = ARGV.dup
+        break
+      end
+      name, value = *@config.parse_opt(i)
+      if @config.value_config?(name)
+        @config[name] = value
+      else
+        evalopt.push [name, value]
+      end
+      set.push name
+    end
+    evalopt.each do |name, value|
+      @config.lookup(name).evaluate value, @config
+    end
+    # Check if configuration is valid
+    set.each do |n|
+      @config[n] if @config.value_config?(n)
+    end
+  end
+
+  def parsearg_install
+    @config.no_harm = false
+    @config.install_prefix = ''
+    while a = ARGV.shift
+      case a
+      when '--no-harm'
+        @config.no_harm = true
+      when /\A--prefix=/
+        path = a.split(/=/, 2)[1]
+        path = File.expand_path(path) unless path[0,1] == '/'
+        @config.install_prefix = path
+      else
+        setup_rb_error "install: unknown option #{a}"
+      end
+    end
+  end
+
+  def print_usage(out)
+    out.puts 'Typical Installation Procedure:'
+    out.puts "  $ ruby #{File.basename $0} config"
+    out.puts "  $ ruby #{File.basename $0} setup"
+    out.puts "  # ruby #{File.basename $0} install (may require root privilege)"
+    out.puts
+    out.puts 'Detailed Usage:'
+    out.puts "  ruby #{File.basename $0} <global option>"
+    out.puts "  ruby #{File.basename $0} [<global options>] <task> [<task options>]"
+
+    fmt = "  %-24s %s\n"
+    out.puts
+    out.puts 'Global options:'
+    out.printf fmt, '-q,--quiet',   'suppress message outputs'
+    out.printf fmt, '   --verbose', 'output messages verbosely'
+    out.printf fmt, '   --help',    'print this message'
+    out.printf fmt, '   --version', 'print version and quit'
+    out.printf fmt, '   --copyright',  'print copyright and quit'
+    out.puts
+    out.puts 'Tasks:'
+    TASKS.each do |name, desc|
+      out.printf fmt, name, desc
+    end
+
+    fmt = "  %-24s %s [%s]\n"
+    out.puts
+    out.puts 'Options for CONFIG or ALL:'
+    @config.each do |item|
+      out.printf fmt, item.help_opt, item.description, item.help_default
+    end
+    out.printf fmt, '--rbconfig=path', 'rbconfig.rb to load',"running ruby's"
+    out.puts
+    out.puts 'Options for INSTALL:'
+    out.printf fmt, '--no-harm', 'only display what to do if given', 'off'
+    out.printf fmt, '--prefix=path',  'install path prefix', ''
+    out.puts
+  end
+
+  #
+  # Task Handlers
+  #
+
+  def exec_config
+    @installer.exec_config
+    @config.save   # must be final
+  end
+
+  def exec_setup
+    @installer.exec_setup
+  end
+
+  def exec_install
+    @installer.exec_install
+  end
+
+  def exec_test
+    @installer.exec_test
+  end
+
+  def exec_show
+    @config.each do |i|
+      printf "%-20s %s\n", i.name, i.value if i.value?
+    end
+  end
+
+  def exec_clean
+    @installer.exec_clean
+  end
+
+  def exec_distclean
+    @installer.exec_distclean
+  end
+
+end   # class ToplevelInstaller
+
+
+class ToplevelInstallerMulti < ToplevelInstaller
+
+  include FileOperations
+
+  def initialize(ardir_root, config)
+    super
+    @packages = directories_of("#{@ardir}/packages")
+    raise 'no package exists' if @packages.empty?
+    @root_installer = Installer.new(@config, @ardir, File.expand_path('.'))
+  end
+
+  def run_metaconfigs
+    @config.load_script "#{@ardir}/metaconfig", self
+    @packages.each do |name|
+      @config.load_script "#{@ardir}/packages/#{name}/metaconfig"
+    end
+  end
+
+  attr_reader :packages
+
+  def packages=(list)
+    raise 'package list is empty' if list.empty?
+    list.each do |name|
+      raise "directory packages/#{name} does not exist"\
+              unless File.dir?("#{@ardir}/packages/#{name}")
+    end
+    @packages = list
+  end
+
+  def init_installers
+    @installers = {}
+    @packages.each do |pack|
+      @installers[pack] = Installer.new(@config,
+                                       "#{@ardir}/packages/#{pack}",
+                                       "packages/#{pack}")
+    end
+    with    = extract_selection(config('with'))
+    without = extract_selection(config('without'))
+    @selected = @installers.keys.select {|name|
+                  (with.empty? or with.include?(name)) \
+                      and not without.include?(name)
+                }
+  end
+
+  def extract_selection(list)
+    a = list.split(/,/)
+    a.each do |name|
+      setup_rb_error "no such package: #{name}"  unless @installers.key?(name)
+    end
+    a
+  end
+
+  def print_usage(f)
+    super
+    f.puts 'Inluded packages:'
+    f.puts '  ' + @packages.sort.join(' ')
+    f.puts
+  end
+
+  #
+  # Task Handlers
+  #
+
+  def exec_config
+    run_hook 'pre-config'
+    each_selected_installers {|inst| inst.exec_config }
+    run_hook 'post-config'
+    @config.save   # must be final
+  end
+
+  def exec_setup
+    run_hook 'pre-setup'
+    each_selected_installers {|inst| inst.exec_setup }
+    run_hook 'post-setup'
+  end
+
+  def exec_install
+    run_hook 'pre-install'
+    each_selected_installers {|inst| inst.exec_install }
+    run_hook 'post-install'
+  end
+
+  def exec_test
+    run_hook 'pre-test'
+    each_selected_installers {|inst| inst.exec_test }
+    run_hook 'post-test'
+  end
+
+  def exec_clean
+    rm_f @config.savefile
+    run_hook 'pre-clean'
+    each_selected_installers {|inst| inst.exec_clean }
+    run_hook 'post-clean'
+  end
+
+  def exec_distclean
+    rm_f @config.savefile
+    run_hook 'pre-distclean'
+    each_selected_installers {|inst| inst.exec_distclean }
+    run_hook 'post-distclean'
+  end
+
+  #
+  # lib
+  #
+
+  def each_selected_installers
+    Dir.mkdir 'packages' unless File.dir?('packages')
+    @selected.each do |pack|
+      $stderr.puts "Processing the package `#{pack}' ..." if verbose?
+      Dir.mkdir "packages/#{pack}" unless File.dir?("packages/#{pack}")
+      Dir.chdir "packages/#{pack}"
+      yield @installers[pack]
+      Dir.chdir '../..'
+    end
+  end
+
+  def run_hook(id)
+    @root_installer.run_hook id
+  end
+
+  # module FileOperations requires this
+  def verbose?
+    @config.verbose?
+  end
+
+  # module FileOperations requires this
+  def no_harm?
+    @config.no_harm?
+  end
+
+end   # class ToplevelInstallerMulti
+
+
+class Installer
+
+  FILETYPES = %w( bin lib ext data conf man )
+
+  include FileOperations
+  include HookScriptAPI
+
+  def initialize(config, srcroot, objroot)
+    @config = config
+    @srcdir = File.expand_path(srcroot)
+    @objdir = File.expand_path(objroot)
+    @currdir = '.'
+  end
+
+  def inspect
+    "#<#{self.class} #{File.basename(@srcdir)}>"
+  end
+
+  def noop(rel)
+  end
+
+  #
+  # Hook Script API base methods
+  #
+
+  def srcdir_root
+    @srcdir
+  end
+
+  def objdir_root
+    @objdir
+  end
+
+  def relpath
+    @currdir
+  end
+
+  #
+  # Config Access
+  #
+
+  # module FileOperations requires this
+  def verbose?
+    @config.verbose?
+  end
+
+  # module FileOperations requires this
+  def no_harm?
+    @config.no_harm?
+  end
+
+  def verbose_off
+    begin
+      save, @config.verbose = @config.verbose?, false
+      yield
+    ensure
+      @config.verbose = save
+    end
+  end
+
+  #
+  # TASK config
+  #
+
+  def exec_config
+    exec_task_traverse 'config'
+  end
+
+  alias config_dir_bin noop
+  alias config_dir_lib noop
+
+  def config_dir_ext(rel)
+    extconf if extdir?(curr_srcdir())
+  end
+
+  alias config_dir_data noop
+  alias config_dir_conf noop
+  alias config_dir_man noop
+
+  def extconf
+    ruby "#{curr_srcdir()}/extconf.rb", *@config.config_opt
+  end
+
+  #
+  # TASK setup
+  #
+
+  def exec_setup
+    exec_task_traverse 'setup'
+  end
+
+  def setup_dir_bin(rel)
+    files_of(curr_srcdir()).each do |fname|
+      update_shebang_line "#{curr_srcdir()}/#{fname}"
+    end
+  end
+
+  alias setup_dir_lib noop
+
+  def setup_dir_ext(rel)
+    make if extdir?(curr_srcdir())
+  end
+
+  alias setup_dir_data noop
+  alias setup_dir_conf noop
+  alias setup_dir_man noop
+
+  def update_shebang_line(path)
+    return if no_harm?
+    return if config('shebang') == 'never'
+    old = Shebang.load(path)
+    if old
+      $stderr.puts "warning: #{path}: Shebang line includes too many args.  It is not portable and your program may not work." if old.args.size > 1
+      new = new_shebang(old)
+      return if new.to_s == old.to_s
+    else
+      return unless config('shebang') == 'all'
+      new = Shebang.new(config('rubypath'))
+    end
+    $stderr.puts "updating shebang: #{File.basename(path)}" if verbose?
+    open_atomic_writer(path) {|output|
+      File.open(path, 'rb') {|f|
+        f.gets if old   # discard
+        output.puts new.to_s
+        output.print f.read
+      }
+    }
+  end
+
+  def new_shebang(old)
+    if /\Aruby/ =~ File.basename(old.cmd)
+      Shebang.new(config('rubypath'), old.args)
+    elsif File.basename(old.cmd) == 'env' and old.args.first == 'ruby'
+      Shebang.new(config('rubypath'), old.args[1..-1])
+    else
+      return old unless config('shebang') == 'all'
+      Shebang.new(config('rubypath'))
+    end
+  end
+
+  def open_atomic_writer(path, &block)
+    tmpfile = File.basename(path) + '.tmp'
+    begin
+      File.open(tmpfile, 'wb', &block)
+      File.rename tmpfile, File.basename(path)
+    ensure
+      File.unlink tmpfile if File.exist?(tmpfile)
+    end
+  end
+
+  class Shebang
+    def Shebang.load(path)
+      line = nil
+      File.open(path) {|f|
+        line = f.gets
+      }
+      return nil unless /\A#!/ =~ line
+      parse(line)
+    end
+
+    def Shebang.parse(line)
+      cmd, *args = *line.strip.sub(/\A\#!/, '').split(' ')
+      new(cmd, args)
+    end
+
+    def initialize(cmd, args = [])
+      @cmd = cmd
+      @args = args
+    end
+
+    attr_reader :cmd
+    attr_reader :args
+
+    def to_s
+      "#! #{@cmd}" + (@args.empty? ? '' : " #{@args.join(' ')}")
+    end
+  end
+
+  #
+  # TASK install
+  #
+
+  def exec_install
+    rm_f 'InstalledFiles'
+    exec_task_traverse 'install'
+  end
+
+  def install_dir_bin(rel)
+    install_files targetfiles(), "#{config('bindir')}/#{rel}", 0755
+  end
+
+  def install_dir_lib(rel)
+    install_files libfiles(), "#{config('rbdir')}/#{rel}", 0644
+  end
+
+  def install_dir_ext(rel)
+    return unless extdir?(curr_srcdir())
+    install_files rubyextentions('.'),
+                  "#{config('sodir')}/#{File.dirname(rel)}",
+                  0555
+  end
+
+  def install_dir_data(rel)
+    install_files targetfiles(), "#{config('datadir')}/#{rel}", 0644
+  end
+
+  def install_dir_conf(rel)
+    # FIXME: should not remove current config files
+    # (rename previous file to .old/.org)
+    install_files targetfiles(), "#{config('sysconfdir')}/#{rel}", 0644
+  end
+
+  def install_dir_man(rel)
+    install_files targetfiles(), "#{config('mandir')}/#{rel}", 0644
+  end
+
+  def install_files(list, dest, mode)
+    mkdir_p dest, @config.install_prefix
+    list.each do |fname|
+      install fname, dest, mode, @config.install_prefix
+    end
+  end
+
+  def libfiles
+    glob_reject(%w(*.y *.output), targetfiles())
+  end
+
+  def rubyextentions(dir)
+    ents = glob_select("*.#{@config.dllext}", targetfiles())
+    if ents.empty?
+      setup_rb_error "no ruby extention exists: 'ruby #{$0} setup' first"
+    end
+    ents
+  end
+
+  def targetfiles
+    mapdir(existfiles() - hookfiles())
+  end
+
+  def mapdir(ents)
+    ents.map {|ent|
+      if File.exist?(ent)
+      then ent                         # objdir
+      else "#{curr_srcdir()}/#{ent}"   # srcdir
+      end
+    }
+  end
+
+  # picked up many entries from cvs-1.11.1/src/ignore.c
+  JUNK_FILES = %w( 
+    core RCSLOG tags TAGS .make.state
+    .nse_depinfo #* .#* cvslog.* ,* .del-* *.olb
+    *~ *.old *.bak *.BAK *.orig *.rej _$* *$
+
+    *.org *.in .*
+  )
+
+  def existfiles
+    glob_reject(JUNK_FILES, (files_of(curr_srcdir()) | files_of('.')))
+  end
+
+  def hookfiles
+    %w( pre-%s post-%s pre-%s.rb post-%s.rb ).map {|fmt|
+      %w( config setup install clean ).map {|t| sprintf(fmt, t) }
+    }.flatten
+  end
+
+  def glob_select(pat, ents)
+    re = globs2re([pat])
+    ents.select {|ent| re =~ ent }
+  end
+
+  def glob_reject(pats, ents)
+    re = globs2re(pats)
+    ents.reject {|ent| re =~ ent }
+  end
+
+  GLOB2REGEX = {
+    '.' => '\.',
+    '$' => '\$',
+    '#' => '\#',
+    '*' => '.*'
+  }
+
+  def globs2re(pats)
+    /\A(?:#{
+      pats.map {|pat| pat.gsub(/[\.\$\#\*]/) {|ch| GLOB2REGEX[ch] } }.join('|')
+    })\z/
+  end
+
+  #
+  # TASK test
+  #
+
+  TESTDIR = 'test'
+
+  def exec_test
+    unless File.directory?('test')
+      $stderr.puts 'no test in this package' if verbose?
+      return
+    end
+    $stderr.puts 'Running tests...' if verbose?
+    begin
+      require 'test/unit'
+    rescue LoadError
+      setup_rb_error 'test/unit cannot loaded.  You need Ruby 1.8 or later to invoke this task.'
+    end
+    runner = Test::Unit::AutoRunner.new(true)
+    runner.to_run << TESTDIR
+    runner.run
+  end
+
+  #
+  # TASK clean
+  #
+
+  def exec_clean
+    exec_task_traverse 'clean'
+    rm_f @config.savefile
+    rm_f 'InstalledFiles'
+  end
+
+  alias clean_dir_bin noop
+  alias clean_dir_lib noop
+  alias clean_dir_data noop
+  alias clean_dir_conf noop
+  alias clean_dir_man noop
+
+  def clean_dir_ext(rel)
+    return unless extdir?(curr_srcdir())
+    make 'clean' if File.file?('Makefile')
+  end
+
+  #
+  # TASK distclean
+  #
+
+  def exec_distclean
+    exec_task_traverse 'distclean'
+    rm_f @config.savefile
+    rm_f 'InstalledFiles'
+  end
+
+  alias distclean_dir_bin noop
+  alias distclean_dir_lib noop
+
+  def distclean_dir_ext(rel)
+    return unless extdir?(curr_srcdir())
+    make 'distclean' if File.file?('Makefile')
+  end
+
+  alias distclean_dir_data noop
+  alias distclean_dir_conf noop
+  alias distclean_dir_man noop
+
+  #
+  # Traversing
+  #
+
+  def exec_task_traverse(task)
+    run_hook "pre-#{task}"
+    FILETYPES.each do |type|
+      if type == 'ext' and config('without-ext') == 'yes'
+        $stderr.puts 'skipping ext/* by user option' if verbose?
+        next
+      end
+      traverse task, type, "#{task}_dir_#{type}"
+    end
+    run_hook "post-#{task}"
+  end
+
+  def traverse(task, rel, mid)
+    dive_into(rel) {
+      run_hook "pre-#{task}"
+      __send__ mid, rel.sub(%r[\A.*?(?:/|\z)], '')
+      directories_of(curr_srcdir()).each do |d|
+        traverse task, "#{rel}/#{d}", mid
+      end
+      run_hook "post-#{task}"
+    }
+  end
+
+  def dive_into(rel)
+    return unless File.dir?("#{@srcdir}/#{rel}")
+
+    dir = File.basename(rel)
+    Dir.mkdir dir unless File.dir?(dir)
+    prevdir = Dir.pwd
+    Dir.chdir dir
+    $stderr.puts '---> ' + rel if verbose?
+    @currdir = rel
+    yield
+    Dir.chdir prevdir
+    $stderr.puts '<--- ' + rel if verbose?
+    @currdir = File.dirname(rel)
+  end
+
+  def run_hook(id)
+    path = [ "#{curr_srcdir()}/#{id}",
+             "#{curr_srcdir()}/#{id}.rb" ].detect {|cand| File.file?(cand) }
+    return unless path
+    begin
+      instance_eval File.read(path), path, 1
+    rescue
+      raise if $DEBUG
+      setup_rb_error "hook #{path} failed:\n" + $!.message
+    end
+  end
+
+end   # class Installer
+
+
+class SetupError < StandardError; end
+
+def setup_rb_error(msg)
+  raise SetupError, msg
+end
+
+if $0 == __FILE__
+  begin
+    ToplevelInstaller.invoke
+  rescue SetupError
+    raise if $DEBUG
+    $stderr.puts $!.message
+    $stderr.puts "Try 'ruby #{$0} --help' for detailed usage."
+    exit 1
+  end
+end
diff -ruN hpricot-0.6/test/files/boingboing.html hpricot/test/files/boingboing.html
--- hpricot-0.6/test/files/boingboing.html	2007-01-09 23:26:13.000000000 +0100
+++ hpricot/test/files/boingboing.html	2009-02-19 19:39:17.000000000 +0100
@@ -2263,4 +2263,4 @@
 -->
     </div>
 </body>
-</html>
\ No newline at end of file
+</html>
diff -ruN hpricot-0.6/test/nokogiri-bench.rb hpricot/test/nokogiri-bench.rb
--- hpricot-0.6/test/nokogiri-bench.rb	1970-01-01 01:00:00.000000000 +0100
+++ hpricot/test/nokogiri-bench.rb	2009-02-19 19:39:17.000000000 +0100
@@ -0,0 +1,64 @@
+#!/usr/bin/env ruby
+require 'rubygems'
+require 'open-uri'
+require 'hpricot'
+require 'nokogiri'
+require 'benchmark'
+
+content = File.read("test/files/boingboing.html")
+
+N = 100
+
+unless Gem.loaded_specs['hpricot'].version > Gem::Version.new('0.6.161')
+  abort "** Use higher than Hpricot 0.6.161!"
+end
+
+puts "Hpricot #{Gem.loaded_specs['hpricot'].version} vs. Nokogiri #{Gem.loaded_specs['nokogiri'].version}"
+hdoc = Hpricot(content)
+ndoc = Nokogiri.Hpricot(content)
+
+Benchmark.bm do |x|
+  x.report('hpricot:doc') do
+    N.times do
+      Hpricot(content)
+    end
+  end
+
+  x.report('nokogiri:doc') do
+    N.times do
+      Nokogiri.Hpricot(content)
+    end
+  end
+end
+
+Benchmark.bm do |x|
+  x.report('hpricot:xpath') do
+    N.times do
+      info = hdoc.search("//a[@name='027906']").first.inner_text
+      url = hdoc.search("h3[text()='College kids reportedly taking more smart drugs']").first.inner_text
+    end
+  end
+
+  x.report('nokogiri:xpath') do
+    N.times do
+      info = ndoc.search("//a[@name='027906']").first.inner_text
+      url = ndoc.search("h3[text()='College kids reportedly taking more smart drugs']").first.inner_text
+    end
+  end
+end
+
+Benchmark.bm do |x|
+  x.report('hpricot:css') do
+    N.times do
+      info = hdoc.search('form input[@checked]').first
+      url = hdoc.search('td spacer').first.inner_text
+    end
+  end
+
+  x.report('nokogiri:css') do
+    N.times do
+      info = ndoc.search('form input[@checked]').first
+      url = ndoc.search('td spacer').first.inner_text
+    end
+  end
+end
diff -ruN hpricot-0.6/test/test_alter.rb hpricot/test/test_alter.rb
--- hpricot-0.6/test/test_alter.rb	2007-06-04 23:36:58.000000000 +0200
+++ hpricot/test/test_alter.rb	2009-02-19 19:39:17.000000000 +0100
@@ -58,6 +58,18 @@
     assert_changed(@basic, "p[@class]", all_c2) { |p| p['class'].nil? }
   end
 
+  def test_xml_casing
+    doc = Hpricot.XML("<root><wildCat>text</wildCat></root>")
+    (doc/:root/:wildCat).after("<beanPole>gravity</beanPole>")
+    assert_equal doc.to_s, "<root><wildCat>text</wildCat><beanPole>gravity</beanPole></root>"
+
+    frag = Hpricot.XML do
+      b { i "A bit of HTML" }
+    end
+    (frag/:b).after("<beanPole>gravity</beanPole>")
+    assert_equal frag.to_s, "<b><i>A bit of HTML</i></b><beanPole>gravity</beanPole>"
+  end
+
   def assert_changed original, selector, set, &block
     assert set.all?(&block)
     assert Hpricot(original.to_html).search(selector).all?(&block)
diff -ruN hpricot-0.6/test/test_builder.rb hpricot/test/test_builder.rb
--- hpricot-0.6/test/test_builder.rb	2007-03-28 22:17:55.000000000 +0200
+++ hpricot/test/test_builder.rb	2009-02-19 19:39:17.000000000 +0100
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 #!/usr/bin/env ruby
 
 require 'test/unit'
@@ -17,8 +18,20 @@
   end
 
   def test_latin1_entities
-    doc = Hpricot() { b "\200\225" }
+    doc = Hpricot() { b "€•" }
     assert_equal "<b>&#8364;&#8226;</b>", doc.to_html
-    assert_equal "\342\202\254\342\200\242", doc.at("text()").to_s
+    assert_equal "€•", doc.at("text()").to_s
+  end
+
+  def test_escaping_attrs
+    text = "<span style='font-family:\"MS Mincho\"'>Some text</span>"
+    assert_equal "<span style=\"font-family:\\\"MS Mincho\\\"\">Some text</span>",
+      Hpricot(text).to_html
+  end
+
+  def test_korean_utf8_entities
+    a = '한글'
+    doc = Hpricot() { b a }
+    assert_equal "<b>&#54620;&#44544;</b>", doc.to_html
   end
 end
diff -ruN hpricot-0.6/test/test_parser.rb hpricot/test/test_parser.rb
--- hpricot-0.6/test/test_parser.rb	2007-06-06 16:19:32.000000000 +0200
+++ hpricot/test/test_parser.rb	2009-02-19 19:39:17.000000000 +0100
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 #!/usr/bin/env ruby
 
 require 'test/unit'
@@ -14,13 +15,13 @@
 
   # Test creating a new element 
   def test_new_element 
-    elem = Hpricot::Elem.new(Hpricot::STag.new('form')) 
+    elem = Hpricot::Elem.new('form') 
     assert_not_nil(elem) 
     assert_not_nil(elem.attributes) 
   end 
 
   def test_scan_text
-    assert_equal 'FOO', Hpricot.make("FOO").first.content
+    assert_equal 'FOO', Hpricot.make("FOO").children.first.content
   end
 
   def test_filter_by_attr
@@ -47,6 +48,13 @@
     assert_equal 'link1', @basic.get_elements_by_tag_name('a')[0].get_attribute('id')
     assert_equal 'link1', @basic.get_elements_by_tag_name('body')[0].get_element_by_id('link1').get_attribute('id')
   end
+  
+  def test_get_elements_by_tag_name_star
+    simple = Hpricot.parse("<div><p id='first'>First</p><p id='second'>Second</p></div>")
+    assert_equal 3, simple.get_elements_by_tag_name("*").size
+    assert_equal 1, simple.get_elements_by_tag_name("div").size
+    assert_equal 2, simple.get_elements_by_tag_name("p").size
+  end
 
   def test_output_basic
     @basic = Hpricot.parse(TestFiles::BASIC)
@@ -114,7 +122,7 @@
     assert_equal 60, @boingboing.search("h3").length
     assert_equal 59, @boingboing.search("h3[text()!='College kids reportedly taking more smart drugs']").length
     assert_equal 17, @boingboing.search("h3[text()$='s']").length
-    assert_equal 129, @boingboing.search("p[text()]").length
+    assert_equal 116, @boingboing.search("p[text()]").length
     assert_equal 211, @boingboing.search("p").length
   end
 
@@ -154,10 +162,10 @@
     assert_equal 60, @boingboing.search("/*/body//p[@class='posted']").length
     assert_equal 18, @boingboing.search("//script").length
     divs = @boingboing.search("//script/../div")
-    assert_equal 1,  divs.length
+    assert_equal 2,  divs.length
     imgs = @boingboing.search('//div/p/a/img')
-    assert_equal 15, imgs.length
-    assert_equal 17, @boingboing.search('//div').search('p/a/img').length
+    assert_equal 16, imgs.length
+    assert_equal 16, @boingboing.search('//div').search('p/a/img').length
     assert imgs.all? { |x| x.name == 'img' }
   end
 
@@ -165,10 +173,10 @@
     @boingboing = Hpricot.parse(TestFiles::BOINGBOING)
     assert_equal 2, @boingboing.search('//link[@rel="alternate"]').length
     p_imgs = @boingboing.search('//div/p[/a/img]')
-    assert_equal 15, p_imgs.length
+    assert_equal 16, p_imgs.length
     assert p_imgs.all? { |x| x.name == 'p' }
     p_imgs = @boingboing.search('//div/p[a/img]')
-    assert_equal 18, p_imgs.length
+    assert_equal 16, p_imgs.length
     assert p_imgs.all? { |x| x.name == 'p' }
     assert_equal 1, @boingboing.search('//input[@checked]').length
   end
@@ -211,7 +219,7 @@
   def test_many_paths
     @boingboing = Hpricot.parse(TestFiles::BOINGBOING)
     assert_equal 62, @boingboing.search('p.posted, link[@rel="alternate"]').length
-    assert_equal 20, @boingboing.search('//div/p[a/img]|//link[@rel="alternate"]').length
+    assert_equal 18, @boingboing.search('//div/p[a/img]|//link[@rel="alternate"]').length
   end
 
   def test_stacked_search
@@ -299,10 +307,8 @@
     assert_equal "blah='blah'", doc.children[2].content
   end
 
-  def test_buffer_error
-    assert_raise Hpricot::ParseError, "ran out of buffer space on element <input>, starting on line 3." do
-      Hpricot(%{<p>\n\n<input type="hidden" name="__VIEWSTATE"  value="#{(("X" * 2000) + "\n") * 22}" />\n\n</p>})
-    end
+  def test_no_buffer_error
+    Hpricot(%{<p>\n\n<input type="hidden" name="__VIEWSTATE"  value="#{(("X" * 2000) + "\n") * 44}" />\n\n</p>})
   end
 
   def test_youtube_attr
@@ -376,4 +382,28 @@
     assert (doc/"//t:sam").size > 0 # at least this should probably work
     # assert (doc/"//sam").size > 0  # this would be nice 
   end
+
+  def test_uxs_ignores_non_entities
+    assert_equal 'abc', Hpricot.uxs('abc')
+  end
+
+  def test_uxs_handles_gt_lt_amp_quot
+    assert_equal '"&<>', Hpricot.uxs('&quot;&amp;&lt;&gt;')
+  end
+
+  def test_uxs_handles_numeric_values
+    if String.method_defined? :encoding
+      assert_equal "é", Hpricot.uxs('&#233;')
+    else
+      assert_equal "\303\251", Hpricot.uxs('&#233;')
+    end
+  end
+
+  def test_uxs_handles_entities
+    if String.method_defined? :encoding
+      assert_equal "é", Hpricot.uxs('&eacute;')
+    else
+      assert_equal "\303\251", Hpricot.uxs('&eacute;')
+    end
+  end
 end
diff -ruN hpricot-0.6/test/test_paths.rb hpricot/test/test_paths.rb
--- hpricot-0.6/test/test_paths.rb	2007-01-27 10:19:25.000000000 +0100
+++ hpricot/test/test_paths.rb	2009-02-19 19:39:17.000000000 +0100
@@ -13,4 +13,13 @@
       assert_equal ele, @basic.at(ele.xpath)
     end
   end
+  def test_attr_brackets
+    doc = Hpricot('<input name="vendor[porkpies]"/>')
+    assert_equal 1, (doc/'input[@name^="vendor[porkpies]"]').length
+    assert_equal 1, (doc/'input[@name="vendor[porkpies]"]').length
+    assert_equal 0, (doc/'input[@name$="]]]]]"]').length
+
+    doc = Hpricot('<input name="vendor[porkpies][meaty]"/>')
+    assert_equal 1, (doc/'input[@name^="vendor[porkpies][meaty]"]').length
+  end
 end
diff -ruN hpricot-0.6/test/test_preserved.rb hpricot/test/test_preserved.rb
--- hpricot-0.6/test/test_preserved.rb	2007-03-30 11:45:49.000000000 +0200
+++ hpricot/test/test_preserved.rb	2009-02-19 19:39:17.000000000 +0100
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 #!/usr/bin/env ruby
 
 require 'test/unit'
@@ -9,7 +10,7 @@
     doc = Hpricot(str)
     yield doc if block_given?
     str2 = doc.to_original_html
-    [*str].zip([*str2]).each do |s1, s2|
+    str.lines.zip(str2.lines).each do |s1, s2|
       assert_equal s1, s2
     end
   end
@@ -40,7 +41,7 @@
 
   def test_escaping_of_contents
     doc = Hpricot(TestFiles::BOINGBOING)
-    assert_equal "Fukuda\342\200\231s Automatic Door opens around your body as you pass through it. The idea is to save energy and keep the room clean.", doc.at("img[@alt='200606131240']").next.to_s.strip
+    assert_equal "Fukuda’s Automatic Door opens around your body as you pass through it. The idea is to save energy and keep the room clean.", doc.at("img[@alt='200606131240']").next.to_s.strip
   end
 
   def test_files
