diff -rwu csv2xml-0.6_orig/src/csv2xml.cpp csv2xml-0.6/src/csv2xml.cpp
--- csv2xml-0.6_orig/src/csv2xml.cpp	2008-04-03 23:15:34.000000000 +0000
+++ csv2xml-0.6/src/csv2xml.cpp	2008-04-03 23:48:25.000000000 +0000
@@ -14,6 +14,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <errno.h>
+
 #define MAX_TOKEN 2000
 #define MAX_FIELDS 200
 
@@ -24,6 +26,11 @@
 char sub_char = '\0';
 int nullify;
 char *encoding;
+static int delim = ',';
+static int quote = '"';
+static const char *rowname = "row";
+static const char *colname = "item";
+static FILE *input;
 
 void cleanup(void) {
   int i;
@@ -35,13 +42,13 @@
 
   }
 
-int warn(char *message) {
+int warn(const char *message) {
 
   fprintf(stderr,"Warning: %s on line %d\n",message,line);
 
   }
 
-int fatal(char *message) {
+int fatal(const char *message) {
 
   fprintf(stderr,"Error: %s on line %d\n",message,line);
   cleanup();
@@ -56,14 +63,14 @@
 
   len=0;
   quoted=0;
-  while((c=getchar()) && len<maxlen) {
+  while((c=getc(input)) && len<maxlen) {
     if(c==-1) { break; }
-    if(c=='"' && quoted==1) {
-      c=getchar();
-      if(c!='"') { quoted=0; }
+    if(c==quote && quoted==1) {
+      c=getc(input);
+      if(c!=quote) { quoted=0; }
       }
-    if(len==0 && c=='"' && quoted==0) { quoted=1; continue; }
-    if(quoted==0 && c==',') { *token='\0'; return(1); }
+    if(len==0 && c==quote && quoted==0) { quoted=1; continue; }
+    if(quoted==0 && c==delim) { *token='\0'; return(1); }
     if(c==10) { line++; }
     if(quoted==0 && c==10) { *token='\0'; return(0); }
     *token=c;
@@ -172,7 +179,7 @@
     return(status);
     }
 
-  printf("<row>\n");
+  printf("<%s>\n", rowname);
   for(i=0;i<colcount;i++) {
     if(nullify==0 || crow[i][0]!='\0') {
       if(xmlmode==1) {
@@ -181,9 +188,9 @@
         printf("\" />\n");
         }
       else if(xmlmode==2) {
-        printf("  <item name=\"%s\">",fields[i]);
+        printf("  <%s name=\"%s\">",colname,fields[i]);
         print_entity(crow[i]);
-        printf("</item>\n");
+        printf("</%s>\n",colname);
         }
       else {
         printf("  <%s>",fields[i]);
@@ -194,7 +201,7 @@
     delete crow[i];
     crow[i]=NULL;
     }
-  printf("</row>\n");
+  printf("</%s>\n",rowname);
 
 
   return(status);
@@ -216,11 +223,15 @@
 
   fprintf(stderr,"csv2xml 0.6 - Open source csv to xml converter\n");
   fprintf(stderr,"\n");
-  fprintf(stderr,"General usage:  csv2xml < infile > outfile\n");
+  fprintf(stderr,"General usage:  csv2xml [infile] [>outfile]\n");
   fprintf(stderr,"\n");
 //  fprintf(stderr," -e=ENCODING  Set encoding, default is utf-8\n");
   fprintf(stderr," -m=number    Set xml mode. 0-2\n");
-  fprintf(stderr," -s=char      To strip unicode characters, specify a replacement character.");
+  fprintf(stderr," -s=char      To strip unicode characters, specify a replacement character.\n");
+  fprintf(stderr," -r=rowname   Name of row element. [row]\n");
+  fprintf(stderr," -i=colname   Name of column element. [item]\n");
+  fprintf(stderr," -s=char      To strip unicode characters, specify a replacement character.\n");
+  fprintf(stderr," -d=delim     Delimiter char.\n");
   fprintf(stderr," -n           Hide fields that are null/empty\n");
   fprintf(stderr," -h           Output this help.\n");
   fprintf(stderr," -v           Display version information.\n");
@@ -251,6 +261,17 @@
     sub_char = opt[3];
 }
     
+void opt_set_name(char *opt, const char **nstr) {
+  
+    if(opt[2]!='=' || opt[3]=='\0') { option_help(); }
+    *nstr = &opt[3];
+}    
+
+void opt_set_char(char *opt, int *nch) {
+  
+    if(opt[2]!='=' || opt[3]=='\0') { option_help(); }
+    *nch = opt[3];
+}    
 
 void get_options(int argc,char *argv[]) {
   int i;
@@ -259,11 +280,21 @@
   encoding=NULL;
 
   for(i=1;i<argc;i++) {
-    if(argv[i][0]!='-') { option_help(); }
+    if(argv[i][0]!='-') {
+      if(!(input=fopen(argv[i],"r"))) {
+        fprintf(stderr,"could not open %s: %s\n",argv[i],strerror(errno));
+        exit(1);
+      }
+      continue;
+    }
     if(argv[i][1]=='v') { version_help(); }
     else if(argv[i][1]=='h') { option_help(); }
     else if(argv[i][1]=='n') { nullify=1; }
     else if(argv[i][1]=='m') { opt_xmlmode(argv[i]); }
+    else if(argv[i][1]=='d') { opt_set_char(argv[i],&delim); }
+    else if(argv[i][1]=='q') { opt_set_char(argv[i],&quote); }
+    else if(argv[i][1]=='r') { opt_set_name(argv[i],&rowname); }
+    else if(argv[i][1]=='i') { opt_set_name(argv[i],&colname); }
 //    else if(argv[i][1]=='e') { opt_encoding(argv[i]); }
     else if(argv[i][1]=='s') { opt_sub_non_unicode(argv[i]); }
     else { option_help(); }
@@ -276,6 +307,9 @@
 
   get_options(argc,argv);
 
+  if(input==NULL)
+    input=stdin;
+  
   fieldcount=0;
   status=get_field_headers();
 
